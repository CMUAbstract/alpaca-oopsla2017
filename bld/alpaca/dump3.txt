
templog.out:     file format elf32-msp430


Disassembly of section __interrupt_vector_49:

0000fff0 <__interrupt_vector_49>:
    fff0:	74 6c       	interrupt service routine at 0x6c74

Disassembly of section .text:

000055a4 <__crt0_start>:
    55a4:	31 40 00 24 	mov	#9216,	r1	;#0x2400

000055a8 <__crt0_init_bss>:
    55a8:	3c 40 04 1c 	mov	#7172,	r12	;#0x1c04
    55ac:	0d 43       	clr	r13		;
    55ae:	3e 40 2a 00 	mov	#42,	r14	;#0x002a
    55b2:	b0 12 38 6d 	call	#27960		;#0x6d38

000055b6 <__crt0_movedata>:
    55b6:	3c 40 00 1c 	mov	#7168,	r12	;#0x1c00
    55ba:	3d 40 9e 55 	mov	#21918,	r13	;#0x559e
    55be:	0d 9c       	cmp	r12,	r13	;
    55c0:	04 24       	jz	$+10     	;abs 0x55ca
    55c2:	3e 40 04 00 	mov	#4,	r14	;
    55c6:	b0 12 f8 6c 	call	#27896		;#0x6cf8

000055ca <__crt0_call_init_then_main>:
    55ca:	b0 12 6a 6d 	call	#28010		;#0x6d6a
    55ce:	0c 43       	clr	r12		;
    55d0:	b0 12 7c 6a 	call	#27260		;#0x6a7c

000055d4 <_msp430_run_init_array>:
    55d4:	34 40 e4 44 	mov	#17636,	r4	;#0x44e4
    55d8:	35 40 e4 44 	mov	#17636,	r5	;#0x44e4
    55dc:	26 43       	mov	#2,	r6	;r3 As==10
    55de:	0d 3c       	jmp	$+28     	;abs 0x55fa

000055e0 <_msp430_run_preinit_array>:
    55e0:	34 40 e4 44 	mov	#17636,	r4	;#0x44e4
    55e4:	35 40 e4 44 	mov	#17636,	r5	;#0x44e4
    55e8:	26 43       	mov	#2,	r6	;r3 As==10
    55ea:	07 3c       	jmp	$+16     	;abs 0x55fa

000055ec <_msp430_run_fini_array>:
    55ec:	34 40 e4 44 	mov	#17636,	r4	;#0x44e4
    55f0:	35 40 e4 44 	mov	#17636,	r5	;#0x44e4
    55f4:	36 40 fe ff 	mov	#65534,	r6	;#0xfffe
    55f8:	00 3c       	jmp	$+2      	;abs 0x55fa

000055fa <_msp430_run_array>:
    55fa:	05 94       	cmp	r4,	r5	;
    55fc:	05 24       	jz	$+12     	;abs 0x5608
    55fe:	27 44       	mov	@r4,	r7	;
    5600:	04 56       	add	r6,	r4	;
    5602:	a7 12       	call	@r7		;
    5604:	10 40 f4 ff 	br	0xfff4		;PC rel. 0x55fa

00005608 <_msp430_run_done>:
    5608:	30 41       	ret			

0000560a <deregister_tm_clones>:
    560a:	3c 40 86 6d 	mov	#28038,	r12	;#0x6d86
    560e:	3c 80 85 6d 	sub	#28037,	r12	;#0x6d85
    5612:	2d 43       	mov	#2,	r13	;r3 As==10
    5614:	0d 9c       	cmp	r12,	r13	;
    5616:	07 2c       	jc	$+16     	;abs 0x5626
    5618:	3d 40 00 00 	mov	#0,	r13	;
    561c:	0d 93       	cmp	#0,	r13	;r3 As==00
    561e:	03 24       	jz	$+8      	;abs 0x5626
    5620:	3c 40 86 6d 	mov	#28038,	r12	;#0x6d86
    5624:	8d 12       	call	r13		;
    5626:	30 41       	ret			

00005628 <register_tm_clones>:
    5628:	3d 40 86 6d 	mov	#28038,	r13	;#0x6d86
    562c:	3d 80 86 6d 	sub	#28038,	r13	;#0x6d86
    5630:	0d 11       	rra	r13		;
    5632:	0c 4d       	mov	r13,	r12	;
    5634:	5c 03       	rrum	#1,	r12	;
    5636:	4d 18 0c 11 	rpt #14 { rrax.w	r12		;
    563a:	0d 5c       	add	r12,	r13	;
    563c:	0d 11       	rra	r13		;
    563e:	0d 93       	cmp	#0,	r13	;r3 As==00
    5640:	07 24       	jz	$+16     	;abs 0x5650
    5642:	3e 40 00 00 	mov	#0,	r14	;
    5646:	0e 93       	cmp	#0,	r14	;r3 As==00
    5648:	03 24       	jz	$+8      	;abs 0x5650
    564a:	3c 40 86 6d 	mov	#28038,	r12	;#0x6d86
    564e:	8e 12       	call	r14		;
    5650:	30 41       	ret			

00005652 <__do_global_dtors_aux>:
    5652:	0a 15       	pushm	#1,	r10	;16-bit words
    5654:	c2 93 04 1c 	cmp.b	#0,	&0x1c04	;r3 As==00
    5658:	20 20       	jnz	$+66     	;abs 0x569a
    565a:	1c 42 06 1c 	mov	&0x1c06,r12	;0x1c06
    565e:	3a 40 ee 44 	mov	#17646,	r10	;#0x44ee
    5662:	3a 80 ec 44 	sub	#17644,	r10	;#0x44ec
    5666:	0a 11       	rra	r10		;
    5668:	3a 53       	add	#-1,	r10	;r3 As==11
    566a:	0c 9a       	cmp	r10,	r12	;
    566c:	0b 2c       	jc	$+24     	;abs 0x5684
    566e:	1c 53       	inc	r12		;
    5670:	82 4c 06 1c 	mov	r12,	&0x1c06	;
    5674:	0c 5c       	rla	r12		;
    5676:	1c 4c ec 44 	mov	17644(r12),r12	;0x044ec
    567a:	8c 12       	call	r12		;
    567c:	1c 42 06 1c 	mov	&0x1c06,r12	;0x1c06
    5680:	0c 9a       	cmp	r10,	r12	;
    5682:	f5 2b       	jnc	$-20     	;abs 0x566e
    5684:	b0 12 0a 56 	call	#22026		;#0x560a
    5688:	3d 40 00 00 	mov	#0,	r13	;
    568c:	0d 93       	cmp	#0,	r13	;r3 As==00
    568e:	03 24       	jz	$+8      	;abs 0x5696
    5690:	3c 40 e0 44 	mov	#17632,	r12	;#0x44e0
    5694:	8d 12       	call	r13		;
    5696:	d2 43 04 1c 	mov.b	#1,	&0x1c04	;r3 As==01
    569a:	0a 17       	popm	#1,	r10	;16-bit words
    569c:	30 41       	ret			

0000569e <call___do_global_dtors_aux>:
    569e:	30 41       	ret			

000056a0 <frame_dummy>:
    56a0:	3e 40 00 00 	mov	#0,	r14	;
    56a4:	0e 93       	cmp	#0,	r14	;r3 As==00
    56a6:	05 24       	jz	$+12     	;abs 0x56b2
    56a8:	3c 40 e0 44 	mov	#17632,	r12	;#0x44e0
    56ac:	3d 40 08 1c 	mov	#7176,	r13	;#0x1c08
    56b0:	8e 12       	call	r14		;
    56b2:	3c 40 00 1c 	mov	#7168,	r12	;#0x1c00
    56b6:	8c 93 00 00 	cmp	#0,	0(r12)	;r3 As==00
    56ba:	03 20       	jnz	$+8      	;abs 0x56c2
    56bc:	b0 12 28 56 	call	#22056		;#0x5628
    56c0:	30 41       	ret			
    56c2:	3d 40 00 00 	mov	#0,	r13	;
    56c6:	0d 93       	cmp	#0,	r13	;r3 As==00
    56c8:	f9 27       	jz	$-12     	;abs 0x56bc
    56ca:	8d 12       	call	r13		;
    56cc:	f7 3f       	jmp	$-16     	;abs 0x56bc

000056ce <call_frame_dummy>:
    56ce:	30 41       	ret			

000056d0 <TimerB1_ISR>:
    56d0:	04 12       	push	r4		;
    56d2:	04 41       	mov	r1,	r4	;
    56d4:	0c 12       	push	r12		;
    56d6:	1c 42 c0 03 	mov	&0x03c0,r12	;0x03c0
    56da:	3c f0 fd ff 	and	#65533,	r12	;#0xfffd
    56de:	82 4c c0 03 	mov	r12,	&0x03c0	;
    56e2:	1c 42 c0 03 	mov	&0x03c0,r12	;0x03c0
    56e6:	0c 93       	cmp	#0,	r12	;r3 As==00
    56e8:	17 24       	jz	$+48     	;abs 0x5718
    56ea:	00 3c       	jmp	$+2      	;abs 0x56ec
    56ec:	1c 42 16 1c 	mov	&0x1c16,r12	;0x1c16
    56f0:	1c 53       	inc	r12		;
    56f2:	82 4c 16 1c 	mov	r12,	&0x1c16	;
    56f6:	1c 42 c0 03 	mov	&0x03c0,r12	;0x03c0
    56fa:	2c d2       	bis	#4,	r12	;r2 As==10
    56fc:	82 4c c0 03 	mov	r12,	&0x03c0	;
    5700:	1c 42 c0 03 	mov	&0x03c0,r12	;0x03c0
    5704:	2c d3       	bis	#2,	r12	;r3 As==10
    5706:	82 4c c0 03 	mov	r12,	&0x03c0	;
    570a:	1c 42 c0 03 	mov	&0x03c0,r12	;0x03c0
    570e:	3c f0 fe ff 	and	#65534,	r12	;#0xfffe
    5712:	82 4c c0 03 	mov	r12,	&0x03c0	;
    5716:	00 3c       	jmp	$+2      	;abs 0x5718
    5718:	3c 41       	pop	r12		;
    571a:	34 41       	pop	r4		;
    571c:	00 13       	reti			
	...

00005720 <init>:
    5720:	04 12       	push	r4		;
    5722:	04 41       	mov	r1,	r4	;
    5724:	1c 42 c0 03 	mov	&0x03c0,r12	;0x03c0
    5728:	3c f0 ff e6 	and	#59135,	r12	;#0xe6ff
    572c:	82 4c c0 03 	mov	r12,	&0x03c0	;
    5730:	1c 42 c0 03 	mov	&0x03c0,r12	;0x03c0
    5734:	3c d0 00 02 	bis	#512,	r12	;#0x0200
    5738:	82 4c c0 03 	mov	r12,	&0x03c0	;
    573c:	1c 42 c0 03 	mov	&0x03c0,r12	;0x03c0
    5740:	3c d0 c0 00 	bis	#192,	r12	;#0x00c0
    5744:	82 4c c0 03 	mov	r12,	&0x03c0	;
    5748:	1c 42 c0 03 	mov	&0x03c0,r12	;0x03c0
    574c:	3c f0 ef ff 	and	#65519,	r12	;#0xffef
    5750:	82 4c c0 03 	mov	r12,	&0x03c0	;
    5754:	1c 42 c0 03 	mov	&0x03c0,r12	;0x03c0
    5758:	3c d0 20 00 	bis	#32,	r12	;#0x0020
    575c:	82 4c c0 03 	mov	r12,	&0x03c0	;
    5760:	1c 42 c0 03 	mov	&0x03c0,r12	;0x03c0
    5764:	2c d3       	bis	#2,	r12	;r3 As==10
    5766:	82 4c c0 03 	mov	r12,	&0x03c0	;
    576a:	b0 12 5c 60 	call	#24668		;#0x605c
    576e:	5c 42 04 02 	mov.b	&0x0204,r12	;0x0204
    5772:	2c d3       	bis	#2,	r12	;r3 As==10
    5774:	4d 4c       	mov.b	r12,	r13	;
    5776:	c2 4d 04 02 	mov.b	r13,	&0x0204	;
    577a:	5c 42 04 02 	mov.b	&0x0204,r12	;0x0204
    577e:	2c d2       	bis	#4,	r12	;r2 As==10
    5780:	4d 4c       	mov.b	r12,	r13	;
    5782:	c2 4d 04 02 	mov.b	r13,	&0x0204	;
    5786:	5c 42 04 02 	mov.b	&0x0204,r12	;0x0204
    578a:	1c d3       	bis	#1,	r12	;r3 As==01
    578c:	4d 4c       	mov.b	r12,	r13	;
    578e:	c2 4d 04 02 	mov.b	r13,	&0x0204	;
    5792:	b0 12 dc 65 	call	#26076		;#0x65dc
    5796:	32 d2       	eint			
    5798:	03 43       	nop			
    579a:	34 41       	pop	r4		;
    579c:	30 41       	ret			
	...

000057a0 <task_init>:
    57a0:	04 12       	push	r4		;
    57a2:	04 41       	mov	r1,	r4	;
    57a4:	82 43 e8 46 	mov	#0,	&0x46e8	;r3 As==00
    57a8:	82 43 ea 46 	mov	#0,	&0x46ea	;r3 As==00
    57ac:	82 43 ec 46 	mov	#0,	&0x46ec	;r3 As==00
    57b0:	82 43 ee 46 	mov	#0,	&0x46ee	;r3 As==00
    57b4:	82 43 f0 46 	mov	#0,	&0x46f0	;r3 As==00
    57b8:	92 43 f2 46 	mov	#1,	&0x46f2	;r3 As==01
    57bc:	3f 40 1a 45 	mov	#17690,	r15	;#0x451a
    57c0:	b0 12 4c 67 	call	#26444		;#0x674c
    57c4:	34 41       	pop	r4		;
    57c6:	30 41       	ret			

000057c8 <task_init_dict>:
    57c8:	04 12       	push	r4		;
    57ca:	04 41       	mov	r1,	r4	;
    57cc:	31 82       	sub	#8,	r1	;r2 As==11
    57ce:	1c 42 ec 46 	mov	&0x46ec,r12	;0x46ec
    57d2:	84 4c fa ff 	mov	r12,	-6(r4)	; 0xfffa
    57d6:	84 43 fc ff 	mov	#0,	-4(r4)	;r3 As==00, 0xfffc
    57da:	84 43 fe ff 	mov	#0,	-2(r4)	;r3 As==00, 0xfffe
    57de:	1c 42 ec 46 	mov	&0x46ec,r12	;0x46ec
    57e2:	84 4c f8 ff 	mov	r12,	-8(r4)	; 0xfff8
    57e6:	3e 40 06 00 	mov	#6,	r14	;
    57ea:	0f 4c       	mov	r12,	r15	;
    57ec:	b0 12 ac 6a 	call	#27308		;#0x6aac
    57f0:	1c 44 fe ff 	mov	-2(r4),	r12	;
    57f4:	8f 4c f8 46 	mov	r12,	18168(r15); 0x46f8
    57f8:	1c 44 fc ff 	mov	-4(r4),	r12	;
    57fc:	8f 4c f6 46 	mov	r12,	18166(r15); 0x46f6
    5800:	1c 44 fa ff 	mov	-6(r4),	r12	;
    5804:	8f 4c f4 46 	mov	r12,	18164(r15); 0x46f4
    5808:	1c 42 ec 46 	mov	&0x46ec,r12	;0x46ec
    580c:	1c 53       	inc	r12		;
    580e:	82 4c ec 46 	mov	r12,	&0x46ec	;
    5812:	3c 90 00 01 	cmp	#256,	r12	;#0x0100
    5816:	06 2c       	jc	$+14     	;abs 0x5824
    5818:	00 3c       	jmp	$+2      	;abs 0x581a
    581a:	3f 40 1a 45 	mov	#17690,	r15	;#0x451a
    581e:	b0 12 4c 67 	call	#26444		;#0x674c
    5822:	08 3c       	jmp	$+18     	;abs 0x5834
    5824:	b2 40 00 01 	mov	#256,	&0x52f4	;#0x0100
    5828:	f4 52 
    582a:	3f 40 44 45 	mov	#17732,	r15	;#0x4544
    582e:	b0 12 4c 67 	call	#26444		;#0x674c
    5832:	00 3c       	jmp	$+2      	;abs 0x5834
    5834:	31 52       	add	#8,	r1	;r2 As==11
    5836:	34 41       	pop	r4		;
    5838:	30 41       	ret			
	...

0000583c <task_sample>:
    583c:	04 12       	push	r4		;
    583e:	04 41       	mov	r1,	r4	;
    5840:	21 83       	decd	r1		;
    5842:	1c 42 f0 46 	mov	&0x46f0,r12	;0x46f0
    5846:	1c 53       	inc	r12		;
    5848:	84 4c fe ff 	mov	r12,	-2(r4)	; 0xfffe
    584c:	2c 93       	cmp	#2,	r12	;r3 As==10
    584e:	04 20       	jnz	$+10     	;abs 0x5858
    5850:	00 3c       	jmp	$+2      	;abs 0x5852
    5852:	84 43 fe ff 	mov	#0,	-2(r4)	;r3 As==00, 0xfffe
    5856:	00 3c       	jmp	$+2      	;abs 0x5858
    5858:	1c 42 f0 46 	mov	&0x46f0,r12	;0x46f0
    585c:	0c 93       	cmp	#0,	r12	;r3 As==00
    585e:	0a 20       	jnz	$+22     	;abs 0x5874
    5860:	00 3c       	jmp	$+2      	;abs 0x5862
    5862:	1c 44 fe ff 	mov	-2(r4),	r12	;
    5866:	82 4c f0 46 	mov	r12,	&0x46f0	;
    586a:	3f 40 6e 45 	mov	#17774,	r15	;#0x456e
    586e:	b0 12 4c 67 	call	#26444		;#0x674c
    5872:	09 3c       	jmp	$+20     	;abs 0x5886
    5874:	1c 44 fe ff 	mov	-2(r4),	r12	;
    5878:	82 4c f0 46 	mov	r12,	&0x46f0	;
    587c:	3f 40 98 45 	mov	#17816,	r15	;#0x4598
    5880:	b0 12 4c 67 	call	#26444		;#0x674c
    5884:	00 3c       	jmp	$+2      	;abs 0x5886
    5886:	21 53       	incd	r1		;
    5888:	34 41       	pop	r4		;
    588a:	30 41       	ret			

0000588c <task_measure_temp>:
    588c:	04 12       	push	r4		;
    588e:	04 41       	mov	r1,	r4	;
    5890:	21 82       	sub	#4,	r1	;r2 As==10
    5892:	1c 42 ee 46 	mov	&0x46ee,r12	;0x46ee
    5896:	84 4c fe ff 	mov	r12,	-2(r4)	; 0xfffe
    589a:	0f 4c       	mov	r12,	r15	;
    589c:	b0 12 78 60 	call	#24696		;#0x6078
    58a0:	84 4f fc ff 	mov	r15,	-4(r4)	; 0xfffc
    58a4:	84 4f fe ff 	mov	r15,	-2(r4)	; 0xfffe
    58a8:	82 4f ee 46 	mov	r15,	&0x46ee	;
    58ac:	1c 44 fc ff 	mov	-4(r4),	r12	;
    58b0:	82 4c f6 52 	mov	r12,	&0x52f6	;
    58b4:	3f 40 98 45 	mov	#17816,	r15	;#0x4598
    58b8:	b0 12 4c 67 	call	#26444		;#0x674c
    58bc:	21 52       	add	#4,	r1	;r2 As==10
    58be:	34 41       	pop	r4		;
    58c0:	30 41       	ret			
	...

000058c4 <task_letterize>:
    58c4:	04 12       	push	r4		;
    58c6:	04 41       	mov	r1,	r4	;
    58c8:	31 80 10 00 	sub	#16,	r1	;#0x0010
    58cc:	1c 42 f0 46 	mov	&0x46f0,r12	;0x46f0
    58d0:	84 4c fe ff 	mov	r12,	-2(r4)	; 0xfffe
    58d4:	0c 93       	cmp	#0,	r12	;r3 As==00
    58d6:	04 20       	jnz	$+10     	;abs 0x58e0
    58d8:	00 3c       	jmp	$+2      	;abs 0x58da
    58da:	a4 43 fe ff 	mov	#2,	-2(r4)	;r3 As==10, 0xfffe
    58de:	06 3c       	jmp	$+14     	;abs 0x58ec
    58e0:	1c 44 fe ff 	mov	-2(r4),	r12	;
    58e4:	3c 53       	add	#-1,	r12	;r3 As==11
    58e6:	84 4c fe ff 	mov	r12,	-2(r4)	; 0xfffe
    58ea:	00 3c       	jmp	$+2      	;abs 0x58ec
    58ec:	1c 44 fe ff 	mov	-2(r4),	r12	;
    58f0:	0c 5c       	rla	r12		;
    58f2:	0c 5c       	rla	r12		;
    58f4:	0c 5c       	rla	r12		;
    58f6:	84 4c fc ff 	mov	r12,	-4(r4)	; 0xfffc
    58fa:	1c 42 f6 52 	mov	&0x52f6,r12	;0x52f6
    58fe:	5d 44 fc ff 	mov.b	-4(r4),	r13	;
    5902:	3e 40 ff 00 	mov	#255,	r14	;#0x00ff
    5906:	4d 93       	cmp.b	#0,	r13	;r3 As==00
    5908:	4f 4d       	mov.b	r13,	r15	;
    590a:	84 4c f8 ff 	mov	r12,	-8(r4)	; 0xfff8
    590e:	c4 4d f7 ff 	mov.b	r13,	-9(r4)	; 0xfff7
    5912:	84 4e f4 ff 	mov	r14,	-12(r4)	; 0xfff4
    5916:	c4 4f f3 ff 	mov.b	r15,	-13(r4)	; 0xfff3
    591a:	0b 24       	jz	$+24     	;abs 0x5932
    591c:	5c 44 f3 ff 	mov.b	-13(r4),r12	;0xfffffff3
    5920:	1d 44 f4 ff 	mov	-12(r4),r13	;0xfffffff4
    5924:	0d 5d       	rla	r13		;
    5926:	5c 83       	dec.b	r12		;
    5928:	84 4d f4 ff 	mov	r13,	-12(r4)	; 0xfff4
    592c:	c4 4c f3 ff 	mov.b	r12,	-13(r4)	; 0xfff3
    5930:	f5 23       	jnz	$-20     	;abs 0x591c
    5932:	1c 44 f4 ff 	mov	-12(r4),r12	;0xfffffff4
    5936:	1d 44 f8 ff 	mov	-8(r4),	r13	;
    593a:	0d fc       	and	r12,	r13	;
    593c:	5e 44 f7 ff 	mov.b	-9(r4),	r14	;
    5940:	4e 93       	cmp.b	#0,	r14	;r3 As==00
    5942:	c4 4e f2 ff 	mov.b	r14,	-14(r4)	; 0xfff2
    5946:	84 4d f0 ff 	mov	r13,	-16(r4)	; 0xfff0
    594a:	0c 24       	jz	$+26     	;abs 0x5964
    594c:	5c 44 f2 ff 	mov.b	-14(r4),r12	;0xfffffff2
    5950:	1d 44 f0 ff 	mov	-16(r4),r13	;0xfffffff0
    5954:	12 c3       	clrc			
    5956:	0d 10       	rrc	r13		;
    5958:	5c 83       	dec.b	r12		;
    595a:	84 4d f0 ff 	mov	r13,	-16(r4)	; 0xfff0
    595e:	c4 4c f2 ff 	mov.b	r12,	-14(r4)	; 0xfff2
    5962:	f4 23       	jnz	$-22     	;abs 0x594c
    5964:	1c 44 f0 ff 	mov	-16(r4),r12	;0xfffffff0
    5968:	84 4c fa ff 	mov	r12,	-6(r4)	; 0xfffa
    596c:	82 4c ec 46 	mov	r12,	&0x46ec	;
    5970:	3f 40 c2 45 	mov	#17858,	r15	;#0x45c2
    5974:	b0 12 4c 67 	call	#26444		;#0x674c
    5978:	31 50 10 00 	add	#16,	r1	;#0x0010
    597c:	34 41       	pop	r4		;
    597e:	30 41       	ret			

00005980 <task_compress>:
    5980:	04 12       	push	r4		;
    5982:	04 41       	mov	r1,	r4	;
    5984:	31 82       	sub	#8,	r1	;r2 As==11
    5986:	1c 42 e8 46 	mov	&0x46e8,r12	;0x46e8
    598a:	84 4c f8 ff 	mov	r12,	-8(r4)	; 0xfff8
    598e:	3e 40 06 00 	mov	#6,	r14	;
    5992:	0f 4c       	mov	r12,	r15	;
    5994:	b0 12 ac 6a 	call	#27308		;#0x6aac
    5998:	1c 4f f8 46 	mov	18168(r15),r12	;0x046f8
    599c:	84 4c fe ff 	mov	r12,	-2(r4)	; 0xfffe
    59a0:	1c 4f f6 46 	mov	18166(r15),r12	;0x046f6
    59a4:	84 4c fc ff 	mov	r12,	-4(r4)	; 0xfffc
    59a8:	1c 4f f4 46 	mov	18164(r15),r12	;0x046f4
    59ac:	84 4c fa ff 	mov	r12,	-6(r4)	; 0xfffa
    59b0:	1c 44 fe ff 	mov	-2(r4),	r12	;
    59b4:	82 4c f8 52 	mov	r12,	&0x52f8	;
    59b8:	1c 44 fe ff 	mov	-2(r4),	r12	;
    59bc:	82 4c fe 52 	mov	r12,	&0x52fe	;
    59c0:	1c 44 fc ff 	mov	-4(r4),	r12	;
    59c4:	82 4c fc 52 	mov	r12,	&0x52fc	;
    59c8:	1c 44 fa ff 	mov	-6(r4),	r12	;
    59cc:	82 4c fa 52 	mov	r12,	&0x52fa	;
    59d0:	1c 44 f8 ff 	mov	-8(r4),	r12	;
    59d4:	82 4c 00 53 	mov	r12,	&0x5300	;
    59d8:	1c 44 fe ff 	mov	-2(r4),	r12	;
    59dc:	82 4c 02 53 	mov	r12,	&0x5302	;
    59e0:	1c 42 f2 46 	mov	&0x46f2,r12	;0x46f2
    59e4:	1c 53       	inc	r12		;
    59e6:	82 4c f2 46 	mov	r12,	&0x46f2	;
    59ea:	3f 40 ec 45 	mov	#17900,	r15	;#0x45ec
    59ee:	b0 12 4c 67 	call	#26444		;#0x674c
    59f2:	31 52       	add	#8,	r1	;r2 As==11
    59f4:	34 41       	pop	r4		;
    59f6:	30 41       	ret			

000059f8 <task_find_sibling>:
    59f8:	04 12       	push	r4		;
    59fa:	04 41       	mov	r1,	r4	;
    59fc:	31 80 06 00 	sub	#6,	r1	;
    5a00:	1c 42 f8 52 	mov	&0x52f8,r12	;0x52f8
    5a04:	0c 93       	cmp	#0,	r12	;r3 As==00
    5a06:	33 24       	jz	$+104    	;abs 0x5a6e
    5a08:	00 3c       	jmp	$+2      	;abs 0x5a0a
    5a0a:	1c 42 f8 52 	mov	&0x52f8,r12	;0x52f8
    5a0e:	84 4c fc ff 	mov	r12,	-4(r4)	; 0xfffc
    5a12:	3e 40 06 00 	mov	#6,	r14	;
    5a16:	0f 4c       	mov	r12,	r15	;
    5a18:	b0 12 ac 6a 	call	#27308		;#0x6aac
    5a1c:	0c 4f       	mov	r15,	r12	;
    5a1e:	3c 50 f4 46 	add	#18164,	r12	;#0x46f4
    5a22:	84 4c fe ff 	mov	r12,	-2(r4)	; 0xfffe
    5a26:	1c 4f f4 46 	mov	18164(r15),r12	;0x046f4
    5a2a:	1e 42 ec 46 	mov	&0x46ec,r14	;0x46ec
    5a2e:	0c 9e       	cmp	r14,	r12	;
    5a30:	0a 20       	jnz	$+22     	;abs 0x5a46
    5a32:	00 3c       	jmp	$+2      	;abs 0x5a34
    5a34:	1c 42 f8 52 	mov	&0x52f8,r12	;0x52f8
    5a38:	82 4c e8 46 	mov	r12,	&0x46e8	;
    5a3c:	3f 40 98 45 	mov	#17816,	r15	;#0x4598
    5a40:	b0 12 4c 67 	call	#26444		;#0x674c
    5a44:	13 3c       	jmp	$+40     	;abs 0x5a6c
    5a46:	1c 44 fe ff 	mov	-2(r4),	r12	;
    5a4a:	1c 4c 02 00 	mov	2(r12),	r12	;
    5a4e:	0c 93       	cmp	#0,	r12	;r3 As==00
    5a50:	0c 24       	jz	$+26     	;abs 0x5a6a
    5a52:	00 3c       	jmp	$+2      	;abs 0x5a54
    5a54:	1c 44 fe ff 	mov	-2(r4),	r12	;
    5a58:	1c 4c 02 00 	mov	2(r12),	r12	;
    5a5c:	82 4c f8 52 	mov	r12,	&0x52f8	;
    5a60:	3f 40 ec 45 	mov	#17900,	r15	;#0x45ec
    5a64:	b0 12 4c 67 	call	#26444		;#0x674c
    5a68:	00 3c       	jmp	$+2      	;abs 0x5a6a
    5a6a:	00 3c       	jmp	$+2      	;abs 0x5a6c
    5a6c:	00 3c       	jmp	$+2      	;abs 0x5a6e
    5a6e:	1c 42 ec 46 	mov	&0x46ec,r12	;0x46ec
    5a72:	84 4c fa ff 	mov	r12,	-6(r4)	; 0xfffa
    5a76:	82 4c e8 46 	mov	r12,	&0x46e8	;
    5a7a:	1c 42 02 53 	mov	&0x5302,r12	;0x5302
    5a7e:	0c 93       	cmp	#0,	r12	;r3 As==00
    5a80:	06 20       	jnz	$+14     	;abs 0x5a8e
    5a82:	00 3c       	jmp	$+2      	;abs 0x5a84
    5a84:	3f 40 40 46 	mov	#17984,	r15	;#0x4640
    5a88:	b0 12 4c 67 	call	#26444		;#0x674c
    5a8c:	05 3c       	jmp	$+12     	;abs 0x5a98
    5a8e:	3f 40 16 46 	mov	#17942,	r15	;#0x4616
    5a92:	b0 12 4c 67 	call	#26444		;#0x674c
    5a96:	00 3c       	jmp	$+2      	;abs 0x5a98
    5a98:	31 50 06 00 	add	#6,	r1	;
    5a9c:	34 41       	pop	r4		;
    5a9e:	30 41       	ret			

00005aa0 <task_add_node>:
    5aa0:	04 12       	push	r4		;
    5aa2:	04 41       	mov	r1,	r4	;
    5aa4:	31 80 0c 00 	sub	#12,	r1	;#0x000c
    5aa8:	1c 42 f8 52 	mov	&0x52f8,r12	;0x52f8
    5aac:	84 4c fc ff 	mov	r12,	-4(r4)	; 0xfffc
    5ab0:	3e 40 06 00 	mov	#6,	r14	;
    5ab4:	0f 4c       	mov	r12,	r15	;
    5ab6:	b0 12 ac 6a 	call	#27308		;#0x6aac
    5aba:	0c 4f       	mov	r15,	r12	;
    5abc:	3c 50 f4 46 	add	#18164,	r12	;#0x46f4
    5ac0:	84 4c fe ff 	mov	r12,	-2(r4)	; 0xfffe
    5ac4:	1c 4f f6 46 	mov	18166(r15),r12	;0x046f6
    5ac8:	0c 93       	cmp	#0,	r12	;r3 As==00
    5aca:	0e 24       	jz	$+30     	;abs 0x5ae8
    5acc:	00 3c       	jmp	$+2      	;abs 0x5ace
    5ace:	1c 44 fe ff 	mov	-2(r4),	r12	;
    5ad2:	1c 4c 02 00 	mov	2(r12),	r12	;
    5ad6:	84 4c fa ff 	mov	r12,	-6(r4)	; 0xfffa
    5ada:	82 4c f8 52 	mov	r12,	&0x52f8	;
    5ade:	3f 40 16 46 	mov	#17942,	r15	;#0x4616
    5ae2:	b0 12 4c 67 	call	#26444		;#0x674c
    5ae6:	1e 3c       	jmp	$+62     	;abs 0x5b24
    5ae8:	1c 44 fe ff 	mov	-2(r4),	r12	;
    5aec:	1d 4c 04 00 	mov	4(r12),	r13	;
    5af0:	84 4d f8 ff 	mov	r13,	-8(r4)	; 0xfff8
    5af4:	1d 4c 02 00 	mov	2(r12),	r13	;
    5af8:	84 4d f6 ff 	mov	r13,	-10(r4)	; 0xfff6
    5afc:	2c 4c       	mov	@r12,	r12	;
    5afe:	84 4c f4 ff 	mov	r12,	-12(r4)	; 0xfff4
    5b02:	1c 44 f8 ff 	mov	-8(r4),	r12	;
    5b06:	82 4c 08 53 	mov	r12,	&0x5308	;
    5b0a:	1c 44 f6 ff 	mov	-10(r4),r12	;0xfffffff6
    5b0e:	82 4c 06 53 	mov	r12,	&0x5306	;
    5b12:	1c 44 f4 ff 	mov	-12(r4),r12	;0xfffffff4
    5b16:	82 4c 04 53 	mov	r12,	&0x5304	;
    5b1a:	3f 40 40 46 	mov	#17984,	r15	;#0x4640
    5b1e:	b0 12 4c 67 	call	#26444		;#0x674c
    5b22:	00 3c       	jmp	$+2      	;abs 0x5b24
    5b24:	31 50 0c 00 	add	#12,	r1	;#0x000c
    5b28:	34 41       	pop	r4		;
    5b2a:	30 41       	ret			

00005b2c <task_add_insert>:
    5b2c:	04 12       	push	r4		;
    5b2e:	04 41       	mov	r1,	r4	;
    5b30:	31 80 18 00 	sub	#24,	r1	;#0x0018
    5b34:	1c 42 f4 52 	mov	&0x52f4,r12	;0x52f4
    5b38:	3c 90 00 02 	cmp	#512,	r12	;#0x0200
    5b3c:	03 20       	jnz	$+8      	;abs 0x5b44
    5b3e:	00 3c       	jmp	$+2      	;abs 0x5b40
    5b40:	00 3c       	jmp	$+2      	;abs 0x5b42
    5b42:	ff 3f       	jmp	$+0      	;abs 0x5b42
    5b44:	1c 42 f4 52 	mov	&0x52f4,r12	;0x52f4
    5b48:	84 4c fe ff 	mov	r12,	-2(r4)	; 0xfffe
    5b4c:	1c 42 ec 46 	mov	&0x46ec,r12	;0x46ec
    5b50:	84 4c f8 ff 	mov	r12,	-8(r4)	; 0xfff8
    5b54:	84 43 fa ff 	mov	#0,	-6(r4)	;r3 As==00, 0xfffa
    5b58:	84 43 fc ff 	mov	#0,	-4(r4)	;r3 As==00, 0xfffc
    5b5c:	1c 42 fe 52 	mov	&0x52fe,r12	;0x52fe
    5b60:	0c 93       	cmp	#0,	r12	;r3 As==00
    5b62:	27 20       	jnz	$+80     	;abs 0x5bb2
    5b64:	00 3c       	jmp	$+2      	;abs 0x5b66
    5b66:	1c 42 fe 52 	mov	&0x52fe,r12	;0x52fe
    5b6a:	84 4c f6 ff 	mov	r12,	-10(r4)	; 0xfff6
    5b6e:	1c 42 fc 52 	mov	&0x52fc,r12	;0x52fc
    5b72:	84 4c f4 ff 	mov	r12,	-12(r4)	; 0xfff4
    5b76:	1c 42 fa 52 	mov	&0x52fa,r12	;0x52fa
    5b7a:	84 4c f2 ff 	mov	r12,	-14(r4)	; 0xfff2
    5b7e:	1c 44 fe ff 	mov	-2(r4),	r12	;
    5b82:	84 4c f6 ff 	mov	r12,	-10(r4)	; 0xfff6
    5b86:	1c 42 00 53 	mov	&0x5300,r12	;0x5300
    5b8a:	84 4c f0 ff 	mov	r12,	-16(r4)	; 0xfff0
    5b8e:	3e 40 06 00 	mov	#6,	r14	;
    5b92:	0f 4c       	mov	r12,	r15	;
    5b94:	b0 12 ac 6a 	call	#27308		;#0x6aac
    5b98:	1c 44 f6 ff 	mov	-10(r4),r12	;0xfffffff6
    5b9c:	8f 4c f8 46 	mov	r12,	18168(r15); 0x46f8
    5ba0:	1c 44 f4 ff 	mov	-12(r4),r12	;0xfffffff4
    5ba4:	8f 4c f6 46 	mov	r12,	18166(r15); 0x46f6
    5ba8:	1c 44 f2 ff 	mov	-14(r4),r12	;0xfffffff2
    5bac:	8f 4c f4 46 	mov	r12,	18164(r15); 0x46f4
    5bb0:	27 3c       	jmp	$+80     	;abs 0x5c00
    5bb2:	1c 42 f8 52 	mov	&0x52f8,r12	;0x52f8
    5bb6:	84 4c ee ff 	mov	r12,	-18(r4)	; 0xffee
    5bba:	1c 42 08 53 	mov	&0x5308,r12	;0x5308
    5bbe:	84 4c ec ff 	mov	r12,	-20(r4)	; 0xffec
    5bc2:	1c 42 06 53 	mov	&0x5306,r12	;0x5306
    5bc6:	84 4c ea ff 	mov	r12,	-22(r4)	; 0xffea
    5bca:	1c 42 04 53 	mov	&0x5304,r12	;0x5304
    5bce:	84 4c e8 ff 	mov	r12,	-24(r4)	; 0xffe8
    5bd2:	1c 44 fe ff 	mov	-2(r4),	r12	;
    5bd6:	84 4c ea ff 	mov	r12,	-22(r4)	; 0xffea
    5bda:	1f 44 ee ff 	mov	-18(r4),r15	;0xffffffee
    5bde:	3e 40 06 00 	mov	#6,	r14	;
    5be2:	b0 12 ac 6a 	call	#27308		;#0x6aac
    5be6:	1c 44 ec ff 	mov	-20(r4),r12	;0xffffffec
    5bea:	8f 4c f8 46 	mov	r12,	18168(r15); 0x46f8
    5bee:	1c 44 ea ff 	mov	-22(r4),r12	;0xffffffea
    5bf2:	8f 4c f6 46 	mov	r12,	18166(r15); 0x46f6
    5bf6:	1c 44 e8 ff 	mov	-24(r4),r12	;0xffffffe8
    5bfa:	8f 4c f4 46 	mov	r12,	18164(r15); 0x46f4
    5bfe:	00 3c       	jmp	$+2      	;abs 0x5c00
    5c00:	1f 44 fe ff 	mov	-2(r4),	r15	;
    5c04:	3e 40 06 00 	mov	#6,	r14	;
    5c08:	b0 12 ac 6a 	call	#27308		;#0x6aac
    5c0c:	1e 44 fc ff 	mov	-4(r4),	r14	;
    5c10:	8f 4e f8 46 	mov	r14,	18168(r15); 0x46f8
    5c14:	1e 44 fa ff 	mov	-6(r4),	r14	;
    5c18:	8f 4e f6 46 	mov	r14,	18166(r15); 0x46f6
    5c1c:	1e 44 f8 ff 	mov	-8(r4),	r14	;
    5c20:	8f 4e f4 46 	mov	r14,	18164(r15); 0x46f4
    5c24:	1e 42 00 53 	mov	&0x5300,r14	;0x5300
    5c28:	82 4e 0a 53 	mov	r14,	&0x530a	;
    5c2c:	1e 42 f4 52 	mov	&0x52f4,r14	;0x52f4
    5c30:	1e 53       	inc	r14		;
    5c32:	82 4e f4 52 	mov	r14,	&0x52f4	;
    5c36:	3f 40 6a 46 	mov	#18026,	r15	;#0x466a
    5c3a:	b0 12 4c 67 	call	#26444		;#0x674c
    5c3e:	31 50 18 00 	add	#24,	r1	;#0x0018
    5c42:	34 41       	pop	r4		;
    5c44:	30 41       	ret			
	...

00005c48 <task_append_compressed>:
    5c48:	04 12       	push	r4		;
    5c4a:	04 41       	mov	r1,	r4	;
    5c4c:	21 82       	sub	#4,	r1	;r2 As==10
    5c4e:	1c 42 ea 46 	mov	&0x46ea,r12	;0x46ea
    5c52:	84 4c fe ff 	mov	r12,	-2(r4)	; 0xfffe
    5c56:	1d 42 0a 53 	mov	&0x530a,r13	;0x530a
    5c5a:	3e 40 06 00 	mov	#6,	r14	;
    5c5e:	0f 4c       	mov	r12,	r15	;
    5c60:	84 4d fc ff 	mov	r13,	-4(r4)	; 0xfffc
    5c64:	b0 12 ac 6a 	call	#27308		;#0x6aac
    5c68:	1c 44 fc ff 	mov	-4(r4),	r12	;
    5c6c:	8f 4c 0c 53 	mov	r12,	21260(r15); 0x530c
    5c70:	1c 42 ea 46 	mov	&0x46ea,r12	;0x46ea
    5c74:	1c 53       	inc	r12		;
    5c76:	82 4c ea 46 	mov	r12,	&0x46ea	;
    5c7a:	3c 90 40 00 	cmp	#64,	r12	;#0x0040
    5c7e:	06 20       	jnz	$+14     	;abs 0x5c8c
    5c80:	00 3c       	jmp	$+2      	;abs 0x5c82
    5c82:	3f 40 94 46 	mov	#18068,	r15	;#0x4694
    5c86:	b0 12 4c 67 	call	#26444		;#0x674c
    5c8a:	05 3c       	jmp	$+12     	;abs 0x5c96
    5c8c:	3f 40 44 45 	mov	#17732,	r15	;#0x4544
    5c90:	b0 12 4c 67 	call	#26444		;#0x674c
    5c94:	00 3c       	jmp	$+2      	;abs 0x5c96
    5c96:	21 52       	add	#4,	r1	;r2 As==10
    5c98:	34 41       	pop	r4		;
    5c9a:	30 41       	ret			

00005c9c <task_print>:
    5c9c:	04 12       	push	r4		;
    5c9e:	04 41       	mov	r1,	r4	;
    5ca0:	31 80 14 00 	sub	#20,	r1	;#0x0014
    5ca4:	0c 41       	mov	r1,	r12	;
    5ca6:	bc 40 00 44 	mov	#17408,	0(r12)	;#0x4400
    5caa:	00 00 
    5cac:	b0 12 78 61 	call	#24952		;#0x6178
    5cb0:	84 43 fe ff 	mov	#0,	-2(r4)	;r3 As==00, 0xfffe
    5cb4:	84 4f fa ff 	mov	r15,	-6(r4)	; 0xfffa
    5cb8:	00 3c       	jmp	$+2      	;abs 0x5cba
    5cba:	1c 44 fe ff 	mov	-2(r4),	r12	;
    5cbe:	3c 90 40 00 	cmp	#64,	r12	;#0x0040
    5cc2:	31 2c       	jc	$+100    	;abs 0x5d26
    5cc4:	00 3c       	jmp	$+2      	;abs 0x5cc6
    5cc6:	1f 44 fe ff 	mov	-2(r4),	r15	;
    5cca:	3e 40 06 00 	mov	#6,	r14	;
    5cce:	b0 12 ac 6a 	call	#27308		;#0x6aac
    5cd2:	1e 4f 0c 53 	mov	21260(r15),r14	;0x0530c
    5cd6:	84 4e fc ff 	mov	r14,	-4(r4)	; 0xfffc
    5cda:	0f 41       	mov	r1,	r15	;
    5cdc:	8f 4e 02 00 	mov	r14,	2(r15)	;
    5ce0:	bf 40 14 44 	mov	#17428,	0(r15)	;#0x4414
    5ce4:	00 00 
    5ce6:	b0 12 78 61 	call	#24952		;#0x6178
    5cea:	1e 44 fe ff 	mov	-2(r4),	r14	;
    5cee:	0e 93       	cmp	#0,	r14	;r3 As==00
    5cf0:	84 4f f8 ff 	mov	r15,	-8(r4)	; 0xfff8
    5cf4:	11 24       	jz	$+36     	;abs 0x5d18
    5cf6:	00 3c       	jmp	$+2      	;abs 0x5cf8
    5cf8:	1c 44 fe ff 	mov	-2(r4),	r12	;
    5cfc:	1c 53       	inc	r12		;
    5cfe:	3c b0 07 00 	bit	#7,	r12	;
    5d02:	0a 20       	jnz	$+22     	;abs 0x5d18
    5d04:	00 3c       	jmp	$+2      	;abs 0x5d06
    5d06:	0c 41       	mov	r1,	r12	;
    5d08:	bc 40 11 44 	mov	#17425,	0(r12)	;#0x4411
    5d0c:	00 00 
    5d0e:	b0 12 78 61 	call	#24952		;#0x6178
    5d12:	84 4f f6 ff 	mov	r15,	-10(r4)	; 0xfff6
    5d16:	00 3c       	jmp	$+2      	;abs 0x5d18
    5d18:	00 3c       	jmp	$+2      	;abs 0x5d1a
    5d1a:	1c 44 fe ff 	mov	-2(r4),	r12	;
    5d1e:	1c 53       	inc	r12		;
    5d20:	84 4c fe ff 	mov	r12,	-2(r4)	; 0xfffe
    5d24:	ca 3f       	jmp	$-106    	;abs 0x5cba
    5d26:	0c 41       	mov	r1,	r12	;
    5d28:	bc 40 11 44 	mov	#17425,	0(r12)	;#0x4411
    5d2c:	00 00 
    5d2e:	b0 12 78 61 	call	#24952		;#0x6178
    5d32:	1c 42 f2 46 	mov	&0x46f2,r12	;0x46f2
    5d36:	0d 41       	mov	r1,	r13	;
    5d38:	8d 4c 02 00 	mov	r12,	2(r13)	;
    5d3c:	bd 40 40 00 	mov	#64,	4(r13)	;#0x0040
    5d40:	04 00 
    5d42:	bd 40 1a 44 	mov	#17434,	0(r13)	;#0x441a
    5d46:	00 00 
    5d48:	84 4f f4 ff 	mov	r15,	-12(r4)	; 0xfff4
    5d4c:	b0 12 78 61 	call	#24952		;#0x6178
    5d50:	3c 40 be 46 	mov	#18110,	r12	;#0x46be
    5d54:	84 4f f2 ff 	mov	r15,	-14(r4)	; 0xfff2
    5d58:	0f 4c       	mov	r12,	r15	;
    5d5a:	b0 12 4c 67 	call	#26444		;#0x674c
    5d5e:	31 50 14 00 	add	#20,	r1	;#0x0014
    5d62:	34 41       	pop	r4		;
    5d64:	30 41       	ret			
	...

00005d68 <task_done>:
    5d68:	04 12       	push	r4		;
    5d6a:	04 41       	mov	r1,	r4	;
    5d6c:	31 80 32 00 	sub	#50,	r1	;#0x0032
    5d70:	84 43 fe ff 	mov	#0,	-2(r4)	;r3 As==00, 0xfffe
    5d74:	0c 41       	mov	r1,	r12	;
    5d76:	bc 40 2a 00 	mov	#42,	4(r12)	;#0x002a
    5d7a:	04 00 
    5d7c:	9c 43 02 00 	mov	#1,	2(r12)	;r3 As==01
    5d80:	bc 40 37 44 	mov	#17463,	0(r12)	;#0x4437
    5d84:	00 00 
    5d86:	b0 12 78 61 	call	#24952		;#0x6178
    5d8a:	1c 44 fe ff 	mov	-2(r4),	r12	;
    5d8e:	3c 50 f8 01 	add	#504,	r12	;#0x01f8
    5d92:	84 4c fe ff 	mov	r12,	-2(r4)	; 0xfffe
    5d96:	0c 41       	mov	r1,	r12	;
    5d98:	ac 43 04 00 	mov	#2,	4(r12)	;r3 As==10
    5d9c:	9c 43 02 00 	mov	#1,	2(r12)	;r3 As==01
    5da0:	bc 40 4d 44 	mov	#17485,	0(r12)	;#0x444d
    5da4:	00 00 
    5da6:	84 4f fa ff 	mov	r15,	-6(r4)	; 0xfffa
    5daa:	b0 12 78 61 	call	#24952		;#0x6178
    5dae:	1c 44 fe ff 	mov	-2(r4),	r12	;
    5db2:	2c 53       	incd	r12		;
    5db4:	84 4c fe ff 	mov	r12,	-2(r4)	; 0xfffe
    5db8:	0c 41       	mov	r1,	r12	;
    5dba:	ac 43 04 00 	mov	#2,	4(r12)	;r3 As==10
    5dbe:	ac 43 02 00 	mov	#2,	2(r12)	;r3 As==10
    5dc2:	bc 40 4d 44 	mov	#17485,	0(r12)	;#0x444d
    5dc6:	00 00 
    5dc8:	84 4f f8 ff 	mov	r15,	-8(r4)	; 0xfff8
    5dcc:	b0 12 78 61 	call	#24952		;#0x6178
    5dd0:	1c 44 fe ff 	mov	-2(r4),	r12	;
    5dd4:	2c 53       	incd	r12		;
    5dd6:	84 4c fe ff 	mov	r12,	-2(r4)	; 0xfffe
    5dda:	0c 41       	mov	r1,	r12	;
    5ddc:	ac 43 04 00 	mov	#2,	4(r12)	;r3 As==10
    5de0:	bc 40 03 00 	mov	#3,	2(r12)	;
    5de4:	02 00 
    5de6:	bc 40 4d 44 	mov	#17485,	0(r12)	;#0x444d
    5dea:	00 00 
    5dec:	84 4f f6 ff 	mov	r15,	-10(r4)	; 0xfff6
    5df0:	b0 12 78 61 	call	#24952		;#0x6178
    5df4:	1c 44 fe ff 	mov	-2(r4),	r12	;
    5df8:	2c 53       	incd	r12		;
    5dfa:	84 4c fe ff 	mov	r12,	-2(r4)	; 0xfffe
    5dfe:	0c 41       	mov	r1,	r12	;
    5e00:	ac 43 04 00 	mov	#2,	4(r12)	;r3 As==10
    5e04:	ac 42 02 00 	mov	#4,	2(r12)	;r2 As==10
    5e08:	bc 40 4d 44 	mov	#17485,	0(r12)	;#0x444d
    5e0c:	00 00 
    5e0e:	84 4f f4 ff 	mov	r15,	-12(r4)	; 0xfff4
    5e12:	b0 12 78 61 	call	#24952		;#0x6178
    5e16:	1c 44 fe ff 	mov	-2(r4),	r12	;
    5e1a:	2c 53       	incd	r12		;
    5e1c:	84 4c fe ff 	mov	r12,	-2(r4)	; 0xfffe
    5e20:	0c 41       	mov	r1,	r12	;
    5e22:	ac 43 04 00 	mov	#2,	4(r12)	;r3 As==10
    5e26:	bc 40 05 00 	mov	#5,	2(r12)	;
    5e2a:	02 00 
    5e2c:	bc 40 4d 44 	mov	#17485,	0(r12)	;#0x444d
    5e30:	00 00 
    5e32:	84 4f f2 ff 	mov	r15,	-14(r4)	; 0xfff2
    5e36:	b0 12 78 61 	call	#24952		;#0x6178
    5e3a:	1c 44 fe ff 	mov	-2(r4),	r12	;
    5e3e:	2c 53       	incd	r12		;
    5e40:	84 4c fe ff 	mov	r12,	-2(r4)	; 0xfffe
    5e44:	0c 41       	mov	r1,	r12	;
    5e46:	bc 40 00 0c 	mov	#3072,	4(r12)	;#0x0c00
    5e4a:	04 00 
    5e4c:	bc 40 06 00 	mov	#6,	2(r12)	;
    5e50:	02 00 
    5e52:	bc 40 4d 44 	mov	#17485,	0(r12)	;#0x444d
    5e56:	00 00 
    5e58:	84 4f f0 ff 	mov	r15,	-16(r4)	; 0xfff0
    5e5c:	b0 12 78 61 	call	#24952		;#0x6178
    5e60:	1c 44 fe ff 	mov	-2(r4),	r12	;
    5e64:	3c 50 00 0c 	add	#3072,	r12	;#0x0c00
    5e68:	84 4c fe ff 	mov	r12,	-2(r4)	; 0xfffe
    5e6c:	0c 41       	mov	r1,	r12	;
    5e6e:	ac 43 04 00 	mov	#2,	4(r12)	;r3 As==10
    5e72:	bc 40 07 00 	mov	#7,	2(r12)	;
    5e76:	02 00 
    5e78:	bc 40 4d 44 	mov	#17485,	0(r12)	;#0x444d
    5e7c:	00 00 
    5e7e:	84 4f ee ff 	mov	r15,	-18(r4)	; 0xffee
    5e82:	b0 12 78 61 	call	#24952		;#0x6178
    5e86:	1c 44 fe ff 	mov	-2(r4),	r12	;
    5e8a:	2c 53       	incd	r12		;
    5e8c:	84 4c fe ff 	mov	r12,	-2(r4)	; 0xfffe
    5e90:	0c 41       	mov	r1,	r12	;
    5e92:	ac 43 04 00 	mov	#2,	4(r12)	;r3 As==10
    5e96:	bc 42 02 00 	mov	#8,	2(r12)	;r2 As==11
    5e9a:	bc 40 4d 44 	mov	#17485,	0(r12)	;#0x444d
    5e9e:	00 00 
    5ea0:	84 4f ec ff 	mov	r15,	-20(r4)	; 0xffec
    5ea4:	b0 12 78 61 	call	#24952		;#0x6178
    5ea8:	1c 44 fe ff 	mov	-2(r4),	r12	;
    5eac:	2c 53       	incd	r12		;
    5eae:	84 4c fe ff 	mov	r12,	-2(r4)	; 0xfffe
    5eb2:	0c 41       	mov	r1,	r12	;
    5eb4:	ac 43 04 00 	mov	#2,	4(r12)	;r3 As==10
    5eb8:	bc 40 09 00 	mov	#9,	2(r12)	;
    5ebc:	02 00 
    5ebe:	bc 40 4d 44 	mov	#17485,	0(r12)	;#0x444d
    5ec2:	00 00 
    5ec4:	84 4f ea ff 	mov	r15,	-22(r4)	; 0xffea
    5ec8:	b0 12 78 61 	call	#24952		;#0x6178
    5ecc:	1c 44 fe ff 	mov	-2(r4),	r12	;
    5ed0:	2c 53       	incd	r12		;
    5ed2:	84 4c fe ff 	mov	r12,	-2(r4)	; 0xfffe
    5ed6:	0c 41       	mov	r1,	r12	;
    5ed8:	ac 43 04 00 	mov	#2,	4(r12)	;r3 As==10
    5edc:	bc 40 0b 00 	mov	#11,	2(r12)	;#0x000b
    5ee0:	02 00 
    5ee2:	bc 40 4d 44 	mov	#17485,	0(r12)	;#0x444d
    5ee6:	00 00 
    5ee8:	84 4f e8 ff 	mov	r15,	-24(r4)	; 0xffe8
    5eec:	b0 12 78 61 	call	#24952		;#0x6178
    5ef0:	1c 44 fe ff 	mov	-2(r4),	r12	;
    5ef4:	2c 53       	incd	r12		;
    5ef6:	84 4c fe ff 	mov	r12,	-2(r4)	; 0xfffe
    5efa:	0c 41       	mov	r1,	r12	;
    5efc:	ac 43 04 00 	mov	#2,	4(r12)	;r3 As==10
    5f00:	bc 40 0c 00 	mov	#12,	2(r12)	;#0x000c
    5f04:	02 00 
    5f06:	bc 40 4d 44 	mov	#17485,	0(r12)	;#0x444d
    5f0a:	00 00 
    5f0c:	84 4f e6 ff 	mov	r15,	-26(r4)	; 0xffe6
    5f10:	b0 12 78 61 	call	#24952		;#0x6178
    5f14:	1c 44 fe ff 	mov	-2(r4),	r12	;
    5f18:	2c 53       	incd	r12		;
    5f1a:	84 4c fe ff 	mov	r12,	-2(r4)	; 0xfffe
    5f1e:	0c 41       	mov	r1,	r12	;
    5f20:	ac 43 04 00 	mov	#2,	4(r12)	;r3 As==10
    5f24:	bc 40 0d 00 	mov	#13,	2(r12)	;#0x000d
    5f28:	02 00 
    5f2a:	bc 40 4d 44 	mov	#17485,	0(r12)	;#0x444d
    5f2e:	00 00 
    5f30:	84 4f e4 ff 	mov	r15,	-28(r4)	; 0xffe4
    5f34:	b0 12 78 61 	call	#24952		;#0x6178
    5f38:	1c 44 fe ff 	mov	-2(r4),	r12	;
    5f3c:	2c 53       	incd	r12		;
    5f3e:	84 4c fe ff 	mov	r12,	-2(r4)	; 0xfffe
    5f42:	0c 41       	mov	r1,	r12	;
    5f44:	bc 40 06 00 	mov	#6,	4(r12)	;
    5f48:	04 00 
    5f4a:	bc 40 0e 00 	mov	#14,	2(r12)	;#0x000e
    5f4e:	02 00 
    5f50:	bc 40 4d 44 	mov	#17485,	0(r12)	;#0x444d
    5f54:	00 00 
    5f56:	84 4f e2 ff 	mov	r15,	-30(r4)	; 0xffe2
    5f5a:	b0 12 78 61 	call	#24952		;#0x6178
    5f5e:	1c 44 fe ff 	mov	-2(r4),	r12	;
    5f62:	3c 50 06 00 	add	#6,	r12	;
    5f66:	84 4c fe ff 	mov	r12,	-2(r4)	; 0xfffe
    5f6a:	0c 41       	mov	r1,	r12	;
    5f6c:	bc 40 80 01 	mov	#384,	4(r12)	;#0x0180
    5f70:	04 00 
    5f72:	bc 40 0f 00 	mov	#15,	2(r12)	;#0x000f
    5f76:	02 00 
    5f78:	bc 40 4d 44 	mov	#17485,	0(r12)	;#0x444d
    5f7c:	00 00 
    5f7e:	84 4f e0 ff 	mov	r15,	-32(r4)	; 0xffe0
    5f82:	b0 12 78 61 	call	#24952		;#0x6178
    5f86:	1c 44 fe ff 	mov	-2(r4),	r12	;
    5f8a:	3c 50 80 01 	add	#384,	r12	;#0x0180
    5f8e:	84 4c fe ff 	mov	r12,	-2(r4)	; 0xfffe
    5f92:	0c 41       	mov	r1,	r12	;
    5f94:	bc 40 06 00 	mov	#6,	4(r12)	;
    5f98:	04 00 
    5f9a:	bc 40 10 00 	mov	#16,	2(r12)	;#0x0010
    5f9e:	02 00 
    5fa0:	bc 40 4d 44 	mov	#17485,	0(r12)	;#0x444d
    5fa4:	00 00 
    5fa6:	84 4f de ff 	mov	r15,	-34(r4)	; 0xffde
    5faa:	b0 12 78 61 	call	#24952		;#0x6178
    5fae:	1c 44 fe ff 	mov	-2(r4),	r12	;
    5fb2:	3c 50 06 00 	add	#6,	r12	;
    5fb6:	84 4c fe ff 	mov	r12,	-2(r4)	; 0xfffe
    5fba:	0c 41       	mov	r1,	r12	;
    5fbc:	ac 43 04 00 	mov	#2,	4(r12)	;r3 As==10
    5fc0:	bc 40 11 00 	mov	#17,	2(r12)	;#0x0011
    5fc4:	02 00 
    5fc6:	bc 40 4d 44 	mov	#17485,	0(r12)	;#0x444d
    5fca:	00 00 
    5fcc:	84 4f dc ff 	mov	r15,	-36(r4)	; 0xffdc
    5fd0:	b0 12 78 61 	call	#24952		;#0x6178
    5fd4:	1c 44 fe ff 	mov	-2(r4),	r12	;
    5fd8:	2c 53       	incd	r12		;
    5fda:	84 4c fe ff 	mov	r12,	-2(r4)	; 0xfffe
    5fde:	0c 41       	mov	r1,	r12	;
    5fe0:	bc 40 42 00 	mov	#66,	2(r12)	;#0x0042
    5fe4:	02 00 
    5fe6:	bc 40 66 44 	mov	#17510,	0(r12)	;#0x4466
    5fea:	00 00 
    5fec:	84 4f da ff 	mov	r15,	-38(r4)	; 0xffda
    5ff0:	b0 12 78 61 	call	#24952		;#0x6178
    5ff4:	1c 44 fe ff 	mov	-2(r4),	r12	;
    5ff8:	3c 50 42 00 	add	#66,	r12	;#0x0042
    5ffc:	84 4c fe ff 	mov	r12,	-2(r4)	; 0xfffe
    6000:	0c 41       	mov	r1,	r12	;
    6002:	ac 43 02 00 	mov	#2,	2(r12)	;r3 As==10
    6006:	bc 40 7e 44 	mov	#17534,	0(r12)	;#0x447e
    600a:	00 00 
    600c:	84 4f d8 ff 	mov	r15,	-40(r4)	; 0xffd8
    6010:	b0 12 78 61 	call	#24952		;#0x6178
    6014:	1c 44 fe ff 	mov	-2(r4),	r12	;
    6018:	2c 53       	incd	r12		;
    601a:	84 4c fe ff 	mov	r12,	-2(r4)	; 0xfffe
    601e:	0d 41       	mov	r1,	r13	;
    6020:	8d 4c 02 00 	mov	r12,	2(r13)	;
    6024:	bd 40 9a 44 	mov	#17562,	0(r13)	;#0x449a
    6028:	00 00 
    602a:	84 4f d6 ff 	mov	r15,	-42(r4)	; 0xffd6
    602e:	b0 12 78 61 	call	#24952		;#0x6178
    6032:	84 4f d4 ff 	mov	r15,	-44(r4)	; 0xffd4
    6036:	31 50 32 00 	add	#50,	r1	;#0x0032
    603a:	34 41       	pop	r4		;
    603c:	30 41       	ret			
	...

00006040 <_entry_task>:
    6040:	04 12       	push	r4		;
    6042:	04 41       	mov	r1,	r4	;
    6044:	3f 40 f0 44 	mov	#17648,	r15	;#0x44f0
    6048:	b0 12 4c 67 	call	#26444		;#0x674c
    604c:	34 41       	pop	r4		;
    604e:	30 41       	ret			

00006050 <_init>:
    6050:	04 12       	push	r4		;
    6052:	04 41       	mov	r1,	r4	;
    6054:	b0 12 20 57 	call	#22304		;#0x5720
    6058:	34 41       	pop	r4		;
    605a:	30 41       	ret			

0000605c <init_hw>:
    605c:	04 12       	push	r4		;
    605e:	04 41       	mov	r1,	r4	;
    6060:	b0 12 c4 60 	call	#24772		;#0x60c4
    6064:	1c 42 30 01 	mov	&0x0130,r12	;0x0130
    6068:	3c f0 fe ff 	and	#65534,	r12	;#0xfffe
    606c:	82 4c 30 01 	mov	r12,	&0x0130	;
    6070:	b0 12 58 61 	call	#24920		;#0x6158
    6074:	34 41       	pop	r4		;
    6076:	30 41       	ret			

00006078 <acquire_sample>:
    6078:	04 12       	push	r4		;
    607a:	04 41       	mov	r1,	r4	;
    607c:	31 80 06 00 	sub	#6,	r1	;
    6080:	0c 4f       	mov	r15,	r12	;
    6082:	84 4f fe ff 	mov	r15,	-2(r4)	; 0xfffe
    6086:	1f 53       	inc	r15		;
    6088:	3f f0 03 00 	and	#3,	r15	;
    608c:	84 4f fc ff 	mov	r15,	-4(r4)	; 0xfffc
    6090:	84 4c fa ff 	mov	r12,	-6(r4)	; 0xfffa
    6094:	31 50 06 00 	add	#6,	r1	;
    6098:	34 41       	pop	r4		;
    609a:	30 41       	ret			

0000609c <msp_watchdog_enable>:
    609c:	04 12       	push	r4		;
    609e:	04 41       	mov	r1,	r4	;
    60a0:	21 83       	decd	r1		;
    60a2:	4c 4f       	mov.b	r15,	r12	;
    60a4:	c4 4c ff ff 	mov.b	r12,	-1(r4)	; 0xffff
    60a8:	5f 44 ff ff 	mov.b	-1(r4),	r15	;
    60ac:	3f d0 08 5a 	bis	#23048,	r15	;#0x5a08
    60b0:	82 4f 5c 01 	mov	r15,	&0x015c	;
    60b4:	5c 44 ff ff 	mov.b	-1(r4),	r12	;
    60b8:	c2 4c 20 1c 	mov.b	r12,	&0x1c20	;
    60bc:	21 53       	incd	r1		;
    60be:	34 41       	pop	r4		;
    60c0:	30 41       	ret			
	...

000060c4 <msp_watchdog_disable>:
    60c4:	04 12       	push	r4		;
    60c6:	04 41       	mov	r1,	r4	;
    60c8:	b2 40 80 5a 	mov	#23168,	&0x015c	;#0x5a80
    60cc:	5c 01 
    60ce:	34 41       	pop	r4		;
    60d0:	30 41       	ret			
	...

000060d4 <msp_watchdog_kick>:
    60d4:	04 12       	push	r4		;
    60d6:	04 41       	mov	r1,	r4	;
    60d8:	5c 42 20 1c 	mov.b	&0x1c20,r12	;0x1c20
    60dc:	3c d0 08 5a 	bis	#23048,	r12	;#0x5a08
    60e0:	82 4c 5c 01 	mov	r12,	&0x015c	;
    60e4:	34 41       	pop	r4		;
    60e6:	30 41       	ret			

000060e8 <memcpy>:
    60e8:	04 12       	push	r4		;
    60ea:	04 41       	mov	r1,	r4	;
    60ec:	0b 12       	push	r11		;
    60ee:	0a 12       	push	r10		;
    60f0:	31 80 0e 00 	sub	#14,	r1	;#0x000e
    60f4:	0c 4d       	mov	r13,	r12	;
    60f6:	0b 4e       	mov	r14,	r11	;
    60f8:	0a 4f       	mov	r15,	r10	;
    60fa:	84 4f fa ff 	mov	r15,	-6(r4)	; 0xfffa
    60fe:	84 4e f8 ff 	mov	r14,	-8(r4)	; 0xfff8
    6102:	84 4d f6 ff 	mov	r13,	-10(r4)	; 0xfff6
    6106:	84 43 f4 ff 	mov	#0,	-12(r4)	;r3 As==00, 0xfff4
    610a:	84 4c f2 ff 	mov	r12,	-14(r4)	; 0xfff2
    610e:	84 4b f0 ff 	mov	r11,	-16(r4)	; 0xfff0
    6112:	84 4a ee ff 	mov	r10,	-18(r4)	; 0xffee
    6116:	00 3c       	jmp	$+2      	;abs 0x6118
    6118:	1c 44 f4 ff 	mov	-12(r4),r12	;0xfffffff4
    611c:	1d 44 f6 ff 	mov	-10(r4),r13	;0xfffffff6
    6120:	0c 9d       	cmp	r13,	r12	;
    6122:	12 2c       	jc	$+38     	;abs 0x6148
    6124:	00 3c       	jmp	$+2      	;abs 0x6126
    6126:	1c 44 f8 ff 	mov	-8(r4),	r12	;
    612a:	1d 44 f4 ff 	mov	-12(r4),r13	;0xfffffff4
    612e:	0c 5d       	add	r13,	r12	;
    6130:	6e 4c       	mov.b	@r12,	r14	;
    6132:	1c 44 fa ff 	mov	-6(r4),	r12	;
    6136:	0c 5d       	add	r13,	r12	;
    6138:	cc 4e 00 00 	mov.b	r14,	0(r12)	;
    613c:	1c 44 f4 ff 	mov	-12(r4),r12	;0xfffffff4
    6140:	1c 53       	inc	r12		;
    6142:	84 4c f4 ff 	mov	r12,	-12(r4)	; 0xfff4
    6146:	e8 3f       	jmp	$-46     	;abs 0x6118
    6148:	1f 44 fa ff 	mov	-6(r4),	r15	;
    614c:	31 50 0e 00 	add	#14,	r1	;#0x000e
    6150:	3a 41       	pop	r10		;
    6152:	3b 41       	pop	r11		;
    6154:	34 41       	pop	r4		;
    6156:	30 41       	ret			

00006158 <msp_clock_setup>:
    6158:	04 12       	push	r4		;
    615a:	04 41       	mov	r1,	r4	;
    615c:	f2 40 a5 ff 	mov.b	#65445,	&0x0161	;#0xffa5
    6160:	61 01 
    6162:	b2 40 0c 00 	mov	#12,	&0x0162	;#0x000c
    6166:	62 01 
    6168:	b2 40 33 00 	mov	#51,	&0x0164	;#0x0033
    616c:	64 01 
    616e:	82 43 66 01 	mov	#0,	&0x0166	;r3 As==00
    6172:	34 41       	pop	r4		;
    6174:	30 41       	ret			
	...

00006178 <printf>:
    6178:	04 12       	push	r4		;
    617a:	04 41       	mov	r1,	r4	;
    617c:	31 80 20 00 	sub	#32,	r1	;#0x0020
    6180:	1c 44 04 00 	mov	4(r4),	r12	;
    6184:	84 4c fc ff 	mov	r12,	-4(r4)	; 0xfffc
    6188:	0c 44       	mov	r4,	r12	;
    618a:	3c 50 06 00 	add	#6,	r12	;
    618e:	84 4c ee ff 	mov	r12,	-18(r4)	; 0xffee
    6192:	00 3c       	jmp	$+2      	;abs 0x6194
    6194:	1c 44 fc ff 	mov	-4(r4),	r12	;
    6198:	0d 4c       	mov	r12,	r13	;
    619a:	1d 53       	inc	r13		;
    619c:	84 4d fc ff 	mov	r13,	-4(r4)	; 0xfffc
    61a0:	6e 4c       	mov.b	@r12,	r14	;
    61a2:	c4 4e fb ff 	mov.b	r14,	-5(r4)	; 0xfffb
    61a6:	4e 93       	cmp.b	#0,	r14	;r3 As==00
    61a8:	02 20       	jnz	$+6      	;abs 0x61ae
    61aa:	52 3d       	jmp	$+678    	;abs 0x6450
    61ac:	00 3c       	jmp	$+2      	;abs 0x61ae
    61ae:	5c 44 fb ff 	mov.b	-5(r4),	r12	;
    61b2:	7c 90 25 00 	cmp.b	#37,	r12	;#0x0025
    61b6:	02 24       	jz	$+6      	;abs 0x61bc
    61b8:	40 3d       	jmp	$+642    	;abs 0x643a
    61ba:	00 3c       	jmp	$+2      	;abs 0x61bc
    61bc:	84 43 f2 ff 	mov	#0,	-14(r4)	;r3 As==00, 0xfff2
    61c0:	00 3c       	jmp	$+2      	;abs 0x61c2
    61c2:	1c 44 fc ff 	mov	-4(r4),	r12	;
    61c6:	0d 4c       	mov	r12,	r13	;
    61c8:	1d 53       	inc	r13		;
    61ca:	84 4d fc ff 	mov	r13,	-4(r4)	; 0xfffc
    61ce:	6c 4c       	mov.b	@r12,	r12	;
    61d0:	8c 11       	sxt	r12		;
    61d2:	4e 4c       	mov.b	r12,	r14	;
    61d4:	c4 4e fb ff 	mov.b	r14,	-5(r4)	; 0xfffb
    61d8:	0c 93       	cmp	#0,	r12	;r3 As==00
    61da:	84 4c ec ff 	mov	r12,	-20(r4)	; 0xffec
    61de:	02 20       	jnz	$+6      	;abs 0x61e4
    61e0:	27 3d       	jmp	$+592    	;abs 0x6430
    61e2:	00 3c       	jmp	$+2      	;abs 0x61e4
    61e4:	1c 44 ec ff 	mov	-20(r4),r12	;0xffffffec
    61e8:	3c 90 30 00 	cmp	#48,	r12	;#0x0030
    61ec:	02 20       	jnz	$+6      	;abs 0x61f2
    61ee:	0f 3d       	jmp	$+544    	;abs 0x640e
    61f0:	00 3c       	jmp	$+2      	;abs 0x61f2
    61f2:	1c 44 ec ff 	mov	-20(r4),r12	;0xffffffec
    61f6:	3c 90 63 00 	cmp	#99,	r12	;#0x0063
    61fa:	34 24       	jz	$+106    	;abs 0x6264
    61fc:	00 3c       	jmp	$+2      	;abs 0x61fe
    61fe:	1c 44 ec ff 	mov	-20(r4),r12	;0xffffffec
    6202:	3c 90 69 00 	cmp	#105,	r12	;#0x0069
    6206:	3d 24       	jz	$+124    	;abs 0x6282
    6208:	00 3c       	jmp	$+2      	;abs 0x620a
    620a:	1c 44 ec ff 	mov	-20(r4),r12	;0xffffffec
    620e:	3c 90 6c 00 	cmp	#108,	r12	;#0x006c
    6212:	66 24       	jz	$+206    	;abs 0x62e0
    6214:	00 3c       	jmp	$+2      	;abs 0x6216
    6216:	1c 44 ec ff 	mov	-20(r4),r12	;0xffffffec
    621a:	3c 90 6e 00 	cmp	#110,	r12	;#0x006e
    621e:	60 24       	jz	$+194    	;abs 0x62e0
    6220:	00 3c       	jmp	$+2      	;abs 0x6222
    6222:	1c 44 ec ff 	mov	-20(r4),r12	;0xffffffec
    6226:	3c 90 73 00 	cmp	#115,	r12	;#0x0073
    622a:	0d 24       	jz	$+28     	;abs 0x6246
    622c:	00 3c       	jmp	$+2      	;abs 0x622e
    622e:	1c 44 ec ff 	mov	-20(r4),r12	;0xffffffec
    6232:	3c 90 75 00 	cmp	#117,	r12	;#0x0075
    6236:	25 24       	jz	$+76     	;abs 0x6282
    6238:	00 3c       	jmp	$+2      	;abs 0x623a
    623a:	1c 44 ec ff 	mov	-20(r4),r12	;0xffffffec
    623e:	3c 90 78 00 	cmp	#120,	r12	;#0x0078
    6242:	8a 24       	jz	$+278    	;abs 0x6358
    6244:	f8 3c       	jmp	$+498    	;abs 0x6436
    6246:	1c 44 ee ff 	mov	-18(r4),r12	;0xffffffee
    624a:	1c 53       	inc	r12		;
    624c:	3c f0 fe ff 	and	#65534,	r12	;#0xfffe
    6250:	0d 4c       	mov	r12,	r13	;
    6252:	2d 53       	incd	r13		;
    6254:	84 4d ee ff 	mov	r13,	-18(r4)	; 0xffee
    6258:	2f 4c       	mov	@r12,	r15	;
    625a:	b0 12 1c 66 	call	#26140		;#0x661c
    625e:	84 4f ea ff 	mov	r15,	-22(r4)	; 0xffea
    6262:	ea 3c       	jmp	$+470    	;abs 0x6438
    6264:	1c 44 ee ff 	mov	-18(r4),r12	;0xffffffee
    6268:	1c 53       	inc	r12		;
    626a:	3c f0 fe ff 	and	#65534,	r12	;#0xfffe
    626e:	0d 4c       	mov	r12,	r13	;
    6270:	2d 53       	incd	r13		;
    6272:	84 4d ee ff 	mov	r13,	-18(r4)	; 0xffee
    6276:	2f 4c       	mov	@r12,	r15	;
    6278:	b0 12 e8 65 	call	#26088		;#0x65e8
    627c:	84 4f e8 ff 	mov	r15,	-24(r4)	; 0xffe8
    6280:	db 3c       	jmp	$+440    	;abs 0x6438
    6282:	1c 44 ee ff 	mov	-18(r4),r12	;0xffffffee
    6286:	1c 53       	inc	r12		;
    6288:	3c f0 fe ff 	and	#65534,	r12	;#0xfffe
    628c:	0d 4c       	mov	r12,	r13	;
    628e:	2d 53       	incd	r13		;
    6290:	84 4d ee ff 	mov	r13,	-18(r4)	; 0xffee
    6294:	2c 4c       	mov	@r12,	r12	;
    6296:	84 4c f8 ff 	mov	r12,	-8(r4)	; 0xfff8
    629a:	5e 44 fb ff 	mov.b	-5(r4),	r14	;
    629e:	7e 90 69 00 	cmp.b	#105,	r14	;#0x0069
    62a2:	13 20       	jnz	$+40     	;abs 0x62ca
    62a4:	00 3c       	jmp	$+2      	;abs 0x62a6
    62a6:	1c 44 f8 ff 	mov	-8(r4),	r12	;
    62aa:	0c 93       	cmp	#0,	r12	;r3 As==00
    62ac:	0e 34       	jge	$+30     	;abs 0x62ca
    62ae:	00 3c       	jmp	$+2      	;abs 0x62b0
    62b0:	1c 44 f8 ff 	mov	-8(r4),	r12	;
    62b4:	0d 43       	clr	r13		;
    62b6:	0d 8c       	sub	r12,	r13	;
    62b8:	84 4d f8 ff 	mov	r13,	-8(r4)	; 0xfff8
    62bc:	3f 40 2d 00 	mov	#45,	r15	;#0x002d
    62c0:	b0 12 e8 65 	call	#26088		;#0x65e8
    62c4:	84 4f e6 ff 	mov	r15,	-26(r4)	; 0xffe6
    62c8:	00 3c       	jmp	$+2      	;abs 0x62ca
    62ca:	1e 44 f8 ff 	mov	-8(r4),	r14	;
    62ce:	3c 40 14 00 	mov	#20,	r12	;#0x0014
    62d2:	3c 50 a6 44 	add	#17574,	r12	;#0x44a6
    62d6:	0f 43       	clr	r15		;
    62d8:	0d 4c       	mov	r12,	r13	;
    62da:	b0 12 64 64 	call	#25700		;#0x6464
    62de:	ac 3c       	jmp	$+346    	;abs 0x6438
    62e0:	1c 44 ee ff 	mov	-18(r4),r12	;0xffffffee
    62e4:	1c 53       	inc	r12		;
    62e6:	3c f0 fe ff 	and	#65534,	r12	;#0xfffe
    62ea:	0d 4c       	mov	r12,	r13	;
    62ec:	2d 53       	incd	r13		;
    62ee:	84 4d ee ff 	mov	r13,	-18(r4)	; 0xffee
    62f2:	2c 4c       	mov	@r12,	r12	;
    62f4:	1d 44 ee ff 	mov	-18(r4),r13	;0xffffffee
    62f8:	0e 4d       	mov	r13,	r14	;
    62fa:	2e 53       	incd	r14		;
    62fc:	84 4e ee ff 	mov	r14,	-18(r4)	; 0xffee
    6300:	2d 4d       	mov	@r13,	r13	;
    6302:	84 4d f6 ff 	mov	r13,	-10(r4)	; 0xfff6
    6306:	84 4c f4 ff 	mov	r12,	-12(r4)	; 0xfff4
    630a:	5f 44 fb ff 	mov.b	-5(r4),	r15	;
    630e:	7f 90 6c 00 	cmp.b	#108,	r15	;#0x006c
    6312:	19 20       	jnz	$+52     	;abs 0x6346
    6314:	00 3c       	jmp	$+2      	;abs 0x6316
    6316:	1c 44 f6 ff 	mov	-10(r4),r12	;0xfffffff6
    631a:	0c 93       	cmp	#0,	r12	;r3 As==00
    631c:	14 34       	jge	$+42     	;abs 0x6346
    631e:	00 3c       	jmp	$+2      	;abs 0x6320
    6320:	1c 44 f4 ff 	mov	-12(r4),r12	;0xfffffff4
    6324:	1d 44 f6 ff 	mov	-10(r4),r13	;0xfffffff6
    6328:	0e 43       	clr	r14		;
    632a:	0f 4e       	mov	r14,	r15	;
    632c:	0f 8c       	sub	r12,	r15	;
    632e:	0e 7d       	subc	r13,	r14	;
    6330:	84 4e f6 ff 	mov	r14,	-10(r4)	; 0xfff6
    6334:	84 4f f4 ff 	mov	r15,	-12(r4)	; 0xfff4
    6338:	3f 40 2d 00 	mov	#45,	r15	;#0x002d
    633c:	b0 12 e8 65 	call	#26088		;#0x65e8
    6340:	84 4f e4 ff 	mov	r15,	-28(r4)	; 0xffe4
    6344:	00 3c       	jmp	$+2      	;abs 0x6346
    6346:	1f 44 f6 ff 	mov	-10(r4),r15	;0xfffffff6
    634a:	1e 44 f4 ff 	mov	-12(r4),r14	;0xfffffff4
    634e:	3d 40 a6 44 	mov	#17574,	r13	;#0x44a6
    6352:	b0 12 64 64 	call	#25700		;#0x6464
    6356:	70 3c       	jmp	$+226    	;abs 0x6438
    6358:	1c 44 ee ff 	mov	-18(r4),r12	;0xffffffee
    635c:	1c 53       	inc	r12		;
    635e:	3c f0 fe ff 	and	#65534,	r12	;#0xfffe
    6362:	0d 4c       	mov	r12,	r13	;
    6364:	2d 53       	incd	r13		;
    6366:	84 4d ee ff 	mov	r13,	-18(r4)	; 0xffee
    636a:	2c 4c       	mov	@r12,	r12	;
    636c:	84 4c f8 ff 	mov	r12,	-8(r4)	; 0xfff8
    6370:	0c 11       	rra	r12		;
    6372:	0c 11       	rra	r12		;
    6374:	0c 11       	rra	r12		;
    6376:	0c 11       	rra	r12		;
    6378:	0c 11       	rra	r12		;
    637a:	0c 11       	rra	r12		;
    637c:	0c 11       	rra	r12		;
    637e:	0c 11       	rra	r12		;
    6380:	0c 11       	rra	r12		;
    6382:	0c 11       	rra	r12		;
    6384:	0c 11       	rra	r12		;
    6386:	0c 11       	rra	r12		;
    6388:	84 4c f0 ff 	mov	r12,	-16(r4)	; 0xfff0
    638c:	0c 93       	cmp	#0,	r12	;r3 As==00
    638e:	06 20       	jnz	$+14     	;abs 0x639c
    6390:	00 3c       	jmp	$+2      	;abs 0x6392
    6392:	1c 44 f2 ff 	mov	-14(r4),r12	;0xfffffff2
    6396:	2c 92       	cmp	#4,	r12	;r2 As==10
    6398:	06 38       	jl	$+14     	;abs 0x63a6
    639a:	00 3c       	jmp	$+2      	;abs 0x639c
    639c:	1f 44 f0 ff 	mov	-16(r4),r15	;0xfffffff0
    63a0:	b0 12 b0 65 	call	#26032		;#0x65b0
    63a4:	00 3c       	jmp	$+2      	;abs 0x63a6
    63a6:	1c 44 f8 ff 	mov	-8(r4),	r12	;
    63aa:	0c 11       	rra	r12		;
    63ac:	0c 11       	rra	r12		;
    63ae:	0c 11       	rra	r12		;
    63b0:	0c 11       	rra	r12		;
    63b2:	0c 11       	rra	r12		;
    63b4:	0c 11       	rra	r12		;
    63b6:	0c 11       	rra	r12		;
    63b8:	0c 11       	rra	r12		;
    63ba:	84 4c f0 ff 	mov	r12,	-16(r4)	; 0xfff0
    63be:	0c 93       	cmp	#0,	r12	;r3 As==00
    63c0:	07 20       	jnz	$+16     	;abs 0x63d0
    63c2:	00 3c       	jmp	$+2      	;abs 0x63c4
    63c4:	1c 44 f2 ff 	mov	-14(r4),r12	;0xfffffff2
    63c8:	3c 90 03 00 	cmp	#3,	r12	;
    63cc:	06 38       	jl	$+14     	;abs 0x63da
    63ce:	00 3c       	jmp	$+2      	;abs 0x63d0
    63d0:	1f 44 f0 ff 	mov	-16(r4),r15	;0xfffffff0
    63d4:	b0 12 b0 65 	call	#26032		;#0x65b0
    63d8:	00 3c       	jmp	$+2      	;abs 0x63da
    63da:	1c 44 f8 ff 	mov	-8(r4),	r12	;
    63de:	0c 11       	rra	r12		;
    63e0:	0c 11       	rra	r12		;
    63e2:	0c 11       	rra	r12		;
    63e4:	0c 11       	rra	r12		;
    63e6:	84 4c f0 ff 	mov	r12,	-16(r4)	; 0xfff0
    63ea:	0c 93       	cmp	#0,	r12	;r3 As==00
    63ec:	06 20       	jnz	$+14     	;abs 0x63fa
    63ee:	00 3c       	jmp	$+2      	;abs 0x63f0
    63f0:	1c 44 f2 ff 	mov	-14(r4),r12	;0xfffffff2
    63f4:	2c 93       	cmp	#2,	r12	;r3 As==10
    63f6:	06 38       	jl	$+14     	;abs 0x6404
    63f8:	00 3c       	jmp	$+2      	;abs 0x63fa
    63fa:	1f 44 f0 ff 	mov	-16(r4),r15	;0xfffffff0
    63fe:	b0 12 b0 65 	call	#26032		;#0x65b0
    6402:	00 3c       	jmp	$+2      	;abs 0x6404
    6404:	1f 44 f8 ff 	mov	-8(r4),	r15	;
    6408:	b0 12 b0 65 	call	#26032		;#0x65b0
    640c:	15 3c       	jmp	$+44     	;abs 0x6438
    640e:	1c 44 fc ff 	mov	-4(r4),	r12	;
    6412:	0d 4c       	mov	r12,	r13	;
    6414:	1d 53       	inc	r13		;
    6416:	84 4d fc ff 	mov	r13,	-4(r4)	; 0xfffc
    641a:	6e 4c       	mov.b	@r12,	r14	;
    641c:	c4 4e fb ff 	mov.b	r14,	-5(r4)	; 0xfffb
    6420:	5c 44 fb ff 	mov.b	-5(r4),	r12	;
    6424:	8c 11       	sxt	r12		;
    6426:	3c 50 d0 ff 	add	#65488,	r12	;#0xffd0
    642a:	84 4c f2 ff 	mov	r12,	-14(r4)	; 0xfff2
    642e:	c9 3e       	jmp	$-620    	;abs 0x61c2
    6430:	84 43 fe ff 	mov	#0,	-2(r4)	;r3 As==00, 0xfffe
    6434:	10 3c       	jmp	$+34     	;abs 0x6456
    6436:	02 3c       	jmp	$+6      	;abs 0x643c
    6438:	0a 3c       	jmp	$+22     	;abs 0x644e
    643a:	00 3c       	jmp	$+2      	;abs 0x643c
    643c:	5c 44 fb ff 	mov.b	-5(r4),	r12	;
    6440:	8c 11       	sxt	r12		;
    6442:	0f 4c       	mov	r12,	r15	;
    6444:	b0 12 e8 65 	call	#26088		;#0x65e8
    6448:	84 4f e2 ff 	mov	r15,	-30(r4)	; 0xffe2
    644c:	00 3c       	jmp	$+2      	;abs 0x644e
    644e:	a2 3e       	jmp	$-698    	;abs 0x6194
    6450:	84 43 fe ff 	mov	#0,	-2(r4)	;r3 As==00, 0xfffe
    6454:	00 3c       	jmp	$+2      	;abs 0x6456
    6456:	1f 44 fe ff 	mov	-2(r4),	r15	;
    645a:	31 50 20 00 	add	#32,	r1	;#0x0020
    645e:	34 41       	pop	r4		;
    6460:	30 41       	ret			
	...

00006464 <xtoa>:
    6464:	04 12       	push	r4		;
    6466:	04 41       	mov	r1,	r4	;
    6468:	0b 12       	push	r11		;
    646a:	0a 12       	push	r10		;
    646c:	09 12       	push	r9		;
    646e:	31 80 22 00 	sub	#34,	r1	;#0x0022
    6472:	0c 4f       	mov	r15,	r12	;
    6474:	0b 4e       	mov	r14,	r11	;
    6476:	0a 4d       	mov	r13,	r10	;
    6478:	84 4f f6 ff 	mov	r15,	-10(r4)	; 0xfff6
    647c:	84 4e f4 ff 	mov	r14,	-12(r4)	; 0xfff4
    6480:	84 4d f2 ff 	mov	r13,	-14(r4)	; 0xfff2
    6484:	1d 44 f6 ff 	mov	-10(r4),r13	;0xfffffff6
    6488:	1e 44 f4 ff 	mov	-12(r4),r14	;0xfffffff4
    648c:	0e dd       	bis	r13,	r14	;
    648e:	0e 93       	cmp	#0,	r14	;r3 As==00
    6490:	84 4c ea ff 	mov	r12,	-22(r4)	; 0xffea
    6494:	84 4a e8 ff 	mov	r10,	-24(r4)	; 0xffe8
    6498:	84 4b e6 ff 	mov	r11,	-26(r4)	; 0xffe6
    649c:	7a 24       	jz	$+246    	;abs 0x6592
    649e:	00 3c       	jmp	$+2      	;abs 0x64a0
    64a0:	00 3c       	jmp	$+2      	;abs 0x64a2
    64a2:	1c 44 f4 ff 	mov	-12(r4),r12	;0xfffffff4
    64a6:	1d 44 f6 ff 	mov	-10(r4),r13	;0xfffffff6
    64aa:	1e 44 f2 ff 	mov	-14(r4),r14	;0xfffffff2
    64ae:	2f 4e       	mov	@r14,	r15	;
    64b0:	1e 4e 02 00 	mov	2(r14),	r14	;
    64b4:	0d 9e       	cmp	r14,	r13	;
    64b6:	0b 42       	mov	r2,	r11	;
    64b8:	1b f3       	and	#1,	r11	;r3 As==01
    64ba:	0c 9f       	cmp	r15,	r12	;
    64bc:	0c 42       	mov	r2,	r12	;
    64be:	1c f3       	and	#1,	r12	;r3 As==01
    64c0:	0d 9e       	cmp	r14,	r13	;
    64c2:	84 4b e4 ff 	mov	r11,	-28(r4)	; 0xffe4
    64c6:	84 4c e2 ff 	mov	r12,	-30(r4)	; 0xffe2
    64ca:	04 24       	jz	$+10     	;abs 0x64d4
    64cc:	1c 44 e4 ff 	mov	-28(r4),r12	;0xffffffe4
    64d0:	84 4c e2 ff 	mov	r12,	-30(r4)	; 0xffe2
    64d4:	1c 44 e2 ff 	mov	-30(r4),r12	;0xffffffe2
    64d8:	1c b3       	bit	#1,	r12	;r3 As==01
    64da:	07 20       	jnz	$+16     	;abs 0x64ea
    64dc:	00 3c       	jmp	$+2      	;abs 0x64de
    64de:	1c 44 f2 ff 	mov	-14(r4),r12	;0xfffffff2
    64e2:	2c 52       	add	#4,	r12	;r2 As==10
    64e4:	84 4c f2 ff 	mov	r12,	-14(r4)	; 0xfff2
    64e8:	dc 3f       	jmp	$-70     	;abs 0x64a2
    64ea:	00 3c       	jmp	$+2      	;abs 0x64ec
    64ec:	1c 44 f2 ff 	mov	-14(r4),r12	;0xfffffff2
    64f0:	0d 4c       	mov	r12,	r13	;
    64f2:	2d 52       	add	#4,	r13	;r2 As==10
    64f4:	84 4d f2 ff 	mov	r13,	-14(r4)	; 0xfff2
    64f8:	2d 4c       	mov	@r12,	r13	;
    64fa:	1c 4c 02 00 	mov	2(r12),	r12	;
    64fe:	84 4c ee ff 	mov	r12,	-18(r4)	; 0xffee
    6502:	84 4d ec ff 	mov	r13,	-20(r4)	; 0xffec
    6506:	f4 40 30 00 	mov.b	#48,	-15(r4)	;#0x0030, 0xfff1
    650a:	f1 ff 
    650c:	00 3c       	jmp	$+2      	;abs 0x650e
    650e:	1c 44 f4 ff 	mov	-12(r4),r12	;0xfffffff4
    6512:	1d 44 f6 ff 	mov	-10(r4),r13	;0xfffffff6
    6516:	1e 44 ec ff 	mov	-20(r4),r14	;0xffffffec
    651a:	1f 44 ee ff 	mov	-18(r4),r15	;0xffffffee
    651e:	0d 9f       	cmp	r15,	r13	;
    6520:	0b 42       	mov	r2,	r11	;
    6522:	1a 43       	mov	#1,	r10	;r3 As==01
    6524:	09 4a       	mov	r10,	r9	;
    6526:	09 cb       	bic	r11,	r9	;
    6528:	0c 9e       	cmp	r14,	r12	;
    652a:	0c 42       	mov	r2,	r12	;
    652c:	0a cc       	bic	r12,	r10	;
    652e:	0d 9f       	cmp	r15,	r13	;
    6530:	84 49 e0 ff 	mov	r9,	-32(r4)	; 0xffe0
    6534:	84 4a de ff 	mov	r10,	-34(r4)	; 0xffde
    6538:	04 24       	jz	$+10     	;abs 0x6542
    653a:	1c 44 e0 ff 	mov	-32(r4),r12	;0xffffffe0
    653e:	84 4c de ff 	mov	r12,	-34(r4)	; 0xffde
    6542:	1c 44 de ff 	mov	-34(r4),r12	;0xffffffde
    6546:	1c b3       	bit	#1,	r12	;r3 As==01
    6548:	15 20       	jnz	$+44     	;abs 0x6574
    654a:	00 3c       	jmp	$+2      	;abs 0x654c
    654c:	5c 44 f1 ff 	mov.b	-15(r4),r12	;0xfffffff1
    6550:	5c 53       	inc.b	r12		;
    6552:	c4 4c f1 ff 	mov.b	r12,	-15(r4)	; 0xfff1
    6556:	1d 44 ec ff 	mov	-20(r4),r13	;0xffffffec
    655a:	1e 44 ee ff 	mov	-18(r4),r14	;0xffffffee
    655e:	1f 44 f4 ff 	mov	-12(r4),r15	;0xfffffff4
    6562:	1b 44 f6 ff 	mov	-10(r4),r11	;0xfffffff6
    6566:	0f 8d       	sub	r13,	r15	;
    6568:	0b 7e       	subc	r14,	r11	;
    656a:	84 4b f6 ff 	mov	r11,	-10(r4)	; 0xfff6
    656e:	84 4f f4 ff 	mov	r15,	-12(r4)	; 0xfff4
    6572:	cd 3f       	jmp	$-100    	;abs 0x650e
    6574:	5c 44 f1 ff 	mov.b	-15(r4),r12	;0xfffffff1
    6578:	8c 11       	sxt	r12		;
    657a:	0f 4c       	mov	r12,	r15	;
    657c:	b0 12 e8 65 	call	#26088		;#0x65e8
    6580:	84 4f dc ff 	mov	r15,	-36(r4)	; 0xffdc
    6584:	00 3c       	jmp	$+2      	;abs 0x6586
    6586:	5c 44 ec ff 	mov.b	-20(r4),r12	;0xffffffec
    658a:	5c b3       	bit.b	#1,	r12	;r3 As==01
    658c:	af 27       	jz	$-160    	;abs 0x64ec
    658e:	00 3c       	jmp	$+2      	;abs 0x6590
    6590:	07 3c       	jmp	$+16     	;abs 0x65a0
    6592:	3f 40 30 00 	mov	#48,	r15	;#0x0030
    6596:	b0 12 e8 65 	call	#26088		;#0x65e8
    659a:	84 4f da ff 	mov	r15,	-38(r4)	; 0xffda
    659e:	00 3c       	jmp	$+2      	;abs 0x65a0
    65a0:	31 50 22 00 	add	#34,	r1	;#0x0022
    65a4:	39 41       	pop	r9		;
    65a6:	3a 41       	pop	r10		;
    65a8:	3b 41       	pop	r11		;
    65aa:	34 41       	pop	r4		;
    65ac:	30 41       	ret			
	...

000065b0 <puth>:
    65b0:	04 12       	push	r4		;
    65b2:	04 41       	mov	r1,	r4	;
    65b4:	31 80 06 00 	sub	#6,	r1	;
    65b8:	0c 4f       	mov	r15,	r12	;
    65ba:	84 4f fe ff 	mov	r15,	-2(r4)	; 0xfffe
    65be:	3f f0 0f 00 	and	#15,	r15	;#0x000f
    65c2:	5f 4f ce 44 	mov.b	17614(r15),r15	;0x044ce
    65c6:	8f 11       	sxt	r15		;
    65c8:	84 4c fc ff 	mov	r12,	-4(r4)	; 0xfffc
    65cc:	b0 12 e8 65 	call	#26088		;#0x65e8
    65d0:	84 4f fa ff 	mov	r15,	-6(r4)	; 0xfffa
    65d4:	31 50 06 00 	add	#6,	r1	;
    65d8:	34 41       	pop	r4		;
    65da:	30 41       	ret			

000065dc <mspconsole_init>:
    65dc:	04 12       	push	r4		;
    65de:	04 41       	mov	r1,	r4	;
    65e0:	b0 12 ba 6a 	call	#27322		;#0x6aba
    65e4:	34 41       	pop	r4		;
    65e6:	30 41       	ret			

000065e8 <io_putchar>:
    65e8:	04 12       	push	r4		;
    65ea:	04 41       	mov	r1,	r4	;
    65ec:	31 80 06 00 	sub	#6,	r1	;
    65f0:	0c 4f       	mov	r15,	r12	;
    65f2:	84 4f fe ff 	mov	r15,	-2(r4)	; 0xfffe
    65f6:	5d 44 fe ff 	mov.b	-2(r4),	r13	;
    65fa:	c4 4d fd ff 	mov.b	r13,	-3(r4)	; 0xfffd
    65fe:	0f 44       	mov	r4,	r15	;
    6600:	3f 80 03 00 	sub	#3,	r15	;
    6604:	1e 43       	mov	#1,	r14	;r3 As==01
    6606:	84 4c fa ff 	mov	r12,	-6(r4)	; 0xfffa
    660a:	b0 12 46 6b 	call	#27462		;#0x6b46
    660e:	1f 44 fe ff 	mov	-2(r4),	r15	;
    6612:	31 50 06 00 	add	#6,	r1	;
    6616:	34 41       	pop	r4		;
    6618:	30 41       	ret			
	...

0000661c <io_puts_no_newline>:
    661c:	04 12       	push	r4		;
    661e:	04 41       	mov	r1,	r4	;
    6620:	31 82       	sub	#8,	r1	;r2 As==11
    6622:	0c 4f       	mov	r15,	r12	;
    6624:	84 4f fe ff 	mov	r15,	-2(r4)	; 0xfffe
    6628:	84 43 fc ff 	mov	#0,	-4(r4)	;r3 As==00, 0xfffc
    662c:	1f 44 fe ff 	mov	-2(r4),	r15	;
    6630:	84 4f fa ff 	mov	r15,	-6(r4)	; 0xfffa
    6634:	84 4c f8 ff 	mov	r12,	-8(r4)	; 0xfff8
    6638:	00 3c       	jmp	$+2      	;abs 0x663a
    663a:	1c 44 fa ff 	mov	-6(r4),	r12	;
    663e:	0d 4c       	mov	r12,	r13	;
    6640:	1d 53       	inc	r13		;
    6642:	84 4d fa ff 	mov	r13,	-6(r4)	; 0xfffa
    6646:	6e 4c       	mov.b	@r12,	r14	;
    6648:	4e 93       	cmp.b	#0,	r14	;r3 As==00
    664a:	07 24       	jz	$+16     	;abs 0x665a
    664c:	00 3c       	jmp	$+2      	;abs 0x664e
    664e:	1c 44 fc ff 	mov	-4(r4),	r12	;
    6652:	1c 53       	inc	r12		;
    6654:	84 4c fc ff 	mov	r12,	-4(r4)	; 0xfffc
    6658:	f0 3f       	jmp	$-30     	;abs 0x663a
    665a:	1f 44 fe ff 	mov	-2(r4),	r15	;
    665e:	1e 44 fc ff 	mov	-4(r4),	r14	;
    6662:	b0 12 46 6b 	call	#27462		;#0x6b46
    6666:	1f 44 fc ff 	mov	-4(r4),	r15	;
    666a:	31 52       	add	#8,	r1	;r2 As==11
    666c:	34 41       	pop	r4		;
    666e:	30 41       	ret			

00006670 <io_puts>:
    6670:	04 12       	push	r4		;
    6672:	04 41       	mov	r1,	r4	;
    6674:	31 82       	sub	#8,	r1	;r2 As==11
    6676:	0c 4f       	mov	r15,	r12	;
    6678:	84 4f fe ff 	mov	r15,	-2(r4)	; 0xfffe
    667c:	84 4c fa ff 	mov	r12,	-6(r4)	; 0xfffa
    6680:	b0 12 1c 66 	call	#26140		;#0x661c
    6684:	84 4f fc ff 	mov	r15,	-4(r4)	; 0xfffc
    6688:	3f 40 0a 00 	mov	#10,	r15	;#0x000a
    668c:	b0 12 e8 65 	call	#26088		;#0x65e8
    6690:	1c 44 fc ff 	mov	-4(r4),	r12	;
    6694:	84 4f f8 ff 	mov	r15,	-8(r4)	; 0xfff8
    6698:	0f 4c       	mov	r12,	r15	;
    669a:	31 52       	add	#8,	r1	;r2 As==11
    669c:	34 41       	pop	r4		;
    669e:	30 41       	ret			

000066a0 <task_prologue>:
    66a0:	04 12       	push	r4		;
    66a2:	04 41       	mov	r1,	r4	;
    66a4:	31 80 06 00 	sub	#6,	r1	;
    66a8:	1c 42 d4 54 	mov	&0x54d4,r12	;0x54d4
    66ac:	1c 4c 04 00 	mov	4(r12),	r12	;
    66b0:	2c 4c       	mov	@r12,	r12	;
    66b2:	84 4c fe ff 	mov	r12,	-2(r4)	; 0xfffe
    66b6:	1c 42 d4 54 	mov	&0x54d4,r12	;0x54d4
    66ba:	1c 4c 02 00 	mov	2(r12),	r12	;
    66be:	1d 44 fe ff 	mov	-2(r4),	r13	;
    66c2:	1d 4d 08 00 	mov	8(r13),	r13	;
    66c6:	0c 9d       	cmp	r13,	r12	;
    66c8:	3a 24       	jz	$+118    	;abs 0x673e
    66ca:	00 3c       	jmp	$+2      	;abs 0x66cc
    66cc:	00 3c       	jmp	$+2      	;abs 0x66ce
    66ce:	1c 42 b6 54 	mov	&0x54b6,r12	;0x54b6
    66d2:	1d 42 b8 54 	mov	&0x54b8,r13	;0x54b8
    66d6:	0c 9d       	cmp	r13,	r12	;
    66d8:	25 2c       	jc	$+76     	;abs 0x6724
    66da:	00 3c       	jmp	$+2      	;abs 0x66dc
    66dc:	1c 42 b6 54 	mov	&0x54b6,r12	;0x54b6
    66e0:	0c 5c       	rla	r12		;
    66e2:	1c 4c d8 54 	mov	21720(r12),r12	;0x054d8
    66e6:	84 4c fc ff 	mov	r12,	-4(r4)	; 0xfffc
    66ea:	0c 93       	cmp	#0,	r12	;r3 As==00
    66ec:	15 24       	jz	$+44     	;abs 0x6718
    66ee:	00 3c       	jmp	$+2      	;abs 0x66f0
    66f0:	1c 42 b6 54 	mov	&0x54b6,r12	;0x54b6
    66f4:	0c 5c       	rla	r12		;
    66f6:	1c 4c 1a 55 	mov	21786(r12),r12	;0x0551a
    66fa:	84 4c fa ff 	mov	r12,	-6(r4)	; 0xfffa
    66fe:	1f 44 fc ff 	mov	-4(r4),	r15	;
    6702:	1c 42 b6 54 	mov	&0x54b6,r12	;0x54b6
    6706:	0c 5c       	rla	r12		;
    6708:	3c 50 5c 55 	add	#21852,	r12	;#0x555c
    670c:	1d 44 fa ff 	mov	-6(r4),	r13	;
    6710:	0e 4c       	mov	r12,	r14	;
    6712:	b0 12 e8 60 	call	#24808		;#0x60e8
    6716:	00 3c       	jmp	$+2      	;abs 0x6718
    6718:	1c 42 b6 54 	mov	&0x54b6,r12	;0x54b6
    671c:	1c 53       	inc	r12		;
    671e:	82 4c b6 54 	mov	r12,	&0x54b6	;
    6722:	d5 3f       	jmp	$-84     	;abs 0x66ce
    6724:	82 43 b8 54 	mov	#0,	&0x54b8	;r3 As==00
    6728:	82 43 b6 54 	mov	#0,	&0x54b6	;r3 As==00
    672c:	1c 42 d4 54 	mov	&0x54d4,r12	;0x54d4
    6730:	1c 4c 02 00 	mov	2(r12),	r12	;
    6734:	1d 44 fe ff 	mov	-2(r4),	r13	;
    6738:	8d 4c 08 00 	mov	r12,	8(r13)	;
    673c:	03 3c       	jmp	$+8      	;abs 0x6744
    673e:	82 43 b8 54 	mov	#0,	&0x54b8	;r3 As==00
    6742:	00 3c       	jmp	$+2      	;abs 0x6744
    6744:	31 50 06 00 	add	#6,	r1	;
    6748:	34 41       	pop	r4		;
    674a:	30 41       	ret			

0000674c <transition_to>:
    674c:	04 12       	push	r4		;
    674e:	04 41       	mov	r1,	r4	;
    6750:	31 80 0a 00 	sub	#10,	r1	;#0x000a
    6754:	0c 4f       	mov	r15,	r12	;
    6756:	84 4f fe ff 	mov	r15,	-2(r4)	; 0xfffe
    675a:	1f 42 d4 54 	mov	&0x54d4,r15	;0x54d4
    675e:	3d 40 ce 54 	mov	#21710,	r13	;#0x54ce
    6762:	3e 40 c2 54 	mov	#21698,	r14	;#0x54c2
    6766:	0f 9d       	cmp	r13,	r15	;
    6768:	84 4c fa ff 	mov	r12,	-6(r4)	; 0xfffa
    676c:	84 4d f8 ff 	mov	r13,	-8(r4)	; 0xfff8
    6770:	84 4e f6 ff 	mov	r14,	-10(r4)	; 0xfff6
    6774:	04 24       	jz	$+10     	;abs 0x677e
    6776:	1c 44 f8 ff 	mov	-8(r4),	r12	;
    677a:	84 4c f6 ff 	mov	r12,	-10(r4)	; 0xfff6
    677e:	1c 44 f6 ff 	mov	-10(r4),r12	;0xfffffff6
    6782:	84 4c fc ff 	mov	r12,	-4(r4)	; 0xfffc
    6786:	1d 44 fe ff 	mov	-2(r4),	r13	;
    678a:	8c 4d 00 00 	mov	r13,	0(r12)	;
    678e:	1c 42 d4 54 	mov	&0x54d4,r12	;0x54d4
    6792:	1c 4c 02 00 	mov	2(r12),	r12	;
    6796:	1c 53       	inc	r12		;
    6798:	1d 44 fc ff 	mov	-4(r4),	r13	;
    679c:	8d 4c 02 00 	mov	r12,	2(r13)	;
    67a0:	1c 42 d4 54 	mov	&0x54d4,r12	;0x54d4
    67a4:	1c 4c 02 00 	mov	2(r12),	r12	;
    67a8:	1d 44 fc ff 	mov	-4(r4),	r13	;
    67ac:	1d 4d 04 00 	mov	4(r13),	r13	;
    67b0:	8d 4c 02 00 	mov	r12,	2(r13)	;
    67b4:	1c 42 d4 54 	mov	&0x54d4,r12	;0x54d4
    67b8:	2c 4c       	mov	@r12,	r12	;
    67ba:	1d 44 fc ff 	mov	-4(r4),	r13	;
    67be:	1d 4d 04 00 	mov	4(r13),	r13	;
    67c2:	8d 4c 00 00 	mov	r12,	0(r13)	;
    67c6:	1c 44 fc ff 	mov	-4(r4),	r12	;
    67ca:	82 4c d4 54 	mov	r12,	&0x54d4	;
    67ce:	b0 12 a0 66 	call	#26272		;#0x66a0
    67d2:	1c 44 fe ff 	mov	-2(r4),	r12	;
    67d6:	2c 4c       	mov	@r12,	r12	;
    67d8:	31 40 00 24 	mov	#9216,	r1	;#0x2400
    67dc:	00 4c       	br	r12		;
    67de:	31 50 0a 00 	add	#10,	r1	;#0x000a
    67e2:	34 41       	pop	r4		;
    67e4:	30 41       	ret			
	...

000067e8 <chan_in>:
    67e8:	04 12       	push	r4		;
    67ea:	04 41       	mov	r1,	r4	;
    67ec:	0b 12       	push	r11		;
    67ee:	0a 12       	push	r10		;
    67f0:	31 80 18 00 	sub	#24,	r1	;#0x0018
    67f4:	0c 4d       	mov	r13,	r12	;
    67f6:	0b 4e       	mov	r14,	r11	;
    67f8:	0a 4f       	mov	r15,	r10	;
    67fa:	84 4f fa ff 	mov	r15,	-6(r4)	; 0xfffa
    67fe:	84 4e f8 ff 	mov	r14,	-8(r4)	; 0xfff8
    6802:	84 4d f6 ff 	mov	r13,	-10(r4)	; 0xfff6
    6806:	84 43 f2 ff 	mov	#0,	-14(r4)	;r3 As==00, 0xfff2
    680a:	1d 44 f8 ff 	mov	-8(r4),	r13	;
    680e:	2d 53       	incd	r13		;
    6810:	84 4d ee ff 	mov	r13,	-18(r4)	; 0xffee
    6814:	1d 44 f8 ff 	mov	-8(r4),	r13	;
    6818:	84 4d ec ff 	mov	r13,	-20(r4)	; 0xffec
    681c:	1d 44 ee ff 	mov	-18(r4),r13	;0xffffffee
    6820:	1e 44 f6 ff 	mov	-10(r4),r14	;0xfffffff6
    6824:	0d 5e       	add	r14,	r13	;
    6826:	84 4d ea ff 	mov	r13,	-22(r4)	; 0xffea
    682a:	84 4d f0 ff 	mov	r13,	-16(r4)	; 0xfff0
    682e:	0f 4d       	mov	r13,	r15	;
    6830:	84 4c e8 ff 	mov	r12,	-24(r4)	; 0xffe8
    6834:	84 4b e6 ff 	mov	r11,	-26(r4)	; 0xffe6
    6838:	84 4a e4 ff 	mov	r10,	-28(r4)	; 0xffe4
    683c:	31 50 18 00 	add	#24,	r1	;#0x0018
    6840:	3a 41       	pop	r10		;
    6842:	3b 41       	pop	r11		;
    6844:	34 41       	pop	r4		;
    6846:	30 41       	ret			

00006848 <chan_out>:
    6848:	04 12       	push	r4		;
    684a:	04 41       	mov	r1,	r4	;
    684c:	31 80 14 00 	sub	#20,	r1	;#0x0014
    6850:	1c 44 0a 00 	mov	10(r4),	r12	;0x0000a
    6854:	1d 44 08 00 	mov	8(r4),	r13	;
    6858:	1e 44 06 00 	mov	6(r4),	r14	;
    685c:	1f 44 04 00 	mov	4(r4),	r15	;
    6860:	84 4f fe ff 	mov	r15,	-2(r4)	; 0xfffe
    6864:	84 4e fc ff 	mov	r14,	-4(r4)	; 0xfffc
    6868:	84 4d fa ff 	mov	r13,	-6(r4)	; 0xfffa
    686c:	84 4c f8 ff 	mov	r12,	-8(r4)	; 0xfff8
    6870:	1c 44 fa ff 	mov	-6(r4),	r12	;
    6874:	2c 53       	incd	r12		;
    6876:	84 4c f0 ff 	mov	r12,	-16(r4)	; 0xfff0
    687a:	1c 44 fa ff 	mov	-6(r4),	r12	;
    687e:	84 4c ee ff 	mov	r12,	-18(r4)	; 0xffee
    6882:	1c 44 f0 ff 	mov	-16(r4),r12	;0xfffffff0
    6886:	1d 44 f8 ff 	mov	-8(r4),	r13	;
    688a:	0c 5d       	add	r13,	r12	;
    688c:	84 4c ec ff 	mov	r12,	-20(r4)	; 0xffec
    6890:	84 4c f2 ff 	mov	r12,	-14(r4)	; 0xfff2
    6894:	1e 44 fe ff 	mov	-2(r4),	r14	;
    6898:	1d 44 fc ff 	mov	-4(r4),	r13	;
    689c:	0f 4c       	mov	r12,	r15	;
    689e:	b0 12 e8 60 	call	#24808		;#0x60e8
    68a2:	31 50 14 00 	add	#20,	r1	;#0x0014
    68a6:	34 41       	pop	r4		;
    68a8:	30 41       	ret			
	...

000068ac <write_to_gbuf>:
    68ac:	04 12       	push	r4		;
    68ae:	04 41       	mov	r1,	r4	;
    68b0:	0b 12       	push	r11		;
    68b2:	0a 12       	push	r10		;
    68b4:	31 80 12 00 	sub	#18,	r1	;#0x0012
    68b8:	0c 4d       	mov	r13,	r12	;
    68ba:	0b 4e       	mov	r14,	r11	;
    68bc:	0a 4f       	mov	r15,	r10	;
    68be:	84 4f fa ff 	mov	r15,	-6(r4)	; 0xfffa
    68c2:	84 4e f8 ff 	mov	r14,	-8(r4)	; 0xfff8
    68c6:	84 4d f6 ff 	mov	r13,	-10(r4)	; 0xfff6
    68ca:	1d 42 b8 54 	mov	&0x54b8,r13	;0x54b8
    68ce:	0d 5d       	rla	r13		;
    68d0:	3d 50 5c 55 	add	#21852,	r13	;#0x555c
    68d4:	1e 44 fa ff 	mov	-6(r4),	r14	;
    68d8:	1f 44 f6 ff 	mov	-10(r4),r15	;0xfffffff6
    68dc:	84 4f f0 ff 	mov	r15,	-16(r4)	; 0xfff0
    68e0:	0f 4d       	mov	r13,	r15	;
    68e2:	1d 44 f0 ff 	mov	-16(r4),r13	;0xfffffff0
    68e6:	84 4c ee ff 	mov	r12,	-18(r4)	; 0xffee
    68ea:	84 4b ec ff 	mov	r11,	-20(r4)	; 0xffec
    68ee:	84 4a ea ff 	mov	r10,	-22(r4)	; 0xffea
    68f2:	b0 12 e8 60 	call	#24808		;#0x60e8
    68f6:	1c 44 f6 ff 	mov	-10(r4),r12	;0xfffffff6
    68fa:	1d 42 b8 54 	mov	&0x54b8,r13	;0x54b8
    68fe:	0d 5d       	rla	r13		;
    6900:	8d 4c 1a 55 	mov	r12,	21786(r13); 0x551a
    6904:	1c 44 f8 ff 	mov	-8(r4),	r12	;
    6908:	1d 42 b8 54 	mov	&0x54b8,r13	;0x54b8
    690c:	0d 5d       	rla	r13		;
    690e:	8d 4c d8 54 	mov	r12,	21720(r13); 0x54d8
    6912:	1c 44 f6 ff 	mov	-10(r4),r12	;0xfffffff6
    6916:	3c 90 03 00 	cmp	#3,	r12	;
    691a:	2a 28       	jnc	$+86     	;abs 0x6970
    691c:	00 3c       	jmp	$+2      	;abs 0x691e
    691e:	1c 44 f6 ff 	mov	-10(r4),r12	;0xfffffff6
    6922:	3c 53       	add	#-1,	r12	;r3 As==11
    6924:	12 c3       	clrc			
    6926:	0c 10       	rrc	r12		;
    6928:	1c 53       	inc	r12		;
    692a:	84 4c f4 ff 	mov	r12,	-12(r4)	; 0xfff4
    692e:	94 43 f2 ff 	mov	#1,	-14(r4)	;r3 As==01, 0xfff2
    6932:	00 3c       	jmp	$+2      	;abs 0x6934
    6934:	1c 44 f2 ff 	mov	-14(r4),r12	;0xfffffff2
    6938:	1d 44 f4 ff 	mov	-12(r4),r13	;0xfffffff4
    693c:	0c 9d       	cmp	r13,	r12	;
    693e:	10 2c       	jc	$+34     	;abs 0x6960
    6940:	00 3c       	jmp	$+2      	;abs 0x6942
    6942:	1c 42 b8 54 	mov	&0x54b8,r12	;0x54b8
    6946:	1d 44 f2 ff 	mov	-14(r4),r13	;0xfffffff2
    694a:	0c 5d       	add	r13,	r12	;
    694c:	0c 5c       	rla	r12		;
    694e:	8c 43 d8 54 	mov	#0,	21720(r12);r3 As==00, 0x54d8
    6952:	00 3c       	jmp	$+2      	;abs 0x6954
    6954:	1c 44 f2 ff 	mov	-14(r4),r12	;0xfffffff2
    6958:	1c 53       	inc	r12		;
    695a:	84 4c f2 ff 	mov	r12,	-14(r4)	; 0xfff2
    695e:	ea 3f       	jmp	$-42     	;abs 0x6934
    6960:	1c 44 f4 ff 	mov	-12(r4),r12	;0xfffffff4
    6964:	1d 42 b8 54 	mov	&0x54b8,r13	;0x54b8
    6968:	0d 5c       	add	r12,	r13	;
    696a:	82 4d b8 54 	mov	r13,	&0x54b8	;
    696e:	06 3c       	jmp	$+14     	;abs 0x697c
    6970:	1c 42 b8 54 	mov	&0x54b8,r12	;0x54b8
    6974:	1c 53       	inc	r12		;
    6976:	82 4c b8 54 	mov	r12,	&0x54b8	;
    697a:	00 3c       	jmp	$+2      	;abs 0x697c
    697c:	31 50 12 00 	add	#18,	r1	;#0x0012
    6980:	3a 41       	pop	r10		;
    6982:	3b 41       	pop	r11		;
    6984:	34 41       	pop	r4		;
    6986:	30 41       	ret			

00006988 <chan_out_gbuf>:
    6988:	04 12       	push	r4		;
    698a:	04 41       	mov	r1,	r4	;
    698c:	31 80 18 00 	sub	#24,	r1	;#0x0018
    6990:	1c 44 0a 00 	mov	10(r4),	r12	;0x0000a
    6994:	1d 44 08 00 	mov	8(r4),	r13	;
    6998:	1e 44 06 00 	mov	6(r4),	r14	;
    699c:	1f 44 04 00 	mov	4(r4),	r15	;
    69a0:	84 4f fe ff 	mov	r15,	-2(r4)	; 0xfffe
    69a4:	84 4e fc ff 	mov	r14,	-4(r4)	; 0xfffc
    69a8:	84 4d fa ff 	mov	r13,	-6(r4)	; 0xfffa
    69ac:	84 4c f8 ff 	mov	r12,	-8(r4)	; 0xfff8
    69b0:	1c 44 fa ff 	mov	-6(r4),	r12	;
    69b4:	2c 53       	incd	r12		;
    69b6:	84 4c f0 ff 	mov	r12,	-16(r4)	; 0xfff0
    69ba:	1c 44 fa ff 	mov	-6(r4),	r12	;
    69be:	84 4c ee ff 	mov	r12,	-18(r4)	; 0xffee
    69c2:	1c 44 f0 ff 	mov	-16(r4),r12	;0xfffffff0
    69c6:	1d 44 f8 ff 	mov	-8(r4),	r13	;
    69ca:	0c 5d       	add	r13,	r12	;
    69cc:	84 4c ec ff 	mov	r12,	-20(r4)	; 0xffec
    69d0:	1c 42 b8 54 	mov	&0x54b8,r12	;0x54b8
    69d4:	0c 5c       	rla	r12		;
    69d6:	3c 50 5c 55 	add	#21852,	r12	;#0x555c
    69da:	1e 44 fe ff 	mov	-2(r4),	r14	;
    69de:	1d 44 fc ff 	mov	-4(r4),	r13	;
    69e2:	0f 4c       	mov	r12,	r15	;
    69e4:	b0 12 e8 60 	call	#24808		;#0x60e8
    69e8:	1c 44 fc ff 	mov	-4(r4),	r12	;
    69ec:	1d 42 b8 54 	mov	&0x54b8,r13	;0x54b8
    69f0:	0d 5d       	rla	r13		;
    69f2:	8d 4c 1a 55 	mov	r12,	21786(r13); 0x551a
    69f6:	1c 44 ec ff 	mov	-20(r4),r12	;0xffffffec
    69fa:	84 4c f2 ff 	mov	r12,	-14(r4)	; 0xfff2
    69fe:	1d 42 b8 54 	mov	&0x54b8,r13	;0x54b8
    6a02:	0d 5d       	rla	r13		;
    6a04:	8d 4c d8 54 	mov	r12,	21720(r13); 0x54d8
    6a08:	1c 44 fc ff 	mov	-4(r4),	r12	;
    6a0c:	3c 90 03 00 	cmp	#3,	r12	;
    6a10:	2a 28       	jnc	$+86     	;abs 0x6a66
    6a12:	00 3c       	jmp	$+2      	;abs 0x6a14
    6a14:	1c 44 fc ff 	mov	-4(r4),	r12	;
    6a18:	3c 53       	add	#-1,	r12	;r3 As==11
    6a1a:	12 c3       	clrc			
    6a1c:	0c 10       	rrc	r12		;
    6a1e:	1c 53       	inc	r12		;
    6a20:	84 4c ea ff 	mov	r12,	-22(r4)	; 0xffea
    6a24:	94 43 e8 ff 	mov	#1,	-24(r4)	;r3 As==01, 0xffe8
    6a28:	00 3c       	jmp	$+2      	;abs 0x6a2a
    6a2a:	1c 44 e8 ff 	mov	-24(r4),r12	;0xffffffe8
    6a2e:	1d 44 ea ff 	mov	-22(r4),r13	;0xffffffea
    6a32:	0c 9d       	cmp	r13,	r12	;
    6a34:	10 2c       	jc	$+34     	;abs 0x6a56
    6a36:	00 3c       	jmp	$+2      	;abs 0x6a38
    6a38:	1c 42 b8 54 	mov	&0x54b8,r12	;0x54b8
    6a3c:	1d 44 e8 ff 	mov	-24(r4),r13	;0xffffffe8
    6a40:	0c 5d       	add	r13,	r12	;
    6a42:	0c 5c       	rla	r12		;
    6a44:	8c 43 d8 54 	mov	#0,	21720(r12);r3 As==00, 0x54d8
    6a48:	00 3c       	jmp	$+2      	;abs 0x6a4a
    6a4a:	1c 44 e8 ff 	mov	-24(r4),r12	;0xffffffe8
    6a4e:	1c 53       	inc	r12		;
    6a50:	84 4c e8 ff 	mov	r12,	-24(r4)	; 0xffe8
    6a54:	ea 3f       	jmp	$-42     	;abs 0x6a2a
    6a56:	1c 44 ea ff 	mov	-22(r4),r12	;0xffffffea
    6a5a:	1d 42 b8 54 	mov	&0x54b8,r13	;0x54b8
    6a5e:	0d 5c       	add	r12,	r13	;
    6a60:	82 4d b8 54 	mov	r13,	&0x54b8	;
    6a64:	06 3c       	jmp	$+14     	;abs 0x6a72
    6a66:	1c 42 b8 54 	mov	&0x54b8,r12	;0x54b8
    6a6a:	1c 53       	inc	r12		;
    6a6c:	82 4c b8 54 	mov	r12,	&0x54b8	;
    6a70:	00 3c       	jmp	$+2      	;abs 0x6a72
    6a72:	31 50 18 00 	add	#24,	r1	;#0x0018
    6a76:	34 41       	pop	r4		;
    6a78:	30 41       	ret			
	...

00006a7c <main>:
    6a7c:	04 12       	push	r4		;
    6a7e:	04 41       	mov	r1,	r4	;
    6a80:	21 83       	decd	r1		;
    6a82:	84 43 fe ff 	mov	#0,	-2(r4)	;r3 As==00, 0xfffe
    6a86:	b0 12 50 60 	call	#24656		;#0x6050
    6a8a:	1c 42 d6 54 	mov	&0x54d6,r12	;0x54d6
    6a8e:	1c 53       	inc	r12		;
    6a90:	82 4c d6 54 	mov	r12,	&0x54d6	;
    6a94:	b0 12 a0 66 	call	#26272		;#0x66a0
    6a98:	1c 42 d4 54 	mov	&0x54d4,r12	;0x54d4
    6a9c:	2c 4c       	mov	@r12,	r12	;
    6a9e:	2c 4c       	mov	@r12,	r12	;
    6aa0:	00 4c       	br	r12		;
    6aa2:	0f 43       	clr	r15		;
    6aa4:	21 53       	incd	r1		;
    6aa6:	34 41       	pop	r4		;
    6aa8:	30 41       	ret			
	...

00006aac <__mulhi3hw_noint>:
    6aac:	82 4f c0 04 	mov	r15,	&0x04c0	;
    6ab0:	82 4e c8 04 	mov	r14,	&0x04c8	;
    6ab4:	1f 42 ca 04 	mov	&0x04ca,r15	;0x04ca
    6ab8:	30 41       	ret			

00006aba <UART_init>:
 * @todo Currently assumes an 8MHz SMCLK. Make robust to clock frequency changes by using 32k ACLK.
 */
void UART_init(void) {

    // Configure USCI_A0 for UART mode
    UCA0CTLW0 = UCSWRST;                      // Put eUSCI in reset
    6aba:	92 43 c0 05 	mov	#1,	&0x05c0	;r3 As==01
    UCA0CTLW0 |= UCSSEL__SMCLK;               // CLK = SMCLK
    6abe:	b2 d0 80 00 	bis	#128,	&0x05c0	;#0x0080
    6ac2:	c0 05 
    UCA0BR1 = 0;
    UCA0MCTLW = UCOS16 | UCBRF_2 | (0xBB << 8);
#endif // UART_BAUDRATE
#elif UART_CLOCK == 8000000
#if UART_BAUDRATE == 115200
    UCA0BR0 = 4;
    6ac4:	e2 42 c6 05 	mov.b	#4,	&0x05c6	;r2 As==10
    UCA0BR1 = 0;
    6ac8:	c2 43 c7 05 	mov.b	#0,	&0x05c7	;r3 As==00
    UCA0MCTLW = UCOS16 | UCBRF_4 | (0x55 << 8);
    6acc:	b2 40 41 55 	mov	#21825,	&0x05c8	;#0x5541
    6ad0:	c8 05 
#endif // UART_BAUDRATE
#endif // UART_CLOCK

#if defined(__MSP430FR5969__) || defined(__MSP430FR5949__)
    PUART_TXSEL0 &= ~PIN_UART_TX; // TX pin to UART module
    6ad2:	d2 c3 0b 02 	bic.b	#1,	&0x020b	;r3 As==01
    PUART_TXSEL1 |= PIN_UART_TX;
    6ad6:	d2 d3 0d 02 	bis.b	#1,	&0x020d	;r3 As==01

    PUART_RXSEL0 &= ~PIN_UART_RX; // RX pin to UART module
    6ada:	e2 c3 0b 02 	bic.b	#2,	&0x020b	;r3 As==10
    PUART_RXSEL1 |= PIN_UART_RX;
    6ade:	e2 d3 0d 02 	bis.b	#2,	&0x020d	;r3 As==10
    PUART_RXSEL1 &= ~PIN_UART_RX;
#else
#error MCU not supported
#endif

    UCA0CTLW0 &= ~UCSWRST;                    // Initialize eUSCI
    6ae2:	92 c3 c0 05 	bic	#1,	&0x05c0	;r3 As==01

    // Initialize module state
    UART_SM.isTxBusy = FALSE;
    6ae6:	3c 40 22 1c 	mov	#7202,	r12	;#0x1c22
    6aea:	cc 43 00 00 	mov.b	#0,	0(r12)	;r3 As==00
    UART_SM.txBytesRemaining = 0;
    6aee:	8c 43 04 00 	mov	#0,	4(r12)	;r3 As==00
    UART_SM.isRxBusy = FALSE;
    6af2:	cc 43 06 00 	mov.b	#0,	6(r12)	;r3 As==00
    UART_SM.rxBytesRemaining = 0;
    6af6:	8c 43 0a 00 	mov	#0,	10(r12)	;r3 As==00, 0x000a

}
    6afa:	30 41       	ret			

00006afc <UART_teardown>:
void UART_teardown()
{
    // disable UART
    // Not sure how to do this best, but set all UCA0* registers to
    // their default values.  See User's Guide for default values.
    PUART_TXSEL0 &= ~PIN_UART_TX;
    6afc:	d2 c3 0b 02 	bic.b	#1,	&0x020b	;r3 As==01
    PUART_TXSEL1 &= ~PIN_UART_TX;
    6b00:	d2 c3 0d 02 	bic.b	#1,	&0x020d	;r3 As==01
    PUART_RXSEL0 &= ~PIN_UART_RX;
    6b04:	e2 c3 0b 02 	bic.b	#2,	&0x020b	;r3 As==10
    PUART_RXSEL1 &= ~PIN_UART_RX;
    6b08:	e2 c3 0d 02 	bic.b	#2,	&0x020d	;r3 As==10
    UCA0CTLW0 = 0x0001;
    6b0c:	92 43 c0 05 	mov	#1,	&0x05c0	;r3 As==01
    UCA0BR0 = 0x0000;
    6b10:	c2 43 c6 05 	mov.b	#0,	&0x05c6	;r3 As==00
    UCA0MCTLW = 0x0000;
    6b14:	82 43 c8 05 	mov	#0,	&0x05c8	;r3 As==00
    UCA0IE = 0x0000;
    6b18:	82 43 da 05 	mov	#0,	&0x05da	;r3 As==00
    UCA0IFG = 0x0000;
    6b1c:	82 43 dc 05 	mov	#0,	&0x05dc	;r3 As==00
}
    6b20:	30 41       	ret			

00006b22 <UART_asyncSend>:
 * @param size the number of bytes to send
 */
void UART_asyncSend(uint8_t* txBuf, uint16_t size) {

    // Block until prior transmission has completed
    while (UART_SM.isTxBusy)
    6b22:	3f 40 22 1c 	mov	#7202,	r15	;#0x1c22
    6b26:	6e 4f       	mov.b	@r15,	r14	;
    6b28:	0e 93       	cmp	#0,	r14	;r3 As==00
    6b2a:	fd 23       	jnz	$-4      	;abs 0x6b26
        ;

    // Set up for start of transmission
    UART_SM.isTxBusy = TRUE;
    6b2c:	3e 40 22 1c 	mov	#7202,	r14	;#0x1c22
    6b30:	de 43 00 00 	mov.b	#1,	0(r14)	;r3 As==01
    UART_SM.txPtr = txBuf;
    6b34:	8e 4c 02 00 	mov	r12,	2(r14)	;
    UART_SM.txBytesRemaining = size;
    6b38:	8e 4d 04 00 	mov	r13,	4(r14)	;

    UCA0IFG &= ~(USCI_UART_UCTXIFG); // Clear the 'ready to accept byte' flag
    6b3c:	a2 c2 dc 05 	bic	#4,	&0x05dc	;r2 As==10

    UCA0IE |= UCTXIE; // Enable USCI_A0 TX interrupt ('ready to accept byte')
    6b40:	a2 d3 da 05 	bis	#2,	&0x05da	;r3 As==10
    //UCA0TXBUF = *(UART_SM.txPtr++); // Load in first byte

    // The bytes are transmitted in the TX ISR (which is called whenever the
    // UART is ready to accept a byte), and the isBusy flag is cleared when the
    // last byte has *finished* transmitting.
}
    6b44:	30 41       	ret			

00006b46 <UART_send>:
 * @param size the number of bytes to send
 *
 */
void UART_send(uint8_t* txBuf, uint16_t size) {

    UART_asyncSend(txBuf, size);
    6b46:	b0 12 22 6b 	call	#27426		;#0x6b22

    // Block until complete
    while (UART_SM.isTxBusy)
    6b4a:	3d 40 22 1c 	mov	#7202,	r13	;#0x1c22
    6b4e:	6c 4d       	mov.b	@r13,	r12	;
    6b50:	0c 93       	cmp	#0,	r12	;r3 As==00
    6b52:	fd 23       	jnz	$-4      	;abs 0x6b4e
        ;
}
    6b54:	30 41       	ret			

00006b56 <UART_critSend>:
 *  and use UART status register polling instead of interrupts.
 */
void UART_critSend(uint8_t* txBuf, uint16_t size) {

    // Block until prior transmission has completed
    while (UART_SM.isTxBusy)
    6b56:	3f 40 22 1c 	mov	#7202,	r15	;#0x1c22
    6b5a:	6e 4f       	mov.b	@r15,	r14	;
    6b5c:	0e 93       	cmp	#0,	r14	;r3 As==00
    6b5e:	fd 23       	jnz	$-4      	;abs 0x6b5a
        ;

    // Set up for start of transmission
    UART_SM.isTxBusy = TRUE;
    6b60:	3e 40 22 1c 	mov	#7202,	r14	;#0x1c22
    6b64:	de 43 00 00 	mov.b	#1,	0(r14)	;r3 As==01
    UART_SM.txPtr = txBuf;
    6b68:	8e 4c 02 00 	mov	r12,	2(r14)	;
    UART_SM.txBytesRemaining = size;
    6b6c:	8e 4d 04 00 	mov	r13,	4(r14)	;

    UCA0IV &= ~(USCI_UART_UCTXIFG); // Clear byte completion flag
    6b70:	a2 c2 de 05 	bic	#4,	&0x05de	;r2 As==10

    while (UART_SM.txBytesRemaining--) {
    6b74:	1c 4e 04 00 	mov	4(r14),	r12	;
    6b78:	0d 4c       	mov	r12,	r13	;
    6b7a:	3d 53       	add	#-1,	r13	;r3 As==11
    6b7c:	8e 4d 04 00 	mov	r13,	4(r14)	;
    6b80:	0c 93       	cmp	#0,	r12	;r3 As==00
    6b82:	19 24       	jz	$+52     	;abs 0x6bb6
        UCA0TXBUF = *(UART_SM.txPtr++); // Load in next byte
    6b84:	0c 4e       	mov	r14,	r12	;
    6b86:	1d 4c 02 00 	mov	2(r12),	r13	;
    6b8a:	0e 4d       	mov	r13,	r14	;
    6b8c:	1e 53       	inc	r14		;
    6b8e:	8c 4e 02 00 	mov	r14,	2(r12)	;
    6b92:	6d 4d       	mov.b	@r13,	r13	;
    6b94:	3d f0 ff 00 	and	#255,	r13	;#0x00ff
    6b98:	82 4d ce 05 	mov	r13,	&0x05ce	;
        while (!(UCA0IFG & UCTXIFG))
    6b9c:	a2 b3 dc 05 	bit	#2,	&0x05dc	;r3 As==10
    6ba0:	fd 27       	jz	$-4      	;abs 0x6b9c
            ; // Wait for byte transmission to complete
        UCA0IFG &= ~(UCTXIFG); // Clear byte completion flag
    6ba2:	a2 c3 dc 05 	bic	#2,	&0x05dc	;r3 As==10
    UART_SM.txPtr = txBuf;
    UART_SM.txBytesRemaining = size;

    UCA0IV &= ~(USCI_UART_UCTXIFG); // Clear byte completion flag

    while (UART_SM.txBytesRemaining--) {
    6ba6:	1d 4c 04 00 	mov	4(r12),	r13	;
    6baa:	0e 4d       	mov	r13,	r14	;
    6bac:	3e 53       	add	#-1,	r14	;r3 As==11
    6bae:	8c 4e 04 00 	mov	r14,	4(r12)	;
    6bb2:	0d 93       	cmp	#0,	r13	;r3 As==00
    6bb4:	e8 23       	jnz	$-46     	;abs 0x6b86
        while (!(UCA0IFG & UCTXIFG))
            ; // Wait for byte transmission to complete
        UCA0IFG &= ~(UCTXIFG); // Clear byte completion flag
    }

    UART_SM.isTxBusy = FALSE;
    6bb6:	c2 43 22 1c 	mov.b	#0,	&0x1c22	;r3 As==00
}
    6bba:	30 41       	ret			

00006bbc <UART_isTxBusy>:
/**
 * Return true if UART TX module is in the middle of an operation, false if not.
 */
uint8_t UART_isTxBusy() {
    return UART_SM.isTxBusy;
}
    6bbc:	5c 42 22 1c 	mov.b	&0x1c22,r12	;0x1c22
    6bc0:	30 41       	ret			

00006bc2 <UART_asyncReceive>:
 * @param size the number of bytes to receive
 */
void UART_asyncReceive(uint8_t* rxBuf, uint16_t size) {

    // Block until prior reception has completed
    while (UART_SM.isRxBusy)
    6bc2:	3f 40 22 1c 	mov	#7202,	r15	;#0x1c22
    6bc6:	5e 4f 06 00 	mov.b	6(r15),	r14	;
    6bca:	0e 93       	cmp	#0,	r14	;r3 As==00
    6bcc:	fc 23       	jnz	$-6      	;abs 0x6bc6
        ;

    // Set up for start of reception
    UART_SM.isRxBusy = TRUE;
    6bce:	3e 40 22 1c 	mov	#7202,	r14	;#0x1c22
    6bd2:	de 43 06 00 	mov.b	#1,	6(r14)	;r3 As==01
    UART_SM.rxPtr = rxBuf;
    6bd6:	8e 4c 08 00 	mov	r12,	8(r14)	;
    UART_SM.rxBytesRemaining = size;
    6bda:	8e 4d 0a 00 	mov	r13,	10(r14)	; 0x000a

    UCA0IFG &= ~(UCRXIFG); // Clear byte completion flag
    6bde:	92 c3 dc 05 	bic	#1,	&0x05dc	;r3 As==01

    UCA0IE |= UCRXIE; // Enable USCI_A0 RX interrupt
    6be2:	92 d3 da 05 	bis	#1,	&0x05da	;r3 As==01

    // The rest of the reception will be completed by the RX ISR (which
    //  will wake after each byte has been received), and the isBusy flag
    //  will be cleared when done.
}
    6be6:	30 41       	ret			

00006be8 <UART_receive>:
 * @param size the number of bytes to receive
 *
 */
void UART_receive(uint8_t* rxBuf, uint16_t size) {

    UART_asyncReceive(rxBuf, size);
    6be8:	b0 12 c2 6b 	call	#27586		;#0x6bc2

    // Block until complete
    while (UART_SM.isRxBusy)
    6bec:	3d 40 22 1c 	mov	#7202,	r13	;#0x1c22
    6bf0:	5c 4d 06 00 	mov.b	6(r13),	r12	;
    6bf4:	0c 93       	cmp	#0,	r12	;r3 As==00
    6bf6:	fc 23       	jnz	$-6      	;abs 0x6bf0
        ;
}
    6bf8:	30 41       	ret			

00006bfa <UART_critReceive>:
 *  and use UART status register polling instead of interrupts.
 */
void UART_critReceive(uint8_t* rxBuf, uint16_t size) {

    // Block until prior reception has completed
    while (UART_SM.isRxBusy)
    6bfa:	3f 40 22 1c 	mov	#7202,	r15	;#0x1c22
    6bfe:	5e 4f 06 00 	mov.b	6(r15),	r14	;
    6c02:	0e 93       	cmp	#0,	r14	;r3 As==00
    6c04:	fc 23       	jnz	$-6      	;abs 0x6bfe
        ;

    // Set up for start of reception
    UART_SM.isRxBusy = TRUE;
    6c06:	3e 40 22 1c 	mov	#7202,	r14	;#0x1c22
    6c0a:	de 43 06 00 	mov.b	#1,	6(r14)	;r3 As==01
    UART_SM.rxPtr = rxBuf;
    6c0e:	8e 4c 08 00 	mov	r12,	8(r14)	;
    UART_SM.rxBytesRemaining = size;
    6c12:	8e 4d 0a 00 	mov	r13,	10(r14)	; 0x000a

    UCA0IFG &= ~(UCRXIFG); // Clear byte completion flag
    6c16:	92 c3 dc 05 	bic	#1,	&0x05dc	;r3 As==01

    while (UART_SM.rxBytesRemaining--) {
    6c1a:	1c 4e 0a 00 	mov	10(r14),r12	;0x0000a
    6c1e:	0d 4c       	mov	r12,	r13	;
    6c20:	3d 53       	add	#-1,	r13	;r3 As==11
    6c22:	8e 4d 0a 00 	mov	r13,	10(r14)	; 0x000a
    6c26:	0c 93       	cmp	#0,	r12	;r3 As==00
    6c28:	18 24       	jz	$+50     	;abs 0x6c5a
        while (!(UCA0IFG & UCRXIFG))
            ; // Wait for byte reception to complete
        UCA0IFG &= ~(UCRXIFG); // Clear byte completion flag

        uint8_t rec = UCA0RXBUF; // Read next byte
        *(UART_SM.rxPtr++) = rec; // Store byte
    6c2a:	0c 4e       	mov	r14,	r12	;
    UART_SM.rxBytesRemaining = size;

    UCA0IFG &= ~(UCRXIFG); // Clear byte completion flag

    while (UART_SM.rxBytesRemaining--) {
        while (!(UCA0IFG & UCRXIFG))
    6c2c:	92 b3 dc 05 	bit	#1,	&0x05dc	;r3 As==01
    6c30:	fd 27       	jz	$-4      	;abs 0x6c2c
            ; // Wait for byte reception to complete
        UCA0IFG &= ~(UCRXIFG); // Clear byte completion flag
    6c32:	92 c3 dc 05 	bic	#1,	&0x05dc	;r3 As==01

        uint8_t rec = UCA0RXBUF; // Read next byte
    6c36:	1e 42 cc 05 	mov	&0x05cc,r14	;0x05cc
        *(UART_SM.rxPtr++) = rec; // Store byte
    6c3a:	1d 4c 08 00 	mov	8(r12),	r13	;
    6c3e:	0f 4d       	mov	r13,	r15	;
    6c40:	1f 53       	inc	r15		;
    6c42:	8c 4f 08 00 	mov	r15,	8(r12)	;
    while (UART_SM.rxBytesRemaining--) {
        while (!(UCA0IFG & UCRXIFG))
            ; // Wait for byte reception to complete
        UCA0IFG &= ~(UCRXIFG); // Clear byte completion flag

        uint8_t rec = UCA0RXBUF; // Read next byte
    6c46:	cd 4e 00 00 	mov.b	r14,	0(r13)	;
    UART_SM.rxPtr = rxBuf;
    UART_SM.rxBytesRemaining = size;

    UCA0IFG &= ~(UCRXIFG); // Clear byte completion flag

    while (UART_SM.rxBytesRemaining--) {
    6c4a:	1d 4c 0a 00 	mov	10(r12),r13	;0x0000a
    6c4e:	0e 4d       	mov	r13,	r14	;
    6c50:	3e 53       	add	#-1,	r14	;r3 As==11
    6c52:	8c 4e 0a 00 	mov	r14,	10(r12)	; 0x000a
    6c56:	0d 93       	cmp	#0,	r13	;r3 As==00
    6c58:	e9 23       	jnz	$-44     	;abs 0x6c2c

        uint8_t rec = UCA0RXBUF; // Read next byte
        *(UART_SM.rxPtr++) = rec; // Store byte
    }

    UART_SM.isRxBusy = FALSE;
    6c5a:	c2 43 28 1c 	mov.b	#0,	&0x1c28	;r3 As==00
}
    6c5e:	30 41       	ret			

00006c60 <UART_isRxBusy>:
/**
 * Return true if UART RX module is in the middle of an operation, false if not.
 */
uint8_t UART_isRxBusy() {
    return UART_SM.isRxBusy;
}
    6c60:	5c 42 28 1c 	mov.b	&0x1c28,r12	;0x1c28
    6c64:	30 41       	ret			

00006c66 <UART_isRxDone>:
 * Return true if UART RX module is not in the middle of an operation (e.g. done), false if not.
 *
 * Could be used in combination with UART_asyncReceive.
 */
uint8_t UART_isRxDone() {
    return !(UART_SM.isRxBusy);
    6c66:	5c 42 28 1c 	mov.b	&0x1c28,r12	;0x1c28
    6c6a:	3c 53       	add	#-1,	r12	;r3 As==11
}
    6c6c:	5c 03       	rrum	#1,	r12	;
    6c6e:	4d 18 0c 11 	rpt #14 { rrax.w	r12		;
    6c72:	30 41       	ret			

00006c74 <USCI_A0_ISR>:
#elif defined(__GNUC__)
void __attribute__ ((interrupt(USCI_A0_VECTOR))) USCI_A0_ISR (void)
#else
#error Compiler not supported!
#endif
{
    6c74:	3f 15       	pushm	#4,	r15	;16-bit words
    uint8_t rec;

    switch (__even_in_range(UCA0IV, USCI_UART_UCTXCPTIFG)) {
    6c76:	1c 42 de 05 	mov	&0x05de,r12	;0x05de
    6c7a:	2c 93       	cmp	#2,	r12	;r3 As==10
    6c7c:	03 24       	jz	$+8      	;abs 0x6c84
    6c7e:	2c 92       	cmp	#4,	r12	;r2 As==10
    6c80:	1e 24       	jz	$+62     	;abs 0x6cbe
    6c82:	38 3c       	jmp	$+114    	;abs 0x6cf4
    case USCI_NONE:
        break;
    case USCI_UART_UCRXIFG:
        if (UART_SM.rxBytesRemaining--) {
    6c84:	3d 40 22 1c 	mov	#7202,	r13	;#0x1c22
    6c88:	1c 4d 0a 00 	mov	10(r13),r12	;0x0000a
    6c8c:	0e 4c       	mov	r12,	r14	;
    6c8e:	3e 53       	add	#-1,	r14	;r3 As==11
    6c90:	8d 4e 0a 00 	mov	r14,	10(r13)	; 0x000a
    6c94:	0c 93       	cmp	#0,	r12	;r3 As==00
    6c96:	0a 24       	jz	$+22     	;abs 0x6cac
            rec = UCA0RXBUF; // Read next byte
    6c98:	1e 42 cc 05 	mov	&0x05cc,r14	;0x05cc
            *(UART_SM.rxPtr++) = rec; // Store byte
    6c9c:	1c 4d 08 00 	mov	8(r13),	r12	;
    6ca0:	0f 4c       	mov	r12,	r15	;
    6ca2:	1f 53       	inc	r15		;
    6ca4:	8d 4f 08 00 	mov	r15,	8(r13)	;
    switch (__even_in_range(UCA0IV, USCI_UART_UCTXCPTIFG)) {
    case USCI_NONE:
        break;
    case USCI_UART_UCRXIFG:
        if (UART_SM.rxBytesRemaining--) {
            rec = UCA0RXBUF; // Read next byte
    6ca8:	cc 4e 00 00 	mov.b	r14,	0(r12)	;
            *(UART_SM.rxPtr++) = rec; // Store byte
        }

        if (0 == UART_SM.rxBytesRemaining) {
    6cac:	1c 42 2c 1c 	mov	&0x1c2c,r12	;0x1c2c
    6cb0:	0c 93       	cmp	#0,	r12	;r3 As==00
    6cb2:	20 20       	jnz	$+66     	;abs 0x6cf4
            UCA0IE &= ~(UCRXIE); // Disable USCI_A0 RX interrupt
    6cb4:	92 c3 da 05 	bic	#1,	&0x05da	;r3 As==01
            UART_SM.isRxBusy = FALSE;
    6cb8:	c2 43 28 1c 	mov.b	#0,	&0x1c28	;r3 As==00
    6cbc:	1b 3c       	jmp	$+56     	;abs 0x6cf4
        }

        break;
    case USCI_UART_UCTXIFG:
        UCA0TXBUF = *(UART_SM.txPtr++); // if interrupt was enabled, there must be bytes
    6cbe:	3c 40 22 1c 	mov	#7202,	r12	;#0x1c22
    6cc2:	1d 4c 02 00 	mov	2(r12),	r13	;
    6cc6:	0e 4d       	mov	r13,	r14	;
    6cc8:	1e 53       	inc	r14		;
    6cca:	8c 4e 02 00 	mov	r14,	2(r12)	;
    6cce:	6d 4d       	mov.b	@r13,	r13	;
    6cd0:	3d f0 ff 00 	and	#255,	r13	;#0x00ff
    6cd4:	82 4d ce 05 	mov	r13,	&0x05ce	;
        if (--UART_SM.txBytesRemaining == 0) {
    6cd8:	1d 4c 04 00 	mov	4(r12),	r13	;
    6cdc:	3d 53       	add	#-1,	r13	;r3 As==11
    6cde:	8c 4d 04 00 	mov	r13,	4(r12)	;
    6ce2:	0d 93       	cmp	#0,	r13	;r3 As==00
    6ce4:	07 20       	jnz	$+16     	;abs 0x6cf4
            // TODO: actually, this wait should probably happen for blocking version only
            while (UCA0STATW & UCBUSY); // wait for last byte to finish transmitting
    6ce6:	d2 b3 ca 05 	bit.b	#1,	&0x05ca	;r3 As==01
    6cea:	fd 23       	jnz	$-4      	;abs 0x6ce6
            UCA0IE &= ~(UCTXIE); // Disable USCI_A0 TX interrupt
    6cec:	a2 c3 da 05 	bic	#2,	&0x05da	;r3 As==10
            UART_SM.isTxBusy = FALSE;
    6cf0:	c2 43 22 1c 	mov.b	#0,	&0x1c22	;r3 As==00
    case USCI_UART_UCSTTIFG:
        break;
    case USCI_UART_UCTXCPTIFG:
        break;
    }
}
    6cf4:	3c 17       	popm	#4,	r15	;16-bit words
    6cf6:	00 13       	reti			

00006cf8 <memmove>:
    6cf8:	0a 15       	pushm	#1,	r10	;16-bit words
    6cfa:	0d 9c       	cmp	r12,	r13	;
    6cfc:	10 2c       	jc	$+34     	;abs 0x6d1e
    6cfe:	0b 4d       	mov	r13,	r11	;
    6d00:	0b 5e       	add	r14,	r11	;
    6d02:	0c 9b       	cmp	r11,	r12	;
    6d04:	0c 2c       	jc	$+26     	;abs 0x6d1e
    6d06:	0d 4e       	mov	r14,	r13	;
    6d08:	3d 53       	add	#-1,	r13	;r3 As==11
    6d0a:	3d 93       	cmp	#-1,	r13	;r3 As==11
    6d0c:	13 24       	jz	$+40     	;abs 0x6d34
    6d0e:	0f 4d       	mov	r13,	r15	;
    6d10:	0f 8e       	sub	r14,	r15	;
    6d12:	0f 5b       	add	r11,	r15	;
    6d14:	0a 4c       	mov	r12,	r10	;
    6d16:	0a 5d       	add	r13,	r10	;
    6d18:	ea 4f 00 00 	mov.b	@r15,	0(r10)	;
    6d1c:	f5 3f       	jmp	$-20     	;abs 0x6d08
    6d1e:	0f 43       	clr	r15		;
    6d20:	0f 9e       	cmp	r14,	r15	;
    6d22:	08 24       	jz	$+18     	;abs 0x6d34
    6d24:	0a 4d       	mov	r13,	r10	;
    6d26:	0a 5f       	add	r15,	r10	;
    6d28:	0b 4c       	mov	r12,	r11	;
    6d2a:	0b 5f       	add	r15,	r11	;
    6d2c:	eb 4a 00 00 	mov.b	@r10,	0(r11)	;
    6d30:	1f 53       	inc	r15		;
    6d32:	f6 3f       	jmp	$-18     	;abs 0x6d20
    6d34:	0a 17       	popm	#1,	r10	;16-bit words
    6d36:	30 41       	ret			

00006d38 <memset>:
    6d38:	0f 4c       	mov	r12,	r15	;
    6d3a:	0e 5c       	add	r12,	r14	;
    6d3c:	0f 9e       	cmp	r14,	r15	;
    6d3e:	04 24       	jz	$+10     	;abs 0x6d48
    6d40:	cf 4d 00 00 	mov.b	r13,	0(r15)	;
    6d44:	1f 53       	inc	r15		;
    6d46:	fa 3f       	jmp	$-10     	;abs 0x6d3c
    6d48:	30 41       	ret			

00006d4a <__do_global_ctors_aux>:
    6d4a:	0a 15       	pushm	#1,	r10	;16-bit words
    6d4c:	1c 42 e8 44 	mov	&0x44e8,r12	;0x44e8
    6d50:	3c 93       	cmp	#-1,	r12	;r3 As==11
    6d52:	08 24       	jz	$+18     	;abs 0x6d64
    6d54:	3a 40 e8 44 	mov	#17640,	r10	;#0x44e8
    6d58:	8c 12       	call	r12		;
    6d5a:	3a 50 fe ff 	add	#65534,	r10	;#0xfffe
    6d5e:	2c 4a       	mov	@r10,	r12	;
    6d60:	3c 93       	cmp	#-1,	r12	;r3 As==11
    6d62:	fa 23       	jnz	$-10     	;abs 0x6d58
    6d64:	0a 17       	popm	#1,	r10	;16-bit words
    6d66:	30 41       	ret			

00006d68 <call___do_global_ctors_aux>:
    6d68:	30 41       	ret			

00006d6a <__msp430_init>:
    6d6a:	b0 12 a0 56 	call	#22176		;#0x56a0
    6d6e:	b0 12 4a 6d 	call	#27978		;#0x6d4a
    6d72:	b0 12 e0 55 	call	#21984		;#0x55e0
    6d76:	b0 12 d4 55 	call	#21972		;#0x55d4
    6d7a:	30 41       	ret			

00006d7c <__msp430_fini>:
    6d7c:	b0 12 ec 55 	call	#21996		;#0x55ec
    6d80:	b0 12 52 56 	call	#22098		;#0x5652
    6d84:	30 41       	ret			
