
templog.out:     file format elf32-msp430


Disassembly of section __interrupt_vector_40:

0000ffde <__interrupt_vector_40>:
    ffde:	de 4b 70 f7 	Address 0x0000ffe0 is out of bounds.
Address 0x0000ffe2 is out of bounds.
mov.b	-1(r11),-1(r14)	; 0xffff
    ffe2:	98 d7 

Disassembly of section __interrupt_vector_49:

0000fff0 <__interrupt_vector_49>:
    fff0:	9e 51       	interrupt service routine at 0x519e

Disassembly of section .text:

00004880 <__crt0_start>:
    4880:	31 40 00 24 	mov	#9216,	r1	;#0x2400

00004884 <__crt0_init_bss>:
    4884:	3c 40 32 1d 	mov	#7474,	r12	;#0x1d32
    4888:	0d 43       	clr	r13		;
    488a:	3e 40 90 00 	mov	#144,	r14	;#0x0090
    488e:	b0 12 b4 86 	call	#34484		;#0x86b4

00004892 <__crt0_movedata>:
    4892:	3c 40 00 1c 	mov	#7168,	r12	;#0x1c00
    4896:	3d 40 4a 47 	mov	#18250,	r13	;#0x474a
    489a:	0d 9c       	cmp	r12,	r13	;
    489c:	04 24       	jz	$+10     	;abs 0x48a6
    489e:	3e 40 32 01 	mov	#306,	r14	;#0x0132
    48a2:	b0 12 aa aa 	call	#43690		;#0xaaaa

000048a6 <__crt0_call_init_then_main>:
    48a6:	b0 12 6a cf 	call	#53098		;#0xcf6a
    48aa:	0c 43       	clr	r12		;
    48ac:	b0 12 ac 49 	call	#18860		;#0x49ac

000048b0 <_msp430_run_init_array>:
    48b0:	34 40 3c 47 	mov	#18236,	r4	;#0x473c
    48b4:	35 40 3c 47 	mov	#18236,	r5	;#0x473c
    48b8:	26 43       	mov	#2,	r6	;r3 As==10
    48ba:	0d 3c       	jmp	$+28     	;abs 0x48d6

000048bc <_msp430_run_preinit_array>:
    48bc:	34 40 3c 47 	mov	#18236,	r4	;#0x473c
    48c0:	35 40 3c 47 	mov	#18236,	r5	;#0x473c
    48c4:	26 43       	mov	#2,	r6	;r3 As==10
    48c6:	07 3c       	jmp	$+16     	;abs 0x48d6

000048c8 <_msp430_run_fini_array>:
    48c8:	34 40 3c 47 	mov	#18236,	r4	;#0x473c
    48cc:	35 40 3c 47 	mov	#18236,	r5	;#0x473c
    48d0:	36 40 fe ff 	mov	#65534,	r6	;#0xfffe
    48d4:	00 3c       	jmp	$+2      	;abs 0x48d6

000048d6 <_msp430_run_array>:
    48d6:	05 94       	cmp	r4,	r5	;
    48d8:	05 24       	jz	$+12     	;abs 0x48e4
    48da:	27 44       	mov	@r4,	r7	;
    48dc:	04 56       	add	r6,	r4	;
    48de:	a7 12       	call	@r7		;
    48e0:	10 40 f4 ff 	br	0xfff4		;PC rel. 0x48d6

000048e4 <_msp430_run_done>:
    48e4:	30 41       	ret			

000048e6 <deregister_tm_clones>:
    48e6:	3c 40 86 cf 	mov	#53126,	r12	;#0xcf86
    48ea:	3c 80 85 cf 	sub	#53125,	r12	;#0xcf85
    48ee:	2d 43       	mov	#2,	r13	;r3 As==10
    48f0:	0d 9c       	cmp	r12,	r13	;
    48f2:	07 2c       	jc	$+16     	;abs 0x4902
    48f4:	3d 40 00 00 	mov	#0,	r13	;
    48f8:	0d 93       	cmp	#0,	r13	;r3 As==00
    48fa:	03 24       	jz	$+8      	;abs 0x4902
    48fc:	3c 40 86 cf 	mov	#53126,	r12	;#0xcf86
    4900:	8d 12       	call	r13		;
    4902:	30 41       	ret			

00004904 <register_tm_clones>:
    4904:	3d 40 86 cf 	mov	#53126,	r13	;#0xcf86
    4908:	3d 80 86 cf 	sub	#53126,	r13	;#0xcf86
    490c:	0d 11       	rra	r13		;
    490e:	0c 4d       	mov	r13,	r12	;
    4910:	5c 03       	rrum	#1,	r12	;
    4912:	4d 18 0c 11 	rpt #14 { rrax.w	r12		;
    4916:	0d 5c       	add	r12,	r13	;
    4918:	0d 11       	rra	r13		;
    491a:	0d 93       	cmp	#0,	r13	;r3 As==00
    491c:	07 24       	jz	$+16     	;abs 0x492c
    491e:	3e 40 00 00 	mov	#0,	r14	;
    4922:	0e 93       	cmp	#0,	r14	;r3 As==00
    4924:	03 24       	jz	$+8      	;abs 0x492c
    4926:	3c 40 86 cf 	mov	#53126,	r12	;#0xcf86
    492a:	8e 12       	call	r14		;
    492c:	30 41       	ret			

0000492e <__do_global_dtors_aux>:
    492e:	0a 15       	pushm	#1,	r10	;16-bit words
    4930:	c2 93 32 1d 	cmp.b	#0,	&0x1d32	;r3 As==00
    4934:	20 20       	jnz	$+66     	;abs 0x4976
    4936:	1c 42 34 1d 	mov	&0x1d34,r12	;0x1d34
    493a:	3a 40 46 47 	mov	#18246,	r10	;#0x4746
    493e:	3a 80 44 47 	sub	#18244,	r10	;#0x4744
    4942:	0a 11       	rra	r10		;
    4944:	3a 53       	add	#-1,	r10	;r3 As==11
    4946:	0c 9a       	cmp	r10,	r12	;
    4948:	0b 2c       	jc	$+24     	;abs 0x4960
    494a:	1c 53       	inc	r12		;
    494c:	82 4c 34 1d 	mov	r12,	&0x1d34	;
    4950:	0c 5c       	rla	r12		;
    4952:	1c 4c 44 47 	mov	18244(r12),r12	;0x04744
    4956:	8c 12       	call	r12		;
    4958:	1c 42 34 1d 	mov	&0x1d34,r12	;0x1d34
    495c:	0c 9a       	cmp	r10,	r12	;
    495e:	f5 2b       	jnc	$-20     	;abs 0x494a
    4960:	b0 12 e6 48 	call	#18662		;#0x48e6
    4964:	3d 40 00 00 	mov	#0,	r13	;
    4968:	0d 93       	cmp	#0,	r13	;r3 As==00
    496a:	03 24       	jz	$+8      	;abs 0x4972
    496c:	3c 40 38 47 	mov	#18232,	r12	;#0x4738
    4970:	8d 12       	call	r13		;
    4972:	d2 43 32 1d 	mov.b	#1,	&0x1d32	;r3 As==01
    4976:	0a 17       	popm	#1,	r10	;16-bit words
    4978:	30 41       	ret			

0000497a <call___do_global_dtors_aux>:
    497a:	30 41       	ret			

0000497c <frame_dummy>:
    497c:	3e 40 00 00 	mov	#0,	r14	;
    4980:	0e 93       	cmp	#0,	r14	;r3 As==00
    4982:	05 24       	jz	$+12     	;abs 0x498e
    4984:	3c 40 38 47 	mov	#18232,	r12	;#0x4738
    4988:	3d 40 36 1d 	mov	#7478,	r13	;#0x1d36
    498c:	8e 12       	call	r14		;
    498e:	3c 40 00 1c 	mov	#7168,	r12	;#0x1c00
    4992:	8c 93 00 00 	cmp	#0,	0(r12)	;r3 As==00
    4996:	03 20       	jnz	$+8      	;abs 0x499e
    4998:	b0 12 04 49 	call	#18692		;#0x4904
    499c:	30 41       	ret			
    499e:	3d 40 00 00 	mov	#0,	r13	;
    49a2:	0d 93       	cmp	#0,	r13	;r3 As==00
    49a4:	f9 27       	jz	$-12     	;abs 0x4998
    49a6:	8d 12       	call	r13		;
    49a8:	f7 3f       	jmp	$-16     	;abs 0x4998

000049aa <call_frame_dummy>:
    49aa:	30 41       	ret			

000049ac <main>:
    msp_gpio_unlock();
    msp_clock_setup();
}

void main()
{
    49ac:	2a 15       	pushm	#3,	r10	;16-bit words
    49ae:	21 83       	decd	r1		;
#ifdef CONFIG_LIBEDB_PRINTF
#include <libedb/edb.h>
#endif
static void init_hw()
{
    msp_watchdog_disable();
    49b0:	b0 12 f2 49 	call	#18930		;#0x49f2
    msp_gpio_unlock();
    49b4:	92 c3 30 01 	bic	#1,	&0x0130	;r3 As==01
    msp_clock_setup();
    49b8:	b0 12 08 4a 	call	#18952		;#0x4a08
{
//	WISP_init();
    	init_hw();
#ifdef CONFIG_EDB
	//debug_setup();
	edb_init();
    49bc:	b0 12 b2 4b 	call	#19378		;#0x4bb2
#endif
	INIT_CONSOLE();
	__enable_interrupt();
    49c0:	32 d2       	eint			
    49c2:	03 43       	nop			
	while(1){
		WATCHPOINT(1);
		PRINTF("test\r\n");
    49c4:	38 40 6a 4b 	mov	#19306,	r8	;#0x4b6a
    49c8:	39 40 34 53 	mov	#21300,	r9	;#0x5334
    49cc:	3a 40 86 4b 	mov	#19334,	r10	;#0x4b86
    49d0:	88 12       	call	r8		;
    49d2:	b1 40 00 44 	mov	#17408,	0(r1)	;#0x4400
    49d6:	00 00 
    49d8:	89 12       	call	r9		;
    49da:	8a 12       	call	r10		;
	}
    49dc:	f9 3f       	jmp	$-12     	;abs 0x49d0

000049de <msp_watchdog_enable>:
#include "watchdog.h"

static uint8_t watchdog_bits;

void msp_watchdog_enable(uint8_t bits)
{
    49de:	3c f0 ff 00 	and	#255,	r12	;#0x00ff
    WDTCTL = WDTPW | WDTCNTCL | bits;
    49e2:	0d 4c       	mov	r12,	r13	;
    49e4:	3d d0 08 5a 	bis	#23048,	r13	;#0x5a08
    49e8:	82 4d 5c 01 	mov	r13,	&0x015c	;
    watchdog_bits = bits;
    49ec:	c2 4c 44 1d 	mov.b	r12,	&0x1d44	;
}
    49f0:	30 41       	ret			

000049f2 <msp_watchdog_disable>:

void msp_watchdog_disable()
{
     WDTCTL = WDTPW + WDTHOLD;
    49f2:	b2 40 80 5a 	mov	#23168,	&0x015c	;#0x5a80
    49f6:	5c 01 
}
    49f8:	30 41       	ret			

000049fa <msp_watchdog_kick>:

void msp_watchdog_kick()
{
    WDTCTL = WDTPW | WDTCNTCL | watchdog_bits;
    49fa:	5c 42 44 1d 	mov.b	&0x1d44,r12	;0x1d44
    49fe:	3c d0 08 5a 	bis	#23048,	r12	;#0x5a08
    4a02:	82 4c 5c 01 	mov	r12,	&0x015c	;
}
    4a06:	30 41       	ret			

00004a08 <msp_clock_setup>:
#define s(x) #x
#define ss(x) s(x)

#pragma message "bits" ss(CONFIG_DCOFSEL_BITS)

    CSCTL0_H = CSKEY_H;
    4a08:	f2 40 a5 ff 	mov.b	#65445,	&0x0161	;#0xffa5
    4a0c:	61 01 
//CSCTL1 = CONFIG_DCOFSEL_BITS;
    CSCTL1 = DCORSEL + DCOFSEL_3;
    4a0e:	b2 40 46 00 	mov	#70,	&0x0162	;#0x0046
    4a12:	62 01 

    CSCTL2 = SELA_0 | SELS_3 | SELM_3;
    4a14:	b2 40 33 00 	mov	#51,	&0x0164	;#0x0033
    4a18:	64 01 
    CSCTL3 = DIVA_0 | DIVS_0 | DIVM_0;
    4a1a:	82 43 66 01 	mov	#0,	&0x0166	;r3 As==00

#else // __MSP430*__
#error Device not supported by libmsp/clock.c
#endif // __MSP430*__
}
    4a1e:	30 41       	ret			

00004a20 <signal_debugger>:
static void signal_debugger()
{
    // pulse the signal line

    // target signal line starts in high imedence state
    GPIO(PORT_SIG, OUT) |= BIT(PIN_SIG);        // output high
    4a20:	f2 d0 10 00 	bis.b	#16,	&0x0202	;#0x0010
    4a24:	02 02 
    GPIO(PORT_SIG, DIR) |= BIT(PIN_SIG);        // output enable
    4a26:	f2 d0 10 00 	bis.b	#16,	&0x0204	;#0x0010
    4a2a:	04 02 
    GPIO(PORT_SIG, OUT) &= ~BIT(PIN_SIG);    // output low
    4a2c:	f2 f0 ef ff 	and.b	#65519,	&0x0202	;#0xffef
    4a30:	02 02 
    GPIO(PORT_SIG, DIR) &= ~BIT(PIN_SIG);    // back to high impedence state
    4a32:	f2 f0 ef ff 	and.b	#65519,	&0x0204	;#0xffef
    4a36:	04 02 
    GPIO(PORT_SIG, IFG) &= ~BIT(PIN_SIG); // clear interrupt flag (might have been set by the above)
    4a38:	f2 f0 ef ff 	and.b	#65519,	&0x021c	;#0xffef
    4a3c:	1c 02 
}
    4a3e:	30 41       	ret			

00004a40 <unmask_debugger_signal>:


static void unmask_debugger_signal()
{
    //sig_active = true;
    GPIO(PORT_SIG, IES) &= ~BIT(PIN_SIG); // rising edge
    4a40:	f2 f0 ef ff 	and.b	#65519,	&0x0218	;#0xffef
    4a44:	18 02 
    GPIO(PORT_SIG, IFG) &= ~BIT(PIN_SIG); // clear the flag that might have been set by IES write
    4a46:	f2 f0 ef ff 	and.b	#65519,	&0x021c	;#0xffef
    4a4a:	1c 02 
    GPIO(PORT_SIG, IE) |= BIT(PIN_SIG); // enable interrupt
    4a4c:	f2 d0 10 00 	bis.b	#16,	&0x021a	;#0x0010
    4a50:	1a 02 
}
    4a52:	30 41       	ret			

00004a54 <mask_debugger_signal>:

static void mask_debugger_signal()
{
    GPIO(PORT_SIG, IE) &= ~BIT(PIN_SIG); // disable interrupt
    4a54:	f2 f0 ef ff 	and.b	#65519,	&0x021a	;#0xffef
    4a58:	1a 02 
    //sig_active = false;
}
    4a5a:	30 41       	ret			

00004a5c <signal_debugger_with_data>:
    GPIO(PORT_SIG, IFG) &= ~BIT(PIN_SIG); // clear interrupt flag (might have been set by the above)
}

#ifdef CONFIG_ENABLE_TARGET_SIDE_DEBUG_MODE
static void signal_debugger_with_data(uint8_t data)
{
    4a5c:	2a 15       	pushm	#3,	r10	;16-bit words
    4a5e:	21 82       	sub	#4,	r1	;r2 As==10
    4a60:	48 4c       	mov.b	r12,	r8	;
    uint8_t bit;
    uint8_t port_bits[SIG_SERIAL_NUM_BITS];

    // Precompute all port values in order to keep the bit duration constant,
    // i.e. so that it does not vary with the bit index and bit value.
    for (i = 0; i < SIG_SERIAL_NUM_BITS; ++i) {
    4a62:	0a 43       	clr	r10		;
    4a64:	19 43       	mov	#1,	r9	;r3 As==01
    4a66:	09 51       	add	r1,	r9	;
    4a68:	09 5a       	add	r10,	r9	;
        bit = (data >> i) & 0x1;
    4a6a:	0c 48       	mov	r8,	r12	;
    4a6c:	0d 4a       	mov	r10,	r13	;
    4a6e:	b0 12 ba 52 	call	#21178		;#0x52ba
    4a72:	5c f3       	and.b	#1,	r12	;r3 As==01
        port_bits[i] = bit << PIN_SIG;
    4a74:	0d 4c       	mov	r12,	r13	;
    4a76:	43 18 0d 5d 	rpt #4 { rlax.w	r13		;
    4a7a:	c9 4d 00 00 	mov.b	r13,	0(r9)	;
    uint8_t bit;
    uint8_t port_bits[SIG_SERIAL_NUM_BITS];

    // Precompute all port values in order to keep the bit duration constant,
    // i.e. so that it does not vary with the bit index and bit value.
    for (i = 0; i < SIG_SERIAL_NUM_BITS; ++i) {
    4a7e:	1a 53       	inc	r10		;
    4a80:	3a 90 03 00 	cmp	#3,	r10	;
    4a84:	ef 23       	jnz	$-32     	;abs 0x4a64
        bit = (data >> i) & 0x1;
        port_bits[i] = bit << PIN_SIG;
    }

    __disable_interrupt();
    4a86:	32 c2       	dint			

    // target signal line starts in high imedence state

    // starting pulse
    GPIO(PORT_SIG, OUT) |= BIT(PIN_SIG);        // output high
    4a88:	f2 d0 10 00 	bis.b	#16,	&0x0202	;#0x0010
    4a8c:	02 02 
    GPIO(PORT_SIG, DIR) |= BIT(PIN_SIG);        // output enable
    4a8e:	f2 d0 10 00 	bis.b	#16,	&0x0204	;#0x0010
    4a92:	04 02 
    GPIO(PORT_SIG, OUT) &= ~BIT(PIN_SIG);    // output low
    4a94:	f2 f0 ef ff 	and.b	#65519,	&0x0202	;#0xffef
    4a98:	02 02 

#if SIG_SERIAL_NUM_BITS > 3
    PULSE_BIT(3);
#endif
#if SIG_SERIAL_NUM_BITS > 2
    PULSE_BIT(2);
    4a9a:	0d 14       	pushm.a	#1,	r13	;20-bit words
    4a9c:	3d 40 27 00 	mov	#39,	r13	;#0x0027
    4aa0:	1d 83       	dec	r13		;
    4aa2:	fe 23       	jnz	$-2      	;abs 0x4aa0
    4aa4:	0d 16       	popm.a	#1,	r13	;20-bit words
    4aa6:	03 43       	nop			
    4aa8:	d2 d1 03 00 	bis.b	3(r1),	&0x0202	;
    4aac:	02 02 
    4aae:	f2 f0 ef ff 	and.b	#65519,	&0x0202	;#0xffef
    4ab2:	02 02 
#endif
#if SIG_SERIAL_NUM_BITS > 1
    PULSE_BIT(1);
    4ab4:	0d 14       	pushm.a	#1,	r13	;20-bit words
    4ab6:	3d 40 27 00 	mov	#39,	r13	;#0x0027
    4aba:	1d 83       	dec	r13		;
    4abc:	fe 23       	jnz	$-2      	;abs 0x4aba
    4abe:	0d 16       	popm.a	#1,	r13	;20-bit words
    4ac0:	03 43       	nop			
    4ac2:	d2 d1 02 00 	bis.b	2(r1),	&0x0202	;
    4ac6:	02 02 
    4ac8:	f2 f0 ef ff 	and.b	#65519,	&0x0202	;#0xffef
    4acc:	02 02 
#endif
#if SIG_SERIAL_NUM_BITS > 0
    PULSE_BIT(0);
    4ace:	0d 14       	pushm.a	#1,	r13	;20-bit words
    4ad0:	3d 40 27 00 	mov	#39,	r13	;#0x0027
    4ad4:	1d 83       	dec	r13		;
    4ad6:	fe 23       	jnz	$-2      	;abs 0x4ad4
    4ad8:	0d 16       	popm.a	#1,	r13	;20-bit words
    4ada:	03 43       	nop			
    4adc:	d2 d1 01 00 	bis.b	1(r1),	&0x0202	;
    4ae0:	02 02 
    4ae2:	f2 f0 ef ff 	and.b	#65519,	&0x0202	;#0xffef
    4ae6:	02 02 
#endif

    // terminating pulse: must happen after the interval for the last bit elapses
    __delay_cycles(SIG_SERIAL_BIT_DURATION_ON_TARGET); // ignore the few compute instructions
    4ae8:	0d 14       	pushm.a	#1,	r13	;20-bit words
    4aea:	3d 40 27 00 	mov	#39,	r13	;#0x0027
    4aee:	1d 83       	dec	r13		;
    4af0:	fe 23       	jnz	$-2      	;abs 0x4aee
    4af2:	0d 16       	popm.a	#1,	r13	;20-bit words
    4af4:	03 43       	nop			
    GPIO(PORT_SIG, OUT) |= BIT(PIN_SIG);        // output high
    4af6:	f2 d0 10 00 	bis.b	#16,	&0x0202	;#0x0010
    4afa:	02 02 
    GPIO(PORT_SIG, OUT) &= ~BIT(PIN_SIG);    // output low
    4afc:	f2 f0 ef ff 	and.b	#65519,	&0x0202	;#0xffef
    4b00:	02 02 

    GPIO(PORT_SIG, DIR) &= ~BIT(PIN_SIG);    // back to high impedence state
    4b02:	f2 f0 ef ff 	and.b	#65519,	&0x0204	;#0xffef
    4b06:	04 02 
    GPIO(PORT_SIG, IFG) &= ~BIT(PIN_SIG); // clear interrupt flag (might have been set by the above)
    4b08:	f2 f0 ef ff 	and.b	#65519,	&0x021c	;#0xffef
    4b0c:	1c 02 

    __enable_interrupt();
    4b0e:	32 d2       	eint			
    4b10:	03 43       	nop			
}
    4b12:	21 52       	add	#4,	r1	;r2 As==10
    4b14:	28 17       	popm	#3,	r10	;16-bit words
    4b16:	30 41       	ret			

00004b18 <exit_debug_mode>:
    set_state(STATE_DEBUG);
}

void exit_debug_mode()
{
    if (interrupt_context.features & DEBUG_MODE_WITH_UART)
    4b18:	e2 b3 62 1d 	bit.b	#2,	&0x1d62	;r3 As==10
    4b1c:	02 24       	jz	$+6      	;abs 0x4b22
        UART_teardown();
    4b1e:	b0 12 26 50 	call	#20518		;#0x5026
    //sig_active = false;
}

static void clear_interrupt_context()
{
    interrupt_context.type = INTERRUPT_TYPE_NONE;
    4b22:	3c 40 5e 1d 	mov	#7518,	r12	;#0x1d5e
    4b26:	8c 43 00 00 	mov	#0,	0(r12)	;r3 As==00
    interrupt_context.id = 0;
    4b2a:	8c 43 02 00 	mov	#0,	2(r12)	;r3 As==00
    interrupt_context.features = 0;
    4b2e:	cc 43 04 00 	mov.b	#0,	4(r12)	;r3 As==00
{
    if (interrupt_context.features & DEBUG_MODE_WITH_UART)
        UART_teardown();

    clear_interrupt_context();
}
    4b32:	30 41       	ret			

00004b34 <request_debug_mode>:
    // we are asleep (at end of this function) before ISR runs. Otherwise,
    // the race completely derails the sequence to enter-exit debug mode.
    // Furthermore, to prevent a signal from the debugger arriving while
    // we are trying to request debug mode, disable interrupts at the
    // very beginning of this function.
    __disable_interrupt();
    4b34:	32 c2       	dint			

    debug_flags |= DEBUG_REQUESTED_BY_TARGET;
    4b36:	a2 d3 64 1d 	bis	#2,	&0x1d64	;r3 As==10
    interrupt_context.type = int_type;
    4b3a:	3f 40 5e 1d 	mov	#7518,	r15	;#0x1d5e
    4b3e:	8f 4c 00 00 	mov	r12,	0(r15)	;
    interrupt_context.id = int_id;
    4b42:	8f 4d 02 00 	mov	r13,	2(r15)	;
    interrupt_context.features = features;
    4b46:	cf 4e 04 00 	mov.b	r14,	4(r15)	;

    mask_debugger_signal();
    4b4a:	b0 12 54 4a 	call	#19028		;#0x4a54

    switch (state) {
    4b4e:	92 93 66 1d 	cmp	#1,	&0x1d66	;r3 As==01
    4b52:	04 20       	jnz	$+10     	;abs 0x4b5c
        case STATE_DEBUG: // an assert/breakpoint nested in an energy guard
            signal_debugger_with_data(SIG_CMD_INTERRUPT);
    4b54:	5c 43       	mov.b	#1,	r12	;r3 As==01
    4b56:	b0 12 5c 4a 	call	#19036		;#0x4a5c
            break;
    4b5a:	02 3c       	jmp	$+6      	;abs 0x4b60
        default: // hot path (hit an assert/bkpt), we want the debugger to take action asap
            signal_debugger();
    4b5c:	b0 12 20 4a 	call	#18976		;#0x4a20
    }

    unmask_debugger_signal();
    4b60:	b0 12 40 4a 	call	#19008		;#0x4a40

    // go to sleep, enable interrupts, and wait for signal from debugger
    __bis_SR_register(DEBUG_MODE_REQUEST_WAIT_STATE_BITS | GIE);
    4b64:	32 d0 18 00 	bis	#24,	r2	;#0x0018
}
    4b68:	30 41       	ret			

00004b6a <request_non_interactive_debug_mode>:
// calling convention from GCC. And, we have to compile libedb with GCC,
// because Clang compilation of it doesn't function correctly (probably
// because of delay variations, etc.).
void request_non_interactive_debug_mode()
{
    request_debug_mode(INTERRUPT_TYPE_ENERGY_GUARD, 0, DEBUG_MODE_WITH_UART);
    4b6a:	3c 40 05 00 	mov	#5,	r12	;
    4b6e:	0d 43       	clr	r13		;
    4b70:	2e 43       	mov	#2,	r14	;r3 As==10
    4b72:	b0 12 34 4b 	call	#19252		;#0x4b34
}
    4b76:	30 41       	ret			

00004b78 <request_energy_guard_debug_mode>:

// Same comment applies as above
void request_energy_guard_debug_mode()
{
    request_debug_mode(INTERRUPT_TYPE_ENERGY_GUARD, 0, DEBUG_MODE_WITH_UART);
    4b78:	3c 40 05 00 	mov	#5,	r12	;
    4b7c:	0d 43       	clr	r13		;
    4b7e:	2e 43       	mov	#2,	r14	;r3 As==10
    4b80:	b0 12 34 4b 	call	#19252		;#0x4b34
}
    4b84:	30 41       	ret			

00004b86 <resume_application>:
#endif // CONFIG_ENABLE_TARGET_SIDE_DEBUG_MODE

#ifdef CONFIG_ENABLE_TARGET_SIDE_DEBUG_MODE // resume_application used only for energy guards
void resume_application()
{
    exit_debug_mode();
    4b86:	b0 12 18 4b 	call	#19224		;#0x4b18
{
#ifdef CONFIG_STATE_PINS
    uint8_t port_value;
#endif

    state = new_state;
    4b8a:	a2 43 66 1d 	mov	#2,	&0x1d66	;r3 As==10
{
    exit_debug_mode();

    set_state(STATE_SUSPENDED); // sleep and wait for debugger to restore energy

    mask_debugger_signal();
    4b8e:	b0 12 54 4a 	call	#19028		;#0x4a54
    // we are asleep (at end of this function) before ISR runs. Otherwise,
    // the race completely derails the sequence to enter-exit debug mode.
    // Furthermore, to prevent a signal from the debugger arriving while
    // we are trying to request debug mode, disable interrupts at the
    // very beginning of this function.
    __disable_interrupt();
    4b92:	32 c2       	dint			

    // debugger is in DEBUG state, so our signal needs to contain
    // the information about whether we are exiting the debug mode
    // (as we are here) or whether we are requesting a nested debug
    // mode due to an assert/bkpt.
    signal_debugger_with_data(SIG_CMD_EXIT); // tell debugger we have shutdown UART
    4b94:	6c 43       	mov.b	#2,	r12	;r3 As==10
    4b96:	b0 12 5c 4a 	call	#19036		;#0x4a5c

    unmask_debugger_signal();
    4b9a:	b0 12 40 4a 	call	#19008		;#0x4a40

    // go to sleep, enable interrupts, and wait for signal from debugger
    __bis_SR_register(DEBUG_MODE_REQUEST_WAIT_STATE_BITS | GIE);
    4b9e:	32 d0 18 00 	bis	#24,	r2	;#0x0018
}
    4ba2:	30 41       	ret			

00004ba4 <mem_addr_from_bytes>:
#endif

uintptr_t mem_addr_from_bytes(uint8_t *buf)
{
    return (uintptr_t)
    4ba4:	5d 4c 01 00 	mov.b	1(r12),	r13	;
    4ba8:	47 18 0d 5d 	rpt #8 { rlax.w	r13		;
    4bac:	6c 4c       	mov.b	@r12,	r12	;
        (((uint32_t)buf[3] << 24) |
        ((uint32_t)buf[2] << 16) |
        ((uint32_t)buf[1] << 8) |
        ((uint32_t)buf[0] << 0));
}
    4bae:	0c dd       	bis	r13,	r12	;
    4bb0:	30 41       	ret			

00004bb2 <edb_init>:
#ifdef CONFIG_STATE_PINS
    GPIO(PORT_STATE, OUT) &= ~(BIT(PIN_STATE_0) | BIT(PIN_STATE_1)); // output low
    GPIO(PORT_STATE, DIR) |= BIT(PIN_STATE_0) | BIT(PIN_STATE_1); // output
#endif

    GPIO(PORT_SIG, DIR) &= ~BIT(PIN_SIG); // input
    4bb2:	f2 f0 ef ff 	and.b	#65519,	&0x0204	;#0xffef
    4bb6:	04 02 
    GPIO(PORT_SIG, IFG) &= ~BIT(PIN_SIG); // clear interrupt flag (might have been set by the above)
    4bb8:	f2 f0 ef ff 	and.b	#65519,	&0x021c	;#0xffef
    4bbc:	1c 02 
#ifdef LED_IN_DEBUG_STATE
    GPIO(PORT_DEBUG_MODE_LED, OUT) &= ~(BIT(PIN_DEBUG_MODE_LED));
    GPIO(PORT_DEBUG_MODE_LED, DIR) |= BIT(PIN_DEBUG_MODE_LED);
#endif

    unmask_debugger_signal();
    4bbe:	b0 12 40 4a 	call	#19008		;#0x4a40
{
#ifdef CONFIG_STATE_PINS
    uint8_t port_value;
#endif

    state = new_state;
    4bc2:	82 43 66 1d 	mov	#0,	&0x1d66	;r3 As==00

    unmask_debugger_signal();

    set_state(STATE_IDLE);

    __enable_interrupt();
    4bc6:	32 d2       	eint			
    4bc8:	03 43       	nop			

    // Codepoint pin config must be after the boot breakpoint since may change dir

#if defined(CONFIG_ENABLE_PASSIVE_BREAKPOINTS) || defined(CONFIG_ENABLE_WATCHPOINTS)
    // codepoint pins are outputs
    GPIO(PORT_CODEPOINT, OUT) &= ~BITS_CODEPOINT;
    4bca:	f2 f0 cf ff 	and.b	#65487,	&0x0222	;#0xffcf
    4bce:	22 02 
    GPIO(PORT_CODEPOINT, DIR) |= BITS_CODEPOINT;
    4bd0:	f2 d0 30 00 	bis.b	#48,	&0x0224	;#0x0030
    4bd4:	24 02 
    GPIO(PORT_CODEPOINT, DIR) &= ~BITS_CODEPOINT;
#endif

    // For measuring boot latency
    // GPIO(PORT_STATE, OUT) |= BIT(PIN_STATE_0);
}
    4bd6:	30 41       	ret			

00004bd8 <edb_set_app_output_cb>:

void edb_set_app_output_cb(app_output_cb_t *cb)
{
    app_output_cb = cb;
    4bd8:	82 4c 68 1d 	mov	r12,	&0x1d68	;
}
    4bdc:	30 41       	ret			

00004bde <PORT1_ISR>:

__attribute__ ((interrupt(GPIO_VECTOR(PORT_SIG))))
void GPIO_ISR(PORT_SIG)(void)
{
    4bde:	bf 15       	pushm	#12,	r15	;16-bit words
    4be0:	21 83       	decd	r1		;
	switch(__even_in_range(INTVEC(PORT_SIG), INTVEC_RANGE(PORT_SIG)))
    4be2:	1c 42 0e 02 	mov	&0x020e,r12	;0x020e
    4be6:	3c 90 0a 00 	cmp	#10,	r12	;#0x000a
    4bea:	02 24       	jz	$+6      	;abs 0x4bf0
    4bec:	80 00 de 4f 	mova	#20446,	r0	;0x04fde

            // Clear the int flag, because during active debug mode, we are
            // in the interrupt context (we return from interrupt on exit
            // from the debug node) and we re-use the signal pin before exit.
#ifndef UNMASK_DEBUGGER_SIGNAL_WORKAROUND
            GPIO(PORT_SIG, IFG) &= ~PIN_SIG;
    4bf0:	e2 c2 1c 02 	bic.b	#4,	&0x021c	;r2 As==10
#endif

            // First time the ISR runs, save application stack pointer
            if (state == STATE_IDLE) {
    4bf4:	1a 42 66 1d 	mov	&0x1d66,r10	;0x1d66
    4bf8:	0a 93       	cmp	#0,	r10	;r3 As==00
    4bfa:	07 20       	jnz	$+16     	;abs 0x4c0a
#if defined(__TI_COMPILER_VERSION__) || defined(__IAR_SYSTEMS_ICC__)
                uint16_t *sp = (uint16_t *) __get_SP_register();
#elif defined(__GNUC__)
                uint16_t *sp;
                __asm__ (
    4bfc:	0c 41       	mov	r1,	r12	;
                    : /* no clobbers */
                );

                /* layout: LOWADDR >>> HIGHADDR (see disasm of  this ISR)
                 * LOCALS [1x2] | SAVED REGS [12x2] | SR [1x2] | PC [1x2] */
                pc = *(sp + 1 + 12 + 1); // note: pointer arithmetic
    4bfe:	92 4c 1c 00 	mov	28(r12),&0x1d5c	;0x0001c
    4c02:	5c 1d 
#else
#error Compiler not supported!
#endif
            }

            mask_debugger_signal();
    4c04:	b0 12 54 4a 	call	#19028		;#0x4a54
    4c08:	08 3c       	jmp	$+18     	;abs 0x4c1a
    4c0a:	b0 12 54 4a 	call	#19028		;#0x4a54
#endif
}

static inline void handle_debugger_signal()
{
    switch (state) {
    4c0e:	1c 43       	mov	#1,	r12	;r3 As==01
    4c10:	0c 9a       	cmp	r10,	r12	;
    4c12:	03 2c       	jc	$+8      	;abs 0x4c1a
    4c14:	2a 93       	cmp	#2,	r10	;r3 As==10
    4c16:	96 25       	jz	$+814    	;abs 0x4f44
    4c18:	98 3d       	jmp	$+818    	;abs 0x4f4a
        case STATE_IDLE: // debugger requested us to enter debug mode
        case STATE_DEBUG: // debugger requested to enter a *nested* debug mode

            // If entering debug mode on debugger's initiative (i.e. when we
            // didn't request it), then need to set the features.
            if (interrupt_context.type == INTERRUPT_TYPE_NONE) {
    4c1a:	82 93 5e 1d 	cmp	#0,	&0x1d5e	;r3 As==00
    4c1e:	07 20       	jnz	$+16     	;abs 0x4c2e
                interrupt_context.type = INTERRUPT_TYPE_DEBUGGER_REQ;
    4c20:	3c 40 5e 1d 	mov	#7518,	r12	;#0x1d5e
    4c24:	9c 43 00 00 	mov	#1,	0(r12)	;r3 As==01
                interrupt_context.features = DEBUG_MODE_FULL_FEATURES;
    4c28:	fc 40 03 00 	mov.b	#3,	4(r12)	;
    4c2c:	04 00 
    interrupt_context.features = 0;
}

static void enter_debug_mode()
{
    __enable_interrupt();
    4c2e:	32 d2       	eint			
    4c30:	03 43       	nop			

    if (interrupt_context.features & DEBUG_MODE_WITH_UART)
    4c32:	e2 b3 62 1d 	bit.b	#2,	&0x1d62	;r3 As==10
    4c36:	02 24       	jz	$+6      	;abs 0x4c3c
        UART_init();
    4c38:	b0 12 e4 4f 	call	#20452		;#0x4fe4
{
#ifdef CONFIG_STATE_PINS
    uint8_t port_value;
#endif

    state = new_state;
    4c3c:	92 43 66 1d 	mov	#1,	&0x1d66	;r3 As==01

#ifdef CONFIG_ENABLE_TARGET_SIDE_DEBUG_MODE
            // If target initiated the debug mode request then, send the
            // features that the target wants as payload, otherwise don't need
            // to send any payload with the signal.
            if (interrupt_context.type != INTERRUPT_TYPE_DEBUGGER_REQ) {
    4c40:	92 93 5e 1d 	cmp	#1,	&0x1d5e	;r3 As==01
    4c44:	05 24       	jz	$+12     	;abs 0x4c50
                signal_debugger_with_data(interrupt_context.features);
    4c46:	5c 42 62 1d 	mov.b	&0x1d62,r12	;0x1d62
    4c4a:	b0 12 5c 4a 	call	#19036		;#0x4a5c
    4c4e:	02 3c       	jmp	$+6      	;abs 0x4c54
            } else {
                signal_debugger();
    4c50:	b0 12 20 4a 	call	#18976		;#0x4a20
#else // !CONFIG_ENABLE_TARGET_SIDE_DEBUG_MODE
            signal_debugger();
#endif // !CONFIG_ENABLE_TARGET_SIDE_DEBUG_MODE

#ifndef UNMASK_DEBUGGER_SIGNAL_WORKAROUND
            unmask_debugger_signal();
    4c54:	b0 12 40 4a 	call	#19008		;#0x4a40
#endif

            if (interrupt_context.features & DEBUG_MODE_INTERACTIVE) {
    4c58:	d2 b3 62 1d 	bit.b	#1,	&0x1d62	;r3 As==01
    4c5c:	76 25       	jz	$+750    	;abs 0x4f4a
    4c5e:	0a 43       	clr	r10		;
    4c60:	09 4a       	mov	r10,	r9	;
            len_field_offset = msg_len;
            tx_buf[msg_len++] = 0; // length: to be filled out shortly
            tx_buf[msg_len++] = 0; // padding

            if (app_output_cb != NULL)
                app_output_cb(tx_buf + msg_len, &len);
    4c62:	37 40 6e 1d 	mov	#7534,	r7	;#0x1d6e
    4c66:	38 40 4f 1d 	mov	#7503,	r8	;#0x1d4f
#endif

    while(1) {

        // block until we receive a message
        UART_receive(uartRxBuf, CHUNK_BYTES);
    4c6a:	3c 40 5a 1d 	mov	#7514,	r12	;#0x1d5a
    4c6e:	1d 43       	mov	#1,	r13	;r3 As==01
    4c70:	b0 12 12 51 	call	#20754		;#0x5112
    static msgState_t msg_state = MSG_STATE_IDENTIFIER;
    static uint8_t data_len = 0;

    uint8_t i;
    for(i = 0; i < len; i++) {
        switch(msg_state)
    4c74:	1c 42 48 1d 	mov	&0x1d48,r12	;0x1d48
    4c78:	2c 93       	cmp	#2,	r12	;r3 As==10
    4c7a:	1d 24       	jz	$+60     	;abs 0x4cb6
    4c7c:	2d 43       	mov	#2,	r13	;r3 As==10
    4c7e:	0d 9c       	cmp	r12,	r13	;
    4c80:	05 28       	jnc	$+12     	;abs 0x4c8c
    4c82:	0c 93       	cmp	#0,	r12	;r3 As==00
    4c84:	09 24       	jz	$+20     	;abs 0x4c98
    4c86:	1c 93       	cmp	#1,	r12	;r3 As==01
    4c88:	0e 24       	jz	$+30     	;abs 0x4ca6
    4c8a:	50 3d       	jmp	$+674    	;abs 0x4f2c
    4c8c:	3c 90 03 00 	cmp	#3,	r12	;
    4c90:	19 24       	jz	$+52     	;abs 0x4cc4
    4c92:	2c 92       	cmp	#4,	r12	;r2 As==10
    4c94:	20 24       	jz	$+66     	;abs 0x4cd6
    4c96:	4a 3d       	jmp	$+662    	;abs 0x4f2c
        {
            case MSG_STATE_IDENTIFIER:
                {
                    uint8_t identifier = msg[i];
                    if(identifier == UART_IDENTIFIER_WISP) {
    4c98:	f2 90 f1 ff 	cmp.b	#65521,	&0x1d5a	;#0xfff1
    4c9c:	5a 1d 
    4c9e:	46 21       	jnz	$+654    	;abs 0x4f2c
                        // good identifier byte
                        msg_state = MSG_STATE_DESCRIPTOR;
    4ca0:	92 43 48 1d 	mov	#1,	&0x1d48	;r3 As==01
    4ca4:	43 3d       	jmp	$+648    	;abs 0x4f2c
                    // else we had a bad identifier byte, so don't change the state
                    break;
                }

            case MSG_STATE_DESCRIPTOR:
                data_len = 0;
    4ca6:	c2 43 46 1d 	mov.b	#0,	&0x1d46	;r3 As==00
                cmd->descriptor = msg[i];
    4caa:	59 42 5a 1d 	mov.b	&0x1d5a,r9	;0x1d5a
                cmd->len = 0;
                msg_state = MSG_STATE_DATALEN;
    4cae:	a2 43 48 1d 	mov	#2,	&0x1d48	;r3 As==10
                }

            case MSG_STATE_DESCRIPTOR:
                data_len = 0;
                cmd->descriptor = msg[i];
                cmd->len = 0;
    4cb2:	0a 43       	clr	r10		;
    4cb4:	3b 3d       	jmp	$+632    	;abs 0x4f2c
                msg_state = MSG_STATE_DATALEN;
                break;

            case MSG_STATE_DATALEN:
                data_len = msg[i]; // decremented as data bytes are parsed
    4cb6:	d2 42 5a 1d 	mov.b	&0x1d5a,&0x1d46	;0x1d5a
    4cba:	46 1d 
                msg_state = MSG_STATE_PADDING;
    4cbc:	b2 40 03 00 	mov	#3,	&0x1d48	;
    4cc0:	48 1d 
    4cc2:	34 3d       	jmp	$+618    	;abs 0x4f2c
                break;

            case MSG_STATE_PADDING:
                if (data_len) {
    4cc4:	c2 93 46 1d 	cmp.b	#0,	&0x1d46	;r3 As==00
    4cc8:	03 24       	jz	$+8      	;abs 0x4cd0
                    msg_state = MSG_STATE_DATA;
    4cca:	a2 42 48 1d 	mov	#4,	&0x1d48	;r2 As==10
    4cce:	2e 3d       	jmp	$+606    	;abs 0x4f2c
                } else { // done
                    msg_state = MSG_STATE_IDENTIFIER;
    4cd0:	82 43 48 1d 	mov	#0,	&0x1d48	;r3 As==00
    4cd4:	6a 3d       	jmp	$+726    	;abs 0x4faa
                    return true;
                }
                break;

            case MSG_STATE_DATA:
                if (data_len)
    4cd6:	5d 42 46 1d 	mov.b	&0x1d46,r13	;0x1d46
    4cda:	0d 93       	cmp	#0,	r13	;r3 As==00
    4cdc:	63 25       	jz	$+712    	;abs 0x4fa4
                    cmd->data[cmd->len++] = msg[i];
    4cde:	4e 4a       	mov.b	r10,	r14	;
    4ce0:	5e 53       	inc.b	r14		;
    4ce2:	3e f0 ff 00 	and	#255,	r14	;#0x00ff
    4ce6:	da 42 5a 1d 	mov.b	&0x1d5a,7498(r10);0x1d5a, 0x1d4a
    4cea:	4a 1d 
                if (--data_len == 0) {
    4cec:	7d 53       	add.b	#-1,	r13	;r3 As==11
    4cee:	c2 4d 46 1d 	mov.b	r13,	&0x1d46	;
                }
                break;

            case MSG_STATE_DATA:
                if (data_len)
                    cmd->data[cmd->len++] = msg[i];
    4cf2:	0a 4e       	mov	r14,	r10	;
                if (--data_len == 0) {
    4cf4:	4d 93       	cmp.b	#0,	r13	;r3 As==00
    4cf6:	1a 21       	jnz	$+566    	;abs 0x4f2c
                    msg_state = MSG_STATE_IDENTIFIER;
    4cf8:	82 43 48 1d 	mov	#0,	&0x1d48	;r3 As==00
    4cfc:	56 3d       	jmp	$+686    	;abs 0x4faa
    switch (cmd->descriptor)
    {
        case WISP_CMD_GET_PC:
        {
            msg_len = 0;
            tx_buf[msg_len++] = UART_IDENTIFIER_WISP;
    4cfe:	3c 40 6a 1d 	mov	#7530,	r12	;#0x1d6a
    4d02:	fc 40 f1 ff 	mov.b	#65521,	0(r12)	;#0xfff1
    4d06:	00 00 
            tx_buf[msg_len++] = WISP_RSP_ADDRESS;
    4d08:	cc 43 01 00 	mov.b	#0,	1(r12)	;r3 As==00
            tx_buf[msg_len++] = sizeof(uint32_t);
    4d0c:	ec 42 02 00 	mov.b	#4,	2(r12)	;r2 As==10
            tx_buf[msg_len++] = 0; // padding
    4d10:	cc 43 03 00 	mov.b	#0,	3(r12)	;r3 As==00
            tx_buf[msg_len++] = ((uintptr_t)pc >> 0) & 0xff;
    4d14:	1d 42 5c 1d 	mov	&0x1d5c,r13	;0x1d5c
    4d18:	cc 4d 04 00 	mov.b	r13,	4(r12)	;
            tx_buf[msg_len++] = ((uintptr_t)pc >> 8) & 0xff;
    4d1c:	5d 0f       	rrum	#4,	r13	;
    4d1e:	5d 0f       	rrum	#4,	r13	;
    4d20:	cc 4d 05 00 	mov.b	r13,	5(r12)	;
            tx_buf[msg_len++] = 0; // TODO: 20-bit ptr
    4d24:	cc 43 06 00 	mov.b	#0,	6(r12)	;r3 As==00
            tx_buf[msg_len++] = 0;
    4d28:	cc 43 07 00 	mov.b	#0,	7(r12)	;r3 As==00

            UART_send(tx_buf, msg_len);
    4d2c:	3d 42       	mov	#8,	r13	;r2 As==11
    4d2e:	b0 12 70 50 	call	#20592		;#0x5070
    4d32:	fc 3c       	jmp	$+506    	;abs 0x4f2c
uintptr_t mem_addr_from_bytes(uint8_t *buf)
{
    return (uintptr_t)
        (((uint32_t)buf[3] << 24) |
        ((uint32_t)buf[2] << 16) |
        ((uint32_t)buf[1] << 8) |
    4d34:	3d 40 4a 1d 	mov	#7498,	r13	;#0x1d4a
}
#endif

uintptr_t mem_addr_from_bytes(uint8_t *buf)
{
    return (uintptr_t)
    4d38:	5e 4d 01 00 	mov.b	1(r13),	r14	;
    4d3c:	47 18 0e 5e 	rpt #8 { rlax.w	r14		;
    4d40:	6c 4d       	mov.b	@r13,	r12	;
    4d42:	0c de       	bis	r14,	r12	;
    4d44:	5d 4d 04 00 	mov.b	4(r13),	r13	;
    4d48:	7e 40 38 00 	mov.b	#56,	r14	;#0x0038
    4d4c:	4e 9d       	cmp.b	r13,	r14	;
    4d4e:	01 2c       	jc	$+4      	;abs 0x4d52
    4d50:	4d 4e       	mov.b	r14,	r13	;

            if (len > max_len)
                len = max_len;

            msg_len = 0;
            tx_buf[msg_len++] = UART_IDENTIFIER_WISP;
    4d52:	3e 40 6a 1d 	mov	#7530,	r14	;#0x1d6a
    4d56:	fe 40 f1 ff 	mov.b	#65521,	0(r14)	;#0xfff1
    4d5a:	00 00 
            tx_buf[msg_len++] = WISP_RSP_MEMORY;
    4d5c:	de 43 01 00 	mov.b	#1,	1(r14)	;r3 As==01
            tx_buf[msg_len++] = sizeof(uint32_t) + len;
    4d60:	4f 4d       	mov.b	r13,	r15	;
    4d62:	6f 52       	add.b	#4,	r15	;r2 As==10
    4d64:	ce 4f 02 00 	mov.b	r15,	2(r14)	;
            tx_buf[msg_len++] = 0; // padding
    4d68:	ce 43 03 00 	mov.b	#0,	3(r14)	;r3 As==00
            tx_buf[msg_len++] = ((uintptr_t)address >> 0) & 0xff;
    4d6c:	ce 4c 04 00 	mov.b	r12,	4(r14)	;
            tx_buf[msg_len++] = ((uintptr_t)address >> 8) & 0xff;
    4d70:	0f 4c       	mov	r12,	r15	;
    4d72:	5f 0f       	rrum	#4,	r15	;
    4d74:	5f 0f       	rrum	#4,	r15	;
    4d76:	ce 4f 05 00 	mov.b	r15,	5(r14)	;
            tx_buf[msg_len++] = 0; // TODO: 20-bit ptr
    4d7a:	ce 43 06 00 	mov.b	#0,	6(r14)	;r3 As==00
            tx_buf[msg_len++] = 0;
    4d7e:	ce 43 07 00 	mov.b	#0,	7(r14)	;r3 As==00

            for (i = 0; i < len; ++i)
    4d82:	4d 93       	cmp.b	#0,	r13	;r3 As==00
    4d84:	0d 24       	jz	$+28     	;abs 0x4da0
    4d86:	7d 52       	add.b	#8,	r13	;r2 As==11
    4d88:	3d f0 ff 00 	and	#255,	r13	;#0x00ff
    4d8c:	3e 42       	mov	#8,	r14	;r2 As==11
                tx_buf[msg_len++] = *address++;
    4d8e:	4f 4e       	mov.b	r14,	r15	;
    4d90:	5f 53       	inc.b	r15		;
    4d92:	ee 4c 6a 1d 	mov.b	@r12,	7530(r14); 0x1d6a
    4d96:	1c 53       	inc	r12		;
    4d98:	4e 4f       	mov.b	r15,	r14	;
            tx_buf[msg_len++] = ((uintptr_t)address >> 0) & 0xff;
            tx_buf[msg_len++] = ((uintptr_t)address >> 8) & 0xff;
            tx_buf[msg_len++] = 0; // TODO: 20-bit ptr
            tx_buf[msg_len++] = 0;

            for (i = 0; i < len; ++i)
    4d9a:	4f 9d       	cmp.b	r13,	r15	;
    4d9c:	f8 23       	jnz	$-14     	;abs 0x4d8e
    4d9e:	01 3c       	jmp	$+4      	;abs 0x4da2
            tx_buf[msg_len++] = sizeof(uint32_t) + len;
            tx_buf[msg_len++] = 0; // padding
            tx_buf[msg_len++] = ((uintptr_t)address >> 0) & 0xff;
            tx_buf[msg_len++] = ((uintptr_t)address >> 8) & 0xff;
            tx_buf[msg_len++] = 0; // TODO: 20-bit ptr
            tx_buf[msg_len++] = 0;
    4da0:	3d 42       	mov	#8,	r13	;r2 As==11

            for (i = 0; i < len; ++i)
                tx_buf[msg_len++] = *address++;

            UART_send(tx_buf, msg_len);
    4da2:	3c 40 6a 1d 	mov	#7530,	r12	;#0x1d6a
    4da6:	b0 12 70 50 	call	#20592		;#0x5070
    4daa:	c0 3c       	jmp	$+386    	;abs 0x4f2c
uintptr_t mem_addr_from_bytes(uint8_t *buf)
{
    return (uintptr_t)
        (((uint32_t)buf[3] << 24) |
        ((uint32_t)buf[2] << 16) |
        ((uint32_t)buf[1] << 8) |
    4dac:	3c 40 4a 1d 	mov	#7498,	r12	;#0x1d4a
}
#endif

uintptr_t mem_addr_from_bytes(uint8_t *buf)
{
    return (uintptr_t)
    4db0:	5b 4c 01 00 	mov.b	1(r12),	r11	;
    4db4:	47 18 0b 5b 	rpt #8 { rlax.w	r11		;
    4db8:	6d 4c       	mov.b	@r12,	r13	;
    4dba:	0b dd       	bis	r13,	r11	;
        case WISP_CMD_WRITE_MEM:
        {
            // TODO: assert(msg->len >= 5)

            offset = 0;
            address = (uint8_t *)mem_addr_from_bytes(&cmd->data[offset]); // TODO: 20-bit ptr
    4dbc:	0d 4b       	mov	r11,	r13	;
            offset += sizeof(uint32_t);
            len = cmd->data[offset];
    4dbe:	5c 4c 04 00 	mov.b	4(r12),	r12	;
            offset += sizeof(uint8_t);
            uint8_t *value = &cmd->data[offset];

            for (i =  0; i < len; ++i) {
    4dc2:	0c 93       	cmp	#0,	r12	;r3 As==00
    4dc4:	11 24       	jz	$+36     	;abs 0x4de8
    4dc6:	0d 48       	mov	r8,	r13	;
    4dc8:	4f 4c       	mov.b	r12,	r15	;
    4dca:	7f 53       	add.b	#-1,	r15	;r3 As==11
    4dcc:	3f f0 ff 00 	and	#255,	r15	;#0x00ff
    4dd0:	1f 53       	inc	r15		;
    4dd2:	0e 4f       	mov	r15,	r14	;
    4dd4:	0e 5b       	add	r11,	r14	;
    4dd6:	0c 4b       	mov	r11,	r12	;
                *address = *value++;
    4dd8:	ec 4d 00 00 	mov.b	@r13,	0(r12)	;
                address++;
    4ddc:	1c 53       	inc	r12		;
    4dde:	1d 53       	inc	r13		;
            offset += sizeof(uint32_t);
            len = cmd->data[offset];
            offset += sizeof(uint8_t);
            uint8_t *value = &cmd->data[offset];

            for (i =  0; i < len; ++i) {
    4de0:	0c 9e       	cmp	r14,	r12	;
    4de2:	fa 23       	jnz	$-10     	;abs 0x4dd8
    4de4:	0d 4b       	mov	r11,	r13	;
    4de6:	0d 5f       	add	r15,	r13	;
                *address = *value++;
                address++;
            }

            msg_len = 0;
            tx_buf[msg_len++] = UART_IDENTIFIER_WISP;
    4de8:	3c 40 6a 1d 	mov	#7530,	r12	;#0x1d6a
    4dec:	fc 40 f1 ff 	mov.b	#65521,	0(r12)	;#0xfff1
    4df0:	00 00 
            tx_buf[msg_len++] = WISP_RSP_MEMORY;
    4df2:	dc 43 01 00 	mov.b	#1,	1(r12)	;r3 As==01
            tx_buf[msg_len++] = sizeof(uint32_t) + sizeof(uint8_t);
    4df6:	fc 40 05 00 	mov.b	#5,	2(r12)	;
    4dfa:	02 00 
            tx_buf[msg_len++] = 0; // padding
    4dfc:	cc 43 03 00 	mov.b	#0,	3(r12)	;r3 As==00
            tx_buf[msg_len++] = ((uintptr_t)address >> 0) & 0xff;
    4e00:	cc 4d 04 00 	mov.b	r13,	4(r12)	;
            tx_buf[msg_len++] = ((uintptr_t)address >> 8) & 0xff;
    4e04:	0e 4d       	mov	r13,	r14	;
    4e06:	5e 0f       	rrum	#4,	r14	;
    4e08:	5e 0f       	rrum	#4,	r14	;
    4e0a:	cc 4e 05 00 	mov.b	r14,	5(r12)	;
            tx_buf[msg_len++] = 0; // TODO: 20-bit ptr
    4e0e:	cc 43 06 00 	mov.b	#0,	6(r12)	;r3 As==00
            tx_buf[msg_len++] = 0;
    4e12:	cc 43 07 00 	mov.b	#0,	7(r12)	;r3 As==00
            tx_buf[msg_len++] = *address;
    4e16:	ec 4d 08 00 	mov.b	@r13,	8(r12)	;

            UART_send(tx_buf, msg_len);
    4e1a:	3d 40 09 00 	mov	#9,	r13	;
    4e1e:	b0 12 70 50 	call	#20592		;#0x5070
    4e22:	84 3c       	jmp	$+266    	;abs 0x4f2c
            break;
        }
        case WISP_CMD_BREAKPOINT:
        {
            uint8_t index = cmd->data[0];
    4e24:	3c 40 4a 1d 	mov	#7498,	r12	;#0x1d4a
    4e28:	6d 4c       	mov.b	@r12,	r13	;
            bool enable = cmd->data[1];

            if (enable)
    4e2a:	cc 93 01 00 	cmp.b	#0,	1(r12)	;r3 As==00
    4e2e:	09 24       	jz	$+20     	;abs 0x4e42
                _libedb_internal_breakpoints |= 1 << index;
    4e30:	16 42 48 47 	mov	&0x4748,r6	;0x4748
    4e34:	1c 43       	mov	#1,	r12	;r3 As==01
    4e36:	b0 12 46 52 	call	#21062		;#0x5246
    4e3a:	0c d6       	bis	r6,	r12	;
    4e3c:	82 4c 48 47 	mov	r12,	&0x4748	;
    4e40:	08 3c       	jmp	$+18     	;abs 0x4e52
            else
                _libedb_internal_breakpoints &= ~(1 << index);
    4e42:	16 42 48 47 	mov	&0x4748,r6	;0x4748
    4e46:	1c 43       	mov	#1,	r12	;r3 As==01
    4e48:	b0 12 46 52 	call	#21062		;#0x5246
    4e4c:	06 cc       	bic	r12,	r6	;
    4e4e:	82 46 48 47 	mov	r6,	&0x4748	;

            msg_len = 0;
            tx_buf[msg_len++] = UART_IDENTIFIER_WISP;
    4e52:	3c 40 6a 1d 	mov	#7530,	r12	;#0x1d6a
    4e56:	fc 40 f1 ff 	mov.b	#65521,	0(r12)	;#0xfff1
    4e5a:	00 00 
            tx_buf[msg_len++] = WISP_RSP_BREAKPOINT;
    4e5c:	ec 43 01 00 	mov.b	#2,	1(r12)	;r3 As==10
            tx_buf[msg_len++] = 0; // length
    4e60:	cc 43 02 00 	mov.b	#0,	2(r12)	;r3 As==00
            tx_buf[msg_len++] = 0; // padding
    4e64:	cc 43 03 00 	mov.b	#0,	3(r12)	;r3 As==00

            UART_send(tx_buf, msg_len);
    4e68:	2d 42       	mov	#4,	r13	;r2 As==10
    4e6a:	b0 12 70 50 	call	#20592		;#0x5070
    4e6e:	5e 3c       	jmp	$+190    	;abs 0x4f2c
            break;
        }
        case WISP_CMD_EXIT_ACTIVE_DEBUG:
            exit_debug_mode();
    4e70:	b0 12 18 4b 	call	#19224		;#0x4b18
            debug_flags |= DEBUG_RETURN; // return from debug_main
    4e74:	92 d3 64 1d 	bis	#1,	&0x1d64	;r3 As==01
    4e78:	59 3c       	jmp	$+180    	;abs 0x4f2c
            break;
        
        case WISP_CMD_GET_INTERRUPT_CONTEXT:
            msg_len = 0;
            tx_buf[msg_len++] = UART_IDENTIFIER_WISP;
    4e7a:	3c 40 6a 1d 	mov	#7530,	r12	;#0x1d6a
    4e7e:	fc 40 f1 ff 	mov.b	#65521,	0(r12)	;#0xfff1
    4e82:	00 00 
            tx_buf[msg_len++] = WISP_RSP_INTERRUPT_CONTEXT;
    4e84:	fc 40 03 00 	mov.b	#3,	1(r12)	;
    4e88:	01 00 
            tx_buf[msg_len++] = 3 * sizeof(uint8_t);
    4e8a:	fc 40 03 00 	mov.b	#3,	2(r12)	;
    4e8e:	02 00 
            tx_buf[msg_len++] = 0; // padding
    4e90:	cc 43 03 00 	mov.b	#0,	3(r12)	;r3 As==00
            tx_buf[msg_len++] = interrupt_context.type;
    4e94:	3d 40 5e 1d 	mov	#7518,	r13	;#0x1d5e
    4e98:	ec 4d 04 00 	mov.b	@r13,	4(r12)	;
            tx_buf[msg_len++] = interrupt_context.id;
    4e9c:	1d 4d 02 00 	mov	2(r13),	r13	;
    4ea0:	cc 4d 05 00 	mov.b	r13,	5(r12)	;
            tx_buf[msg_len++] = interrupt_context.id >> 8;
    4ea4:	5d 0f       	rrum	#4,	r13	;
    4ea6:	5d 0f       	rrum	#4,	r13	;
    4ea8:	cc 4d 06 00 	mov.b	r13,	6(r12)	;

            UART_send(tx_buf, msg_len);
    4eac:	3d 40 07 00 	mov	#7,	r13	;
    4eb0:	b0 12 70 50 	call	#20592		;#0x5070
    4eb4:	3b 3c       	jmp	$+120    	;abs 0x4f2c
            break;

        case WISP_CMD_SERIAL_ECHO: {
            uint8_t echo_value = cmd->data[0];
    4eb6:	56 42 4a 1d 	mov.b	&0x1d4a,r6	;0x1d4a

            mask_debugger_signal();
    4eba:	b0 12 54 4a 	call	#19028		;#0x4a54
#ifdef CONFIG_ENABLE_TARGET_SIDE_DEBUG_MODE
            signal_debugger_with_data(echo_value);
    4ebe:	4c 46       	mov.b	r6,	r12	;
    4ec0:	b0 12 5c 4a 	call	#19036		;#0x4a5c
#else
            (void)echo_value;
            signal_debugger();
#endif
            unmask_debugger_signal();
    4ec4:	b0 12 40 4a 	call	#19008		;#0x4a40

            msg_len = 0;
            tx_buf[msg_len++] = UART_IDENTIFIER_WISP;
    4ec8:	3c 40 6a 1d 	mov	#7530,	r12	;#0x1d6a
    4ecc:	fc 40 f1 ff 	mov.b	#65521,	0(r12)	;#0xfff1
    4ed0:	00 00 
            tx_buf[msg_len++] = WISP_RSP_SERIAL_ECHO;
    4ed2:	ec 42 01 00 	mov.b	#4,	1(r12)	;r2 As==10
            tx_buf[msg_len++] = 0; // length
    4ed6:	cc 43 02 00 	mov.b	#0,	2(r12)	;r3 As==00
            tx_buf[msg_len++] = 0; // padding
    4eda:	cc 43 03 00 	mov.b	#0,	3(r12)	;r3 As==00

            UART_send(tx_buf, msg_len);
    4ede:	2d 42       	mov	#4,	r13	;r2 As==10
    4ee0:	b0 12 70 50 	call	#20592		;#0x5070
    4ee4:	23 3c       	jmp	$+72     	;abs 0x4f2c
            break;
        }

        case WISP_CMD_GET_APP_OUTPUT: {
            unsigned len = TX_BUF_SIZE - UART_MSG_HEADER_SIZE;
    4ee6:	b1 40 3c 00 	mov	#60,	0(r1)	;#0x003c
    4eea:	00 00 
            unsigned len_field_offset;

            msg_len = 0;
            tx_buf[msg_len++] = UART_IDENTIFIER_WISP;
    4eec:	3c 40 6a 1d 	mov	#7530,	r12	;#0x1d6a
    4ef0:	fc 40 f1 ff 	mov.b	#65521,	0(r12)	;#0xfff1
    4ef4:	00 00 
            tx_buf[msg_len++] = WISP_RSP_APP_OUTPUT;
    4ef6:	fc 40 06 00 	mov.b	#6,	1(r12)	;
    4efa:	01 00 
            len_field_offset = msg_len;
            tx_buf[msg_len++] = 0; // length: to be filled out shortly
    4efc:	cc 43 02 00 	mov.b	#0,	2(r12)	;r3 As==00
            tx_buf[msg_len++] = 0; // padding
    4f00:	cc 43 03 00 	mov.b	#0,	3(r12)	;r3 As==00

            if (app_output_cb != NULL)
    4f04:	1e 42 68 1d 	mov	&0x1d68,r14	;0x1d68
    4f08:	0e 93       	cmp	#0,	r14	;r3 As==00
    4f0a:	04 24       	jz	$+10     	;abs 0x4f14
                app_output_cb(tx_buf + msg_len, &len);
    4f0c:	0c 47       	mov	r7,	r12	;
    4f0e:	0d 41       	mov	r1,	r13	;
    4f10:	8e 12       	call	r14		;
    4f12:	02 3c       	jmp	$+6      	;abs 0x4f18
            else
                len = 0;
    4f14:	81 43 00 00 	mov	#0,	0(r1)	;r3 As==00

            msg_len += len;
    4f18:	6d 41       	mov.b	@r1,	r13	;
            tx_buf[len_field_offset] = len;
    4f1a:	3c 40 6a 1d 	mov	#7530,	r12	;#0x1d6a
    4f1e:	cc 4d 02 00 	mov.b	r13,	2(r12)	;
            if (app_output_cb != NULL)
                app_output_cb(tx_buf + msg_len, &len);
            else
                len = 0;

            msg_len += len;
    4f22:	6d 52       	add.b	#4,	r13	;r2 As==10
            tx_buf[len_field_offset] = len;

            UART_send(tx_buf, msg_len);
    4f24:	3d f0 ff 00 	and	#255,	r13	;#0x00ff
    4f28:	b0 12 70 50 	call	#20592		;#0x5070
        UART_receive(uartRxBuf, CHUNK_BYTES);
        if (parse_cmd(&cmd, uartRxBuf, CHUNK_BYTES)) {
            execute_cmd(&cmd);
        }

        if(debug_flags & DEBUG_RETURN) {
    4f2c:	1c 42 64 1d 	mov	&0x1d64,r12	;0x1d64
    4f30:	1c b3       	bit	#1,	r12	;r3 As==01
    4f32:	9b 26       	jz	$-712    	;abs 0x4c6a
            debug_flags &= ~DEBUG_RETURN;
    4f34:	1c c3       	bic	#1,	r12	;r3 As==01
    4f36:	82 4c 64 1d 	mov	r12,	&0x1d64	;
{
#ifdef CONFIG_STATE_PINS
    uint8_t port_value;
#endif

    state = new_state;
    4f3a:	a2 43 66 1d 	mov	#2,	&0x1d66	;r3 As==10

            if (interrupt_context.features & DEBUG_MODE_INTERACTIVE) {
                debug_main();
                // debug loop exited (due to UART cmd to exit debugger), release debugger
                set_state(STATE_SUSPENDED); // sleep and wait for debugger to restore energy
                signal_debugger(); // tell debugger we have shutdown UART
    4f3e:	b0 12 20 4a 	call	#18976		;#0x4a20
    4f42:	03 3c       	jmp	$+8      	;abs 0x4f4a
{
#ifdef CONFIG_STATE_PINS
    uint8_t port_value;
#endif

    state = new_state;
    4f44:	82 43 66 1d 	mov	#0,	&0x1d66	;r3 As==00
    4f48:	24 3c       	jmp	$+74     	;abs 0x4f92
            mask_debugger_signal();

            handle_debugger_signal();

            /* Power state manipulation is required to be inside the ISR */
            switch (state) {
    4f4a:	1c 42 66 1d 	mov	&0x1d66,r12	;0x1d66
    4f4e:	1c 93       	cmp	#1,	r12	;r3 As==01
    4f50:	05 24       	jz	$+12     	;abs 0x4f5c
    4f52:	0c 93       	cmp	#0,	r12	;r3 As==00
    4f54:	1e 24       	jz	$+62     	;abs 0x4f92
    4f56:	2c 93       	cmp	#2,	r12	;r3 As==10
    4f58:	0c 24       	jz	$+26     	;abs 0x4f72
    4f5a:	41 3c       	jmp	$+132    	;abs 0x4fde

                    // We clear the sleep flags corresponding to the sleep on request
                    // to enter debug mode here, and do not touch them in the DEBUG->SUSPENDED
                    // transition because when upon exiting from the guard we will
                    // not be asleep.
                    if (debug_flags & DEBUG_REQUESTED_BY_TARGET) {
    4f5c:	1c 42 64 1d 	mov	&0x1d64,r12	;0x1d64
    4f60:	2c b3       	bit	#2,	r12	;r3 As==10
    4f62:	3d 24       	jz	$+124    	;abs 0x4fde
                        debug_flags &= ~DEBUG_REQUESTED_BY_TARGET;
    4f64:	2c c3       	bic	#2,	r12	;r3 As==10
    4f66:	82 4c 64 1d 	mov	r12,	&0x1d64	;
                        __bic_SR_register_on_exit(DEBUG_MODE_REQUEST_WAIT_STATE_BITS);
    4f6a:	b1 c0 10 00 	bic	#16,	26(r1)	;#0x0010, 0x001a
    4f6e:	1a 00 
    4f70:	36 3c       	jmp	$+110    	;abs 0x4fde
                case STATE_SUSPENDED: /* DEBUG->SUSPENDED just happened */
                    // Before unmasking the signal interrupt, disable interrupts
                    // globally in order to not let the next signal interrupt happen
                    // until we are asleep. Unmasking won't let the interrupt
                    // call the ISR.
                    __disable_interrupt();
    4f72:	32 c2       	dint			
                    unmask_debugger_signal();
    4f74:	b0 12 40 4a 	call	#19008		;#0x4a40

                    __bis_SR_register(DEBUG_MODE_EXIT_WAIT_STATE_BITS | GIE); // go to sleep
    4f78:	32 d0 18 00 	bis	#24,	r2	;#0x0018
                    // asleep in request_debug_mode(). In order to wakeup from
                    // that sleep upon returning from this outer ISR (SUSPENDED
                    // case), we need to clear the sleep bits (otherwise, the
                    // MCU will go to sleep when the SR bits are automatically
                    // restored upon return from interrupt).
                    if (debug_flags & DEBUG_REQUESTED_BY_TARGET) {
    4f7c:	1c 42 64 1d 	mov	&0x1d64,r12	;0x1d64
    4f80:	2c b3       	bit	#2,	r12	;r3 As==10
    4f82:	2d 24       	jz	$+92     	;abs 0x4fde
                        debug_flags &= ~DEBUG_REQUESTED_BY_TARGET;
    4f84:	2c c3       	bic	#2,	r12	;r3 As==10
    4f86:	82 4c 64 1d 	mov	r12,	&0x1d64	;
                        __bic_SR_register_on_exit(DEBUG_MODE_REQUEST_WAIT_STATE_BITS);
    4f8a:	b1 c0 10 00 	bic	#16,	26(r1)	;#0x0010, 0x001a
    4f8e:	1a 00 
    4f90:	26 3c       	jmp	$+78     	;abs 0x4fde

                    // Before unmasking the signal interrupt, disable
                    // interrupts globally in order to not let the next signal
                    // interrupt happen until either we return from this ISR.
                    // Unmasking won't let the interrupt call the ISR.
                    __disable_interrupt();
    4f92:	32 c2       	dint			
                    unmask_debugger_signal();
    4f94:	b0 12 40 4a 	call	#19008		;#0x4a40
                    // We were sleeping on the suspend line in the case above when
                    // the current ISR got called, so before returning, clear the
                    // sleep flags (otherwise, we would go back to sleep after
                    // returning from this ISR because the SR flags prior to the ISR
                    // call are automatically restored upon return from ISR).
                    __bic_SR_register_on_exit(DEBUG_MODE_EXIT_WAIT_STATE_BITS);
    4f98:	b1 c0 10 00 	bic	#16,	26(r1)	;#0x0010, 0x001a
    4f9c:	1a 00 
                    // before unmasking the signal interrupt). The adding the
                    // GIE flag here re-enables the interrupts only after
                    // return from the current ISR, so that the next signal ISR
                    // (unrelated to current enter-exit debug mode sequence)
                    // doesn't get nested within the current one.
                    __bis_SR_register_on_exit(GIE);
    4f9e:	b1 d2 1a 00 	bis	#8,	26(r1)	;r2 As==11, 0x001a

                    // Once we return from this inner ISR we end up in the outer ISR
                    break;
    4fa2:	1d 3c       	jmp	$+60     	;abs 0x4fde
                break;

            case MSG_STATE_DATA:
                if (data_len)
                    cmd->data[cmd->len++] = msg[i];
                if (--data_len == 0) {
    4fa4:	f2 43 46 1d 	mov.b	#-1,	&0x1d46	;r3 As==11
    4fa8:	c1 3f       	jmp	$-124    	;abs 0x4f2c
    uint8_t msg_len;
    uint8_t *address;
    uint8_t offset;
    uint8_t len;
    uint8_t i;
    switch (cmd->descriptor)
    4faa:	29 92       	cmp	#4,	r9	;r2 As==10
    4fac:	ff 26       	jz	$-512    	;abs 0x4dac
    4fae:	6c 42       	mov.b	#4,	r12	;r2 As==10
    4fb0:	4c 99       	cmp.b	r9,	r12	;
    4fb2:	08 28       	jnc	$+18     	;abs 0x4fc4
    4fb4:	29 93       	cmp	#2,	r9	;r3 As==10
    4fb6:	5c 27       	jz	$-326    	;abs 0x4e70
    4fb8:	6d 43       	mov.b	#2,	r13	;r3 As==10
    4fba:	4d 99       	cmp.b	r9,	r13	;
    4fbc:	bb 2a       	jnc	$-648    	;abs 0x4d34
    4fbe:	09 93       	cmp	#0,	r9	;r3 As==00
    4fc0:	9e 26       	jz	$-706    	;abs 0x4cfe
    4fc2:	b4 3f       	jmp	$-150    	;abs 0x4f2c
    4fc4:	39 90 06 00 	cmp	#6,	r9	;
    4fc8:	58 27       	jz	$-334    	;abs 0x4e7a
    4fca:	7e 40 05 00 	mov.b	#5,	r14	;
    4fce:	4e 99       	cmp.b	r9,	r14	;
    4fd0:	29 2f       	jc	$-428    	;abs 0x4e24
    4fd2:	39 90 07 00 	cmp	#7,	r9	;
    4fd6:	6f 27       	jz	$-288    	;abs 0x4eb6
    4fd8:	39 92       	cmp	#8,	r9	;r2 As==11
    4fda:	85 27       	jz	$-244    	;abs 0x4ee6
    4fdc:	a7 3f       	jmp	$-176    	;abs 0x4f2c
                default: /* nothing to do */
                    break;
            }
            break;
	}
}
    4fde:	21 53       	incd	r1		;
    4fe0:	b4 17       	popm	#12,	r15	;16-bit words
    4fe2:	00 13       	reti			

00004fe4 <UART_init>:
 * @todo Currently assumes an 8MHz SMCLK. Make robust to clock frequency changes by using 32k ACLK.
 */
void UART_init(void) {

    // Configure USCI_A0 for UART mode
    UCA0CTLW0 = UCSWRST;                      // Put eUSCI in reset
    4fe4:	92 43 c0 05 	mov	#1,	&0x05c0	;r3 As==01
    UCA0CTLW0 |= UCSSEL__SMCLK;               // CLK = SMCLK
    4fe8:	b2 d0 80 00 	bis	#128,	&0x05c0	;#0x0080
    4fec:	c0 05 
    UCA0BR1 = 0;
    UCA0MCTLW = UCOS16 | UCBRF_2 | (0xBB << 8);
#endif // UART_BAUDRATE
#elif UART_CLOCK == 8000000
#if UART_BAUDRATE == 115200
    UCA0BR0 = 4;
    4fee:	e2 42 c6 05 	mov.b	#4,	&0x05c6	;r2 As==10
    UCA0BR1 = 0;
    4ff2:	c2 43 c7 05 	mov.b	#0,	&0x05c7	;r3 As==00
    UCA0MCTLW = UCOS16 | UCBRF_4 | (0x55 << 8);
    4ff6:	b2 40 41 55 	mov	#21825,	&0x05c8	;#0x5541
    4ffa:	c8 05 
#endif // UART_BAUDRATE
#endif // UART_CLOCK

#if defined(__MSP430FR5969__) || defined(__MSP430FR5949__)
    PUART_TXSEL0 &= ~PIN_UART_TX; // TX pin to UART module
    4ffc:	d2 c3 0b 02 	bic.b	#1,	&0x020b	;r3 As==01
    PUART_TXSEL1 |= PIN_UART_TX;
    5000:	d2 d3 0d 02 	bis.b	#1,	&0x020d	;r3 As==01

    PUART_RXSEL0 &= ~PIN_UART_RX; // RX pin to UART module
    5004:	e2 c3 0b 02 	bic.b	#2,	&0x020b	;r3 As==10
    PUART_RXSEL1 |= PIN_UART_RX;
    5008:	e2 d3 0d 02 	bis.b	#2,	&0x020d	;r3 As==10
    PUART_RXSEL1 &= ~PIN_UART_RX;
#else
#error MCU not supported
#endif

    UCA0CTLW0 &= ~UCSWRST;                    // Initialize eUSCI
    500c:	92 c3 c0 05 	bic	#1,	&0x05c0	;r3 As==01

    // Initialize module state
    UART_SM.isTxBusy = FALSE;
    5010:	3c 40 aa 1d 	mov	#7594,	r12	;#0x1daa
    5014:	cc 43 00 00 	mov.b	#0,	0(r12)	;r3 As==00
    UART_SM.txBytesRemaining = 0;
    5018:	8c 43 04 00 	mov	#0,	4(r12)	;r3 As==00
    UART_SM.isRxBusy = FALSE;
    501c:	cc 43 06 00 	mov.b	#0,	6(r12)	;r3 As==00
    UART_SM.rxBytesRemaining = 0;
    5020:	8c 43 0a 00 	mov	#0,	10(r12)	;r3 As==00, 0x000a

}
    5024:	30 41       	ret			

00005026 <UART_teardown>:
void UART_teardown()
{
    // disable UART
    // Not sure how to do this best, but set all UCA0* registers to
    // their default values.  See User's Guide for default values.
    PUART_TXSEL0 &= ~PIN_UART_TX;
    5026:	d2 c3 0b 02 	bic.b	#1,	&0x020b	;r3 As==01
    PUART_TXSEL1 &= ~PIN_UART_TX;
    502a:	d2 c3 0d 02 	bic.b	#1,	&0x020d	;r3 As==01
    PUART_RXSEL0 &= ~PIN_UART_RX;
    502e:	e2 c3 0b 02 	bic.b	#2,	&0x020b	;r3 As==10
    PUART_RXSEL1 &= ~PIN_UART_RX;
    5032:	e2 c3 0d 02 	bic.b	#2,	&0x020d	;r3 As==10
    UCA0CTLW0 = 0x0001;
    5036:	92 43 c0 05 	mov	#1,	&0x05c0	;r3 As==01
    UCA0BR0 = 0x0000;
    503a:	c2 43 c6 05 	mov.b	#0,	&0x05c6	;r3 As==00
    UCA0MCTLW = 0x0000;
    503e:	82 43 c8 05 	mov	#0,	&0x05c8	;r3 As==00
    UCA0IE = 0x0000;
    5042:	82 43 da 05 	mov	#0,	&0x05da	;r3 As==00
    UCA0IFG = 0x0000;
    5046:	82 43 dc 05 	mov	#0,	&0x05dc	;r3 As==00
}
    504a:	30 41       	ret			

0000504c <UART_asyncSend>:
 * @param size the number of bytes to send
 */
void UART_asyncSend(uint8_t* txBuf, uint16_t size) {

    // Block until prior transmission has completed
    while (UART_SM.isTxBusy)
    504c:	3f 40 aa 1d 	mov	#7594,	r15	;#0x1daa
    5050:	6e 4f       	mov.b	@r15,	r14	;
    5052:	0e 93       	cmp	#0,	r14	;r3 As==00
    5054:	fd 23       	jnz	$-4      	;abs 0x5050
        ;

    // Set up for start of transmission
    UART_SM.isTxBusy = TRUE;
    5056:	3e 40 aa 1d 	mov	#7594,	r14	;#0x1daa
    505a:	de 43 00 00 	mov.b	#1,	0(r14)	;r3 As==01
    UART_SM.txPtr = txBuf;
    505e:	8e 4c 02 00 	mov	r12,	2(r14)	;
    UART_SM.txBytesRemaining = size;
    5062:	8e 4d 04 00 	mov	r13,	4(r14)	;

    UCA0IFG &= ~(USCI_UART_UCTXIFG); // Clear the 'ready to accept byte' flag
    5066:	a2 c2 dc 05 	bic	#4,	&0x05dc	;r2 As==10

    UCA0IE |= UCTXIE; // Enable USCI_A0 TX interrupt ('ready to accept byte')
    506a:	a2 d3 da 05 	bis	#2,	&0x05da	;r3 As==10
    //UCA0TXBUF = *(UART_SM.txPtr++); // Load in first byte

    // The bytes are transmitted in the TX ISR (which is called whenever the
    // UART is ready to accept a byte), and the isBusy flag is cleared when the
    // last byte has *finished* transmitting.
}
    506e:	30 41       	ret			

00005070 <UART_send>:
 * @param size the number of bytes to send
 *
 */
void UART_send(uint8_t* txBuf, uint16_t size) {

    UART_asyncSend(txBuf, size);
    5070:	b0 12 4c 50 	call	#20556		;#0x504c

    // Block until complete
    while (UART_SM.isTxBusy)
    5074:	3d 40 aa 1d 	mov	#7594,	r13	;#0x1daa
    5078:	6c 4d       	mov.b	@r13,	r12	;
    507a:	0c 93       	cmp	#0,	r12	;r3 As==00
    507c:	fd 23       	jnz	$-4      	;abs 0x5078
        ;
}
    507e:	30 41       	ret			

00005080 <UART_critSend>:
 *  and use UART status register polling instead of interrupts.
 */
void UART_critSend(uint8_t* txBuf, uint16_t size) {

    // Block until prior transmission has completed
    while (UART_SM.isTxBusy)
    5080:	3f 40 aa 1d 	mov	#7594,	r15	;#0x1daa
    5084:	6e 4f       	mov.b	@r15,	r14	;
    5086:	0e 93       	cmp	#0,	r14	;r3 As==00
    5088:	fd 23       	jnz	$-4      	;abs 0x5084
        ;

    // Set up for start of transmission
    UART_SM.isTxBusy = TRUE;
    508a:	3e 40 aa 1d 	mov	#7594,	r14	;#0x1daa
    508e:	de 43 00 00 	mov.b	#1,	0(r14)	;r3 As==01
    UART_SM.txPtr = txBuf;
    5092:	8e 4c 02 00 	mov	r12,	2(r14)	;
    UART_SM.txBytesRemaining = size;
    5096:	8e 4d 04 00 	mov	r13,	4(r14)	;

    UCA0IV &= ~(USCI_UART_UCTXIFG); // Clear byte completion flag
    509a:	a2 c2 de 05 	bic	#4,	&0x05de	;r2 As==10

    while (UART_SM.txBytesRemaining--) {
    509e:	1c 4e 04 00 	mov	4(r14),	r12	;
    50a2:	0d 4c       	mov	r12,	r13	;
    50a4:	3d 53       	add	#-1,	r13	;r3 As==11
    50a6:	8e 4d 04 00 	mov	r13,	4(r14)	;
    50aa:	0c 93       	cmp	#0,	r12	;r3 As==00
    50ac:	19 24       	jz	$+52     	;abs 0x50e0
        UCA0TXBUF = *(UART_SM.txPtr++); // Load in next byte
    50ae:	0c 4e       	mov	r14,	r12	;
    50b0:	1d 4c 02 00 	mov	2(r12),	r13	;
    50b4:	0e 4d       	mov	r13,	r14	;
    50b6:	1e 53       	inc	r14		;
    50b8:	8c 4e 02 00 	mov	r14,	2(r12)	;
    50bc:	6d 4d       	mov.b	@r13,	r13	;
    50be:	3d f0 ff 00 	and	#255,	r13	;#0x00ff
    50c2:	82 4d ce 05 	mov	r13,	&0x05ce	;
        while (!(UCA0IFG & UCTXIFG))
    50c6:	a2 b3 dc 05 	bit	#2,	&0x05dc	;r3 As==10
    50ca:	fd 27       	jz	$-4      	;abs 0x50c6
            ; // Wait for byte transmission to complete
        UCA0IFG &= ~(UCTXIFG); // Clear byte completion flag
    50cc:	a2 c3 dc 05 	bic	#2,	&0x05dc	;r3 As==10
    UART_SM.txPtr = txBuf;
    UART_SM.txBytesRemaining = size;

    UCA0IV &= ~(USCI_UART_UCTXIFG); // Clear byte completion flag

    while (UART_SM.txBytesRemaining--) {
    50d0:	1d 4c 04 00 	mov	4(r12),	r13	;
    50d4:	0e 4d       	mov	r13,	r14	;
    50d6:	3e 53       	add	#-1,	r14	;r3 As==11
    50d8:	8c 4e 04 00 	mov	r14,	4(r12)	;
    50dc:	0d 93       	cmp	#0,	r13	;r3 As==00
    50de:	e8 23       	jnz	$-46     	;abs 0x50b0
        while (!(UCA0IFG & UCTXIFG))
            ; // Wait for byte transmission to complete
        UCA0IFG &= ~(UCTXIFG); // Clear byte completion flag
    }

    UART_SM.isTxBusy = FALSE;
    50e0:	c2 43 aa 1d 	mov.b	#0,	&0x1daa	;r3 As==00
}
    50e4:	30 41       	ret			

000050e6 <UART_isTxBusy>:
/**
 * Return true if UART TX module is in the middle of an operation, false if not.
 */
uint8_t UART_isTxBusy() {
    return UART_SM.isTxBusy;
}
    50e6:	5c 42 aa 1d 	mov.b	&0x1daa,r12	;0x1daa
    50ea:	30 41       	ret			

000050ec <UART_asyncReceive>:
 * @param size the number of bytes to receive
 */
void UART_asyncReceive(uint8_t* rxBuf, uint16_t size) {

    // Block until prior reception has completed
    while (UART_SM.isRxBusy)
    50ec:	3f 40 aa 1d 	mov	#7594,	r15	;#0x1daa
    50f0:	5e 4f 06 00 	mov.b	6(r15),	r14	;
    50f4:	0e 93       	cmp	#0,	r14	;r3 As==00
    50f6:	fc 23       	jnz	$-6      	;abs 0x50f0
        ;

    // Set up for start of reception
    UART_SM.isRxBusy = TRUE;
    50f8:	3e 40 aa 1d 	mov	#7594,	r14	;#0x1daa
    50fc:	de 43 06 00 	mov.b	#1,	6(r14)	;r3 As==01
    UART_SM.rxPtr = rxBuf;
    5100:	8e 4c 08 00 	mov	r12,	8(r14)	;
    UART_SM.rxBytesRemaining = size;
    5104:	8e 4d 0a 00 	mov	r13,	10(r14)	; 0x000a

    UCA0IFG &= ~(UCRXIFG); // Clear byte completion flag
    5108:	92 c3 dc 05 	bic	#1,	&0x05dc	;r3 As==01

    UCA0IE |= UCRXIE; // Enable USCI_A0 RX interrupt
    510c:	92 d3 da 05 	bis	#1,	&0x05da	;r3 As==01

    // The rest of the reception will be completed by the RX ISR (which
    //  will wake after each byte has been received), and the isBusy flag
    //  will be cleared when done.
}
    5110:	30 41       	ret			

00005112 <UART_receive>:
 * @param size the number of bytes to receive
 *
 */
void UART_receive(uint8_t* rxBuf, uint16_t size) {

    UART_asyncReceive(rxBuf, size);
    5112:	b0 12 ec 50 	call	#20716		;#0x50ec

    // Block until complete
    while (UART_SM.isRxBusy)
    5116:	3d 40 aa 1d 	mov	#7594,	r13	;#0x1daa
    511a:	5c 4d 06 00 	mov.b	6(r13),	r12	;
    511e:	0c 93       	cmp	#0,	r12	;r3 As==00
    5120:	fc 23       	jnz	$-6      	;abs 0x511a
        ;
}
    5122:	30 41       	ret			

00005124 <UART_critReceive>:
 *  and use UART status register polling instead of interrupts.
 */
void UART_critReceive(uint8_t* rxBuf, uint16_t size) {

    // Block until prior reception has completed
    while (UART_SM.isRxBusy)
    5124:	3f 40 aa 1d 	mov	#7594,	r15	;#0x1daa
    5128:	5e 4f 06 00 	mov.b	6(r15),	r14	;
    512c:	0e 93       	cmp	#0,	r14	;r3 As==00
    512e:	fc 23       	jnz	$-6      	;abs 0x5128
        ;

    // Set up for start of reception
    UART_SM.isRxBusy = TRUE;
    5130:	3e 40 aa 1d 	mov	#7594,	r14	;#0x1daa
    5134:	de 43 06 00 	mov.b	#1,	6(r14)	;r3 As==01
    UART_SM.rxPtr = rxBuf;
    5138:	8e 4c 08 00 	mov	r12,	8(r14)	;
    UART_SM.rxBytesRemaining = size;
    513c:	8e 4d 0a 00 	mov	r13,	10(r14)	; 0x000a

    UCA0IFG &= ~(UCRXIFG); // Clear byte completion flag
    5140:	92 c3 dc 05 	bic	#1,	&0x05dc	;r3 As==01

    while (UART_SM.rxBytesRemaining--) {
    5144:	1c 4e 0a 00 	mov	10(r14),r12	;0x0000a
    5148:	0d 4c       	mov	r12,	r13	;
    514a:	3d 53       	add	#-1,	r13	;r3 As==11
    514c:	8e 4d 0a 00 	mov	r13,	10(r14)	; 0x000a
    5150:	0c 93       	cmp	#0,	r12	;r3 As==00
    5152:	18 24       	jz	$+50     	;abs 0x5184
        while (!(UCA0IFG & UCRXIFG))
            ; // Wait for byte reception to complete
        UCA0IFG &= ~(UCRXIFG); // Clear byte completion flag

        uint8_t rec = UCA0RXBUF; // Read next byte
        *(UART_SM.rxPtr++) = rec; // Store byte
    5154:	0c 4e       	mov	r14,	r12	;
    UART_SM.rxBytesRemaining = size;

    UCA0IFG &= ~(UCRXIFG); // Clear byte completion flag

    while (UART_SM.rxBytesRemaining--) {
        while (!(UCA0IFG & UCRXIFG))
    5156:	92 b3 dc 05 	bit	#1,	&0x05dc	;r3 As==01
    515a:	fd 27       	jz	$-4      	;abs 0x5156
            ; // Wait for byte reception to complete
        UCA0IFG &= ~(UCRXIFG); // Clear byte completion flag
    515c:	92 c3 dc 05 	bic	#1,	&0x05dc	;r3 As==01

        uint8_t rec = UCA0RXBUF; // Read next byte
    5160:	1e 42 cc 05 	mov	&0x05cc,r14	;0x05cc
        *(UART_SM.rxPtr++) = rec; // Store byte
    5164:	1d 4c 08 00 	mov	8(r12),	r13	;
    5168:	0f 4d       	mov	r13,	r15	;
    516a:	1f 53       	inc	r15		;
    516c:	8c 4f 08 00 	mov	r15,	8(r12)	;
    while (UART_SM.rxBytesRemaining--) {
        while (!(UCA0IFG & UCRXIFG))
            ; // Wait for byte reception to complete
        UCA0IFG &= ~(UCRXIFG); // Clear byte completion flag

        uint8_t rec = UCA0RXBUF; // Read next byte
    5170:	cd 4e 00 00 	mov.b	r14,	0(r13)	;
    UART_SM.rxPtr = rxBuf;
    UART_SM.rxBytesRemaining = size;

    UCA0IFG &= ~(UCRXIFG); // Clear byte completion flag

    while (UART_SM.rxBytesRemaining--) {
    5174:	1d 4c 0a 00 	mov	10(r12),r13	;0x0000a
    5178:	0e 4d       	mov	r13,	r14	;
    517a:	3e 53       	add	#-1,	r14	;r3 As==11
    517c:	8c 4e 0a 00 	mov	r14,	10(r12)	; 0x000a
    5180:	0d 93       	cmp	#0,	r13	;r3 As==00
    5182:	e9 23       	jnz	$-44     	;abs 0x5156

        uint8_t rec = UCA0RXBUF; // Read next byte
        *(UART_SM.rxPtr++) = rec; // Store byte
    }

    UART_SM.isRxBusy = FALSE;
    5184:	c2 43 b0 1d 	mov.b	#0,	&0x1db0	;r3 As==00
}
    5188:	30 41       	ret			

0000518a <UART_isRxBusy>:
/**
 * Return true if UART RX module is in the middle of an operation, false if not.
 */
uint8_t UART_isRxBusy() {
    return UART_SM.isRxBusy;
}
    518a:	5c 42 b0 1d 	mov.b	&0x1db0,r12	;0x1db0
    518e:	30 41       	ret			

00005190 <UART_isRxDone>:
 * Return true if UART RX module is not in the middle of an operation (e.g. done), false if not.
 *
 * Could be used in combination with UART_asyncReceive.
 */
uint8_t UART_isRxDone() {
    return !(UART_SM.isRxBusy);
    5190:	5c 42 b0 1d 	mov.b	&0x1db0,r12	;0x1db0
    5194:	3c 53       	add	#-1,	r12	;r3 As==11
}
    5196:	5c 03       	rrum	#1,	r12	;
    5198:	4d 18 0c 11 	rpt #14 { rrax.w	r12		;
    519c:	30 41       	ret			

0000519e <USCI_A0_ISR>:
#elif defined(__GNUC__)
void __attribute__ ((interrupt(USCI_A0_VECTOR))) USCI_A0_ISR (void)
#else
#error Compiler not supported!
#endif
{
    519e:	3f 15       	pushm	#4,	r15	;16-bit words
    uint8_t rec;

    switch (__even_in_range(UCA0IV, USCI_UART_UCTXCPTIFG)) {
    51a0:	1c 42 de 05 	mov	&0x05de,r12	;0x05de
    51a4:	2c 93       	cmp	#2,	r12	;r3 As==10
    51a6:	03 24       	jz	$+8      	;abs 0x51ae
    51a8:	2c 92       	cmp	#4,	r12	;r2 As==10
    51aa:	1e 24       	jz	$+62     	;abs 0x51e8
    51ac:	38 3c       	jmp	$+114    	;abs 0x521e
    case USCI_NONE:
        break;
    case USCI_UART_UCRXIFG:
        if (UART_SM.rxBytesRemaining--) {
    51ae:	3d 40 aa 1d 	mov	#7594,	r13	;#0x1daa
    51b2:	1c 4d 0a 00 	mov	10(r13),r12	;0x0000a
    51b6:	0e 4c       	mov	r12,	r14	;
    51b8:	3e 53       	add	#-1,	r14	;r3 As==11
    51ba:	8d 4e 0a 00 	mov	r14,	10(r13)	; 0x000a
    51be:	0c 93       	cmp	#0,	r12	;r3 As==00
    51c0:	0a 24       	jz	$+22     	;abs 0x51d6
            rec = UCA0RXBUF; // Read next byte
    51c2:	1e 42 cc 05 	mov	&0x05cc,r14	;0x05cc
            *(UART_SM.rxPtr++) = rec; // Store byte
    51c6:	1c 4d 08 00 	mov	8(r13),	r12	;
    51ca:	0f 4c       	mov	r12,	r15	;
    51cc:	1f 53       	inc	r15		;
    51ce:	8d 4f 08 00 	mov	r15,	8(r13)	;
    switch (__even_in_range(UCA0IV, USCI_UART_UCTXCPTIFG)) {
    case USCI_NONE:
        break;
    case USCI_UART_UCRXIFG:
        if (UART_SM.rxBytesRemaining--) {
            rec = UCA0RXBUF; // Read next byte
    51d2:	cc 4e 00 00 	mov.b	r14,	0(r12)	;
            *(UART_SM.rxPtr++) = rec; // Store byte
        }

        if (0 == UART_SM.rxBytesRemaining) {
    51d6:	1c 42 b4 1d 	mov	&0x1db4,r12	;0x1db4
    51da:	0c 93       	cmp	#0,	r12	;r3 As==00
    51dc:	20 20       	jnz	$+66     	;abs 0x521e
            UCA0IE &= ~(UCRXIE); // Disable USCI_A0 RX interrupt
    51de:	92 c3 da 05 	bic	#1,	&0x05da	;r3 As==01
            UART_SM.isRxBusy = FALSE;
    51e2:	c2 43 b0 1d 	mov.b	#0,	&0x1db0	;r3 As==00
    51e6:	1b 3c       	jmp	$+56     	;abs 0x521e
        }

        break;
    case USCI_UART_UCTXIFG:
        UCA0TXBUF = *(UART_SM.txPtr++); // if interrupt was enabled, there must be bytes
    51e8:	3c 40 aa 1d 	mov	#7594,	r12	;#0x1daa
    51ec:	1d 4c 02 00 	mov	2(r12),	r13	;
    51f0:	0e 4d       	mov	r13,	r14	;
    51f2:	1e 53       	inc	r14		;
    51f4:	8c 4e 02 00 	mov	r14,	2(r12)	;
    51f8:	6d 4d       	mov.b	@r13,	r13	;
    51fa:	3d f0 ff 00 	and	#255,	r13	;#0x00ff
    51fe:	82 4d ce 05 	mov	r13,	&0x05ce	;
        if (--UART_SM.txBytesRemaining == 0) {
    5202:	1d 4c 04 00 	mov	4(r12),	r13	;
    5206:	3d 53       	add	#-1,	r13	;r3 As==11
    5208:	8c 4d 04 00 	mov	r13,	4(r12)	;
    520c:	0d 93       	cmp	#0,	r13	;r3 As==00
    520e:	07 20       	jnz	$+16     	;abs 0x521e
            // TODO: actually, this wait should probably happen for blocking version only
            while (UCA0STATW & UCBUSY); // wait for last byte to finish transmitting
    5210:	d2 b3 ca 05 	bit.b	#1,	&0x05ca	;r3 As==01
    5214:	fd 23       	jnz	$-4      	;abs 0x5210
            UCA0IE &= ~(UCTXIE); // Disable USCI_A0 TX interrupt
    5216:	a2 c3 da 05 	bic	#2,	&0x05da	;r3 As==10
            UART_SM.isTxBusy = FALSE;
    521a:	c2 43 aa 1d 	mov.b	#0,	&0x1daa	;r3 As==00
    case USCI_UART_UCSTTIFG:
        break;
    case USCI_UART_UCTXCPTIFG:
        break;
    }
}
    521e:	3c 17       	popm	#4,	r15	;16-bit words
    5220:	00 13       	reti			

00005222 <__mspabi_slli_15>:
    5222:	0c 5c       	rla	r12		;

00005224 <__mspabi_slli_14>:
    5224:	0c 5c       	rla	r12		;

00005226 <__mspabi_slli_13>:
    5226:	0c 5c       	rla	r12		;

00005228 <__mspabi_slli_12>:
    5228:	0c 5c       	rla	r12		;

0000522a <__mspabi_slli_11>:
    522a:	0c 5c       	rla	r12		;

0000522c <__mspabi_slli_10>:
    522c:	0c 5c       	rla	r12		;

0000522e <__mspabi_slli_9>:
    522e:	0c 5c       	rla	r12		;

00005230 <__mspabi_slli_8>:
    5230:	0c 5c       	rla	r12		;

00005232 <__mspabi_slli_7>:
    5232:	0c 5c       	rla	r12		;

00005234 <__mspabi_slli_6>:
    5234:	0c 5c       	rla	r12		;

00005236 <__mspabi_slli_5>:
    5236:	0c 5c       	rla	r12		;

00005238 <__mspabi_slli_4>:
    5238:	0c 5c       	rla	r12		;

0000523a <__mspabi_slli_3>:
    523a:	0c 5c       	rla	r12		;

0000523c <__mspabi_slli_2>:
    523c:	0c 5c       	rla	r12		;

0000523e <__mspabi_slli_1>:
    523e:	0c 5c       	rla	r12		;
    5240:	30 41       	ret			
    5242:	3d 53       	add	#-1,	r13	;r3 As==11
    5244:	0c 5c       	rla	r12		;

00005246 <__mspabi_slli>:
    5246:	0d 93       	cmp	#0,	r13	;r3 As==00
    5248:	fc 23       	jnz	$-6      	;abs 0x5242
    524a:	30 41       	ret			

0000524c <__mspabi_slll_15>:
    524c:	0c 5c       	rla	r12		;
    524e:	0d 6d       	rlc	r13		;

00005250 <__mspabi_slll_14>:
    5250:	0c 5c       	rla	r12		;
    5252:	0d 6d       	rlc	r13		;

00005254 <__mspabi_slll_13>:
    5254:	0c 5c       	rla	r12		;
    5256:	0d 6d       	rlc	r13		;

00005258 <__mspabi_slll_12>:
    5258:	0c 5c       	rla	r12		;
    525a:	0d 6d       	rlc	r13		;

0000525c <__mspabi_slll_11>:
    525c:	0c 5c       	rla	r12		;
    525e:	0d 6d       	rlc	r13		;

00005260 <__mspabi_slll_10>:
    5260:	0c 5c       	rla	r12		;
    5262:	0d 6d       	rlc	r13		;

00005264 <__mspabi_slll_9>:
    5264:	0c 5c       	rla	r12		;
    5266:	0d 6d       	rlc	r13		;

00005268 <__mspabi_slll_8>:
    5268:	0c 5c       	rla	r12		;
    526a:	0d 6d       	rlc	r13		;

0000526c <__mspabi_slll_7>:
    526c:	0c 5c       	rla	r12		;
    526e:	0d 6d       	rlc	r13		;

00005270 <__mspabi_slll_6>:
    5270:	0c 5c       	rla	r12		;
    5272:	0d 6d       	rlc	r13		;

00005274 <__mspabi_slll_5>:
    5274:	0c 5c       	rla	r12		;
    5276:	0d 6d       	rlc	r13		;

00005278 <__mspabi_slll_4>:
    5278:	0c 5c       	rla	r12		;
    527a:	0d 6d       	rlc	r13		;

0000527c <__mspabi_slll_3>:
    527c:	0c 5c       	rla	r12		;
    527e:	0d 6d       	rlc	r13		;

00005280 <__mspabi_slll_2>:
    5280:	0c 5c       	rla	r12		;
    5282:	0d 6d       	rlc	r13		;

00005284 <__mspabi_slll_1>:
    5284:	0c 5c       	rla	r12		;
    5286:	0d 6d       	rlc	r13		;
    5288:	30 41       	ret			
    528a:	3e 53       	add	#-1,	r14	;r3 As==11
    528c:	0c 5c       	rla	r12		;
    528e:	0d 6d       	rlc	r13		;

00005290 <__mspabi_slll>:
    5290:	0e 93       	cmp	#0,	r14	;r3 As==00
    5292:	fb 23       	jnz	$-8      	;abs 0x528a
    5294:	30 41       	ret			

00005296 <__mspabi_srai_15>:
    5296:	0c 11       	rra	r12		;

00005298 <__mspabi_srai_14>:
    5298:	0c 11       	rra	r12		;

0000529a <__mspabi_srai_13>:
    529a:	0c 11       	rra	r12		;

0000529c <__mspabi_srai_12>:
    529c:	0c 11       	rra	r12		;

0000529e <__mspabi_srai_11>:
    529e:	0c 11       	rra	r12		;

000052a0 <__mspabi_srai_10>:
    52a0:	0c 11       	rra	r12		;

000052a2 <__mspabi_srai_9>:
    52a2:	0c 11       	rra	r12		;

000052a4 <__mspabi_srai_8>:
    52a4:	0c 11       	rra	r12		;

000052a6 <__mspabi_srai_7>:
    52a6:	0c 11       	rra	r12		;

000052a8 <__mspabi_srai_6>:
    52a8:	0c 11       	rra	r12		;

000052aa <__mspabi_srai_5>:
    52aa:	0c 11       	rra	r12		;

000052ac <__mspabi_srai_4>:
    52ac:	0c 11       	rra	r12		;

000052ae <__mspabi_srai_3>:
    52ae:	0c 11       	rra	r12		;

000052b0 <__mspabi_srai_2>:
    52b0:	0c 11       	rra	r12		;

000052b2 <__mspabi_srai_1>:
    52b2:	0c 11       	rra	r12		;
    52b4:	30 41       	ret			
    52b6:	3d 53       	add	#-1,	r13	;r3 As==11
    52b8:	0c 11       	rra	r12		;

000052ba <__mspabi_srai>:
    52ba:	0d 93       	cmp	#0,	r13	;r3 As==00
    52bc:	fc 23       	jnz	$-6      	;abs 0x52b6
    52be:	30 41       	ret			

000052c0 <__mspabi_sral_15>:
    52c0:	0d 11       	rra	r13		;
    52c2:	0c 10       	rrc	r12		;

000052c4 <__mspabi_sral_14>:
    52c4:	0d 11       	rra	r13		;
    52c6:	0c 10       	rrc	r12		;

000052c8 <__mspabi_sral_13>:
    52c8:	0d 11       	rra	r13		;
    52ca:	0c 10       	rrc	r12		;

000052cc <__mspabi_sral_12>:
    52cc:	0d 11       	rra	r13		;
    52ce:	0c 10       	rrc	r12		;

000052d0 <__mspabi_sral_11>:
    52d0:	0d 11       	rra	r13		;
    52d2:	0c 10       	rrc	r12		;

000052d4 <__mspabi_sral_10>:
    52d4:	0d 11       	rra	r13		;
    52d6:	0c 10       	rrc	r12		;

000052d8 <__mspabi_sral_9>:
    52d8:	0d 11       	rra	r13		;
    52da:	0c 10       	rrc	r12		;

000052dc <__mspabi_sral_8>:
    52dc:	0d 11       	rra	r13		;
    52de:	0c 10       	rrc	r12		;

000052e0 <__mspabi_sral_7>:
    52e0:	0d 11       	rra	r13		;
    52e2:	0c 10       	rrc	r12		;

000052e4 <__mspabi_sral_6>:
    52e4:	0d 11       	rra	r13		;
    52e6:	0c 10       	rrc	r12		;

000052e8 <__mspabi_sral_5>:
    52e8:	0d 11       	rra	r13		;
    52ea:	0c 10       	rrc	r12		;

000052ec <__mspabi_sral_4>:
    52ec:	0d 11       	rra	r13		;
    52ee:	0c 10       	rrc	r12		;

000052f0 <__mspabi_sral_3>:
    52f0:	0d 11       	rra	r13		;
    52f2:	0c 10       	rrc	r12		;

000052f4 <__mspabi_sral_2>:
    52f4:	0d 11       	rra	r13		;
    52f6:	0c 10       	rrc	r12		;

000052f8 <__mspabi_sral_1>:
    52f8:	0d 11       	rra	r13		;
    52fa:	0c 10       	rrc	r12		;
    52fc:	30 41       	ret			
    52fe:	3e 53       	add	#-1,	r14	;r3 As==11
    5300:	0d 11       	rra	r13		;
    5302:	0c 10       	rrc	r12		;

00005304 <__mspabi_sral>:
    5304:	0e 93       	cmp	#0,	r14	;r3 As==00
    5306:	fb 23       	jnz	$-8      	;abs 0x52fe
    5308:	30 41       	ret			

0000530a <_printf_r>:
    530a:	0a 15       	pushm	#1,	r10	;16-bit words
    530c:	0a 4c       	mov	r12,	r10	;
    530e:	0c 93       	cmp	#0,	r12	;r3 As==00
    5310:	05 24       	jz	$+12     	;abs 0x531c
    5312:	8c 93 0c 00 	cmp	#0,	12(r12)	;r3 As==00, 0x000c
    5316:	02 20       	jnz	$+6      	;abs 0x531c
    5318:	b0 12 56 82 	call	#33366		;#0x8256
    531c:	0c 4a       	mov	r10,	r12	;
    531e:	1d 4a 04 00 	mov	4(r10),	r13	;
    5322:	1e 41 04 00 	mov	4(r1),	r14	;
    5326:	0f 41       	mov	r1,	r15	;
    5328:	3f 50 06 00 	add	#6,	r15	;
    532c:	b0 12 62 53 	call	#21346		;#0x5362
    5330:	0a 17       	popm	#1,	r10	;16-bit words
    5332:	30 41       	ret			

00005334 <printf>:
    5334:	0a 15       	pushm	#1,	r10	;16-bit words
    5336:	1a 42 04 1c 	mov	&0x1c04,r10	;0x1c04
    533a:	0a 93       	cmp	#0,	r10	;r3 As==00
    533c:	06 24       	jz	$+14     	;abs 0x534a
    533e:	8a 93 0c 00 	cmp	#0,	12(r10)	;r3 As==00, 0x000c
    5342:	03 20       	jnz	$+8      	;abs 0x534a
    5344:	0c 4a       	mov	r10,	r12	;
    5346:	b0 12 56 82 	call	#33366		;#0x8256
    534a:	0c 4a       	mov	r10,	r12	;
    534c:	1d 4a 04 00 	mov	4(r10),	r13	;
    5350:	1e 41 04 00 	mov	4(r1),	r14	;
    5354:	0f 41       	mov	r1,	r15	;
    5356:	3f 50 06 00 	add	#6,	r15	;
    535a:	b0 12 62 53 	call	#21346		;#0x5362
    535e:	0a 17       	popm	#1,	r10	;16-bit words
    5360:	30 41       	ret			

00005362 <_vfprintf_r>:
    5362:	6a 15       	pushm	#7,	r10	;16-bit words
    5364:	31 80 9a 00 	sub	#154,	r1	;#0x009a
    5368:	81 4c 0e 00 	mov	r12,	14(r1)	; 0x000e
    536c:	05 4d       	mov	r13,	r5	;
    536e:	81 4e 18 00 	mov	r14,	24(r1)	; 0x0018
    5372:	07 4f       	mov	r15,	r7	;
    5374:	b0 12 4e 85 	call	#34126		;#0x854e
    5378:	a1 4c 2c 00 	mov	@r12,	44(r1)	; 0x002c
    537c:	1c 41 2c 00 	mov	44(r1),	r12	;0x0002c
    5380:	b0 12 c4 99 	call	#39364		;#0x99c4
    5384:	81 4c 28 00 	mov	r12,	40(r1)	; 0x0028
    5388:	81 93 0e 00 	cmp	#0,	14(r1)	;r3 As==00, 0x000e
    538c:	07 24       	jz	$+16     	;abs 0x539c
    538e:	1c 41 0e 00 	mov	14(r1),	r12	;0x0000e
    5392:	8c 93 0c 00 	cmp	#0,	12(r12)	;r3 As==00, 0x000c
    5396:	02 20       	jnz	$+6      	;abs 0x539c
    5398:	b0 12 56 82 	call	#33366		;#0x8256
    539c:	35 90 8e 44 	cmp	#17550,	r5	;#0x448e
    53a0:	05 20       	jnz	$+12     	;abs 0x53ac
    53a2:	1c 41 0e 00 	mov	14(r1),	r12	;0x0000e
    53a6:	15 4c 02 00 	mov	2(r12),	r5	;
    53aa:	0f 3c       	jmp	$+32     	;abs 0x53ca
    53ac:	35 90 7c 44 	cmp	#17532,	r5	;#0x447c
    53b0:	05 20       	jnz	$+12     	;abs 0x53bc
    53b2:	1c 41 0e 00 	mov	14(r1),	r12	;0x0000e
    53b6:	15 4c 04 00 	mov	4(r12),	r5	;
    53ba:	07 3c       	jmp	$+16     	;abs 0x53ca
    53bc:	35 90 6a 44 	cmp	#17514,	r5	;#0x446a
    53c0:	04 20       	jnz	$+10     	;abs 0x53ca
    53c2:	1c 41 0e 00 	mov	14(r1),	r12	;0x0000e
    53c6:	15 4c 06 00 	mov	6(r12),	r5	;
    53ca:	1c 45 06 00 	mov	6(r5),	r12	;
    53ce:	3c b0 00 20 	bit	#8192,	r12	;#0x2000
    53d2:	07 20       	jnz	$+16     	;abs 0x53e2
    53d4:	3c d0 00 20 	bis	#8192,	r12	;#0x2000
    53d8:	85 4c 06 00 	mov	r12,	6(r5)	;
    53dc:	b5 f0 ff df 	and	#57343,	58(r5)	;#0xdfff, 0x003a
    53e0:	3a 00 
    53e2:	f5 b2 06 00 	bit.b	#8,	6(r5)	;r2 As==11
    53e6:	0b 24       	jz	$+24     	;abs 0x53fe
    53e8:	85 93 0a 00 	cmp	#0,	10(r5)	;r3 As==00, 0x000a
    53ec:	08 24       	jz	$+18     	;abs 0x53fe
    53ee:	1c 45 06 00 	mov	6(r5),	r12	;
    53f2:	3c f0 1a 00 	and	#26,	r12	;#0x001a
    53f6:	3c 90 0a 00 	cmp	#10,	r12	;#0x000a
    53fa:	18 20       	jnz	$+50     	;abs 0x542c
    53fc:	0a 3c       	jmp	$+22     	;abs 0x5412
    53fe:	1c 41 0e 00 	mov	14(r1),	r12	;0x0000e
    5402:	0d 45       	mov	r5,	r13	;
    5404:	b0 12 b4 69 	call	#27060		;#0x69b4
    5408:	0c 93       	cmp	#0,	r12	;r3 As==00
    540a:	f1 27       	jz	$-28     	;abs 0x53ee
    540c:	3c 43       	mov	#-1,	r12	;r3 As==11
    540e:	30 40 12 69 	br	#0x6912		;
    5412:	85 93 08 00 	cmp	#0,	8(r5)	;r3 As==00
    5416:	0a 38       	jl	$+22     	;abs 0x542c
    5418:	1c 41 0e 00 	mov	14(r1),	r12	;0x0000e
    541c:	0d 45       	mov	r5,	r13	;
    541e:	1e 41 18 00 	mov	24(r1),	r14	;0x00018
    5422:	0f 47       	mov	r7,	r15	;
    5424:	b0 12 32 69 	call	#26930		;#0x6932
    5428:	30 40 12 69 	br	#0x6912		;
    542c:	3d 40 52 00 	mov	#82,	r13	;#0x0052
    5430:	0d 51       	add	r1,	r13	;
    5432:	81 4d 3c 00 	mov	r13,	60(r1)	; 0x003c
    5436:	81 43 40 00 	mov	#0,	64(r1)	;r3 As==00, 0x0040
    543a:	81 43 3e 00 	mov	#0,	62(r1)	;r3 As==00, 0x003e
    543e:	81 43 14 00 	mov	#0,	20(r1)	;r3 As==00, 0x0014
    5442:	91 41 14 00 	mov	20(r1),	30(r1)	;0x00014, 0x001e
    5446:	1e 00 
    5448:	91 41 14 00 	mov	20(r1),	32(r1)	;0x00014, 0x0020
    544c:	20 00 
    544e:	91 41 14 00 	mov	20(r1),	34(r1)	;0x00014, 0x0022
    5452:	22 00 
    5454:	91 41 14 00 	mov	20(r1),	36(r1)	;0x00014, 0x0024
    5458:	24 00 
    545a:	0a 4d       	mov	r13,	r10	;
    545c:	91 41 14 00 	mov	20(r1),	48(r1)	;0x00014, 0x0030
    5460:	30 00 
    5462:	91 41 14 00 	mov	20(r1),	46(r1)	;0x00014, 0x002e
    5466:	2e 00 
    5468:	91 41 14 00 	mov	20(r1),	38(r1)	;0x00014, 0x0026
    546c:	26 00 
    546e:	19 41 18 00 	mov	24(r1),	r9	;0x00018
    5472:	6c 49       	mov.b	@r9,	r12	;
    5474:	0c 93       	cmp	#0,	r12	;r3 As==00
    5476:	06 20       	jnz	$+14     	;abs 0x5484
    5478:	08 49       	mov	r9,	r8	;
    547a:	18 81 18 00 	sub	24(r1),	r8	;0x00018
    547e:	08 93       	cmp	#0,	r8	;r3 As==00
    5480:	06 20       	jnz	$+14     	;abs 0x548e
    5482:	28 3c       	jmp	$+82     	;abs 0x54d4
    5484:	3c 90 25 00 	cmp	#37,	r12	;#0x0025
    5488:	f7 27       	jz	$-16     	;abs 0x5478
    548a:	19 53       	inc	r9		;
    548c:	f2 3f       	jmp	$-26     	;abs 0x5472
    548e:	9a 41 18 00 	mov	24(r1),	0(r10)	;0x00018
    5492:	00 00 
    5494:	8a 48 02 00 	mov	r8,	2(r10)	;
    5498:	81 58 40 00 	add	r8,	64(r1)	; 0x0040
    549c:	1c 41 3e 00 	mov	62(r1),	r12	;0x0003e
    54a0:	1c 53       	inc	r12		;
    54a2:	81 4c 3e 00 	mov	r12,	62(r1)	; 0x003e
    54a6:	3e 40 07 00 	mov	#7,	r14	;
    54aa:	0e 9c       	cmp	r12,	r14	;
    54ac:	02 38       	jl	$+6      	;abs 0x54b2
    54ae:	2a 52       	add	#4,	r10	;r2 As==10
    54b0:	0f 3c       	jmp	$+32     	;abs 0x54d0
    54b2:	1c 41 0e 00 	mov	14(r1),	r12	;0x0000e
    54b6:	0d 45       	mov	r5,	r13	;
    54b8:	0e 41       	mov	r1,	r14	;
    54ba:	3e 50 3c 00 	add	#60,	r14	;#0x003c
    54be:	b0 12 d6 99 	call	#39382		;#0x99d6
    54c2:	0c 93       	cmp	#0,	r12	;r3 As==00
    54c4:	02 24       	jz	$+6      	;abs 0x54ca
    54c6:	80 00 f4 68 	mova	#26868,	r0	;0x068f4
    54ca:	0a 41       	mov	r1,	r10	;
    54cc:	3a 50 52 00 	add	#82,	r10	;#0x0052
    54d0:	81 58 26 00 	add	r8,	38(r1)	; 0x0026
    54d4:	c9 93 00 00 	cmp.b	#0,	0(r9)	;r3 As==00
    54d8:	02 20       	jnz	$+6      	;abs 0x54de
    54da:	80 00 de 68 	mova	#26846,	r0	;0x068de
    54de:	19 53       	inc	r9		;
    54e0:	c1 43 35 00 	mov.b	#0,	53(r1)	;r3 As==00, 0x0035
    54e4:	0c 43       	clr	r12		;
    54e6:	38 43       	mov	#-1,	r8	;r3 As==11
    54e8:	81 4c 1c 00 	mov	r12,	28(r1)	; 0x001c
    54ec:	04 4c       	mov	r12,	r4	;
    54ee:	0f 49       	mov	r9,	r15	;
    54f0:	1f 53       	inc	r15		;
    54f2:	81 4f 18 00 	mov	r15,	24(r1)	; 0x0018
    54f6:	69 49       	mov.b	@r9,	r9	;
    54f8:	39 90 55 00 	cmp	#85,	r9	;#0x0055
    54fc:	02 20       	jnz	$+6      	;abs 0x5502
    54fe:	80 00 36 5c 	mova	#23606,	r0	;0x05c36
    5502:	3d 40 55 00 	mov	#85,	r13	;#0x0055
    5506:	0d 99       	cmp	r9,	r13	;
    5508:	4c 38       	jl	$+154    	;abs 0x55a2
    550a:	39 90 30 00 	cmp	#48,	r9	;#0x0030
    550e:	e4 24       	jz	$+458    	;abs 0x56d8
    5510:	3e 40 30 00 	mov	#48,	r14	;#0x0030
    5514:	0e 99       	cmp	r9,	r14	;
    5516:	20 38       	jl	$+66     	;abs 0x5558
    5518:	39 90 2a 00 	cmp	#42,	r9	;#0x002a
    551c:	9f 24       	jz	$+320    	;abs 0x565c
    551e:	3f 40 2a 00 	mov	#42,	r15	;#0x002a
    5522:	0f 99       	cmp	r9,	r15	;
    5524:	0c 38       	jl	$+26     	;abs 0x553e
    5526:	39 90 20 00 	cmp	#32,	r9	;#0x0020
    552a:	95 24       	jz	$+300    	;abs 0x5656
    552c:	39 90 23 00 	cmp	#35,	r9	;#0x0023
    5530:	02 24       	jz	$+6      	;abs 0x5536
    5532:	80 00 44 5e 	mova	#24132,	r0	;0x05e44
    5536:	14 d3       	bis	#1,	r4	;r3 As==01
    5538:	19 41 18 00 	mov	24(r1),	r9	;0x00018
    553c:	d8 3f       	jmp	$-78     	;abs 0x54ee
    553e:	39 90 2d 00 	cmp	#45,	r9	;#0x002d
    5542:	9b 24       	jz	$+312    	;abs 0x567a
    5544:	39 90 2e 00 	cmp	#46,	r9	;#0x002e
    5548:	9a 24       	jz	$+310    	;abs 0x567e
    554a:	39 90 2b 00 	cmp	#43,	r9	;#0x002b
    554e:	02 24       	jz	$+6      	;abs 0x5554
    5550:	80 00 44 5e 	mova	#24132,	r0	;0x05e44
    5554:	0c 49       	mov	r9,	r12	;
    5556:	f0 3f       	jmp	$-30     	;abs 0x5538
    5558:	39 90 45 00 	cmp	#69,	r9	;#0x0045
    555c:	27 25       	jz	$+592    	;abs 0x57ac
    555e:	3d 40 45 00 	mov	#69,	r13	;#0x0045
    5562:	0d 99       	cmp	r9,	r13	;
    5564:	10 38       	jl	$+34     	;abs 0x5586
    5566:	3e 40 39 00 	mov	#57,	r14	;#0x0039
    556a:	0e 99       	cmp	r9,	r14	;
    556c:	b8 34       	jge	$+370    	;abs 0x56de
    556e:	39 90 44 00 	cmp	#68,	r9	;#0x0044
    5572:	02 24       	jz	$+6      	;abs 0x5578
    5574:	80 00 44 5e 	mova	#24132,	r0	;0x05e44
    5578:	c1 4c 35 00 	mov.b	r12,	53(r1)	; 0x0035
    557c:	34 d0 10 00 	bis	#16,	r4	;#0x0010
    5580:	81 44 12 00 	mov	r4,	18(r1)	; 0x0012
    5584:	df 3c       	jmp	$+448    	;abs 0x5744
    5586:	39 90 4c 00 	cmp	#76,	r9	;#0x004c
    558a:	c6 24       	jz	$+398    	;abs 0x5718
    558c:	39 90 4f 00 	cmp	#79,	r9	;#0x004f
    5590:	02 20       	jnz	$+6      	;abs 0x5596
    5592:	80 00 6a 5b 	mova	#23402,	r0	;0x05b6a
    5596:	39 90 47 00 	cmp	#71,	r9	;#0x0047
    559a:	02 24       	jz	$+6      	;abs 0x55a0
    559c:	80 00 44 5e 	mova	#24132,	r0	;0x05e44
    55a0:	05 3d       	jmp	$+524    	;abs 0x57ac
    55a2:	39 90 6c 00 	cmp	#108,	r9	;#0x006c
    55a6:	bd 24       	jz	$+380    	;abs 0x5722
    55a8:	3f 40 6c 00 	mov	#108,	r15	;#0x006c
    55ac:	0f 99       	cmp	r9,	r15	;
    55ae:	24 38       	jl	$+74     	;abs 0x55f8
    55b0:	3d 40 67 00 	mov	#103,	r13	;#0x0067
    55b4:	0d 99       	cmp	r9,	r13	;
    55b6:	18 38       	jl	$+50     	;abs 0x55e8
    55b8:	39 90 65 00 	cmp	#101,	r9	;#0x0065
    55bc:	f7 34       	jge	$+496    	;abs 0x57ac
    55be:	39 90 63 00 	cmp	#99,	r9	;#0x0063
    55c2:	b2 24       	jz	$+358    	;abs 0x5728
    55c4:	3e 40 63 00 	mov	#99,	r14	;#0x0063
    55c8:	0e 99       	cmp	r9,	r14	;
    55ca:	40 38       	jl	$+130    	;abs 0x564c
    55cc:	39 90 58 00 	cmp	#88,	r9	;#0x0058
    55d0:	02 24       	jz	$+6      	;abs 0x55d6
    55d2:	80 00 44 5e 	mova	#24132,	r0	;0x05e44
    55d6:	c1 4c 35 00 	mov.b	r12,	53(r1)	; 0x0035
    55da:	81 44 12 00 	mov	r4,	18(r1)	; 0x0012
    55de:	b1 40 17 44 	mov	#17431,	48(r1)	;#0x4417, 0x0030
    55e2:	30 00 
    55e4:	30 40 96 5c 	br	#0x5c96		;
    55e8:	39 90 68 00 	cmp	#104,	r9	;#0x0068
    55ec:	97 24       	jz	$+304    	;abs 0x571c
    55ee:	39 90 69 00 	cmp	#105,	r9	;#0x0069
    55f2:	2c 24       	jz	$+90     	;abs 0x564c
    55f4:	30 40 44 5e 	br	#0x5e44		;
    55f8:	39 90 71 00 	cmp	#113,	r9	;#0x0071
    55fc:	92 24       	jz	$+294    	;abs 0x5722
    55fe:	3f 40 71 00 	mov	#113,	r15	;#0x0071
    5602:	0f 99       	cmp	r9,	r15	;
    5604:	12 38       	jl	$+38     	;abs 0x562a
    5606:	39 90 6f 00 	cmp	#111,	r9	;#0x006f
    560a:	02 20       	jnz	$+6      	;abs 0x5610
    560c:	80 00 6e 5b 	mova	#23406,	r0	;0x05b6e
    5610:	3d 40 6f 00 	mov	#111,	r13	;#0x006f
    5614:	0d 99       	cmp	r9,	r13	;
    5616:	02 34       	jge	$+6      	;abs 0x561c
    5618:	80 00 c4 5b 	mova	#23492,	r0	;0x05bc4
    561c:	39 90 6e 00 	cmp	#110,	r9	;#0x006e
    5620:	02 20       	jnz	$+6      	;abs 0x5626
    5622:	80 00 36 5b 	mova	#23350,	r0	;0x05b36
    5626:	30 40 44 5e 	br	#0x5e44		;
    562a:	39 90 75 00 	cmp	#117,	r9	;#0x0075
    562e:	02 20       	jnz	$+6      	;abs 0x5634
    5630:	80 00 3a 5c 	mova	#23610,	r0	;0x05c3a
    5634:	39 90 78 00 	cmp	#120,	r9	;#0x0078
    5638:	02 20       	jnz	$+6      	;abs 0x563e
    563a:	80 00 88 5c 	mova	#23688,	r0	;0x05c88
    563e:	39 90 73 00 	cmp	#115,	r9	;#0x0073
    5642:	02 24       	jz	$+6      	;abs 0x5648
    5644:	80 00 44 5e 	mova	#24132,	r0	;0x05e44
    5648:	30 40 f2 5b 	br	#0x5bf2		;
    564c:	c1 4c 35 00 	mov.b	r12,	53(r1)	; 0x0035
    5650:	81 44 12 00 	mov	r4,	18(r1)	; 0x0012
    5654:	77 3c       	jmp	$+240    	;abs 0x5744
    5656:	0c 93       	cmp	#0,	r12	;r3 As==00
    5658:	6f 23       	jnz	$-288    	;abs 0x5538
    565a:	7c 3f       	jmp	$-262    	;abs 0x5554
    565c:	0f 47       	mov	r7,	r15	;
    565e:	1f 53       	inc	r15		;
    5660:	1f c3       	bic	#1,	r15	;r3 As==01
    5662:	07 4f       	mov	r15,	r7	;
    5664:	27 53       	incd	r7		;
    5666:	a1 4f 1c 00 	mov	@r15,	28(r1)	; 0x001c
    566a:	81 93 1c 00 	cmp	#0,	28(r1)	;r3 As==00, 0x001c
    566e:	64 37       	jge	$-310    	;abs 0x5538
    5670:	0e 43       	clr	r14		;
    5672:	1e 81 1c 00 	sub	28(r1),	r14	;0x0001c
    5676:	81 4e 1c 00 	mov	r14,	28(r1)	; 0x001c
    567a:	24 d2       	bis	#4,	r4	;r2 As==10
    567c:	5d 3f       	jmp	$-324    	;abs 0x5538
    567e:	1d 41 18 00 	mov	24(r1),	r13	;0x00018
    5682:	1d 53       	inc	r13		;
    5684:	1f 41 18 00 	mov	24(r1),	r15	;0x00018
    5688:	69 4f       	mov.b	@r15,	r9	;
    568a:	39 90 2a 00 	cmp	#42,	r9	;#0x002a
    568e:	02 24       	jz	$+6      	;abs 0x5694
    5690:	08 43       	clr	r8		;
    5692:	0c 3c       	jmp	$+26     	;abs 0x56ac
    5694:	81 4d 18 00 	mov	r13,	24(r1)	; 0x0018
    5698:	0f 47       	mov	r7,	r15	;
    569a:	1f 53       	inc	r15		;
    569c:	1f c3       	bic	#1,	r15	;r3 As==01
    569e:	07 4f       	mov	r15,	r7	;
    56a0:	27 53       	incd	r7		;
    56a2:	28 4f       	mov	@r15,	r8	;
    56a4:	08 93       	cmp	#0,	r8	;r3 As==00
    56a6:	48 37       	jge	$-366    	;abs 0x5538
    56a8:	38 43       	mov	#-1,	r8	;r3 As==11
    56aa:	46 3f       	jmp	$-370    	;abs 0x5538
    56ac:	81 4d 18 00 	mov	r13,	24(r1)	; 0x0018
    56b0:	0e 49       	mov	r9,	r14	;
    56b2:	3e 50 d0 ff 	add	#65488,	r14	;#0xffd0
    56b6:	3f 40 09 00 	mov	#9,	r15	;
    56ba:	0f 9e       	cmp	r14,	r15	;
    56bc:	09 28       	jnc	$+20     	;abs 0x56d0
    56be:	08 58       	rla	r8		;
    56c0:	0f 48       	mov	r8,	r15	;
    56c2:	41 18 0f 5f 	rpt #2 { rlax.w	r15		;
    56c6:	08 5f       	add	r15,	r8	;
    56c8:	08 5e       	add	r14,	r8	;
    56ca:	69 4d       	mov.b	@r13,	r9	;
    56cc:	1d 53       	inc	r13		;
    56ce:	ee 3f       	jmp	$-34     	;abs 0x56ac
    56d0:	08 93       	cmp	#0,	r8	;r3 As==00
    56d2:	12 37       	jge	$-474    	;abs 0x54f8
    56d4:	38 43       	mov	#-1,	r8	;r3 As==11
    56d6:	10 3f       	jmp	$-478    	;abs 0x54f8
    56d8:	34 d0 80 00 	bis	#128,	r4	;#0x0080
    56dc:	2d 3f       	jmp	$-420    	;abs 0x5538
    56de:	1e 41 18 00 	mov	24(r1),	r14	;0x00018
    56e2:	81 43 1c 00 	mov	#0,	28(r1)	;r3 As==00, 0x001c
    56e6:	1f 41 1c 00 	mov	28(r1),	r15	;0x0001c
    56ea:	0f 5f       	rla	r15		;
    56ec:	0d 4f       	mov	r15,	r13	;
    56ee:	41 18 0d 5d 	rpt #2 { rlax.w	r13		;
    56f2:	0d 5f       	add	r15,	r13	;
    56f4:	39 50 d0 ff 	add	#65488,	r9	;#0xffd0
    56f8:	0d 59       	add	r9,	r13	;
    56fa:	81 4d 1c 00 	mov	r13,	28(r1)	; 0x001c
    56fe:	91 53 18 00 	inc	24(r1)		;
    5702:	69 4e       	mov.b	@r14,	r9	;
    5704:	1e 41 18 00 	mov	24(r1),	r14	;0x00018
    5708:	0d 49       	mov	r9,	r13	;
    570a:	3d 50 d0 ff 	add	#65488,	r13	;#0xffd0
    570e:	3f 40 09 00 	mov	#9,	r15	;
    5712:	0f 9d       	cmp	r13,	r15	;
    5714:	e8 2f       	jc	$-46     	;abs 0x56e6
    5716:	f0 3e       	jmp	$-542    	;abs 0x54f8
    5718:	34 d2       	bis	#8,	r4	;r2 As==11
    571a:	0e 3f       	jmp	$-482    	;abs 0x5538
    571c:	34 d0 40 00 	bis	#64,	r4	;#0x0040
    5720:	0b 3f       	jmp	$-488    	;abs 0x5538
    5722:	34 d0 10 00 	bis	#16,	r4	;#0x0010
    5726:	08 3f       	jmp	$-494    	;abs 0x5538
    5728:	17 53       	inc	r7		;
    572a:	17 c3       	bic	#1,	r7	;r3 As==01
    572c:	0c 47       	mov	r7,	r12	;
    572e:	2c 53       	incd	r12		;
    5730:	81 4c 16 00 	mov	r12,	22(r1)	; 0x0016
    5734:	e1 47 72 00 	mov.b	@r7,	114(r1)	; 0x0072
    5738:	c1 43 35 00 	mov.b	#0,	53(r1)	;r3 As==00, 0x0035
    573c:	81 44 12 00 	mov	r4,	18(r1)	; 0x0012
    5740:	30 40 60 5e 	br	#0x5e60		;
    5744:	17 53       	inc	r7		;
    5746:	17 c3       	bic	#1,	r7	;r3 As==01
    5748:	b1 b0 10 00 	bit	#16,	18(r1)	;#0x0010, 0x0012
    574c:	12 00 
    574e:	08 24       	jz	$+18     	;abs 0x5760
    5750:	0d 47       	mov	r7,	r13	;
    5752:	2d 52       	add	#4,	r13	;r2 As==10
    5754:	81 4d 16 00 	mov	r13,	22(r1)	; 0x0016
    5758:	26 47       	mov	@r7,	r6	;
    575a:	17 47 02 00 	mov	2(r7),	r7	;
    575e:	13 3c       	jmp	$+40     	;abs 0x5786
    5760:	b1 b0 40 00 	bit	#64,	18(r1)	;#0x0040, 0x0012
    5764:	12 00 
    5766:	06 24       	jz	$+14     	;abs 0x5774
    5768:	0e 47       	mov	r7,	r14	;
    576a:	2e 53       	incd	r14		;
    576c:	81 4e 16 00 	mov	r14,	22(r1)	; 0x0016
    5770:	26 47       	mov	@r7,	r6	;
    5772:	05 3c       	jmp	$+12     	;abs 0x577e
    5774:	0f 47       	mov	r7,	r15	;
    5776:	2f 53       	incd	r15		;
    5778:	81 4f 16 00 	mov	r15,	22(r1)	; 0x0016
    577c:	26 47       	mov	@r7,	r6	;
    577e:	36 b0 00 80 	bit	#32768,	r6	;#0x8000
    5782:	07 77       	subc	r7,	r7	;
    5784:	37 e3       	inv	r7		;
    5786:	07 93       	cmp	#0,	r7	;r3 As==00
    5788:	02 38       	jl	$+6      	;abs 0x578e
    578a:	80 00 fe 5c 	mova	#23806,	r0	;0x05cfe
    578e:	0c 43       	clr	r12		;
    5790:	0d 43       	clr	r13		;
    5792:	0e 4c       	mov	r12,	r14	;
    5794:	0f 4d       	mov	r13,	r15	;
    5796:	0e 86       	sub	r6,	r14	;
    5798:	0f 77       	subc	r7,	r15	;
    579a:	06 4e       	mov	r14,	r6	;
    579c:	07 4f       	mov	r15,	r7	;
    579e:	f1 40 2d 00 	mov.b	#45,	53(r1)	;#0x002d, 0x0035
    57a2:	35 00 
    57a4:	04 48       	mov	r8,	r4	;
    57a6:	1c 43       	mov	#1,	r12	;r3 As==01
    57a8:	30 40 02 5d 	br	#0x5d02		;
    57ac:	81 49 2a 00 	mov	r9,	42(r1)	; 0x002a
    57b0:	c1 4c 35 00 	mov.b	r12,	53(r1)	; 0x0035
    57b4:	17 53       	inc	r7		;
    57b6:	17 c3       	bic	#1,	r7	;r3 As==01
    57b8:	0f 47       	mov	r7,	r15	;
    57ba:	3f 52       	add	#8,	r15	;r2 As==11
    57bc:	81 4f 16 00 	mov	r15,	22(r1)	; 0x0016
    57c0:	a1 47 1e 00 	mov	@r7,	30(r1)	; 0x001e
    57c4:	91 47 02 00 	mov	2(r7),	32(r1)	; 0x0020
    57c8:	20 00 
    57ca:	91 47 04 00 	mov	4(r7),	34(r1)	; 0x0022
    57ce:	22 00 
    57d0:	91 47 06 00 	mov	6(r7),	36(r1)	; 0x0024
    57d4:	24 00 
    57d6:	37 40 5c 98 	mov	#39004,	r7	;#0x985c
    57da:	1c 41 1e 00 	mov	30(r1),	r12	;0x0001e
    57de:	1d 41 20 00 	mov	32(r1),	r13	;0x00020
    57e2:	1e 41 22 00 	mov	34(r1),	r14	;0x00022
    57e6:	1f 41 24 00 	mov	36(r1),	r15	;0x00024
    57ea:	87 12       	call	r7		;
    57ec:	1c 93       	cmp	#1,	r12	;r3 As==01
    57ee:	23 20       	jnz	$+72     	;abs 0x5836
    57f0:	81 43 00 00 	mov	#0,	0(r1)	;r3 As==00
    57f4:	81 43 02 00 	mov	#0,	2(r1)	;r3 As==00
    57f8:	81 43 04 00 	mov	#0,	4(r1)	;r3 As==00
    57fc:	81 43 06 00 	mov	#0,	6(r1)	;r3 As==00
    5800:	1c 41 1e 00 	mov	30(r1),	r12	;0x0001e
    5804:	1d 41 20 00 	mov	32(r1),	r13	;0x00020
    5808:	1e 41 22 00 	mov	34(r1),	r14	;0x00022
    580c:	1f 41 24 00 	mov	36(r1),	r15	;0x00024
    5810:	b0 12 5e be 	call	#48734		;#0xbe5e
    5814:	0c 93       	cmp	#0,	r12	;r3 As==00
    5816:	03 34       	jge	$+8      	;abs 0x581e
    5818:	f1 40 2d 00 	mov.b	#45,	53(r1)	;#0x002d, 0x0035
    581c:	35 00 
    581e:	3c 40 47 00 	mov	#71,	r12	;#0x0047
    5822:	0c 99       	cmp	r9,	r12	;
    5824:	04 38       	jl	$+10     	;abs 0x582e
    5826:	b1 40 07 44 	mov	#17415,	16(r1)	;#0x4407, 0x0010
    582a:	10 00 
    582c:	1a 3c       	jmp	$+54     	;abs 0x5862
    582e:	b1 40 0b 44 	mov	#17419,	16(r1)	;#0x440b, 0x0010
    5832:	10 00 
    5834:	16 3c       	jmp	$+46     	;abs 0x5862
    5836:	1c 41 1e 00 	mov	30(r1),	r12	;0x0001e
    583a:	1d 41 20 00 	mov	32(r1),	r13	;0x00020
    583e:	1e 41 22 00 	mov	34(r1),	r14	;0x00022
    5842:	1f 41 24 00 	mov	36(r1),	r15	;0x00024
    5846:	87 12       	call	r7		;
    5848:	0c 93       	cmp	#0,	r12	;r3 As==00
    584a:	15 20       	jnz	$+44     	;abs 0x5876
    584c:	3d 40 47 00 	mov	#71,	r13	;#0x0047
    5850:	0d 99       	cmp	r9,	r13	;
    5852:	04 38       	jl	$+10     	;abs 0x585c
    5854:	b1 40 0f 44 	mov	#17423,	16(r1)	;#0x440f, 0x0010
    5858:	10 00 
    585a:	03 3c       	jmp	$+8      	;abs 0x5862
    585c:	b1 40 13 44 	mov	#17427,	16(r1)	;#0x4413, 0x0010
    5860:	10 00 
    5862:	34 f0 7f ff 	and	#65407,	r4	;#0xff7f
    5866:	81 44 12 00 	mov	r4,	18(r1)	; 0x0012
    586a:	38 40 03 00 	mov	#3,	r8	;
    586e:	04 43       	clr	r4		;
    5870:	06 44       	mov	r4,	r6	;
    5872:	30 40 7c 5e 	br	#0x5e7c		;
    5876:	38 93       	cmp	#-1,	r8	;r3 As==11
    5878:	0a 24       	jz	$+22     	;abs 0x588e
    587a:	0c 49       	mov	r9,	r12	;
    587c:	3c f0 df ff 	and	#65503,	r12	;#0xffdf
    5880:	3c 90 47 00 	cmp	#71,	r12	;#0x0047
    5884:	06 20       	jnz	$+14     	;abs 0x5892
    5886:	08 93       	cmp	#0,	r8	;r3 As==00
    5888:	04 20       	jnz	$+10     	;abs 0x5892
    588a:	18 43       	mov	#1,	r8	;r3 As==01
    588c:	02 3c       	jmp	$+6      	;abs 0x5892
    588e:	38 40 06 00 	mov	#6,	r8	;
    5892:	0e 44       	mov	r4,	r14	;
    5894:	3e d0 00 01 	bis	#256,	r14	;#0x0100
    5898:	81 4e 12 00 	mov	r14,	18(r1)	; 0x0012
    589c:	81 93 24 00 	cmp	#0,	36(r1)	;r3 As==00, 0x0024
    58a0:	0a 34       	jge	$+22     	;abs 0x58b6
    58a2:	1f 41 24 00 	mov	36(r1),	r15	;0x00024
    58a6:	3f 50 00 80 	add	#32768,	r15	;#0x8000
    58aa:	81 4f 1a 00 	mov	r15,	26(r1)	; 0x001a
    58ae:	b1 40 2d 00 	mov	#45,	50(r1)	;#0x002d, 0x0032
    58b2:	32 00 
    58b4:	05 3c       	jmp	$+12     	;abs 0x58c0
    58b6:	91 41 24 00 	mov	36(r1),	26(r1)	;0x00024, 0x001a
    58ba:	1a 00 
    58bc:	81 43 32 00 	mov	#0,	50(r1)	;r3 As==00, 0x0032
    58c0:	07 49       	mov	r9,	r7	;
    58c2:	37 f0 df ff 	and	#65503,	r7	;#0xffdf
    58c6:	06 48       	mov	r8,	r6	;
    58c8:	37 90 46 00 	cmp	#70,	r7	;#0x0046
    58cc:	06 24       	jz	$+14     	;abs 0x58da
    58ce:	37 90 45 00 	cmp	#69,	r7	;#0x0045
    58d2:	06 20       	jnz	$+14     	;abs 0x58e0
    58d4:	16 53       	inc	r6		;
    58d6:	2d 43       	mov	#2,	r13	;r3 As==10
    58d8:	04 3c       	jmp	$+10     	;abs 0x58e2
    58da:	3d 40 03 00 	mov	#3,	r13	;
    58de:	01 3c       	jmp	$+4      	;abs 0x58e2
    58e0:	2d 43       	mov	#2,	r13	;r3 As==10
    58e2:	91 41 1e 00 	mov	30(r1),	0(r1)	;0x0001e
    58e6:	00 00 
    58e8:	91 41 20 00 	mov	32(r1),	2(r1)	;0x00020
    58ec:	02 00 
    58ee:	91 41 22 00 	mov	34(r1),	4(r1)	;0x00022
    58f2:	04 00 
    58f4:	91 41 1a 00 	mov	26(r1),	6(r1)	;0x0001a
    58f8:	06 00 
    58fa:	3c 40 38 00 	mov	#56,	r12	;#0x0038
    58fe:	0c 51       	add	r1,	r12	;
    5900:	81 4c 08 00 	mov	r12,	8(r1)	;
    5904:	3e 40 4a 00 	mov	#74,	r14	;#0x004a
    5908:	0e 51       	add	r1,	r14	;
    590a:	81 4e 0a 00 	mov	r14,	10(r1)	; 0x000a
    590e:	1c 41 0e 00 	mov	14(r1),	r12	;0x0000e
    5912:	0e 46       	mov	r6,	r14	;
    5914:	0f 41       	mov	r1,	r15	;
    5916:	3f 50 36 00 	add	#54,	r15	;#0x0036
    591a:	b0 12 70 6d 	call	#28016		;#0x6d70
    591e:	81 4c 10 00 	mov	r12,	16(r1)	; 0x0010
    5922:	37 90 47 00 	cmp	#71,	r7	;#0x0047
    5926:	0c 20       	jnz	$+26     	;abs 0x5940
    5928:	14 b3       	bit	#1,	r4	;r3 As==01
    592a:	0a 20       	jnz	$+22     	;abs 0x5940
    592c:	1f 41 4a 00 	mov	74(r1),	r15	;0x0004a
    5930:	1f 81 10 00 	sub	16(r1),	r15	;0x00010
    5934:	81 4f 14 00 	mov	r15,	20(r1)	; 0x0014
    5938:	37 90 47 00 	cmp	#71,	r7	;#0x0047
    593c:	58 20       	jnz	$+178    	;abs 0x59ee
    593e:	4d 3c       	jmp	$+156    	;abs 0x59da
    5940:	1c 41 10 00 	mov	16(r1),	r12	;0x00010
    5944:	0c 56       	add	r6,	r12	;
    5946:	81 4c 14 00 	mov	r12,	20(r1)	; 0x0014
    594a:	37 90 46 00 	cmp	#70,	r7	;#0x0046
    594e:	21 20       	jnz	$+68     	;abs 0x5992
    5950:	1c 41 10 00 	mov	16(r1),	r12	;0x00010
    5954:	fc 90 30 00 	cmp.b	#48,	0(r12)	;#0x0030
    5958:	00 00 
    595a:	18 20       	jnz	$+50     	;abs 0x598c
    595c:	81 43 00 00 	mov	#0,	0(r1)	;r3 As==00
    5960:	81 43 02 00 	mov	#0,	2(r1)	;r3 As==00
    5964:	81 43 04 00 	mov	#0,	4(r1)	;r3 As==00
    5968:	81 43 06 00 	mov	#0,	6(r1)	;r3 As==00
    596c:	1c 41 1e 00 	mov	30(r1),	r12	;0x0001e
    5970:	1d 41 20 00 	mov	32(r1),	r13	;0x00020
    5974:	1e 41 22 00 	mov	34(r1),	r14	;0x00022
    5978:	1f 41 1a 00 	mov	26(r1),	r15	;0x0001a
    597c:	b0 12 08 bd 	call	#48392		;#0xbd08
    5980:	0c 93       	cmp	#0,	r12	;r3 As==00
    5982:	04 24       	jz	$+10     	;abs 0x598c
    5984:	1d 43       	mov	#1,	r13	;r3 As==01
    5986:	0d 86       	sub	r6,	r13	;
    5988:	81 4d 36 00 	mov	r13,	54(r1)	; 0x0036
    598c:	91 51 36 00 	rla	54(r1)		;#0x00036
    5990:	14 00 
    5992:	81 43 00 00 	mov	#0,	0(r1)	;r3 As==00
    5996:	81 43 02 00 	mov	#0,	2(r1)	;r3 As==00
    599a:	81 43 04 00 	mov	#0,	4(r1)	;r3 As==00
    599e:	81 43 06 00 	mov	#0,	6(r1)	;r3 As==00
    59a2:	1c 41 1e 00 	mov	30(r1),	r12	;0x0001e
    59a6:	1d 41 20 00 	mov	32(r1),	r13	;0x00020
    59aa:	1e 41 22 00 	mov	34(r1),	r14	;0x00022
    59ae:	1f 41 1a 00 	mov	26(r1),	r15	;0x0001a
    59b2:	b0 12 96 bc 	call	#48278		;#0xbc96
    59b6:	0c 93       	cmp	#0,	r12	;r3 As==00
    59b8:	03 20       	jnz	$+8      	;abs 0x59c0
    59ba:	91 41 14 00 	mov	20(r1),	74(r1)	;0x00014, 0x004a
    59be:	4a 00 
    59c0:	1c 41 4a 00 	mov	74(r1),	r12	;0x0004a
    59c4:	1c 91 14 00 	cmp	20(r1),	r12	;0x00014
    59c8:	b1 2f       	jc	$-156    	;abs 0x592c
    59ca:	0e 4c       	mov	r12,	r14	;
    59cc:	1e 53       	inc	r14		;
    59ce:	81 4e 4a 00 	mov	r14,	74(r1)	; 0x004a
    59d2:	fc 40 30 00 	mov.b	#48,	0(r12)	;#0x0030
    59d6:	00 00 
    59d8:	f3 3f       	jmp	$-24     	;abs 0x59c0
    59da:	1c 41 36 00 	mov	54(r1),	r12	;0x00036
    59de:	3c 90 fd ff 	cmp	#65533,	r12	;#0xfffd
    59e2:	02 38       	jl	$+6      	;abs 0x59e8
    59e4:	08 9c       	cmp	r12,	r8	;
    59e6:	7d 34       	jge	$+252    	;abs 0x5ae2
    59e8:	39 50 fe ff 	add	#65534,	r9	;#0xfffe
    59ec:	04 3c       	jmp	$+10     	;abs 0x59f6
    59ee:	3f 40 65 00 	mov	#101,	r15	;#0x0065
    59f2:	0f 99       	cmp	r9,	r15	;
    59f4:	60 38       	jl	$+194    	;abs 0x5ab6
    59f6:	16 41 36 00 	mov	54(r1),	r6	;0x00036
    59fa:	36 53       	add	#-1,	r6	;r3 As==11
    59fc:	81 46 36 00 	mov	r6,	54(r1)	; 0x0036
    5a00:	c1 49 43 00 	mov.b	r9,	67(r1)	; 0x0043
    5a04:	06 93       	cmp	#0,	r6	;r3 As==00
    5a06:	07 34       	jge	$+16     	;abs 0x5a16
    5a08:	0c 43       	clr	r12		;
    5a0a:	0c 86       	sub	r6,	r12	;
    5a0c:	06 4c       	mov	r12,	r6	;
    5a0e:	f1 40 2d 00 	mov.b	#45,	68(r1)	;#0x002d, 0x0044
    5a12:	44 00 
    5a14:	03 3c       	jmp	$+8      	;abs 0x5a1c
    5a16:	f1 40 2b 00 	mov.b	#43,	68(r1)	;#0x002b, 0x0044
    5a1a:	44 00 
    5a1c:	3d 40 09 00 	mov	#9,	r13	;
    5a20:	0d 96       	cmp	r6,	r13	;
    5a22:	2c 34       	jge	$+90     	;abs 0x5a7c
    5a24:	08 41       	mov	r1,	r8	;
    5a26:	38 50 51 00 	add	#81,	r8	;#0x0051
    5a2a:	37 40 e6 c0 	mov	#49382,	r7	;#0xc0e6
    5a2e:	38 53       	add	#-1,	r8	;r3 As==11
    5a30:	0c 46       	mov	r6,	r12	;
    5a32:	3d 40 0a 00 	mov	#10,	r13	;#0x000a
    5a36:	87 12       	call	r7		;
    5a38:	7c 50 30 00 	add.b	#48,	r12	;#0x0030
    5a3c:	c8 4c 00 00 	mov.b	r12,	0(r8)	;
    5a40:	0c 46       	mov	r6,	r12	;
    5a42:	3d 40 0a 00 	mov	#10,	r13	;#0x000a
    5a46:	b0 12 a0 c0 	call	#49312		;#0xc0a0
    5a4a:	06 4c       	mov	r12,	r6	;
    5a4c:	3e 40 09 00 	mov	#9,	r14	;
    5a50:	0e 9c       	cmp	r12,	r14	;
    5a52:	ed 3b       	jl	$-36     	;abs 0x5a2e
    5a54:	76 50 30 00 	add.b	#48,	r6	;#0x0030
    5a58:	c8 46 ff ff 	mov.b	r6,	-1(r8)	; 0xffff
    5a5c:	0c 41       	mov	r1,	r12	;
    5a5e:	3c 50 45 00 	add	#69,	r12	;#0x0045
    5a62:	0f 48       	mov	r8,	r15	;
    5a64:	3f 53       	add	#-1,	r15	;r3 As==11
    5a66:	0e 41       	mov	r1,	r14	;
    5a68:	3e 50 51 00 	add	#81,	r14	;#0x0051
    5a6c:	0d 4c       	mov	r12,	r13	;
    5a6e:	0f 9e       	cmp	r14,	r15	;
    5a70:	0f 2c       	jc	$+32     	;abs 0x5a90
    5a72:	ec 4f 00 00 	mov.b	@r15,	0(r12)	;
    5a76:	1c 53       	inc	r12		;
    5a78:	1f 53       	inc	r15		;
    5a7a:	f8 3f       	jmp	$-14     	;abs 0x5a6c
    5a7c:	f1 40 30 00 	mov.b	#48,	69(r1)	;#0x0030, 0x0045
    5a80:	45 00 
    5a82:	76 50 30 00 	add.b	#48,	r6	;#0x0030
    5a86:	c1 46 46 00 	mov.b	r6,	70(r1)	; 0x0046
    5a8a:	0d 41       	mov	r1,	r13	;
    5a8c:	3d 50 47 00 	add	#71,	r13	;#0x0047
    5a90:	0c 41       	mov	r1,	r12	;
    5a92:	3c 50 43 00 	add	#67,	r12	;#0x0043
    5a96:	0d 8c       	sub	r12,	r13	;
    5a98:	81 4d 2e 00 	mov	r13,	46(r1)	; 0x002e
    5a9c:	08 4d       	mov	r13,	r8	;
    5a9e:	18 51 14 00 	add	20(r1),	r8	;0x00014
    5aa2:	1f 43       	mov	#1,	r15	;r3 As==01
    5aa4:	1f 91 14 00 	cmp	20(r1),	r15	;0x00014
    5aa8:	03 38       	jl	$+8      	;abs 0x5ab0
    5aaa:	04 ff       	and	r15,	r4	;
    5aac:	04 93       	cmp	#0,	r4	;r3 As==00
    5aae:	3a 24       	jz	$+118    	;abs 0x5b24
    5ab0:	18 53       	inc	r8		;
    5ab2:	06 43       	clr	r6		;
    5ab4:	38 3c       	jmp	$+114    	;abs 0x5b26
    5ab6:	39 90 66 00 	cmp	#102,	r9	;#0x0066
    5aba:	17 20       	jnz	$+48     	;abs 0x5aea
    5abc:	1c 41 36 00 	mov	54(r1),	r12	;0x00036
    5ac0:	0d 43       	clr	r13		;
    5ac2:	0d 9c       	cmp	r12,	r13	;
    5ac4:	07 34       	jge	$+16     	;abs 0x5ad4
    5ac6:	08 9d       	cmp	r13,	r8	;
    5ac8:	02 20       	jnz	$+6      	;abs 0x5ace
    5aca:	14 b3       	bit	#1,	r4	;r3 As==01
    5acc:	25 24       	jz	$+76     	;abs 0x5b18
    5ace:	18 53       	inc	r8		;
    5ad0:	0c 58       	add	r8,	r12	;
    5ad2:	22 3c       	jmp	$+70     	;abs 0x5b18
    5ad4:	08 93       	cmp	#0,	r8	;r3 As==00
    5ad6:	02 20       	jnz	$+6      	;abs 0x5adc
    5ad8:	14 b3       	bit	#1,	r4	;r3 As==01
    5ada:	1d 24       	jz	$+60     	;abs 0x5b16
    5adc:	0c 48       	mov	r8,	r12	;
    5ade:	2c 53       	incd	r12		;
    5ae0:	1b 3c       	jmp	$+56     	;abs 0x5b18
    5ae2:	b1 40 67 00 	mov	#103,	42(r1)	;#0x0067, 0x002a
    5ae6:	2a 00 
    5ae8:	02 3c       	jmp	$+6      	;abs 0x5aee
    5aea:	81 49 2a 00 	mov	r9,	42(r1)	; 0x002a
    5aee:	1c 41 36 00 	mov	54(r1),	r12	;0x00036
    5af2:	1c 91 14 00 	cmp	20(r1),	r12	;0x00014
    5af6:	04 38       	jl	$+10     	;abs 0x5b00
    5af8:	14 b3       	bit	#1,	r4	;r3 As==01
    5afa:	0e 24       	jz	$+30     	;abs 0x5b18
    5afc:	1c 53       	inc	r12		;
    5afe:	0c 3c       	jmp	$+26     	;abs 0x5b18
    5b00:	0e 43       	clr	r14		;
    5b02:	0e 9c       	cmp	r12,	r14	;
    5b04:	03 38       	jl	$+8      	;abs 0x5b0c
    5b06:	2d 43       	mov	#2,	r13	;r3 As==10
    5b08:	0d 8c       	sub	r12,	r13	;
    5b0a:	01 3c       	jmp	$+4      	;abs 0x5b0e
    5b0c:	1d 43       	mov	#1,	r13	;r3 As==01
    5b0e:	1c 41 14 00 	mov	20(r1),	r12	;0x00014
    5b12:	0c 5d       	add	r13,	r12	;
    5b14:	01 3c       	jmp	$+4      	;abs 0x5b18
    5b16:	1c 43       	mov	#1,	r12	;r3 As==01
    5b18:	16 41 36 00 	mov	54(r1),	r6	;0x00036
    5b1c:	19 41 2a 00 	mov	42(r1),	r9	;0x0002a
    5b20:	08 4c       	mov	r12,	r8	;
    5b22:	01 3c       	jmp	$+4      	;abs 0x5b26
    5b24:	06 44       	mov	r4,	r6	;
    5b26:	81 93 32 00 	cmp	#0,	50(r1)	;r3 As==00, 0x0032
    5b2a:	a3 25       	jz	$+840    	;abs 0x5e72
    5b2c:	f1 40 2d 00 	mov.b	#45,	53(r1)	;#0x002d, 0x0035
    5b30:	35 00 
    5b32:	04 43       	clr	r4		;
    5b34:	a3 3d       	jmp	$+840    	;abs 0x5e7c
    5b36:	c1 4c 35 00 	mov.b	r12,	53(r1)	; 0x0035
    5b3a:	0c 47       	mov	r7,	r12	;
    5b3c:	2c 53       	incd	r12		;
    5b3e:	2d 47       	mov	@r7,	r13	;
    5b40:	34 b0 10 00 	bit	#16,	r4	;#0x0010
    5b44:	0c 24       	jz	$+26     	;abs 0x5b5e
    5b46:	1f 41 26 00 	mov	38(r1),	r15	;0x00026
    5b4a:	0e 4f       	mov	r15,	r14	;
    5b4c:	4e 18 0f 11 	rpt #15 { rrax.w	r15		;
    5b50:	8d 4e 00 00 	mov	r14,	0(r13)	;
    5b54:	8d 4f 02 00 	mov	r15,	2(r13)	;
    5b58:	07 4c       	mov	r12,	r7	;
    5b5a:	30 40 6e 54 	br	#0x546e		;
    5b5e:	9d 41 26 00 	mov	38(r1),	0(r13)	;0x00026
    5b62:	00 00 
    5b64:	07 4c       	mov	r12,	r7	;
    5b66:	30 40 6e 54 	br	#0x546e		;
    5b6a:	34 d0 10 00 	bis	#16,	r4	;#0x0010
    5b6e:	81 44 12 00 	mov	r4,	18(r1)	; 0x0012
    5b72:	1d 41 12 00 	mov	18(r1),	r13	;0x00012
    5b76:	3d f0 10 00 	and	#16,	r13	;#0x0010
    5b7a:	17 53       	inc	r7		;
    5b7c:	0d 93       	cmp	#0,	r13	;r3 As==00
    5b7e:	0a 24       	jz	$+22     	;abs 0x5b94
    5b80:	17 c3       	bic	#1,	r7	;r3 As==01
    5b82:	0c 47       	mov	r7,	r12	;
    5b84:	2c 52       	add	#4,	r12	;r2 As==10
    5b86:	81 4c 16 00 	mov	r12,	22(r1)	; 0x0016
    5b8a:	26 47       	mov	@r7,	r6	;
    5b8c:	17 47 02 00 	mov	2(r7),	r7	;
    5b90:	0c 43       	clr	r12		;
    5b92:	b1 3c       	jmp	$+356    	;abs 0x5cf6
    5b94:	1c 41 12 00 	mov	18(r1),	r12	;0x00012
    5b98:	3c f0 40 00 	and	#64,	r12	;#0x0040
    5b9c:	17 c3       	bic	#1,	r7	;r3 As==01
    5b9e:	0c 93       	cmp	#0,	r12	;r3 As==00
    5ba0:	09 24       	jz	$+20     	;abs 0x5bb4
    5ba2:	0e 47       	mov	r7,	r14	;
    5ba4:	2e 53       	incd	r14		;
    5ba6:	81 4e 16 00 	mov	r14,	22(r1)	; 0x0016
    5baa:	27 47       	mov	@r7,	r7	;
    5bac:	06 47       	mov	r7,	r6	;
    5bae:	07 43       	clr	r7		;
    5bb0:	0c 4d       	mov	r13,	r12	;
    5bb2:	a1 3c       	jmp	$+324    	;abs 0x5cf6
    5bb4:	0f 47       	mov	r7,	r15	;
    5bb6:	2f 53       	incd	r15		;
    5bb8:	81 4f 16 00 	mov	r15,	22(r1)	; 0x0016
    5bbc:	27 47       	mov	@r7,	r7	;
    5bbe:	06 47       	mov	r7,	r6	;
    5bc0:	07 43       	clr	r7		;
    5bc2:	99 3c       	jmp	$+308    	;abs 0x5cf6
    5bc4:	0c 47       	mov	r7,	r12	;
    5bc6:	2c 53       	incd	r12		;
    5bc8:	81 4c 16 00 	mov	r12,	22(r1)	; 0x0016
    5bcc:	27 47       	mov	@r7,	r7	;
    5bce:	06 47       	mov	r7,	r6	;
    5bd0:	07 43       	clr	r7		;
    5bd2:	24 d3       	bis	#2,	r4	;r3 As==10
    5bd4:	81 44 12 00 	mov	r4,	18(r1)	; 0x0012
    5bd8:	f1 40 30 00 	mov.b	#48,	58(r1)	;#0x0030, 0x003a
    5bdc:	3a 00 
    5bde:	f1 40 78 00 	mov.b	#120,	59(r1)	;#0x0078, 0x003b
    5be2:	3b 00 
    5be4:	b1 40 28 44 	mov	#17448,	48(r1)	;#0x4428, 0x0030
    5be8:	30 00 
    5bea:	2c 43       	mov	#2,	r12	;r3 As==10
    5bec:	39 40 78 00 	mov	#120,	r9	;#0x0078
    5bf0:	82 3c       	jmp	$+262    	;abs 0x5cf6
    5bf2:	81 44 12 00 	mov	r4,	18(r1)	; 0x0012
    5bf6:	06 48       	mov	r8,	r6	;
    5bf8:	0d 47       	mov	r7,	r13	;
    5bfa:	2d 53       	incd	r13		;
    5bfc:	81 4d 16 00 	mov	r13,	22(r1)	; 0x0016
    5c00:	a1 47 10 00 	mov	@r7,	16(r1)	; 0x0010
    5c04:	c1 43 35 00 	mov.b	#0,	53(r1)	;r3 As==00, 0x0035
    5c08:	1c 41 10 00 	mov	16(r1),	r12	;0x00010
    5c0c:	08 93       	cmp	#0,	r8	;r3 As==00
    5c0e:	0d 38       	jl	$+28     	;abs 0x5c2a
    5c10:	0d 43       	clr	r13		;
    5c12:	0e 48       	mov	r8,	r14	;
    5c14:	b0 12 80 86 	call	#34432		;#0x8680
    5c18:	0c 93       	cmp	#0,	r12	;r3 As==00
    5c1a:	2e 25       	jz	$+606    	;abs 0x5e78
    5c1c:	08 4c       	mov	r12,	r8	;
    5c1e:	18 81 10 00 	sub	16(r1),	r8	;0x00010
    5c22:	06 98       	cmp	r8,	r6	;
    5c24:	05 34       	jge	$+12     	;abs 0x5c30
    5c26:	08 46       	mov	r6,	r8	;
    5c28:	03 3c       	jmp	$+8      	;abs 0x5c30
    5c2a:	b0 12 c4 99 	call	#39364		;#0x99c4
    5c2e:	08 4c       	mov	r12,	r8	;
    5c30:	04 43       	clr	r4		;
    5c32:	06 44       	mov	r4,	r6	;
    5c34:	23 3d       	jmp	$+584    	;abs 0x5e7c
    5c36:	34 d0 10 00 	bis	#16,	r4	;#0x0010
    5c3a:	81 44 12 00 	mov	r4,	18(r1)	; 0x0012
    5c3e:	17 53       	inc	r7		;
    5c40:	17 c3       	bic	#1,	r7	;r3 As==01
    5c42:	b1 b0 10 00 	bit	#16,	18(r1)	;#0x0010, 0x0012
    5c46:	12 00 
    5c48:	09 24       	jz	$+20     	;abs 0x5c5c
    5c4a:	0e 47       	mov	r7,	r14	;
    5c4c:	2e 52       	add	#4,	r14	;r2 As==10
    5c4e:	81 4e 16 00 	mov	r14,	22(r1)	; 0x0016
    5c52:	26 47       	mov	@r7,	r6	;
    5c54:	17 47 02 00 	mov	2(r7),	r7	;
    5c58:	1c 43       	mov	#1,	r12	;r3 As==01
    5c5a:	4d 3c       	jmp	$+156    	;abs 0x5cf6
    5c5c:	b1 b0 40 00 	bit	#64,	18(r1)	;#0x0040, 0x0012
    5c60:	12 00 
    5c62:	09 24       	jz	$+20     	;abs 0x5c76
    5c64:	0f 47       	mov	r7,	r15	;
    5c66:	2f 53       	incd	r15		;
    5c68:	81 4f 16 00 	mov	r15,	22(r1)	; 0x0016
    5c6c:	27 47       	mov	@r7,	r7	;
    5c6e:	06 47       	mov	r7,	r6	;
    5c70:	07 43       	clr	r7		;
    5c72:	1c 43       	mov	#1,	r12	;r3 As==01
    5c74:	40 3c       	jmp	$+130    	;abs 0x5cf6
    5c76:	0c 47       	mov	r7,	r12	;
    5c78:	2c 53       	incd	r12		;
    5c7a:	81 4c 16 00 	mov	r12,	22(r1)	; 0x0016
    5c7e:	27 47       	mov	@r7,	r7	;
    5c80:	06 47       	mov	r7,	r6	;
    5c82:	07 43       	clr	r7		;
    5c84:	1c 43       	mov	#1,	r12	;r3 As==01
    5c86:	37 3c       	jmp	$+112    	;abs 0x5cf6
    5c88:	c1 4c 35 00 	mov.b	r12,	53(r1)	; 0x0035
    5c8c:	81 44 12 00 	mov	r4,	18(r1)	; 0x0012
    5c90:	b1 40 28 44 	mov	#17448,	48(r1)	;#0x4428, 0x0030
    5c94:	30 00 
    5c96:	17 53       	inc	r7		;
    5c98:	17 c3       	bic	#1,	r7	;r3 As==01
    5c9a:	34 b0 10 00 	bit	#16,	r4	;#0x0010
    5c9e:	08 24       	jz	$+18     	;abs 0x5cb0
    5ca0:	0d 47       	mov	r7,	r13	;
    5ca2:	2d 52       	add	#4,	r13	;r2 As==10
    5ca4:	81 4d 16 00 	mov	r13,	22(r1)	; 0x0016
    5ca8:	26 47       	mov	@r7,	r6	;
    5caa:	17 47 02 00 	mov	2(r7),	r7	;
    5cae:	12 3c       	jmp	$+38     	;abs 0x5cd4
    5cb0:	34 b0 40 00 	bit	#64,	r4	;#0x0040
    5cb4:	08 24       	jz	$+18     	;abs 0x5cc6
    5cb6:	0e 47       	mov	r7,	r14	;
    5cb8:	2e 53       	incd	r14		;
    5cba:	81 4e 16 00 	mov	r14,	22(r1)	; 0x0016
    5cbe:	27 47       	mov	@r7,	r7	;
    5cc0:	06 47       	mov	r7,	r6	;
    5cc2:	07 43       	clr	r7		;
    5cc4:	07 3c       	jmp	$+16     	;abs 0x5cd4
    5cc6:	0f 47       	mov	r7,	r15	;
    5cc8:	2f 53       	incd	r15		;
    5cca:	81 4f 16 00 	mov	r15,	22(r1)	; 0x0016
    5cce:	27 47       	mov	@r7,	r7	;
    5cd0:	06 47       	mov	r7,	r6	;
    5cd2:	07 43       	clr	r7		;
    5cd4:	14 b3       	bit	#1,	r4	;r3 As==01
    5cd6:	0e 24       	jz	$+30     	;abs 0x5cf4
    5cd8:	0c 46       	mov	r6,	r12	;
    5cda:	0c d7       	bis	r7,	r12	;
    5cdc:	0c 93       	cmp	#0,	r12	;r3 As==00
    5cde:	0a 24       	jz	$+22     	;abs 0x5cf4
    5ce0:	f1 40 30 00 	mov.b	#48,	58(r1)	;#0x0030, 0x003a
    5ce4:	3a 00 
    5ce6:	c1 49 3b 00 	mov.b	r9,	59(r1)	; 0x003b
    5cea:	24 d3       	bis	#2,	r4	;r3 As==10
    5cec:	81 44 12 00 	mov	r4,	18(r1)	; 0x0012
    5cf0:	2c 43       	mov	#2,	r12	;r3 As==10
    5cf2:	01 3c       	jmp	$+4      	;abs 0x5cf6
    5cf4:	2c 43       	mov	#2,	r12	;r3 As==10
    5cf6:	c1 43 35 00 	mov.b	#0,	53(r1)	;r3 As==00, 0x0035
    5cfa:	04 48       	mov	r8,	r4	;
    5cfc:	02 3c       	jmp	$+6      	;abs 0x5d02
    5cfe:	04 48       	mov	r8,	r4	;
    5d00:	1c 43       	mov	#1,	r12	;r3 As==01
    5d02:	08 93       	cmp	#0,	r8	;r3 As==00
    5d04:	03 38       	jl	$+8      	;abs 0x5d0c
    5d06:	b1 f0 7f ff 	and	#65407,	18(r1)	;#0xff7f, 0x0012
    5d0a:	12 00 
    5d0c:	0d 46       	mov	r6,	r13	;
    5d0e:	0d d7       	bis	r7,	r13	;
    5d10:	0d 93       	cmp	#0,	r13	;r3 As==00
    5d12:	05 20       	jnz	$+12     	;abs 0x5d1e
    5d14:	08 93       	cmp	#0,	r8	;r3 As==00
    5d16:	02 24       	jz	$+6      	;abs 0x5d1c
    5d18:	80 00 06 69 	mova	#26886,	r0	;0x06906
    5d1c:	79 3c       	jmp	$+244    	;abs 0x5e10
    5d1e:	5c 93       	cmp.b	#1,	r12	;r3 As==01
    5d20:	2a 24       	jz	$+86     	;abs 0x5d76
    5d22:	6c 93       	cmp.b	#2,	r12	;r3 As==10
    5d24:	5b 24       	jz	$+184    	;abs 0x5ddc
    5d26:	0c 41       	mov	r1,	r12	;
    5d28:	3c 50 9a 00 	add	#154,	r12	;#0x009a
    5d2c:	81 4c 10 00 	mov	r12,	16(r1)	; 0x0010
    5d30:	b1 53 10 00 	add	#-1,	16(r1)	;r3 As==11, 0x0010
    5d34:	4c 46       	mov.b	r6,	r12	;
    5d36:	7c f0 07 00 	and.b	#7,	r12	;
    5d3a:	7c 50 30 00 	add.b	#48,	r12	;#0x0030
    5d3e:	48 4c       	mov.b	r12,	r8	;
    5d40:	1d 41 10 00 	mov	16(r1),	r13	;0x00010
    5d44:	cd 4c 00 00 	mov.b	r12,	0(r13)	;
    5d48:	0c 46       	mov	r6,	r12	;
    5d4a:	0d 47       	mov	r7,	r13	;
    5d4c:	b0 12 1c c3 	call	#49948		;#0xc31c
    5d50:	06 4c       	mov	r12,	r6	;
    5d52:	07 4d       	mov	r13,	r7	;
    5d54:	0c dd       	bis	r13,	r12	;
    5d56:	0c 93       	cmp	#0,	r12	;r3 As==00
    5d58:	eb 23       	jnz	$-40     	;abs 0x5d30
    5d5a:	1c 41 10 00 	mov	16(r1),	r12	;0x00010
    5d5e:	91 b3 12 00 	bit	#1,	18(r1)	;r3 As==01, 0x0012
    5d62:	69 24       	jz	$+212    	;abs 0x5e36
    5d64:	38 90 30 00 	cmp	#48,	r8	;#0x0030
    5d68:	66 24       	jz	$+206    	;abs 0x5e36
    5d6a:	b1 53 10 00 	add	#-1,	16(r1)	;r3 As==11, 0x0010
    5d6e:	fc 40 30 00 	mov.b	#48,	-1(r12)	;#0x0030, 0xffff
    5d72:	ff ff 
    5d74:	60 3c       	jmp	$+194    	;abs 0x5e36
    5d76:	07 93       	cmp	#0,	r7	;r3 As==00
    5d78:	0f 20       	jnz	$+32     	;abs 0x5d98
    5d7a:	3e 40 09 00 	mov	#9,	r14	;
    5d7e:	0e 96       	cmp	r6,	r14	;
    5d80:	0b 28       	jnc	$+24     	;abs 0x5d98
    5d82:	4f 46       	mov.b	r6,	r15	;
    5d84:	7f 50 30 00 	add.b	#48,	r15	;#0x0030
    5d88:	c1 4f 99 00 	mov.b	r15,	153(r1)	; 0x0099
    5d8c:	0c 41       	mov	r1,	r12	;
    5d8e:	3c 50 99 00 	add	#153,	r12	;#0x0099
    5d92:	81 4c 10 00 	mov	r12,	16(r1)	; 0x0010
    5d96:	4f 3c       	jmp	$+160    	;abs 0x5e36
    5d98:	0c 41       	mov	r1,	r12	;
    5d9a:	3c 50 9a 00 	add	#154,	r12	;#0x009a
    5d9e:	81 4c 10 00 	mov	r12,	16(r1)	; 0x0010
    5da2:	38 40 6e c2 	mov	#49774,	r8	;#0xc26e
    5da6:	b1 53 10 00 	add	#-1,	16(r1)	;r3 As==11, 0x0010
    5daa:	0c 46       	mov	r6,	r12	;
    5dac:	0d 47       	mov	r7,	r13	;
    5dae:	3e 40 0a 00 	mov	#10,	r14	;#0x000a
    5db2:	0f 43       	clr	r15		;
    5db4:	b0 12 7c c2 	call	#49788		;#0xc27c
    5db8:	7c 50 30 00 	add.b	#48,	r12	;#0x0030
    5dbc:	1d 41 10 00 	mov	16(r1),	r13	;0x00010
    5dc0:	cd 4c 00 00 	mov.b	r12,	0(r13)	;
    5dc4:	0c 46       	mov	r6,	r12	;
    5dc6:	0d 47       	mov	r7,	r13	;
    5dc8:	3e 40 0a 00 	mov	#10,	r14	;#0x000a
    5dcc:	0f 43       	clr	r15		;
    5dce:	88 12       	call	r8		;
    5dd0:	06 4c       	mov	r12,	r6	;
    5dd2:	07 4d       	mov	r13,	r7	;
    5dd4:	0c dd       	bis	r13,	r12	;
    5dd6:	0c 93       	cmp	#0,	r12	;r3 As==00
    5dd8:	e6 23       	jnz	$-50     	;abs 0x5da6
    5dda:	2d 3c       	jmp	$+92     	;abs 0x5e36
    5ddc:	0c 41       	mov	r1,	r12	;
    5dde:	3c 50 9a 00 	add	#154,	r12	;#0x009a
    5de2:	81 4c 10 00 	mov	r12,	16(r1)	; 0x0010
    5de6:	b1 53 10 00 	add	#-1,	16(r1)	;r3 As==11, 0x0010
    5dea:	0c 46       	mov	r6,	r12	;
    5dec:	3c f0 0f 00 	and	#15,	r12	;#0x000f
    5df0:	1c 51 30 00 	add	48(r1),	r12	;0x00030
    5df4:	1d 41 10 00 	mov	16(r1),	r13	;0x00010
    5df8:	ed 4c 00 00 	mov.b	@r12,	0(r13)	;
    5dfc:	0c 46       	mov	r6,	r12	;
    5dfe:	0d 47       	mov	r7,	r13	;
    5e00:	b0 12 16 c3 	call	#49942		;#0xc316
    5e04:	06 4c       	mov	r12,	r6	;
    5e06:	07 4d       	mov	r13,	r7	;
    5e08:	0c dd       	bis	r13,	r12	;
    5e0a:	0c 93       	cmp	#0,	r12	;r3 As==00
    5e0c:	ec 23       	jnz	$-38     	;abs 0x5de6
    5e0e:	13 3c       	jmp	$+40     	;abs 0x5e36
    5e10:	0c 93       	cmp	#0,	r12	;r3 As==00
    5e12:	0c 20       	jnz	$+26     	;abs 0x5e2c
    5e14:	91 b3 12 00 	bit	#1,	18(r1)	;r3 As==01, 0x0012
    5e18:	09 24       	jz	$+20     	;abs 0x5e2c
    5e1a:	f1 40 30 00 	mov.b	#48,	153(r1)	;#0x0030, 0x0099
    5e1e:	99 00 
    5e20:	0c 41       	mov	r1,	r12	;
    5e22:	3c 50 99 00 	add	#153,	r12	;#0x0099
    5e26:	81 4c 10 00 	mov	r12,	16(r1)	; 0x0010
    5e2a:	05 3c       	jmp	$+12     	;abs 0x5e36
    5e2c:	0c 41       	mov	r1,	r12	;
    5e2e:	3c 50 9a 00 	add	#154,	r12	;#0x009a
    5e32:	81 4c 10 00 	mov	r12,	16(r1)	; 0x0010
    5e36:	38 40 9a 00 	mov	#154,	r8	;#0x009a
    5e3a:	08 51       	add	r1,	r8	;
    5e3c:	18 81 10 00 	sub	16(r1),	r8	;0x00010
    5e40:	06 43       	clr	r6		;
    5e42:	1c 3c       	jmp	$+58     	;abs 0x5e7c
    5e44:	c1 4c 35 00 	mov.b	r12,	53(r1)	; 0x0035
    5e48:	09 93       	cmp	#0,	r9	;r3 As==00
    5e4a:	02 20       	jnz	$+6      	;abs 0x5e50
    5e4c:	80 00 de 68 	mova	#26846,	r0	;0x068de
    5e50:	c1 49 72 00 	mov.b	r9,	114(r1)	; 0x0072
    5e54:	c1 43 35 00 	mov.b	#0,	53(r1)	;r3 As==00, 0x0035
    5e58:	81 44 12 00 	mov	r4,	18(r1)	; 0x0012
    5e5c:	81 47 16 00 	mov	r7,	22(r1)	; 0x0016
    5e60:	18 43       	mov	#1,	r8	;r3 As==01
    5e62:	04 43       	clr	r4		;
    5e64:	06 44       	mov	r4,	r6	;
    5e66:	0c 41       	mov	r1,	r12	;
    5e68:	3c 50 72 00 	add	#114,	r12	;#0x0072
    5e6c:	81 4c 10 00 	mov	r12,	16(r1)	; 0x0010
    5e70:	05 3c       	jmp	$+12     	;abs 0x5e7c
    5e72:	14 41 32 00 	mov	50(r1),	r4	;0x00032
    5e76:	02 3c       	jmp	$+6      	;abs 0x5e7c
    5e78:	04 4c       	mov	r12,	r4	;
    5e7a:	06 4c       	mov	r12,	r6	;
    5e7c:	81 48 1a 00 	mov	r8,	26(r1)	; 0x001a
    5e80:	08 94       	cmp	r4,	r8	;
    5e82:	02 34       	jge	$+6      	;abs 0x5e88
    5e84:	81 44 1a 00 	mov	r4,	26(r1)	; 0x001a
    5e88:	c1 93 35 00 	cmp.b	#0,	53(r1)	;r3 As==00, 0x0035
    5e8c:	02 24       	jz	$+6      	;abs 0x5e92
    5e8e:	91 53 1a 00 	inc	26(r1)		;
    5e92:	1d 41 12 00 	mov	18(r1),	r13	;0x00012
    5e96:	2d f3       	and	#2,	r13	;r3 As==10
    5e98:	81 4d 2a 00 	mov	r13,	42(r1)	; 0x002a
    5e9c:	0d 93       	cmp	#0,	r13	;r3 As==00
    5e9e:	02 24       	jz	$+6      	;abs 0x5ea4
    5ea0:	a1 53 1a 00 	incd	26(r1)		;
    5ea4:	17 41 12 00 	mov	18(r1),	r7	;0x00012
    5ea8:	37 f0 84 00 	and	#132,	r7	;#0x0084
    5eac:	07 93       	cmp	#0,	r7	;r3 As==00
    5eae:	53 20       	jnz	$+168    	;abs 0x5f56
    5eb0:	1f 41 1c 00 	mov	28(r1),	r15	;0x0001c
    5eb4:	1f 81 1a 00 	sub	26(r1),	r15	;0x0001a
    5eb8:	0e 43       	clr	r14		;
    5eba:	0e 9f       	cmp	r15,	r14	;
    5ebc:	4c 34       	jge	$+154    	;abs 0x5f56
    5ebe:	3e 40 10 00 	mov	#16,	r14	;#0x0010
    5ec2:	ba 40 4b 44 	mov	#17483,	0(r10)	;#0x444b
    5ec6:	00 00 
    5ec8:	0e 9f       	cmp	r15,	r14	;
    5eca:	27 34       	jge	$+80     	;abs 0x5f1a
    5ecc:	ba 40 10 00 	mov	#16,	2(r10)	;#0x0010
    5ed0:	02 00 
    5ed2:	b1 50 10 00 	add	#16,	64(r1)	;#0x0010, 0x0040
    5ed6:	40 00 
    5ed8:	1c 41 3e 00 	mov	62(r1),	r12	;0x0003e
    5edc:	1c 53       	inc	r12		;
    5ede:	81 4c 3e 00 	mov	r12,	62(r1)	; 0x003e
    5ee2:	3d 40 07 00 	mov	#7,	r13	;
    5ee6:	0d 9c       	cmp	r12,	r13	;
    5ee8:	02 38       	jl	$+6      	;abs 0x5eee
    5eea:	2a 52       	add	#4,	r10	;r2 As==10
    5eec:	13 3c       	jmp	$+40     	;abs 0x5f14
    5eee:	1c 41 0e 00 	mov	14(r1),	r12	;0x0000e
    5ef2:	0d 45       	mov	r5,	r13	;
    5ef4:	0e 41       	mov	r1,	r14	;
    5ef6:	3e 50 3c 00 	add	#60,	r14	;#0x003c
    5efa:	81 4f 0c 00 	mov	r15,	12(r1)	; 0x000c
    5efe:	b0 12 d6 99 	call	#39382		;#0x99d6
    5f02:	1f 41 0c 00 	mov	12(r1),	r15	;0x0000c
    5f06:	0c 93       	cmp	#0,	r12	;r3 As==00
    5f08:	02 24       	jz	$+6      	;abs 0x5f0e
    5f0a:	80 00 f4 68 	mova	#26868,	r0	;0x068f4
    5f0e:	0a 41       	mov	r1,	r10	;
    5f10:	3a 50 52 00 	add	#82,	r10	;#0x0052
    5f14:	3f 50 f0 ff 	add	#65520,	r15	;#0xfff0
    5f18:	d2 3f       	jmp	$-90     	;abs 0x5ebe
    5f1a:	8a 4f 02 00 	mov	r15,	2(r10)	;
    5f1e:	81 5f 40 00 	add	r15,	64(r1)	; 0x0040
    5f22:	1c 41 3e 00 	mov	62(r1),	r12	;0x0003e
    5f26:	1c 53       	inc	r12		;
    5f28:	81 4c 3e 00 	mov	r12,	62(r1)	; 0x003e
    5f2c:	3f 40 07 00 	mov	#7,	r15	;
    5f30:	0f 9c       	cmp	r12,	r15	;
    5f32:	02 38       	jl	$+6      	;abs 0x5f38
    5f34:	2a 52       	add	#4,	r10	;r2 As==10
    5f36:	0f 3c       	jmp	$+32     	;abs 0x5f56
    5f38:	1c 41 0e 00 	mov	14(r1),	r12	;0x0000e
    5f3c:	0d 45       	mov	r5,	r13	;
    5f3e:	0e 41       	mov	r1,	r14	;
    5f40:	3e 50 3c 00 	add	#60,	r14	;#0x003c
    5f44:	b0 12 d6 99 	call	#39382		;#0x99d6
    5f48:	0c 93       	cmp	#0,	r12	;r3 As==00
    5f4a:	02 24       	jz	$+6      	;abs 0x5f50
    5f4c:	80 00 f4 68 	mova	#26868,	r0	;0x068f4
    5f50:	0a 41       	mov	r1,	r10	;
    5f52:	3a 50 52 00 	add	#82,	r10	;#0x0052
    5f56:	c1 93 35 00 	cmp.b	#0,	53(r1)	;r3 As==00, 0x0035
    5f5a:	23 24       	jz	$+72     	;abs 0x5fa2
    5f5c:	3c 40 35 00 	mov	#53,	r12	;#0x0035
    5f60:	0c 51       	add	r1,	r12	;
    5f62:	8a 4c 00 00 	mov	r12,	0(r10)	;
    5f66:	9a 43 02 00 	mov	#1,	2(r10)	;r3 As==01
    5f6a:	91 53 40 00 	inc	64(r1)		;
    5f6e:	1c 41 3e 00 	mov	62(r1),	r12	;0x0003e
    5f72:	1c 53       	inc	r12		;
    5f74:	81 4c 3e 00 	mov	r12,	62(r1)	; 0x003e
    5f78:	3d 40 07 00 	mov	#7,	r13	;
    5f7c:	0d 9c       	cmp	r12,	r13	;
    5f7e:	02 38       	jl	$+6      	;abs 0x5f84
    5f80:	2a 52       	add	#4,	r10	;r2 As==10
    5f82:	0f 3c       	jmp	$+32     	;abs 0x5fa2
    5f84:	1c 41 0e 00 	mov	14(r1),	r12	;0x0000e
    5f88:	0d 45       	mov	r5,	r13	;
    5f8a:	0e 41       	mov	r1,	r14	;
    5f8c:	3e 50 3c 00 	add	#60,	r14	;#0x003c
    5f90:	b0 12 d6 99 	call	#39382		;#0x99d6
    5f94:	0c 93       	cmp	#0,	r12	;r3 As==00
    5f96:	02 24       	jz	$+6      	;abs 0x5f9c
    5f98:	80 00 f4 68 	mova	#26868,	r0	;0x068f4
    5f9c:	0a 41       	mov	r1,	r10	;
    5f9e:	3a 50 52 00 	add	#82,	r10	;#0x0052
    5fa2:	81 93 2a 00 	cmp	#0,	42(r1)	;r3 As==00, 0x002a
    5fa6:	23 24       	jz	$+72     	;abs 0x5fee
    5fa8:	3e 40 3a 00 	mov	#58,	r14	;#0x003a
    5fac:	0e 51       	add	r1,	r14	;
    5fae:	8a 4e 00 00 	mov	r14,	0(r10)	;
    5fb2:	aa 43 02 00 	mov	#2,	2(r10)	;r3 As==10
    5fb6:	a1 53 40 00 	incd	64(r1)		;
    5fba:	1c 41 3e 00 	mov	62(r1),	r12	;0x0003e
    5fbe:	1c 53       	inc	r12		;
    5fc0:	81 4c 3e 00 	mov	r12,	62(r1)	; 0x003e
    5fc4:	3f 40 07 00 	mov	#7,	r15	;
    5fc8:	0f 9c       	cmp	r12,	r15	;
    5fca:	02 38       	jl	$+6      	;abs 0x5fd0
    5fcc:	2a 52       	add	#4,	r10	;r2 As==10
    5fce:	0f 3c       	jmp	$+32     	;abs 0x5fee
    5fd0:	1c 41 0e 00 	mov	14(r1),	r12	;0x0000e
    5fd4:	0d 45       	mov	r5,	r13	;
    5fd6:	0e 41       	mov	r1,	r14	;
    5fd8:	3e 50 3c 00 	add	#60,	r14	;#0x003c
    5fdc:	b0 12 d6 99 	call	#39382		;#0x99d6
    5fe0:	0c 93       	cmp	#0,	r12	;r3 As==00
    5fe2:	02 24       	jz	$+6      	;abs 0x5fe8
    5fe4:	80 00 f4 68 	mova	#26868,	r0	;0x068f4
    5fe8:	0a 41       	mov	r1,	r10	;
    5fea:	3a 50 52 00 	add	#82,	r10	;#0x0052
    5fee:	37 90 80 00 	cmp	#128,	r7	;#0x0080
    5ff2:	4f 20       	jnz	$+160    	;abs 0x6092
    5ff4:	17 41 1c 00 	mov	28(r1),	r7	;0x0001c
    5ff8:	17 81 1a 00 	sub	26(r1),	r7	;0x0001a
    5ffc:	0c 43       	clr	r12		;
    5ffe:	0c 97       	cmp	r7,	r12	;
    6000:	48 34       	jge	$+146    	;abs 0x6092
    6002:	3e 40 10 00 	mov	#16,	r14	;#0x0010
    6006:	ba 40 3b 44 	mov	#17467,	0(r10)	;#0x443b
    600a:	00 00 
    600c:	0e 97       	cmp	r7,	r14	;
    600e:	23 34       	jge	$+72     	;abs 0x6056
    6010:	ba 40 10 00 	mov	#16,	2(r10)	;#0x0010
    6014:	02 00 
    6016:	b1 50 10 00 	add	#16,	64(r1)	;#0x0010, 0x0040
    601a:	40 00 
    601c:	1c 41 3e 00 	mov	62(r1),	r12	;0x0003e
    6020:	1c 53       	inc	r12		;
    6022:	81 4c 3e 00 	mov	r12,	62(r1)	; 0x003e
    6026:	3d 40 07 00 	mov	#7,	r13	;
    602a:	0d 9c       	cmp	r12,	r13	;
    602c:	02 38       	jl	$+6      	;abs 0x6032
    602e:	2a 52       	add	#4,	r10	;r2 As==10
    6030:	0f 3c       	jmp	$+32     	;abs 0x6050
    6032:	1c 41 0e 00 	mov	14(r1),	r12	;0x0000e
    6036:	0d 45       	mov	r5,	r13	;
    6038:	0e 41       	mov	r1,	r14	;
    603a:	3e 50 3c 00 	add	#60,	r14	;#0x003c
    603e:	b0 12 d6 99 	call	#39382		;#0x99d6
    6042:	0c 93       	cmp	#0,	r12	;r3 As==00
    6044:	02 24       	jz	$+6      	;abs 0x604a
    6046:	80 00 f4 68 	mova	#26868,	r0	;0x068f4
    604a:	0a 41       	mov	r1,	r10	;
    604c:	3a 50 52 00 	add	#82,	r10	;#0x0052
    6050:	37 50 f0 ff 	add	#65520,	r7	;#0xfff0
    6054:	d6 3f       	jmp	$-82     	;abs 0x6002
    6056:	8a 47 02 00 	mov	r7,	2(r10)	;
    605a:	81 57 40 00 	add	r7,	64(r1)	; 0x0040
    605e:	1c 41 3e 00 	mov	62(r1),	r12	;0x0003e
    6062:	1c 53       	inc	r12		;
    6064:	81 4c 3e 00 	mov	r12,	62(r1)	; 0x003e
    6068:	3f 40 07 00 	mov	#7,	r15	;
    606c:	0f 9c       	cmp	r12,	r15	;
    606e:	02 38       	jl	$+6      	;abs 0x6074
    6070:	2a 52       	add	#4,	r10	;r2 As==10
    6072:	0f 3c       	jmp	$+32     	;abs 0x6092
    6074:	1c 41 0e 00 	mov	14(r1),	r12	;0x0000e
    6078:	0d 45       	mov	r5,	r13	;
    607a:	0e 41       	mov	r1,	r14	;
    607c:	3e 50 3c 00 	add	#60,	r14	;#0x003c
    6080:	b0 12 d6 99 	call	#39382		;#0x99d6
    6084:	0c 93       	cmp	#0,	r12	;r3 As==00
    6086:	02 24       	jz	$+6      	;abs 0x608c
    6088:	80 00 f4 68 	mova	#26868,	r0	;0x068f4
    608c:	0a 41       	mov	r1,	r10	;
    608e:	3a 50 52 00 	add	#82,	r10	;#0x0052
    6092:	04 88       	sub	r8,	r4	;
    6094:	0c 43       	clr	r12		;
    6096:	0c 94       	cmp	r4,	r12	;
    6098:	49 34       	jge	$+148    	;abs 0x612c
    609a:	37 40 d6 99 	mov	#39382,	r7	;#0x99d6
    609e:	3e 40 10 00 	mov	#16,	r14	;#0x0010
    60a2:	ba 40 3b 44 	mov	#17467,	0(r10)	;#0x443b
    60a6:	00 00 
    60a8:	0e 94       	cmp	r4,	r14	;
    60aa:	22 34       	jge	$+70     	;abs 0x60f0
    60ac:	ba 40 10 00 	mov	#16,	2(r10)	;#0x0010
    60b0:	02 00 
    60b2:	b1 50 10 00 	add	#16,	64(r1)	;#0x0010, 0x0040
    60b6:	40 00 
    60b8:	1c 41 3e 00 	mov	62(r1),	r12	;0x0003e
    60bc:	1c 53       	inc	r12		;
    60be:	81 4c 3e 00 	mov	r12,	62(r1)	; 0x003e
    60c2:	3d 40 07 00 	mov	#7,	r13	;
    60c6:	0d 9c       	cmp	r12,	r13	;
    60c8:	02 38       	jl	$+6      	;abs 0x60ce
    60ca:	2a 52       	add	#4,	r10	;r2 As==10
    60cc:	0e 3c       	jmp	$+30     	;abs 0x60ea
    60ce:	1c 41 0e 00 	mov	14(r1),	r12	;0x0000e
    60d2:	0d 45       	mov	r5,	r13	;
    60d4:	0e 41       	mov	r1,	r14	;
    60d6:	3e 50 3c 00 	add	#60,	r14	;#0x003c
    60da:	87 12       	call	r7		;
    60dc:	0c 93       	cmp	#0,	r12	;r3 As==00
    60de:	02 24       	jz	$+6      	;abs 0x60e4
    60e0:	80 00 f4 68 	mova	#26868,	r0	;0x068f4
    60e4:	0a 41       	mov	r1,	r10	;
    60e6:	3a 50 52 00 	add	#82,	r10	;#0x0052
    60ea:	34 50 f0 ff 	add	#65520,	r4	;#0xfff0
    60ee:	d7 3f       	jmp	$-80     	;abs 0x609e
    60f0:	8a 44 02 00 	mov	r4,	2(r10)	;
    60f4:	81 54 40 00 	add	r4,	64(r1)	; 0x0040
    60f8:	1c 41 3e 00 	mov	62(r1),	r12	;0x0003e
    60fc:	1c 53       	inc	r12		;
    60fe:	81 4c 3e 00 	mov	r12,	62(r1)	; 0x003e
    6102:	3f 40 07 00 	mov	#7,	r15	;
    6106:	0f 9c       	cmp	r12,	r15	;
    6108:	02 38       	jl	$+6      	;abs 0x610e
    610a:	2a 52       	add	#4,	r10	;r2 As==10
    610c:	0f 3c       	jmp	$+32     	;abs 0x612c
    610e:	1c 41 0e 00 	mov	14(r1),	r12	;0x0000e
    6112:	0d 45       	mov	r5,	r13	;
    6114:	0e 41       	mov	r1,	r14	;
    6116:	3e 50 3c 00 	add	#60,	r14	;#0x003c
    611a:	b0 12 d6 99 	call	#39382		;#0x99d6
    611e:	0c 93       	cmp	#0,	r12	;r3 As==00
    6120:	02 24       	jz	$+6      	;abs 0x6126
    6122:	80 00 f4 68 	mova	#26868,	r0	;0x068f4
    6126:	0a 41       	mov	r1,	r10	;
    6128:	3a 50 52 00 	add	#82,	r10	;#0x0052
    612c:	b1 b0 00 01 	bit	#256,	18(r1)	;#0x0100, 0x0012
    6130:	12 00 
    6132:	09 20       	jnz	$+20     	;abs 0x6146
    6134:	9a 41 10 00 	mov	16(r1),	0(r10)	;0x00010
    6138:	00 00 
    613a:	8a 48 02 00 	mov	r8,	2(r10)	;
    613e:	81 58 40 00 	add	r8,	64(r1)	; 0x0040
    6142:	30 40 24 66 	br	#0x6624		;
    6146:	3e 40 65 00 	mov	#101,	r14	;#0x0065
    614a:	0e 99       	cmp	r9,	r14	;
    614c:	02 38       	jl	$+6      	;abs 0x6152
    614e:	80 00 38 66 	mova	#26168,	r0	;0x06638
    6152:	81 43 00 00 	mov	#0,	0(r1)	;r3 As==00
    6156:	81 43 02 00 	mov	#0,	2(r1)	;r3 As==00
    615a:	81 43 04 00 	mov	#0,	4(r1)	;r3 As==00
    615e:	81 43 06 00 	mov	#0,	6(r1)	;r3 As==00
    6162:	1c 41 1e 00 	mov	30(r1),	r12	;0x0001e
    6166:	1d 41 20 00 	mov	32(r1),	r13	;0x00020
    616a:	1e 41 22 00 	mov	34(r1),	r14	;0x00022
    616e:	1f 41 24 00 	mov	36(r1),	r15	;0x00024
    6172:	b0 12 96 bc 	call	#48278		;#0xbc96
    6176:	0c 93       	cmp	#0,	r12	;r3 As==00
    6178:	85 20       	jnz	$+268    	;abs 0x6284
    617a:	ba 40 39 44 	mov	#17465,	0(r10)	;#0x4439
    617e:	00 00 
    6180:	9a 43 02 00 	mov	#1,	2(r10)	;r3 As==01
    6184:	91 53 40 00 	inc	64(r1)		;
    6188:	1c 41 3e 00 	mov	62(r1),	r12	;0x0003e
    618c:	1c 53       	inc	r12		;
    618e:	81 4c 3e 00 	mov	r12,	62(r1)	; 0x003e
    6192:	3f 40 07 00 	mov	#7,	r15	;
    6196:	0f 9c       	cmp	r12,	r15	;
    6198:	02 38       	jl	$+6      	;abs 0x619e
    619a:	2a 52       	add	#4,	r10	;r2 As==10
    619c:	0f 3c       	jmp	$+32     	;abs 0x61bc
    619e:	1c 41 0e 00 	mov	14(r1),	r12	;0x0000e
    61a2:	0d 45       	mov	r5,	r13	;
    61a4:	0e 41       	mov	r1,	r14	;
    61a6:	3e 50 3c 00 	add	#60,	r14	;#0x003c
    61aa:	b0 12 d6 99 	call	#39382		;#0x99d6
    61ae:	0c 93       	cmp	#0,	r12	;r3 As==00
    61b0:	02 24       	jz	$+6      	;abs 0x61b6
    61b2:	80 00 f4 68 	mova	#26868,	r0	;0x068f4
    61b6:	0a 41       	mov	r1,	r10	;
    61b8:	3a 50 52 00 	add	#82,	r10	;#0x0052
    61bc:	91 91 14 00 	cmp	20(r1),	54(r1)	;0x00014, 0x0036
    61c0:	36 00 
    61c2:	05 38       	jl	$+12     	;abs 0x61ce
    61c4:	91 b3 12 00 	bit	#1,	18(r1)	;r3 As==01, 0x0012
    61c8:	02 20       	jnz	$+6      	;abs 0x61ce
    61ca:	80 00 08 68 	mova	#26632,	r0	;0x06808
    61ce:	9a 41 2c 00 	mov	44(r1),	0(r10)	;0x0002c
    61d2:	00 00 
    61d4:	9a 41 28 00 	mov	40(r1),	2(r10)	;0x00028
    61d8:	02 00 
    61da:	91 51 28 00 	rla	40(r1)		;#0x00028
    61de:	40 00 
    61e0:	1c 41 3e 00 	mov	62(r1),	r12	;0x0003e
    61e4:	1c 53       	inc	r12		;
    61e6:	81 4c 3e 00 	mov	r12,	62(r1)	; 0x003e
    61ea:	3d 40 07 00 	mov	#7,	r13	;
    61ee:	0d 9c       	cmp	r12,	r13	;
    61f0:	02 38       	jl	$+6      	;abs 0x61f6
    61f2:	2a 52       	add	#4,	r10	;r2 As==10
    61f4:	0f 3c       	jmp	$+32     	;abs 0x6214
    61f6:	1c 41 0e 00 	mov	14(r1),	r12	;0x0000e
    61fa:	0d 45       	mov	r5,	r13	;
    61fc:	0e 41       	mov	r1,	r14	;
    61fe:	3e 50 3c 00 	add	#60,	r14	;#0x003c
    6202:	b0 12 d6 99 	call	#39382		;#0x99d6
    6206:	0c 93       	cmp	#0,	r12	;r3 As==00
    6208:	02 24       	jz	$+6      	;abs 0x620e
    620a:	80 00 f4 68 	mova	#26868,	r0	;0x068f4
    620e:	0a 41       	mov	r1,	r10	;
    6210:	3a 50 52 00 	add	#82,	r10	;#0x0052
    6214:	18 41 14 00 	mov	20(r1),	r8	;0x00014
    6218:	38 53       	add	#-1,	r8	;r3 As==11
    621a:	0e 43       	clr	r14		;
    621c:	0e 98       	cmp	r8,	r14	;
    621e:	02 38       	jl	$+6      	;abs 0x6224
    6220:	80 00 08 68 	mova	#26632,	r0	;0x06808
    6224:	39 40 d6 99 	mov	#39382,	r9	;#0x99d6
    6228:	3c 40 10 00 	mov	#16,	r12	;#0x0010
    622c:	ba 40 3b 44 	mov	#17467,	0(r10)	;#0x443b
    6230:	00 00 
    6232:	0c 98       	cmp	r8,	r12	;
    6234:	22 34       	jge	$+70     	;abs 0x627a
    6236:	ba 40 10 00 	mov	#16,	2(r10)	;#0x0010
    623a:	02 00 
    623c:	b1 50 10 00 	add	#16,	64(r1)	;#0x0010, 0x0040
    6240:	40 00 
    6242:	1c 41 3e 00 	mov	62(r1),	r12	;0x0003e
    6246:	1c 53       	inc	r12		;
    6248:	81 4c 3e 00 	mov	r12,	62(r1)	; 0x003e
    624c:	3f 40 07 00 	mov	#7,	r15	;
    6250:	0f 9c       	cmp	r12,	r15	;
    6252:	02 38       	jl	$+6      	;abs 0x6258
    6254:	2a 52       	add	#4,	r10	;r2 As==10
    6256:	0e 3c       	jmp	$+30     	;abs 0x6274
    6258:	1c 41 0e 00 	mov	14(r1),	r12	;0x0000e
    625c:	0d 45       	mov	r5,	r13	;
    625e:	0e 41       	mov	r1,	r14	;
    6260:	3e 50 3c 00 	add	#60,	r14	;#0x003c
    6264:	89 12       	call	r9		;
    6266:	0c 93       	cmp	#0,	r12	;r3 As==00
    6268:	02 24       	jz	$+6      	;abs 0x626e
    626a:	80 00 f4 68 	mova	#26868,	r0	;0x068f4
    626e:	0a 41       	mov	r1,	r10	;
    6270:	3a 50 52 00 	add	#82,	r10	;#0x0052
    6274:	38 50 f0 ff 	add	#65520,	r8	;#0xfff0
    6278:	d7 3f       	jmp	$-80     	;abs 0x6228
    627a:	8a 48 02 00 	mov	r8,	2(r10)	;
    627e:	81 58 40 00 	add	r8,	64(r1)	; 0x0040
    6282:	d0 3d       	jmp	$+930    	;abs 0x6624
    6284:	0e 43       	clr	r14		;
    6286:	1e 91 36 00 	cmp	54(r1),	r14	;0x00036
    628a:	c3 38       	jl	$+392    	;abs 0x6412
    628c:	ba 40 39 44 	mov	#17465,	0(r10)	;#0x4439
    6290:	00 00 
    6292:	9a 43 02 00 	mov	#1,	2(r10)	;r3 As==01
    6296:	91 53 40 00 	inc	64(r1)		;
    629a:	1c 41 3e 00 	mov	62(r1),	r12	;0x0003e
    629e:	1c 53       	inc	r12		;
    62a0:	81 4c 3e 00 	mov	r12,	62(r1)	; 0x003e
    62a4:	3f 40 07 00 	mov	#7,	r15	;
    62a8:	0f 9c       	cmp	r12,	r15	;
    62aa:	02 38       	jl	$+6      	;abs 0x62b0
    62ac:	2a 52       	add	#4,	r10	;r2 As==10
    62ae:	0f 3c       	jmp	$+32     	;abs 0x62ce
    62b0:	1c 41 0e 00 	mov	14(r1),	r12	;0x0000e
    62b4:	0d 45       	mov	r5,	r13	;
    62b6:	0e 41       	mov	r1,	r14	;
    62b8:	3e 50 3c 00 	add	#60,	r14	;#0x003c
    62bc:	b0 12 d6 99 	call	#39382		;#0x99d6
    62c0:	0c 93       	cmp	#0,	r12	;r3 As==00
    62c2:	02 24       	jz	$+6      	;abs 0x62c8
    62c4:	80 00 f4 68 	mova	#26868,	r0	;0x068f4
    62c8:	0a 41       	mov	r1,	r10	;
    62ca:	3a 50 52 00 	add	#82,	r10	;#0x0052
    62ce:	81 93 36 00 	cmp	#0,	54(r1)	;r3 As==00, 0x0036
    62d2:	08 20       	jnz	$+18     	;abs 0x62e4
    62d4:	81 93 14 00 	cmp	#0,	20(r1)	;r3 As==00, 0x0014
    62d8:	05 20       	jnz	$+12     	;abs 0x62e4
    62da:	91 b3 12 00 	bit	#1,	18(r1)	;r3 As==01, 0x0012
    62de:	02 20       	jnz	$+6      	;abs 0x62e4
    62e0:	80 00 08 68 	mova	#26632,	r0	;0x06808
    62e4:	9a 41 2c 00 	mov	44(r1),	0(r10)	;0x0002c
    62e8:	00 00 
    62ea:	9a 41 28 00 	mov	40(r1),	2(r10)	;0x00028
    62ee:	02 00 
    62f0:	91 51 28 00 	rla	40(r1)		;#0x00028
    62f4:	40 00 
    62f6:	1c 41 3e 00 	mov	62(r1),	r12	;0x0003e
    62fa:	1c 53       	inc	r12		;
    62fc:	81 4c 3e 00 	mov	r12,	62(r1)	; 0x003e
    6300:	3d 40 07 00 	mov	#7,	r13	;
    6304:	0d 9c       	cmp	r12,	r13	;
    6306:	02 38       	jl	$+6      	;abs 0x630c
    6308:	2a 52       	add	#4,	r10	;r2 As==10
    630a:	0f 3c       	jmp	$+32     	;abs 0x632a
    630c:	1c 41 0e 00 	mov	14(r1),	r12	;0x0000e
    6310:	0d 45       	mov	r5,	r13	;
    6312:	0e 41       	mov	r1,	r14	;
    6314:	3e 50 3c 00 	add	#60,	r14	;#0x003c
    6318:	b0 12 d6 99 	call	#39382		;#0x99d6
    631c:	0c 93       	cmp	#0,	r12	;r3 As==00
    631e:	02 24       	jz	$+6      	;abs 0x6324
    6320:	80 00 f4 68 	mova	#26868,	r0	;0x068f4
    6324:	0a 41       	mov	r1,	r10	;
    6326:	3a 50 52 00 	add	#82,	r10	;#0x0052
    632a:	08 43       	clr	r8		;
    632c:	18 81 36 00 	sub	54(r1),	r8	;0x00036
    6330:	0e 43       	clr	r14		;
    6332:	0e 98       	cmp	r8,	r14	;
    6334:	49 34       	jge	$+148    	;abs 0x63c8
    6336:	39 40 d6 99 	mov	#39382,	r9	;#0x99d6
    633a:	3c 40 10 00 	mov	#16,	r12	;#0x0010
    633e:	ba 40 3b 44 	mov	#17467,	0(r10)	;#0x443b
    6342:	00 00 
    6344:	0c 98       	cmp	r8,	r12	;
    6346:	22 34       	jge	$+70     	;abs 0x638c
    6348:	ba 40 10 00 	mov	#16,	2(r10)	;#0x0010
    634c:	02 00 
    634e:	b1 50 10 00 	add	#16,	64(r1)	;#0x0010, 0x0040
    6352:	40 00 
    6354:	1c 41 3e 00 	mov	62(r1),	r12	;0x0003e
    6358:	1c 53       	inc	r12		;
    635a:	81 4c 3e 00 	mov	r12,	62(r1)	; 0x003e
    635e:	3f 40 07 00 	mov	#7,	r15	;
    6362:	0f 9c       	cmp	r12,	r15	;
    6364:	02 38       	jl	$+6      	;abs 0x636a
    6366:	2a 52       	add	#4,	r10	;r2 As==10
    6368:	0e 3c       	jmp	$+30     	;abs 0x6386
    636a:	1c 41 0e 00 	mov	14(r1),	r12	;0x0000e
    636e:	0d 45       	mov	r5,	r13	;
    6370:	0e 41       	mov	r1,	r14	;
    6372:	3e 50 3c 00 	add	#60,	r14	;#0x003c
    6376:	89 12       	call	r9		;
    6378:	0c 93       	cmp	#0,	r12	;r3 As==00
    637a:	02 24       	jz	$+6      	;abs 0x6380
    637c:	80 00 f4 68 	mova	#26868,	r0	;0x068f4
    6380:	0a 41       	mov	r1,	r10	;
    6382:	3a 50 52 00 	add	#82,	r10	;#0x0052
    6386:	38 50 f0 ff 	add	#65520,	r8	;#0xfff0
    638a:	d7 3f       	jmp	$-80     	;abs 0x633a
    638c:	8a 48 02 00 	mov	r8,	2(r10)	;
    6390:	81 58 40 00 	add	r8,	64(r1)	; 0x0040
    6394:	1c 41 3e 00 	mov	62(r1),	r12	;0x0003e
    6398:	1c 53       	inc	r12		;
    639a:	81 4c 3e 00 	mov	r12,	62(r1)	; 0x003e
    639e:	3d 40 07 00 	mov	#7,	r13	;
    63a2:	0d 9c       	cmp	r12,	r13	;
    63a4:	02 38       	jl	$+6      	;abs 0x63aa
    63a6:	2a 52       	add	#4,	r10	;r2 As==10
    63a8:	0f 3c       	jmp	$+32     	;abs 0x63c8
    63aa:	1c 41 0e 00 	mov	14(r1),	r12	;0x0000e
    63ae:	0d 45       	mov	r5,	r13	;
    63b0:	0e 41       	mov	r1,	r14	;
    63b2:	3e 50 3c 00 	add	#60,	r14	;#0x003c
    63b6:	b0 12 d6 99 	call	#39382		;#0x99d6
    63ba:	0c 93       	cmp	#0,	r12	;r3 As==00
    63bc:	02 24       	jz	$+6      	;abs 0x63c2
    63be:	80 00 f4 68 	mova	#26868,	r0	;0x068f4
    63c2:	0a 41       	mov	r1,	r10	;
    63c4:	3a 50 52 00 	add	#82,	r10	;#0x0052
    63c8:	9a 41 10 00 	mov	16(r1),	0(r10)	;0x00010
    63cc:	00 00 
    63ce:	9a 41 14 00 	mov	20(r1),	2(r10)	;0x00014
    63d2:	02 00 
    63d4:	91 51 14 00 	rla	20(r1)		;#0x00014
    63d8:	40 00 
    63da:	1c 41 3e 00 	mov	62(r1),	r12	;0x0003e
    63de:	1c 53       	inc	r12		;
    63e0:	81 4c 3e 00 	mov	r12,	62(r1)	; 0x003e
    63e4:	3e 40 07 00 	mov	#7,	r14	;
    63e8:	0e 9c       	cmp	r12,	r14	;
    63ea:	02 38       	jl	$+6      	;abs 0x63f0
    63ec:	80 00 06 68 	mova	#26630,	r0	;0x06806
    63f0:	1c 41 0e 00 	mov	14(r1),	r12	;0x0000e
    63f4:	0d 45       	mov	r5,	r13	;
    63f6:	0e 41       	mov	r1,	r14	;
    63f8:	3e 50 3c 00 	add	#60,	r14	;#0x003c
    63fc:	b0 12 d6 99 	call	#39382		;#0x99d6
    6400:	0c 93       	cmp	#0,	r12	;r3 As==00
    6402:	02 24       	jz	$+6      	;abs 0x6408
    6404:	80 00 f4 68 	mova	#26868,	r0	;0x068f4
    6408:	0a 41       	mov	r1,	r10	;
    640a:	3a 50 52 00 	add	#82,	r10	;#0x0052
    640e:	30 40 08 68 	br	#0x6808		;
    6412:	18 41 10 00 	mov	16(r1),	r8	;0x00010
    6416:	18 51 14 00 	add	20(r1),	r8	;0x00014
    641a:	19 41 14 00 	mov	20(r1),	r9	;0x00014
    641e:	06 99       	cmp	r9,	r6	;
    6420:	01 34       	jge	$+4      	;abs 0x6424
    6422:	09 46       	mov	r6,	r9	;
    6424:	0f 43       	clr	r15		;
    6426:	0f 99       	cmp	r9,	r15	;
    6428:	21 34       	jge	$+68     	;abs 0x646c
    642a:	9a 41 10 00 	mov	16(r1),	0(r10)	;0x00010
    642e:	00 00 
    6430:	8a 49 02 00 	mov	r9,	2(r10)	;
    6434:	81 59 40 00 	add	r9,	64(r1)	; 0x0040
    6438:	1c 41 3e 00 	mov	62(r1),	r12	;0x0003e
    643c:	1c 53       	inc	r12		;
    643e:	81 4c 3e 00 	mov	r12,	62(r1)	; 0x003e
    6442:	3d 40 07 00 	mov	#7,	r13	;
    6446:	0d 9c       	cmp	r12,	r13	;
    6448:	02 38       	jl	$+6      	;abs 0x644e
    644a:	2a 52       	add	#4,	r10	;r2 As==10
    644c:	0f 3c       	jmp	$+32     	;abs 0x646c
    644e:	1c 41 0e 00 	mov	14(r1),	r12	;0x0000e
    6452:	0d 45       	mov	r5,	r13	;
    6454:	0e 41       	mov	r1,	r14	;
    6456:	3e 50 3c 00 	add	#60,	r14	;#0x003c
    645a:	b0 12 d6 99 	call	#39382		;#0x99d6
    645e:	0c 93       	cmp	#0,	r12	;r3 As==00
    6460:	02 24       	jz	$+6      	;abs 0x6466
    6462:	80 00 f4 68 	mova	#26868,	r0	;0x068f4
    6466:	0a 41       	mov	r1,	r10	;
    6468:	3a 50 52 00 	add	#82,	r10	;#0x0052
    646c:	09 93       	cmp	#0,	r9	;r3 As==00
    646e:	01 34       	jge	$+4      	;abs 0x6472
    6470:	09 43       	clr	r9		;
    6472:	07 46       	mov	r6,	r7	;
    6474:	07 89       	sub	r9,	r7	;
    6476:	0e 43       	clr	r14		;
    6478:	0e 97       	cmp	r7,	r14	;
    647a:	49 34       	jge	$+148    	;abs 0x650e
    647c:	39 40 d6 99 	mov	#39382,	r9	;#0x99d6
    6480:	3c 40 10 00 	mov	#16,	r12	;#0x0010
    6484:	ba 40 3b 44 	mov	#17467,	0(r10)	;#0x443b
    6488:	00 00 
    648a:	0c 97       	cmp	r7,	r12	;
    648c:	22 34       	jge	$+70     	;abs 0x64d2
    648e:	ba 40 10 00 	mov	#16,	2(r10)	;#0x0010
    6492:	02 00 
    6494:	b1 50 10 00 	add	#16,	64(r1)	;#0x0010, 0x0040
    6498:	40 00 
    649a:	1c 41 3e 00 	mov	62(r1),	r12	;0x0003e
    649e:	1c 53       	inc	r12		;
    64a0:	81 4c 3e 00 	mov	r12,	62(r1)	; 0x003e
    64a4:	3f 40 07 00 	mov	#7,	r15	;
    64a8:	0f 9c       	cmp	r12,	r15	;
    64aa:	02 38       	jl	$+6      	;abs 0x64b0
    64ac:	2a 52       	add	#4,	r10	;r2 As==10
    64ae:	0e 3c       	jmp	$+30     	;abs 0x64cc
    64b0:	1c 41 0e 00 	mov	14(r1),	r12	;0x0000e
    64b4:	0d 45       	mov	r5,	r13	;
    64b6:	0e 41       	mov	r1,	r14	;
    64b8:	3e 50 3c 00 	add	#60,	r14	;#0x003c
    64bc:	89 12       	call	r9		;
    64be:	0c 93       	cmp	#0,	r12	;r3 As==00
    64c0:	02 24       	jz	$+6      	;abs 0x64c6
    64c2:	80 00 f4 68 	mova	#26868,	r0	;0x068f4
    64c6:	0a 41       	mov	r1,	r10	;
    64c8:	3a 50 52 00 	add	#82,	r10	;#0x0052
    64cc:	37 50 f0 ff 	add	#65520,	r7	;#0xfff0
    64d0:	d7 3f       	jmp	$-80     	;abs 0x6480
    64d2:	8a 47 02 00 	mov	r7,	2(r10)	;
    64d6:	81 57 40 00 	add	r7,	64(r1)	; 0x0040
    64da:	1c 41 3e 00 	mov	62(r1),	r12	;0x0003e
    64de:	1c 53       	inc	r12		;
    64e0:	81 4c 3e 00 	mov	r12,	62(r1)	; 0x003e
    64e4:	3d 40 07 00 	mov	#7,	r13	;
    64e8:	0d 9c       	cmp	r12,	r13	;
    64ea:	02 38       	jl	$+6      	;abs 0x64f0
    64ec:	2a 52       	add	#4,	r10	;r2 As==10
    64ee:	0f 3c       	jmp	$+32     	;abs 0x650e
    64f0:	1c 41 0e 00 	mov	14(r1),	r12	;0x0000e
    64f4:	0d 45       	mov	r5,	r13	;
    64f6:	0e 41       	mov	r1,	r14	;
    64f8:	3e 50 3c 00 	add	#60,	r14	;#0x003c
    64fc:	b0 12 d6 99 	call	#39382		;#0x99d6
    6500:	0c 93       	cmp	#0,	r12	;r3 As==00
    6502:	02 24       	jz	$+6      	;abs 0x6508
    6504:	80 00 f4 68 	mova	#26868,	r0	;0x068f4
    6508:	0a 41       	mov	r1,	r10	;
    650a:	3a 50 52 00 	add	#82,	r10	;#0x0052
    650e:	16 51 10 00 	add	16(r1),	r6	;0x00010
    6512:	91 91 14 00 	cmp	20(r1),	54(r1)	;0x00014, 0x0036
    6516:	36 00 
    6518:	03 38       	jl	$+8      	;abs 0x6520
    651a:	91 b3 12 00 	bit	#1,	18(r1)	;r3 As==01, 0x0012
    651e:	21 24       	jz	$+68     	;abs 0x6562
    6520:	9a 41 2c 00 	mov	44(r1),	0(r10)	;0x0002c
    6524:	00 00 
    6526:	9a 41 28 00 	mov	40(r1),	2(r10)	;0x00028
    652a:	02 00 
    652c:	91 51 28 00 	rla	40(r1)		;#0x00028
    6530:	40 00 
    6532:	1c 41 3e 00 	mov	62(r1),	r12	;0x0003e
    6536:	1c 53       	inc	r12		;
    6538:	81 4c 3e 00 	mov	r12,	62(r1)	; 0x003e
    653c:	3e 40 07 00 	mov	#7,	r14	;
    6540:	0e 9c       	cmp	r12,	r14	;
    6542:	02 38       	jl	$+6      	;abs 0x6548
    6544:	2a 52       	add	#4,	r10	;r2 As==10
    6546:	0d 3c       	jmp	$+28     	;abs 0x6562
    6548:	1c 41 0e 00 	mov	14(r1),	r12	;0x0000e
    654c:	0d 45       	mov	r5,	r13	;
    654e:	0e 41       	mov	r1,	r14	;
    6550:	3e 50 3c 00 	add	#60,	r14	;#0x003c
    6554:	b0 12 d6 99 	call	#39382		;#0x99d6
    6558:	0c 93       	cmp	#0,	r12	;r3 As==00
    655a:	cc 21       	jnz	$+922    	;abs 0x68f4
    655c:	0a 41       	mov	r1,	r10	;
    655e:	3a 50 52 00 	add	#82,	r10	;#0x0052
    6562:	1c 41 14 00 	mov	20(r1),	r12	;0x00014
    6566:	1c 81 36 00 	sub	54(r1),	r12	;0x00036
    656a:	08 86       	sub	r6,	r8	;
    656c:	0c 98       	cmp	r8,	r12	;
    656e:	01 34       	jge	$+4      	;abs 0x6572
    6570:	08 4c       	mov	r12,	r8	;
    6572:	0f 43       	clr	r15		;
    6574:	0f 98       	cmp	r8,	r15	;
    6576:	1e 34       	jge	$+62     	;abs 0x65b4
    6578:	8a 46 00 00 	mov	r6,	0(r10)	;
    657c:	8a 48 02 00 	mov	r8,	2(r10)	;
    6580:	81 58 40 00 	add	r8,	64(r1)	; 0x0040
    6584:	1c 41 3e 00 	mov	62(r1),	r12	;0x0003e
    6588:	1c 53       	inc	r12		;
    658a:	81 4c 3e 00 	mov	r12,	62(r1)	; 0x003e
    658e:	3d 40 07 00 	mov	#7,	r13	;
    6592:	0d 9c       	cmp	r12,	r13	;
    6594:	02 38       	jl	$+6      	;abs 0x659a
    6596:	2a 52       	add	#4,	r10	;r2 As==10
    6598:	0d 3c       	jmp	$+28     	;abs 0x65b4
    659a:	1c 41 0e 00 	mov	14(r1),	r12	;0x0000e
    659e:	0d 45       	mov	r5,	r13	;
    65a0:	0e 41       	mov	r1,	r14	;
    65a2:	3e 50 3c 00 	add	#60,	r14	;#0x003c
    65a6:	b0 12 d6 99 	call	#39382		;#0x99d6
    65aa:	0c 93       	cmp	#0,	r12	;r3 As==00
    65ac:	a3 21       	jnz	$+840    	;abs 0x68f4
    65ae:	0a 41       	mov	r1,	r10	;
    65b0:	3a 50 52 00 	add	#82,	r10	;#0x0052
    65b4:	08 93       	cmp	#0,	r8	;r3 As==00
    65b6:	01 34       	jge	$+4      	;abs 0x65ba
    65b8:	08 43       	clr	r8		;
    65ba:	17 41 14 00 	mov	20(r1),	r7	;0x00014
    65be:	17 81 36 00 	sub	54(r1),	r7	;0x00036
    65c2:	07 88       	sub	r8,	r7	;
    65c4:	0e 43       	clr	r14		;
    65c6:	0e 97       	cmp	r7,	r14	;
    65c8:	1f 35       	jge	$+576    	;abs 0x6808
    65ca:	39 40 d6 99 	mov	#39382,	r9	;#0x99d6
    65ce:	3c 40 10 00 	mov	#16,	r12	;#0x0010
    65d2:	ba 40 3b 44 	mov	#17467,	0(r10)	;#0x443b
    65d6:	00 00 
    65d8:	0c 97       	cmp	r7,	r12	;
    65da:	20 34       	jge	$+66     	;abs 0x661c
    65dc:	ba 40 10 00 	mov	#16,	2(r10)	;#0x0010
    65e0:	02 00 
    65e2:	b1 50 10 00 	add	#16,	64(r1)	;#0x0010, 0x0040
    65e6:	40 00 
    65e8:	1c 41 3e 00 	mov	62(r1),	r12	;0x0003e
    65ec:	1c 53       	inc	r12		;
    65ee:	81 4c 3e 00 	mov	r12,	62(r1)	; 0x003e
    65f2:	3f 40 07 00 	mov	#7,	r15	;
    65f6:	0f 9c       	cmp	r12,	r15	;
    65f8:	02 38       	jl	$+6      	;abs 0x65fe
    65fa:	2a 52       	add	#4,	r10	;r2 As==10
    65fc:	0c 3c       	jmp	$+26     	;abs 0x6616
    65fe:	1c 41 0e 00 	mov	14(r1),	r12	;0x0000e
    6602:	0d 45       	mov	r5,	r13	;
    6604:	0e 41       	mov	r1,	r14	;
    6606:	3e 50 3c 00 	add	#60,	r14	;#0x003c
    660a:	89 12       	call	r9		;
    660c:	0c 93       	cmp	#0,	r12	;r3 As==00
    660e:	72 21       	jnz	$+742    	;abs 0x68f4
    6610:	0a 41       	mov	r1,	r10	;
    6612:	3a 50 52 00 	add	#82,	r10	;#0x0052
    6616:	37 50 f0 ff 	add	#65520,	r7	;#0xfff0
    661a:	d9 3f       	jmp	$-76     	;abs 0x65ce
    661c:	8a 47 02 00 	mov	r7,	2(r10)	;
    6620:	81 57 40 00 	add	r7,	64(r1)	; 0x0040
    6624:	1c 41 3e 00 	mov	62(r1),	r12	;0x0003e
    6628:	1c 53       	inc	r12		;
    662a:	81 4c 3e 00 	mov	r12,	62(r1)	; 0x003e
    662e:	3d 40 07 00 	mov	#7,	r13	;
    6632:	0d 9c       	cmp	r12,	r13	;
    6634:	e8 34       	jge	$+466    	;abs 0x6806
    6636:	dc 3e       	jmp	$-582    	;abs 0x63f0
    6638:	1e 43       	mov	#1,	r14	;r3 As==01
    663a:	1e 91 14 00 	cmp	20(r1),	r14	;0x00014
    663e:	03 38       	jl	$+8      	;abs 0x6646
    6640:	91 b3 12 00 	bit	#1,	18(r1)	;r3 As==01, 0x0012
    6644:	b9 24       	jz	$+372    	;abs 0x67b8
    6646:	9a 41 10 00 	mov	16(r1),	0(r10)	;0x00010
    664a:	00 00 
    664c:	9a 43 02 00 	mov	#1,	2(r10)	;r3 As==01
    6650:	91 53 40 00 	inc	64(r1)		;
    6654:	1c 41 3e 00 	mov	62(r1),	r12	;0x0003e
    6658:	1c 53       	inc	r12		;
    665a:	81 4c 3e 00 	mov	r12,	62(r1)	; 0x003e
    665e:	3f 40 07 00 	mov	#7,	r15	;
    6662:	0f 9c       	cmp	r12,	r15	;
    6664:	02 38       	jl	$+6      	;abs 0x666a
    6666:	2a 52       	add	#4,	r10	;r2 As==10
    6668:	0d 3c       	jmp	$+28     	;abs 0x6684
    666a:	1c 41 0e 00 	mov	14(r1),	r12	;0x0000e
    666e:	0d 45       	mov	r5,	r13	;
    6670:	0e 41       	mov	r1,	r14	;
    6672:	3e 50 3c 00 	add	#60,	r14	;#0x003c
    6676:	b0 12 d6 99 	call	#39382		;#0x99d6
    667a:	0c 93       	cmp	#0,	r12	;r3 As==00
    667c:	3b 21       	jnz	$+632    	;abs 0x68f4
    667e:	0a 41       	mov	r1,	r10	;
    6680:	3a 50 52 00 	add	#82,	r10	;#0x0052
    6684:	9a 41 2c 00 	mov	44(r1),	0(r10)	;0x0002c
    6688:	00 00 
    668a:	9a 41 28 00 	mov	40(r1),	2(r10)	;0x00028
    668e:	02 00 
    6690:	91 51 28 00 	rla	40(r1)		;#0x00028
    6694:	40 00 
    6696:	1c 41 3e 00 	mov	62(r1),	r12	;0x0003e
    669a:	1c 53       	inc	r12		;
    669c:	81 4c 3e 00 	mov	r12,	62(r1)	; 0x003e
    66a0:	3d 40 07 00 	mov	#7,	r13	;
    66a4:	0d 9c       	cmp	r12,	r13	;
    66a6:	02 38       	jl	$+6      	;abs 0x66ac
    66a8:	2a 52       	add	#4,	r10	;r2 As==10
    66aa:	0d 3c       	jmp	$+28     	;abs 0x66c6
    66ac:	1c 41 0e 00 	mov	14(r1),	r12	;0x0000e
    66b0:	0d 45       	mov	r5,	r13	;
    66b2:	0e 41       	mov	r1,	r14	;
    66b4:	3e 50 3c 00 	add	#60,	r14	;#0x003c
    66b8:	b0 12 d6 99 	call	#39382		;#0x99d6
    66bc:	0c 93       	cmp	#0,	r12	;r3 As==00
    66be:	1a 21       	jnz	$+566    	;abs 0x68f4
    66c0:	0a 41       	mov	r1,	r10	;
    66c2:	3a 50 52 00 	add	#82,	r10	;#0x0052
    66c6:	81 43 00 00 	mov	#0,	0(r1)	;r3 As==00
    66ca:	81 43 02 00 	mov	#0,	2(r1)	;r3 As==00
    66ce:	81 43 04 00 	mov	#0,	4(r1)	;r3 As==00
    66d2:	81 43 06 00 	mov	#0,	6(r1)	;r3 As==00
    66d6:	1c 41 1e 00 	mov	30(r1),	r12	;0x0001e
    66da:	1d 41 20 00 	mov	32(r1),	r13	;0x00020
    66de:	1e 41 22 00 	mov	34(r1),	r14	;0x00022
    66e2:	1f 41 24 00 	mov	36(r1),	r15	;0x00024
    66e6:	b0 12 08 bd 	call	#48392		;#0xbd08
    66ea:	0c 93       	cmp	#0,	r12	;r3 As==00
    66ec:	1b 24       	jz	$+56     	;abs 0x6724
    66ee:	1c 41 10 00 	mov	16(r1),	r12	;0x00010
    66f2:	1c 53       	inc	r12		;
    66f4:	8a 4c 00 00 	mov	r12,	0(r10)	;
    66f8:	1d 41 14 00 	mov	20(r1),	r13	;0x00014
    66fc:	3d 53       	add	#-1,	r13	;r3 As==11
    66fe:	8a 4d 02 00 	mov	r13,	2(r10)	;
    6702:	1c 41 40 00 	mov	64(r1),	r12	;0x00040
    6706:	3c 53       	add	#-1,	r12	;r3 As==11
    6708:	1c 51 14 00 	add	20(r1),	r12	;0x00014
    670c:	81 4c 40 00 	mov	r12,	64(r1)	; 0x0040
    6710:	1c 41 3e 00 	mov	62(r1),	r12	;0x0003e
    6714:	1c 53       	inc	r12		;
    6716:	81 4c 3e 00 	mov	r12,	62(r1)	; 0x003e
    671a:	3e 40 07 00 	mov	#7,	r14	;
    671e:	0e 9c       	cmp	r12,	r14	;
    6720:	5b 34       	jge	$+184    	;abs 0x67d8
    6722:	1c 3c       	jmp	$+58     	;abs 0x675c
    6724:	18 41 14 00 	mov	20(r1),	r8	;0x00014
    6728:	38 53       	add	#-1,	r8	;r3 As==11
    672a:	0f 43       	clr	r15		;
    672c:	0f 98       	cmp	r8,	r15	;
    672e:	55 34       	jge	$+172    	;abs 0x67da
    6730:	39 40 d6 99 	mov	#39382,	r9	;#0x99d6
    6734:	3e 40 10 00 	mov	#16,	r14	;#0x0010
    6738:	ba 40 3b 44 	mov	#17467,	0(r10)	;#0x443b
    673c:	00 00 
    673e:	0e 98       	cmp	r8,	r14	;
    6740:	1b 38       	jl	$+56     	;abs 0x6778
    6742:	8a 48 02 00 	mov	r8,	2(r10)	;
    6746:	81 58 40 00 	add	r8,	64(r1)	; 0x0040
    674a:	1c 41 3e 00 	mov	62(r1),	r12	;0x0003e
    674e:	1c 53       	inc	r12		;
    6750:	81 4c 3e 00 	mov	r12,	62(r1)	; 0x003e
    6754:	3f 40 07 00 	mov	#7,	r15	;
    6758:	0f 9c       	cmp	r12,	r15	;
    675a:	3e 34       	jge	$+126    	;abs 0x67d8
    675c:	1c 41 0e 00 	mov	14(r1),	r12	;0x0000e
    6760:	0d 45       	mov	r5,	r13	;
    6762:	0e 41       	mov	r1,	r14	;
    6764:	3e 50 3c 00 	add	#60,	r14	;#0x003c
    6768:	b0 12 d6 99 	call	#39382		;#0x99d6
    676c:	0c 93       	cmp	#0,	r12	;r3 As==00
    676e:	c2 20       	jnz	$+390    	;abs 0x68f4
    6770:	0a 41       	mov	r1,	r10	;
    6772:	3a 50 52 00 	add	#82,	r10	;#0x0052
    6776:	31 3c       	jmp	$+100    	;abs 0x67da
    6778:	ba 40 10 00 	mov	#16,	2(r10)	;#0x0010
    677c:	02 00 
    677e:	b1 50 10 00 	add	#16,	64(r1)	;#0x0010, 0x0040
    6782:	40 00 
    6784:	1c 41 3e 00 	mov	62(r1),	r12	;0x0003e
    6788:	1c 53       	inc	r12		;
    678a:	81 4c 3e 00 	mov	r12,	62(r1)	; 0x003e
    678e:	3d 40 07 00 	mov	#7,	r13	;
    6792:	0d 9c       	cmp	r12,	r13	;
    6794:	02 38       	jl	$+6      	;abs 0x679a
    6796:	2a 52       	add	#4,	r10	;r2 As==10
    6798:	0c 3c       	jmp	$+26     	;abs 0x67b2
    679a:	1c 41 0e 00 	mov	14(r1),	r12	;0x0000e
    679e:	0d 45       	mov	r5,	r13	;
    67a0:	0e 41       	mov	r1,	r14	;
    67a2:	3e 50 3c 00 	add	#60,	r14	;#0x003c
    67a6:	89 12       	call	r9		;
    67a8:	0c 93       	cmp	#0,	r12	;r3 As==00
    67aa:	a4 20       	jnz	$+330    	;abs 0x68f4
    67ac:	0a 41       	mov	r1,	r10	;
    67ae:	3a 50 52 00 	add	#82,	r10	;#0x0052
    67b2:	38 50 f0 ff 	add	#65520,	r8	;#0xfff0
    67b6:	be 3f       	jmp	$-130    	;abs 0x6734
    67b8:	9a 41 10 00 	mov	16(r1),	0(r10)	;0x00010
    67bc:	00 00 
    67be:	9a 43 02 00 	mov	#1,	2(r10)	;r3 As==01
    67c2:	91 53 40 00 	inc	64(r1)		;
    67c6:	1c 41 3e 00 	mov	62(r1),	r12	;0x0003e
    67ca:	1c 53       	inc	r12		;
    67cc:	81 4c 3e 00 	mov	r12,	62(r1)	; 0x003e
    67d0:	3d 40 07 00 	mov	#7,	r13	;
    67d4:	0d 9c       	cmp	r12,	r13	;
    67d6:	c2 3b       	jl	$-122    	;abs 0x675c
    67d8:	2a 52       	add	#4,	r10	;r2 As==10
    67da:	3e 40 43 00 	mov	#67,	r14	;#0x0043
    67de:	0e 51       	add	r1,	r14	;
    67e0:	8a 4e 00 00 	mov	r14,	0(r10)	;
    67e4:	9a 41 2e 00 	mov	46(r1),	2(r10)	;0x0002e
    67e8:	02 00 
    67ea:	91 51 2e 00 	rla	46(r1)		;#0x0002e
    67ee:	40 00 
    67f0:	1c 41 3e 00 	mov	62(r1),	r12	;0x0003e
    67f4:	1c 53       	inc	r12		;
    67f6:	81 4c 3e 00 	mov	r12,	62(r1)	; 0x003e
    67fa:	3f 40 07 00 	mov	#7,	r15	;
    67fe:	0f 9c       	cmp	r12,	r15	;
    6800:	02 34       	jge	$+6      	;abs 0x6806
    6802:	80 00 f0 63 	mova	#25584,	r0	;0x063f0
    6806:	2a 52       	add	#4,	r10	;r2 As==10
    6808:	a1 b2 12 00 	bit	#4,	18(r1)	;r2 As==10, 0x0012
    680c:	0d 20       	jnz	$+28     	;abs 0x6828
    680e:	1c 41 1a 00 	mov	26(r1),	r12	;0x0001a
    6812:	1c 91 1c 00 	cmp	28(r1),	r12	;0x0001c
    6816:	02 34       	jge	$+6      	;abs 0x681c
    6818:	1c 41 1c 00 	mov	28(r1),	r12	;0x0001c
    681c:	81 5c 26 00 	add	r12,	38(r1)	; 0x0026
    6820:	81 93 40 00 	cmp	#0,	64(r1)	;r3 As==00, 0x0040
    6824:	53 24       	jz	$+168    	;abs 0x68cc
    6826:	48 3c       	jmp	$+146    	;abs 0x68b8
    6828:	18 41 1c 00 	mov	28(r1),	r8	;0x0001c
    682c:	18 81 1a 00 	sub	26(r1),	r8	;0x0001a
    6830:	0c 43       	clr	r12		;
    6832:	0c 98       	cmp	r8,	r12	;
    6834:	ec 37       	jge	$-38     	;abs 0x680e
    6836:	39 40 d6 99 	mov	#39382,	r9	;#0x99d6
    683a:	3e 40 10 00 	mov	#16,	r14	;#0x0010
    683e:	ba 40 4b 44 	mov	#17483,	0(r10)	;#0x444b
    6842:	00 00 
    6844:	0e 98       	cmp	r8,	r14	;
    6846:	20 34       	jge	$+66     	;abs 0x6888
    6848:	ba 40 10 00 	mov	#16,	2(r10)	;#0x0010
    684c:	02 00 
    684e:	b1 50 10 00 	add	#16,	64(r1)	;#0x0010, 0x0040
    6852:	40 00 
    6854:	1c 41 3e 00 	mov	62(r1),	r12	;0x0003e
    6858:	1c 53       	inc	r12		;
    685a:	81 4c 3e 00 	mov	r12,	62(r1)	; 0x003e
    685e:	3d 40 07 00 	mov	#7,	r13	;
    6862:	0d 9c       	cmp	r12,	r13	;
    6864:	02 38       	jl	$+6      	;abs 0x686a
    6866:	2a 52       	add	#4,	r10	;r2 As==10
    6868:	0c 3c       	jmp	$+26     	;abs 0x6882
    686a:	1c 41 0e 00 	mov	14(r1),	r12	;0x0000e
    686e:	0d 45       	mov	r5,	r13	;
    6870:	0e 41       	mov	r1,	r14	;
    6872:	3e 50 3c 00 	add	#60,	r14	;#0x003c
    6876:	89 12       	call	r9		;
    6878:	0c 93       	cmp	#0,	r12	;r3 As==00
    687a:	3c 20       	jnz	$+122    	;abs 0x68f4
    687c:	0a 41       	mov	r1,	r10	;
    687e:	3a 50 52 00 	add	#82,	r10	;#0x0052
    6882:	38 50 f0 ff 	add	#65520,	r8	;#0xfff0
    6886:	d9 3f       	jmp	$-76     	;abs 0x683a
    6888:	8a 48 02 00 	mov	r8,	2(r10)	;
    688c:	81 58 40 00 	add	r8,	64(r1)	; 0x0040
    6890:	1c 41 3e 00 	mov	62(r1),	r12	;0x0003e
    6894:	1c 53       	inc	r12		;
    6896:	81 4c 3e 00 	mov	r12,	62(r1)	; 0x003e
    689a:	3f 40 07 00 	mov	#7,	r15	;
    689e:	0f 9c       	cmp	r12,	r15	;
    68a0:	b6 37       	jge	$-146    	;abs 0x680e
    68a2:	1c 41 0e 00 	mov	14(r1),	r12	;0x0000e
    68a6:	0d 45       	mov	r5,	r13	;
    68a8:	0e 41       	mov	r1,	r14	;
    68aa:	3e 50 3c 00 	add	#60,	r14	;#0x003c
    68ae:	b0 12 d6 99 	call	#39382		;#0x99d6
    68b2:	0c 93       	cmp	#0,	r12	;r3 As==00
    68b4:	ac 27       	jz	$-166    	;abs 0x680e
    68b6:	1e 3c       	jmp	$+62     	;abs 0x68f4
    68b8:	1c 41 0e 00 	mov	14(r1),	r12	;0x0000e
    68bc:	0d 45       	mov	r5,	r13	;
    68be:	0e 41       	mov	r1,	r14	;
    68c0:	3e 50 3c 00 	add	#60,	r14	;#0x003c
    68c4:	b0 12 d6 99 	call	#39382		;#0x99d6
    68c8:	0c 93       	cmp	#0,	r12	;r3 As==00
    68ca:	14 20       	jnz	$+42     	;abs 0x68f4
    68cc:	81 43 3e 00 	mov	#0,	62(r1)	;r3 As==00, 0x003e
    68d0:	17 41 16 00 	mov	22(r1),	r7	;0x00016
    68d4:	0a 41       	mov	r1,	r10	;
    68d6:	3a 50 52 00 	add	#82,	r10	;#0x0052
    68da:	30 40 6e 54 	br	#0x546e		;
    68de:	81 93 40 00 	cmp	#0,	64(r1)	;r3 As==00, 0x0040
    68e2:	08 24       	jz	$+18     	;abs 0x68f4
    68e4:	1c 41 0e 00 	mov	14(r1),	r12	;0x0000e
    68e8:	0d 45       	mov	r5,	r13	;
    68ea:	0e 41       	mov	r1,	r14	;
    68ec:	3e 50 3c 00 	add	#60,	r14	;#0x003c
    68f0:	b0 12 d6 99 	call	#39382		;#0x99d6
    68f4:	f5 b0 40 00 	bit.b	#64,	6(r5)	;#0x0040
    68f8:	06 00 
    68fa:	02 24       	jz	$+6      	;abs 0x6900
    68fc:	80 00 0c 54 	mova	#21516,	r0	;0x0540c
    6900:	1c 41 26 00 	mov	38(r1),	r12	;0x00026
    6904:	06 3c       	jmp	$+14     	;abs 0x6912
    6906:	5c 93       	cmp.b	#1,	r12	;r3 As==01
    6908:	02 24       	jz	$+6      	;abs 0x690e
    690a:	80 00 22 5d 	mova	#23842,	r0	;0x05d22
    690e:	30 40 82 5d 	br	#0x5d82		;
    6912:	31 50 9a 00 	add	#154,	r1	;#0x009a
    6916:	64 17       	popm	#7,	r10	;16-bit words
    6918:	30 41       	ret			

0000691a <vfprintf>:
    691a:	0a 15       	pushm	#1,	r10	;16-bit words
    691c:	0a 4c       	mov	r12,	r10	;
    691e:	0b 4d       	mov	r13,	r11	;
    6920:	0f 4e       	mov	r14,	r15	;
    6922:	1c 42 04 1c 	mov	&0x1c04,r12	;0x1c04
    6926:	0d 4a       	mov	r10,	r13	;
    6928:	0e 4b       	mov	r11,	r14	;
    692a:	b0 12 62 53 	call	#21346		;#0x5362
    692e:	0a 17       	popm	#1,	r10	;16-bit words
    6930:	30 41       	ret			

00006932 <__sbprintf>:
    6932:	2a 15       	pushm	#3,	r10	;16-bit words
    6934:	31 80 3c 04 	sub	#1084,	r1	;#0x043c
    6938:	08 4c       	mov	r12,	r8	;
    693a:	0a 4d       	mov	r13,	r10	;
    693c:	1d 4d 06 00 	mov	6(r13),	r13	;
    6940:	2d c3       	bic	#2,	r13	;r3 As==10
    6942:	81 4d 06 00 	mov	r13,	6(r1)	;
    6946:	91 4a 3a 00 	mov	58(r10),58(r1)	;0x0003a, 0x003a
    694a:	3a 00 
    694c:	91 4a 08 00 	mov	8(r10),	8(r1)	;
    6950:	08 00 
    6952:	91 4a 12 00 	mov	18(r10),18(r1)	;0x00012, 0x0012
    6956:	12 00 
    6958:	91 4a 16 00 	mov	22(r10),22(r1)	;0x00016, 0x0016
    695c:	16 00 
    695e:	3d 40 3c 00 	mov	#60,	r13	;#0x003c
    6962:	0d 51       	add	r1,	r13	;
    6964:	81 4d 00 00 	mov	r13,	0(r1)	;
    6968:	3d 40 3c 00 	mov	#60,	r13	;#0x003c
    696c:	0d 51       	add	r1,	r13	;
    696e:	81 4d 0a 00 	mov	r13,	10(r1)	; 0x000a
    6972:	b1 40 00 04 	mov	#1024,	4(r1)	;#0x0400
    6976:	04 00 
    6978:	b1 40 00 04 	mov	#1024,	12(r1)	;#0x0400, 0x000c
    697c:	0c 00 
    697e:	81 43 0e 00 	mov	#0,	14(r1)	;r3 As==00, 0x000e
    6982:	0d 41       	mov	r1,	r13	;
    6984:	b0 12 62 53 	call	#21346		;#0x5362
    6988:	09 4c       	mov	r12,	r9	;
    698a:	0c 93       	cmp	#0,	r12	;r3 As==00
    698c:	07 38       	jl	$+16     	;abs 0x699c
    698e:	0c 48       	mov	r8,	r12	;
    6990:	0d 41       	mov	r1,	r13	;
    6992:	b0 12 7e 81 	call	#33150		;#0x817e
    6996:	0c 93       	cmp	#0,	r12	;r3 As==00
    6998:	01 24       	jz	$+4      	;abs 0x699c
    699a:	39 43       	mov	#-1,	r9	;r3 As==11
    699c:	f1 b0 40 00 	bit.b	#64,	6(r1)	;#0x0040
    69a0:	06 00 
    69a2:	03 24       	jz	$+8      	;abs 0x69aa
    69a4:	ba d0 40 00 	bis	#64,	6(r10)	;#0x0040
    69a8:	06 00 
    69aa:	0c 49       	mov	r9,	r12	;
    69ac:	31 50 3c 04 	add	#1084,	r1	;#0x043c
    69b0:	28 17       	popm	#3,	r10	;16-bit words
    69b2:	30 41       	ret			

000069b4 <__swsetup_r>:
    69b4:	2a 15       	pushm	#3,	r10	;16-bit words
    69b6:	08 4c       	mov	r12,	r8	;
    69b8:	0a 4d       	mov	r13,	r10	;
    69ba:	19 42 04 1c 	mov	&0x1c04,r9	;0x1c04
    69be:	09 93       	cmp	#0,	r9	;r3 As==00
    69c0:	06 24       	jz	$+14     	;abs 0x69ce
    69c2:	89 93 0c 00 	cmp	#0,	12(r9)	;r3 As==00, 0x000c
    69c6:	03 20       	jnz	$+8      	;abs 0x69ce
    69c8:	0c 49       	mov	r9,	r12	;
    69ca:	b0 12 56 82 	call	#33366		;#0x8256
    69ce:	3a 90 8e 44 	cmp	#17550,	r10	;#0x448e
    69d2:	03 20       	jnz	$+8      	;abs 0x69da
    69d4:	1a 49 02 00 	mov	2(r9),	r10	;
    69d8:	0b 3c       	jmp	$+24     	;abs 0x69f0
    69da:	3a 90 7c 44 	cmp	#17532,	r10	;#0x447c
    69de:	03 20       	jnz	$+8      	;abs 0x69e6
    69e0:	1a 49 04 00 	mov	4(r9),	r10	;
    69e4:	05 3c       	jmp	$+12     	;abs 0x69f0
    69e6:	3a 90 6a 44 	cmp	#17514,	r10	;#0x446a
    69ea:	02 20       	jnz	$+6      	;abs 0x69f0
    69ec:	1a 49 06 00 	mov	6(r9),	r10	;
    69f0:	1d 4a 06 00 	mov	6(r10),	r13	;
    69f4:	3d b2       	bit	#8,	r13	;r2 As==11
    69f6:	26 20       	jnz	$+78     	;abs 0x6a44
    69f8:	3d b0 10 00 	bit	#16,	r13	;#0x0010
    69fc:	09 20       	jnz	$+20     	;abs 0x6a10
    69fe:	b8 40 09 00 	mov	#9,	0(r8)	;
    6a02:	00 00 
    6a04:	3d d0 40 00 	bis	#64,	r13	;#0x0040
    6a08:	8a 4d 06 00 	mov	r13,	6(r10)	;
    6a0c:	3c 43       	mov	#-1,	r12	;r3 As==11
    6a0e:	4d 3c       	jmp	$+156    	;abs 0x6aaa
    6a10:	2d b2       	bit	#4,	r13	;r2 As==10
    6a12:	16 24       	jz	$+46     	;abs 0x6a40
    6a14:	1d 4a 1c 00 	mov	28(r10),r13	;0x0001c
    6a18:	0d 93       	cmp	#0,	r13	;r3 As==00
    6a1a:	0a 24       	jz	$+22     	;abs 0x6a30
    6a1c:	0c 4a       	mov	r10,	r12	;
    6a1e:	3c 50 24 00 	add	#36,	r12	;#0x0024
    6a22:	0d 9c       	cmp	r12,	r13	;
    6a24:	03 24       	jz	$+8      	;abs 0x6a2c
    6a26:	0c 48       	mov	r8,	r12	;
    6a28:	b0 12 86 96 	call	#38534		;#0x9686
    6a2c:	8a 43 1c 00 	mov	#0,	28(r10)	;r3 As==00, 0x001c
    6a30:	ba f0 db ff 	and	#65499,	6(r10)	;#0xffdb
    6a34:	06 00 
    6a36:	8a 43 02 00 	mov	#0,	2(r10)	;r3 As==00
    6a3a:	9a 4a 0a 00 	mov	10(r10),0(r10)	;0x0000a
    6a3e:	00 00 
    6a40:	ba d2 06 00 	bis	#8,	6(r10)	;r2 As==11
    6a44:	8a 93 0a 00 	cmp	#0,	10(r10)	;r3 As==00, 0x000a
    6a48:	0b 20       	jnz	$+24     	;abs 0x6a60
    6a4a:	1c 4a 06 00 	mov	6(r10),	r12	;
    6a4e:	3c f0 80 02 	and	#640,	r12	;#0x0280
    6a52:	3c 90 00 02 	cmp	#512,	r12	;#0x0200
    6a56:	04 24       	jz	$+10     	;abs 0x6a60
    6a58:	0c 48       	mov	r8,	r12	;
    6a5a:	0d 4a       	mov	r10,	r13	;
    6a5c:	b0 12 6a 85 	call	#34154		;#0x856a
    6a60:	1d 4a 06 00 	mov	6(r10),	r13	;
    6a64:	0c 4d       	mov	r13,	r12	;
    6a66:	1c f3       	and	#1,	r12	;r3 As==01
    6a68:	0c 93       	cmp	#0,	r12	;r3 As==00
    6a6a:	08 24       	jz	$+18     	;abs 0x6a7c
    6a6c:	8a 43 04 00 	mov	#0,	4(r10)	;r3 As==00
    6a70:	0c 43       	clr	r12		;
    6a72:	1c 8a 0c 00 	sub	12(r10),r12	;0x0000c
    6a76:	8a 4c 0e 00 	mov	r12,	14(r10)	; 0x000e
    6a7a:	06 3c       	jmp	$+14     	;abs 0x6a88
    6a7c:	2d b3       	bit	#2,	r13	;r3 As==10
    6a7e:	02 20       	jnz	$+6      	;abs 0x6a84
    6a80:	1c 4a 0c 00 	mov	12(r10),r12	;0x0000c
    6a84:	8a 4c 04 00 	mov	r12,	4(r10)	;
    6a88:	8a 93 0a 00 	cmp	#0,	10(r10)	;r3 As==00, 0x000a
    6a8c:	0d 20       	jnz	$+28     	;abs 0x6aa8
    6a8e:	1d 4a 06 00 	mov	6(r10),	r13	;
    6a92:	0c 4d       	mov	r13,	r12	;
    6a94:	3c f0 80 00 	and	#128,	r12	;#0x0080
    6a98:	0c 93       	cmp	#0,	r12	;r3 As==00
    6a9a:	07 24       	jz	$+16     	;abs 0x6aaa
    6a9c:	3d d0 40 00 	bis	#64,	r13	;#0x0040
    6aa0:	8a 4d 06 00 	mov	r13,	6(r10)	;
    6aa4:	3c 43       	mov	#-1,	r12	;r3 As==11
    6aa6:	01 3c       	jmp	$+4      	;abs 0x6aaa
    6aa8:	0c 43       	clr	r12		;
    6aaa:	28 17       	popm	#3,	r10	;16-bit words
    6aac:	30 41       	ret			

00006aae <quorem>:
    6aae:	6a 15       	pushm	#7,	r10	;16-bit words
    6ab0:	31 80 30 00 	sub	#48,	r1	;#0x0030
    6ab4:	1e 4d 08 00 	mov	8(r13),	r14	;
    6ab8:	8c 9e 08 00 	cmp	r14,	8(r12)	;
    6abc:	54 39       	jl	$+682    	;abs 0x6d66
    6abe:	81 4d 2e 00 	mov	r13,	46(r1)	; 0x002e
    6ac2:	81 4c 16 00 	mov	r12,	22(r1)	; 0x0016
    6ac6:	3d 50 0a 00 	add	#10,	r13	;#0x000a
    6aca:	81 4d 02 00 	mov	r13,	2(r1)	;
    6ace:	04 4e       	mov	r14,	r4	;
    6ad0:	34 53       	add	#-1,	r4	;r3 As==11
    6ad2:	0a 44       	mov	r4,	r10	;
    6ad4:	41 18 0a 5a 	rpt #2 { rlax.w	r10		;
    6ad8:	0d 5a       	add	r10,	r13	;
    6ada:	81 4d 14 00 	mov	r13,	20(r1)	; 0x0014
    6ade:	3c 50 0a 00 	add	#10,	r12	;#0x000a
    6ae2:	81 4c 0e 00 	mov	r12,	14(r1)	; 0x000e
    6ae6:	0a 5c       	add	r12,	r10	;
    6ae8:	2c 4a       	mov	@r10,	r12	;
    6aea:	1d 4a 02 00 	mov	2(r10),	r13	;
    6aee:	19 41 14 00 	mov	20(r1),	r9	;0x00014
    6af2:	2e 49       	mov	@r9,	r14	;
    6af4:	1e 53       	inc	r14		;
    6af6:	1f 49 02 00 	mov	2(r9),	r15	;
    6afa:	0f 63       	adc	r15		;
    6afc:	b0 12 6e c2 	call	#49774		;#0xc26e
    6b00:	81 4c 06 00 	mov	r12,	6(r1)	;
    6b04:	81 4d 08 00 	mov	r13,	8(r1)	;
    6b08:	1c 41 06 00 	mov	6(r1),	r12	;
    6b0c:	0c dd       	bis	r13,	r12	;
    6b0e:	0c 93       	cmp	#0,	r12	;r3 As==00
    6b10:	a9 24       	jz	$+340    	;abs 0x6c64
    6b12:	19 41 0e 00 	mov	14(r1),	r9	;0x0000e
    6b16:	1b 41 02 00 	mov	2(r1),	r11	;
    6b1a:	06 43       	clr	r6		;
    6b1c:	07 46       	mov	r6,	r7	;
    6b1e:	81 46 0a 00 	mov	r6,	10(r1)	; 0x000a
    6b22:	81 46 2c 00 	mov	r6,	44(r1)	; 0x002c
    6b26:	28 4b       	mov	@r11,	r8	;
    6b28:	91 4b 02 00 	mov	2(r11),	16(r1)	; 0x0010
    6b2c:	10 00 
    6b2e:	0c 48       	mov	r8,	r12	;
    6b30:	0d 43       	clr	r13		;
    6b32:	1e 41 06 00 	mov	6(r1),	r14	;
    6b36:	1f 41 08 00 	mov	8(r1),	r15	;
    6b3a:	81 4b 00 00 	mov	r11,	0(r1)	;
    6b3e:	b0 12 68 c4 	call	#50280		;#0xc468
    6b42:	05 46       	mov	r6,	r5	;
    6b44:	05 5c       	add	r12,	r5	;
    6b46:	0d 67       	addc	r7,	r13	;
    6b48:	0c 45       	mov	r5,	r12	;
    6b4a:	3e 40 10 00 	mov	#16,	r14	;#0x0010
    6b4e:	b0 12 38 c3 	call	#49976		;#0xc338
    6b52:	06 4c       	mov	r12,	r6	;
    6b54:	07 4d       	mov	r13,	r7	;
    6b56:	0c 48       	mov	r8,	r12	;
    6b58:	1d 41 10 00 	mov	16(r1),	r13	;0x00010
    6b5c:	3e 40 10 00 	mov	#16,	r14	;#0x0010
    6b60:	b0 12 38 c3 	call	#49976		;#0xc338
    6b64:	1e 41 06 00 	mov	6(r1),	r14	;
    6b68:	1f 41 08 00 	mov	8(r1),	r15	;
    6b6c:	b0 12 68 c4 	call	#50280		;#0xc468
    6b70:	08 46       	mov	r6,	r8	;
    6b72:	08 5c       	add	r12,	r8	;
    6b74:	0d 67       	addc	r7,	r13	;
    6b76:	0c 48       	mov	r8,	r12	;
    6b78:	3e 40 10 00 	mov	#16,	r14	;#0x0010
    6b7c:	b0 12 38 c3 	call	#49976		;#0xc338
    6b80:	06 4c       	mov	r12,	r6	;
    6b82:	07 4d       	mov	r13,	r7	;
    6b84:	2c 49       	mov	@r9,	r12	;
    6b86:	1d 41 0a 00 	mov	10(r1),	r13	;0x0000a
    6b8a:	0d 5c       	add	r12,	r13	;
    6b8c:	81 4d 18 00 	mov	r13,	24(r1)	; 0x0018
    6b90:	0d 43       	clr	r13		;
    6b92:	1d 61 2c 00 	addc	44(r1),	r13	;0x0002c
    6b96:	81 4d 1a 00 	mov	r13,	26(r1)	; 0x001a
    6b9a:	81 45 1c 00 	mov	r5,	28(r1)	; 0x001c
    6b9e:	81 43 1e 00 	mov	#0,	30(r1)	;r3 As==00, 0x001e
    6ba2:	1e 41 18 00 	mov	24(r1),	r14	;0x00018
    6ba6:	1f 41 1a 00 	mov	26(r1),	r15	;0x0001a
    6baa:	1e 81 1c 00 	sub	28(r1),	r14	;0x0001c
    6bae:	1f 71 1e 00 	subc	30(r1),	r15	;0x0001e
    6bb2:	81 4e 10 00 	mov	r14,	16(r1)	; 0x0010
    6bb6:	81 4f 12 00 	mov	r15,	18(r1)	; 0x0012
    6bba:	1d 49 02 00 	mov	2(r9),	r13	;
    6bbe:	3e 40 10 00 	mov	#16,	r14	;#0x0010
    6bc2:	b0 12 38 c3 	call	#49976		;#0xc338
    6bc6:	81 48 20 00 	mov	r8,	32(r1)	; 0x0020
    6bca:	81 43 22 00 	mov	#0,	34(r1)	;r3 As==00, 0x0022
    6bce:	1c 81 20 00 	sub	32(r1),	r12	;0x00020
    6bd2:	1d 71 22 00 	subc	34(r1),	r13	;0x00022
    6bd6:	81 4c 0a 00 	mov	r12,	10(r1)	; 0x000a
    6bda:	81 4d 0c 00 	mov	r13,	12(r1)	; 0x000c
    6bde:	1c 41 10 00 	mov	16(r1),	r12	;0x00010
    6be2:	1d 41 12 00 	mov	18(r1),	r13	;0x00012
    6be6:	3e 40 10 00 	mov	#16,	r14	;#0x0010
    6bea:	b0 12 04 53 	call	#21252		;#0x5304
    6bee:	15 41 0a 00 	mov	10(r1),	r5	;0x0000a
    6bf2:	05 5c       	add	r12,	r5	;
    6bf4:	18 41 0c 00 	mov	12(r1),	r8	;0x0000c
    6bf8:	08 6d       	addc	r13,	r8	;
    6bfa:	0c 45       	mov	r5,	r12	;
    6bfc:	0d 48       	mov	r8,	r13	;
    6bfe:	3e 40 10 00 	mov	#16,	r14	;#0x0010
    6c02:	b0 12 04 53 	call	#21252		;#0x5304
    6c06:	81 4c 0a 00 	mov	r12,	10(r1)	; 0x000a
    6c0a:	81 4d 2c 00 	mov	r13,	44(r1)	; 0x002c
    6c0e:	0c 45       	mov	r5,	r12	;
    6c10:	0d 48       	mov	r8,	r13	;
    6c12:	3e 40 10 00 	mov	#16,	r14	;#0x0010
    6c16:	b0 12 90 52 	call	#21136		;#0x5290
    6c1a:	1e 41 10 00 	mov	16(r1),	r14	;0x00010
    6c1e:	0c de       	bis	r14,	r12	;
    6c20:	89 4c 00 00 	mov	r12,	0(r9)	;
    6c24:	89 4d 02 00 	mov	r13,	2(r9)	;
    6c28:	29 52       	add	#4,	r9	;r2 As==10
    6c2a:	2b 41       	mov	@r1,	r11	;
    6c2c:	2b 52       	add	#4,	r11	;r2 As==10
    6c2e:	81 9b 14 00 	cmp	r11,	20(r1)	; 0x0014
    6c32:	79 2f       	jc	$-268    	;abs 0x6b26
    6c34:	2c 4a       	mov	@r10,	r12	;
    6c36:	1c da 02 00 	bis	2(r10),	r12	;
    6c3a:	0c 93       	cmp	#0,	r12	;r3 As==00
    6c3c:	13 20       	jnz	$+40     	;abs 0x6c64
    6c3e:	0c 44       	mov	r4,	r12	;
    6c40:	3a 50 fc ff 	add	#65532,	r10	;#0xfffc
    6c44:	81 9a 0e 00 	cmp	r10,	14(r1)	; 0x000e
    6c48:	06 28       	jnc	$+14     	;abs 0x6c56
    6c4a:	04 4c       	mov	r12,	r4	;
    6c4c:	19 41 16 00 	mov	22(r1),	r9	;0x00016
    6c50:	89 4c 08 00 	mov	r12,	8(r9)	;
    6c54:	07 3c       	jmp	$+16     	;abs 0x6c64
    6c56:	2d 4a       	mov	@r10,	r13	;
    6c58:	1d da 02 00 	bis	2(r10),	r13	;
    6c5c:	0d 93       	cmp	#0,	r13	;r3 As==00
    6c5e:	f5 23       	jnz	$-20     	;abs 0x6c4a
    6c60:	3c 53       	add	#-1,	r12	;r3 As==11
    6c62:	ee 3f       	jmp	$-34     	;abs 0x6c40
    6c64:	1c 41 16 00 	mov	22(r1),	r12	;0x00016
    6c68:	1d 41 2e 00 	mov	46(r1),	r13	;0x0002e
    6c6c:	b0 12 10 8f 	call	#36624		;#0x8f10
    6c70:	0c 93       	cmp	#0,	r12	;r3 As==00
    6c72:	76 38       	jl	$+238    	;abs 0x6d60
    6c74:	91 53 06 00 	inc	6(r1)		;
    6c78:	81 63 08 00 	adc	8(r1)		;
    6c7c:	1a 41 0e 00 	mov	14(r1),	r10	;0x0000e
    6c80:	17 41 02 00 	mov	2(r1),	r7	;
    6c84:	09 43       	clr	r9		;
    6c86:	08 49       	mov	r9,	r8	;
    6c88:	25 47       	mov	@r7,	r5	;
    6c8a:	16 47 02 00 	mov	2(r7),	r6	;
    6c8e:	2c 4a       	mov	@r10,	r12	;
    6c90:	09 5c       	add	r12,	r9	;
    6c92:	81 49 24 00 	mov	r9,	36(r1)	; 0x0024
    6c96:	0d 43       	clr	r13		;
    6c98:	0d 68       	addc	r8,	r13	;
    6c9a:	81 4d 26 00 	mov	r13,	38(r1)	; 0x0026
    6c9e:	81 45 28 00 	mov	r5,	40(r1)	; 0x0028
    6ca2:	81 43 2a 00 	mov	#0,	42(r1)	;r3 As==00, 0x002a
    6ca6:	1d 41 24 00 	mov	36(r1),	r13	;0x00024
    6caa:	1e 41 26 00 	mov	38(r1),	r14	;0x00026
    6cae:	1d 81 28 00 	sub	40(r1),	r13	;0x00028
    6cb2:	1e 71 2a 00 	subc	42(r1),	r14	;0x0002a
    6cb6:	81 4d 02 00 	mov	r13,	2(r1)	;
    6cba:	81 4e 04 00 	mov	r14,	4(r1)	;
    6cbe:	1d 4a 02 00 	mov	2(r10),	r13	;
    6cc2:	3e 40 10 00 	mov	#16,	r14	;#0x0010
    6cc6:	b0 12 38 c3 	call	#49976		;#0xc338
    6cca:	08 4c       	mov	r12,	r8	;
    6ccc:	09 4d       	mov	r13,	r9	;
    6cce:	0c 45       	mov	r5,	r12	;
    6cd0:	0d 46       	mov	r6,	r13	;
    6cd2:	3e 40 10 00 	mov	#16,	r14	;#0x0010
    6cd6:	b0 12 38 c3 	call	#49976		;#0xc338
    6cda:	08 8c       	sub	r12,	r8	;
    6cdc:	09 7d       	subc	r13,	r9	;
    6cde:	1c 41 02 00 	mov	2(r1),	r12	;
    6ce2:	1d 41 04 00 	mov	4(r1),	r13	;
    6ce6:	3e 40 10 00 	mov	#16,	r14	;#0x0010
    6cea:	b0 12 04 53 	call	#21252		;#0x5304
    6cee:	06 48       	mov	r8,	r6	;
    6cf0:	06 5c       	add	r12,	r6	;
    6cf2:	05 49       	mov	r9,	r5	;
    6cf4:	05 6d       	addc	r13,	r5	;
    6cf6:	0c 46       	mov	r6,	r12	;
    6cf8:	0d 45       	mov	r5,	r13	;
    6cfa:	3e 40 10 00 	mov	#16,	r14	;#0x0010
    6cfe:	b0 12 04 53 	call	#21252		;#0x5304
    6d02:	09 4c       	mov	r12,	r9	;
    6d04:	08 4d       	mov	r13,	r8	;
    6d06:	0c 46       	mov	r6,	r12	;
    6d08:	0d 45       	mov	r5,	r13	;
    6d0a:	3e 40 10 00 	mov	#16,	r14	;#0x0010
    6d0e:	b0 12 90 52 	call	#21136		;#0x5290
    6d12:	1e 41 02 00 	mov	2(r1),	r14	;
    6d16:	0c de       	bis	r14,	r12	;
    6d18:	8a 4c 00 00 	mov	r12,	0(r10)	;
    6d1c:	8a 4d 02 00 	mov	r13,	2(r10)	;
    6d20:	2a 52       	add	#4,	r10	;r2 As==10
    6d22:	27 52       	add	#4,	r7	;r2 As==10
    6d24:	81 97 14 00 	cmp	r7,	20(r1)	; 0x0014
    6d28:	af 2f       	jc	$-160    	;abs 0x6c88
    6d2a:	0c 44       	mov	r4,	r12	;
    6d2c:	41 18 0c 5c 	rpt #2 { rlax.w	r12		;
    6d30:	1c 51 0e 00 	add	14(r1),	r12	;0x0000e
    6d34:	2d 4c       	mov	@r12,	r13	;
    6d36:	1d dc 02 00 	bis	2(r12),	r13	;
    6d3a:	0d 93       	cmp	#0,	r13	;r3 As==00
    6d3c:	11 20       	jnz	$+36     	;abs 0x6d60
    6d3e:	3c 50 fc ff 	add	#65532,	r12	;#0xfffc
    6d42:	81 9c 0e 00 	cmp	r12,	14(r1)	; 0x000e
    6d46:	05 28       	jnc	$+12     	;abs 0x6d52
    6d48:	19 41 16 00 	mov	22(r1),	r9	;0x00016
    6d4c:	89 44 08 00 	mov	r4,	8(r9)	;
    6d50:	07 3c       	jmp	$+16     	;abs 0x6d60
    6d52:	2d 4c       	mov	@r12,	r13	;
    6d54:	1d dc 02 00 	bis	2(r12),	r13	;
    6d58:	0d 93       	cmp	#0,	r13	;r3 As==00
    6d5a:	f6 23       	jnz	$-18     	;abs 0x6d48
    6d5c:	34 53       	add	#-1,	r4	;r3 As==11
    6d5e:	ef 3f       	jmp	$-32     	;abs 0x6d3e
    6d60:	1c 41 06 00 	mov	6(r1),	r12	;
    6d64:	01 3c       	jmp	$+4      	;abs 0x6d68
    6d66:	0c 43       	clr	r12		;
    6d68:	31 50 30 00 	add	#48,	r1	;#0x0030
    6d6c:	64 17       	popm	#7,	r10	;16-bit words
    6d6e:	30 41       	ret			

00006d70 <_dtoa_r>:
    6d70:	6a 15       	pushm	#7,	r10	;16-bit words
    6d72:	31 80 56 00 	sub	#86,	r1	;#0x0056
    6d76:	81 4c 1e 00 	mov	r12,	30(r1)	; 0x001e
    6d7a:	91 41 66 00 	mov	102(r1),40(r1)	;0x00066, 0x0028
    6d7e:	28 00 
    6d80:	91 41 68 00 	mov	104(r1),48(r1)	;0x00068, 0x0030
    6d84:	30 00 
    6d86:	19 41 6a 00 	mov	106(r1),r9	;0x0006a
    6d8a:	17 41 6c 00 	mov	108(r1),r7	;0x0006c
    6d8e:	81 4d 24 00 	mov	r13,	36(r1)	; 0x0024
    6d92:	81 4e 3e 00 	mov	r14,	62(r1)	; 0x003e
    6d96:	81 4f 48 00 	mov	r15,	72(r1)	; 0x0048
    6d9a:	1a 41 6e 00 	mov	110(r1),r10	;0x0006e
    6d9e:	91 41 28 00 	mov	40(r1),	44(r1)	;0x00028, 0x002c
    6da2:	2c 00 
    6da4:	91 41 30 00 	mov	48(r1),	46(r1)	;0x00030, 0x002e
    6da8:	2e 00 
    6daa:	05 49       	mov	r9,	r5	;
    6dac:	81 47 14 00 	mov	r7,	20(r1)	; 0x0014
    6db0:	8c 93 12 00 	cmp	#0,	18(r12)	;r3 As==00, 0x0012
    6db4:	0f 20       	jnz	$+32     	;abs 0x6dd4
    6db6:	3c 42       	mov	#8,	r12	;r2 As==11
    6db8:	b0 12 68 86 	call	#34408		;#0x8668
    6dbc:	1d 41 1e 00 	mov	30(r1),	r13	;0x0001e
    6dc0:	8d 4c 12 00 	mov	r12,	18(r13)	; 0x0012
    6dc4:	8c 43 02 00 	mov	#0,	2(r12)	;r3 As==00
    6dc8:	8c 43 04 00 	mov	#0,	4(r12)	;r3 As==00
    6dcc:	8c 43 00 00 	mov	#0,	0(r12)	;r3 As==00
    6dd0:	8c 43 06 00 	mov	#0,	6(r12)	;r3 As==00
    6dd4:	1e 41 1e 00 	mov	30(r1),	r14	;0x0001e
    6dd8:	1c 4e 12 00 	mov	18(r14),r12	;0x00012
    6ddc:	28 4c       	mov	@r12,	r8	;
    6dde:	08 93       	cmp	#0,	r8	;r3 As==00
    6de0:	14 24       	jz	$+42     	;abs 0x6e0a
    6de2:	1d 4c 02 00 	mov	2(r12),	r13	;
    6de6:	88 4d 02 00 	mov	r13,	2(r8)	;
    6dea:	1c 43       	mov	#1,	r12	;r3 As==01
    6dec:	b0 12 46 52 	call	#21062		;#0x5246
    6df0:	88 4c 04 00 	mov	r12,	4(r8)	;
    6df4:	1c 41 1e 00 	mov	30(r1),	r12	;0x0001e
    6df8:	0d 48       	mov	r8,	r13	;
    6dfa:	b0 12 64 87 	call	#34660		;#0x8764
    6dfe:	1d 41 1e 00 	mov	30(r1),	r13	;0x0001e
    6e02:	1c 4d 12 00 	mov	18(r13),r12	;0x00012
    6e06:	8c 43 00 00 	mov	#0,	0(r12)	;r3 As==00
    6e0a:	07 93       	cmp	#0,	r7	;r3 As==00
    6e0c:	08 34       	jge	$+18     	;abs 0x6e1e
    6e0e:	9a 43 00 00 	mov	#1,	0(r10)	;r3 As==01
    6e12:	37 f0 ff 7f 	and	#32767,	r7	;#0x7fff
    6e16:	05 49       	mov	r9,	r5	;
    6e18:	81 47 14 00 	mov	r7,	20(r1)	; 0x0014
    6e1c:	02 3c       	jmp	$+6      	;abs 0x6e22
    6e1e:	8a 43 00 00 	mov	#0,	0(r10)	;r3 As==00
    6e22:	06 45       	mov	r5,	r6	;
    6e24:	1c 41 14 00 	mov	20(r1),	r12	;0x00014
    6e28:	3c f0 f0 7f 	and	#32752,	r12	;#0x7ff0
    6e2c:	3c 90 f0 7f 	cmp	#32752,	r12	;#0x7ff0
    6e30:	2a 20       	jnz	$+86     	;abs 0x6e86
    6e32:	17 41 48 00 	mov	72(r1),	r7	;0x00048
    6e36:	b7 40 0f 27 	mov	#9999,	0(r7)	;#0x270f
    6e3a:	00 00 
    6e3c:	15 41 28 00 	mov	40(r1),	r5	;0x00028
    6e40:	15 d1 30 00 	bis	48(r1),	r5	;0x00030
    6e44:	05 93       	cmp	#0,	r5	;r3 As==00
    6e46:	0a 20       	jnz	$+22     	;abs 0x6e5c
    6e48:	17 41 14 00 	mov	20(r1),	r7	;0x00014
    6e4c:	37 f0 0f 00 	and	#15,	r7	;#0x000f
    6e50:	07 d6       	bis	r6,	r7	;
    6e52:	07 93       	cmp	#0,	r7	;r3 As==00
    6e54:	03 20       	jnz	$+8      	;abs 0x6e5c
    6e56:	3c 40 5b 44 	mov	#17499,	r12	;#0x445b
    6e5a:	02 3c       	jmp	$+6      	;abs 0x6e60
    6e5c:	3c 40 64 44 	mov	#17508,	r12	;#0x4464
    6e60:	81 93 70 00 	cmp	#0,	112(r1)	;r3 As==00, 0x0070
    6e64:	02 20       	jnz	$+6      	;abs 0x6e6a
    6e66:	80 00 e8 7f 	mova	#32744,	r0	;0x07fe8
    6e6a:	0d 4c       	mov	r12,	r13	;
    6e6c:	cc 93 03 00 	cmp.b	#0,	3(r12)	;r3 As==00
    6e70:	02 24       	jz	$+6      	;abs 0x6e76
    6e72:	3d 52       	add	#8,	r13	;r2 As==11
    6e74:	02 3c       	jmp	$+6      	;abs 0x6e7a
    6e76:	3d 50 03 00 	add	#3,	r13	;
    6e7a:	17 41 70 00 	mov	112(r1),r7	;0x00070
    6e7e:	87 4d 00 00 	mov	r13,	0(r7)	;
    6e82:	30 40 e8 7f 	br	#0x7fe8		;
    6e86:	81 43 00 00 	mov	#0,	0(r1)	;r3 As==00
    6e8a:	81 43 02 00 	mov	#0,	2(r1)	;r3 As==00
    6e8e:	81 43 04 00 	mov	#0,	4(r1)	;r3 As==00
    6e92:	81 43 06 00 	mov	#0,	6(r1)	;r3 As==00
    6e96:	1c 41 28 00 	mov	40(r1),	r12	;0x00028
    6e9a:	1d 41 30 00 	mov	48(r1),	r13	;0x00030
    6e9e:	0e 45       	mov	r5,	r14	;
    6ea0:	1f 41 14 00 	mov	20(r1),	r15	;0x00014
    6ea4:	b0 12 96 bc 	call	#48278		;#0xbc96
    6ea8:	0c 93       	cmp	#0,	r12	;r3 As==00
    6eaa:	12 20       	jnz	$+38     	;abs 0x6ed0
    6eac:	17 41 48 00 	mov	72(r1),	r7	;0x00048
    6eb0:	97 43 00 00 	mov	#1,	0(r7)	;r3 As==01
    6eb4:	81 93 70 00 	cmp	#0,	112(r1)	;r3 As==00, 0x0070
    6eb8:	02 20       	jnz	$+6      	;abs 0x6ebe
    6eba:	80 00 c0 7f 	mova	#32704,	r0	;0x07fc0
    6ebe:	17 41 70 00 	mov	112(r1),r7	;0x00070
    6ec2:	b7 40 69 44 	mov	#17513,	0(r7)	;#0x4469
    6ec6:	00 00 
    6ec8:	3c 40 68 44 	mov	#17512,	r12	;#0x4468
    6ecc:	30 40 e8 7f 	br	#0x7fe8		;
    6ed0:	91 41 28 00 	mov	40(r1),	0(r1)	;0x00028
    6ed4:	00 00 
    6ed6:	91 41 30 00 	mov	48(r1),	2(r1)	;0x00030
    6eda:	02 00 
    6edc:	81 45 04 00 	mov	r5,	4(r1)	;
    6ee0:	91 41 14 00 	mov	20(r1),	6(r1)	;0x00014
    6ee4:	06 00 
    6ee6:	1c 41 1e 00 	mov	30(r1),	r12	;0x0001e
    6eea:	0d 41       	mov	r1,	r13	;
    6eec:	3d 50 54 00 	add	#84,	r13	;#0x0054
    6ef0:	0e 41       	mov	r1,	r14	;
    6ef2:	3e 50 52 00 	add	#82,	r14	;#0x0052
    6ef6:	b0 12 30 93 	call	#37680		;#0x9330
    6efa:	81 4c 26 00 	mov	r12,	38(r1)	; 0x0026
    6efe:	0c 45       	mov	r5,	r12	;
    6f00:	1d 41 14 00 	mov	20(r1),	r13	;0x00014
    6f04:	3e 40 14 00 	mov	#20,	r14	;#0x0014
    6f08:	b0 12 38 c3 	call	#49976		;#0xc338
    6f0c:	3c f0 ff 07 	and	#2047,	r12	;#0x07ff
    6f10:	0c 93       	cmp	#0,	r12	;r3 As==00
    6f12:	19 24       	jz	$+52     	;abs 0x6f46
    6f14:	91 41 28 00 	mov	40(r1),	12(r1)	;0x00028, 0x000c
    6f18:	0c 00 
    6f1a:	91 41 30 00 	mov	48(r1),	14(r1)	;0x00030, 0x000e
    6f1e:	0e 00 
    6f20:	81 45 10 00 	mov	r5,	16(r1)	; 0x0010
    6f24:	91 41 14 00 	mov	20(r1),	18(r1)	;0x00014, 0x0012
    6f28:	12 00 
    6f2a:	1d 41 12 00 	mov	18(r1),	r13	;0x00012
    6f2e:	3d f0 0f 00 	and	#15,	r13	;#0x000f
    6f32:	3d d0 f0 3f 	bis	#16368,	r13	;#0x3ff0
    6f36:	81 4d 12 00 	mov	r13,	18(r1)	; 0x0012
    6f3a:	06 4c       	mov	r12,	r6	;
    6f3c:	36 50 01 fc 	add	#64513,	r6	;#0xfc01
    6f40:	81 43 4a 00 	mov	#0,	74(r1)	;r3 As==00, 0x004a
    6f44:	38 3c       	jmp	$+114    	;abs 0x6fb6
    6f46:	1a 41 52 00 	mov	82(r1),	r10	;0x00052
    6f4a:	1a 51 54 00 	add	84(r1),	r10	;0x00054
    6f4e:	1c 41 28 00 	mov	40(r1),	r12	;0x00028
    6f52:	1d 41 30 00 	mov	48(r1),	r13	;0x00030
    6f56:	3a 90 ef fb 	cmp	#64495,	r10	;#0xfbef
    6f5a:	14 38       	jl	$+42     	;abs 0x6f84
    6f5c:	0e 4a       	mov	r10,	r14	;
    6f5e:	3e 50 12 04 	add	#1042,	r14	;#0x0412
    6f62:	0f 43       	clr	r15		;
    6f64:	b0 12 38 c3 	call	#49976		;#0xc338
    6f68:	08 4c       	mov	r12,	r8	;
    6f6a:	09 4d       	mov	r13,	r9	;
    6f6c:	0c 45       	mov	r5,	r12	;
    6f6e:	1d 41 14 00 	mov	20(r1),	r13	;0x00014
    6f72:	3e 40 0e fc 	mov	#64526,	r14	;#0xfc0e
    6f76:	0e 8a       	sub	r10,	r14	;
    6f78:	0f 43       	clr	r15		;
    6f7a:	b0 12 90 52 	call	#21136		;#0x5290
    6f7e:	0c d8       	bis	r8,	r12	;
    6f80:	0d d9       	bis	r9,	r13	;
    6f82:	06 3c       	jmp	$+14     	;abs 0x6f90
    6f84:	3e 40 ee fb 	mov	#64494,	r14	;#0xfbee
    6f88:	0e 8a       	sub	r10,	r14	;
    6f8a:	0f 43       	clr	r15		;
    6f8c:	b0 12 90 52 	call	#21136		;#0x5290
    6f90:	b0 12 fe bf 	call	#49150		;#0xbffe
    6f94:	81 4c 0c 00 	mov	r12,	12(r1)	; 0x000c
    6f98:	81 4d 0e 00 	mov	r13,	14(r1)	; 0x000e
    6f9c:	81 4e 10 00 	mov	r14,	16(r1)	; 0x0010
    6fa0:	81 4f 12 00 	mov	r15,	18(r1)	; 0x0012
    6fa4:	81 53 10 00 	add	#0,	16(r1)	;r3 As==00, 0x0010
    6fa8:	b1 60 10 fe 	addc	#65040,	18(r1)	;#0xfe10, 0x0012
    6fac:	12 00 
    6fae:	06 4a       	mov	r10,	r6	;
    6fb0:	36 53       	add	#-1,	r6	;r3 As==11
    6fb2:	91 43 4a 00 	mov	#1,	74(r1)	;r3 As==01, 0x004a
    6fb6:	18 41 0c 00 	mov	12(r1),	r8	;0x0000c
    6fba:	19 41 0e 00 	mov	14(r1),	r9	;0x0000e
    6fbe:	1a 41 10 00 	mov	16(r1),	r10	;0x00010
    6fc2:	1b 41 12 00 	mov	18(r1),	r11	;0x00012
    6fc6:	0c 43       	clr	r12		;
    6fc8:	0d 4c       	mov	r12,	r13	;
    6fca:	0e 4c       	mov	r12,	r14	;
    6fcc:	3f 40 f8 3f 	mov	#16376,	r15	;#0x3ff8
    6fd0:	b0 12 8e b4 	call	#46222		;#0xb48e
    6fd4:	34 40 f4 b4 	mov	#46324,	r4	;#0xb4f4
    6fd8:	08 4c       	mov	r12,	r8	;
    6fda:	09 4d       	mov	r13,	r9	;
    6fdc:	0a 4e       	mov	r14,	r10	;
    6fde:	0b 4f       	mov	r15,	r11	;
    6fe0:	3c 40 61 43 	mov	#17249,	r12	;#0x4361
    6fe4:	3d 40 6f 63 	mov	#25455,	r13	;#0x636f
    6fe8:	3e 40 a7 87 	mov	#34727,	r14	;#0x87a7
    6fec:	3f 40 d2 3f 	mov	#16338,	r15	;#0x3fd2
    6ff0:	84 12       	call	r4		;
    6ff2:	37 40 2c b4 	mov	#46124,	r7	;#0xb42c
    6ff6:	08 4c       	mov	r12,	r8	;
    6ff8:	09 4d       	mov	r13,	r9	;
    6ffa:	0a 4e       	mov	r14,	r10	;
    6ffc:	0b 4f       	mov	r15,	r11	;
    6ffe:	3c 40 b3 c8 	mov	#51379,	r12	;#0xc8b3
    7002:	3d 40 60 8b 	mov	#35680,	r13	;#0x8b60
    7006:	3e 40 28 8a 	mov	#35368,	r14	;#0x8a28
    700a:	3f 40 c6 3f 	mov	#16326,	r15	;#0x3fc6
    700e:	87 12       	call	r7		;
    7010:	81 4c 0c 00 	mov	r12,	12(r1)	; 0x000c
    7014:	81 4d 16 00 	mov	r13,	22(r1)	; 0x0016
    7018:	81 4e 20 00 	mov	r14,	32(r1)	; 0x0020
    701c:	81 4f 22 00 	mov	r15,	34(r1)	; 0x0022
    7020:	0c 46       	mov	r6,	r12	;
    7022:	0d 46       	mov	r6,	r13	;
    7024:	4e 18 0d 11 	rpt #15 { rrax.w	r13		;
    7028:	b0 12 d0 be 	call	#48848		;#0xbed0
    702c:	08 4c       	mov	r12,	r8	;
    702e:	09 4d       	mov	r13,	r9	;
    7030:	0a 4e       	mov	r14,	r10	;
    7032:	0b 4f       	mov	r15,	r11	;
    7034:	3c 40 fb 79 	mov	#31227,	r12	;#0x79fb
    7038:	3d 40 9f 50 	mov	#20639,	r13	;#0x509f
    703c:	3e 40 13 44 	mov	#17427,	r14	;#0x4413
    7040:	3f 40 d3 3f 	mov	#16339,	r15	;#0x3fd3
    7044:	84 12       	call	r4		;
    7046:	18 41 0c 00 	mov	12(r1),	r8	;0x0000c
    704a:	19 41 16 00 	mov	22(r1),	r9	;0x00016
    704e:	1a 41 20 00 	mov	32(r1),	r10	;0x00020
    7052:	1b 41 22 00 	mov	34(r1),	r11	;0x00022
    7056:	87 12       	call	r7		;
    7058:	07 4c       	mov	r12,	r7	;
    705a:	08 4d       	mov	r13,	r8	;
    705c:	09 4e       	mov	r14,	r9	;
    705e:	0a 4f       	mov	r15,	r10	;
    7060:	b0 12 66 bf 	call	#48998		;#0xbf66
    7064:	04 4c       	mov	r12,	r4	;
    7066:	81 43 00 00 	mov	#0,	0(r1)	;r3 As==00
    706a:	81 43 02 00 	mov	#0,	2(r1)	;r3 As==00
    706e:	81 43 04 00 	mov	#0,	4(r1)	;r3 As==00
    7072:	81 43 06 00 	mov	#0,	6(r1)	;r3 As==00
    7076:	0c 47       	mov	r7,	r12	;
    7078:	0d 48       	mov	r8,	r13	;
    707a:	0e 49       	mov	r9,	r14	;
    707c:	0f 4a       	mov	r10,	r15	;
    707e:	b0 12 5e be 	call	#48734		;#0xbe5e
    7082:	0c 93       	cmp	#0,	r12	;r3 As==00
    7084:	17 34       	jge	$+48     	;abs 0x70b4
    7086:	0c 44       	mov	r4,	r12	;
    7088:	0d 44       	mov	r4,	r13	;
    708a:	4e 18 0d 11 	rpt #15 { rrax.w	r13		;
    708e:	b0 12 d0 be 	call	#48848		;#0xbed0
    7092:	81 4c 00 00 	mov	r12,	0(r1)	;
    7096:	81 4d 02 00 	mov	r13,	2(r1)	;
    709a:	81 4e 04 00 	mov	r14,	4(r1)	;
    709e:	81 4f 06 00 	mov	r15,	6(r1)	;
    70a2:	0c 47       	mov	r7,	r12	;
    70a4:	0d 48       	mov	r8,	r13	;
    70a6:	0e 49       	mov	r9,	r14	;
    70a8:	0f 4a       	mov	r10,	r15	;
    70aa:	b0 12 08 bd 	call	#48392		;#0xbd08
    70ae:	0c 93       	cmp	#0,	r12	;r3 As==00
    70b0:	01 24       	jz	$+4      	;abs 0x70b4
    70b2:	34 53       	add	#-1,	r4	;r3 As==11
    70b4:	39 40 16 00 	mov	#22,	r9	;#0x0016
    70b8:	09 94       	cmp	r4,	r9	;
    70ba:	20 28       	jnc	$+66     	;abs 0x70fc
    70bc:	0f 44       	mov	r4,	r15	;
    70be:	42 18 0f 5f 	rpt #3 { rlax.w	r15		;
    70c2:	3f 50 06 45 	add	#17670,	r15	;#0x4506
    70c6:	91 41 28 00 	mov	40(r1),	0(r1)	;0x00028
    70ca:	00 00 
    70cc:	91 41 30 00 	mov	48(r1),	2(r1)	;0x00030
    70d0:	02 00 
    70d2:	81 45 04 00 	mov	r5,	4(r1)	;
    70d6:	91 41 14 00 	mov	20(r1),	6(r1)	;0x00014
    70da:	06 00 
    70dc:	2c 4f       	mov	@r15,	r12	;
    70de:	1d 4f 02 00 	mov	2(r15),	r13	;
    70e2:	1e 4f 04 00 	mov	4(r15),	r14	;
    70e6:	1f 4f 06 00 	mov	6(r15),	r15	;
    70ea:	b0 12 7a bd 	call	#48506		;#0xbd7a
    70ee:	0a 43       	clr	r10		;
    70f0:	0a 9c       	cmp	r12,	r10	;
    70f2:	07 34       	jge	$+16     	;abs 0x7102
    70f4:	34 53       	add	#-1,	r4	;r3 As==11
    70f6:	81 4a 44 00 	mov	r10,	68(r1)	; 0x0044
    70fa:	05 3c       	jmp	$+12     	;abs 0x7106
    70fc:	91 43 44 00 	mov	#1,	68(r1)	;r3 As==01, 0x0044
    7100:	02 3c       	jmp	$+6      	;abs 0x7106
    7102:	81 43 44 00 	mov	#0,	68(r1)	;r3 As==00, 0x0044
    7106:	1c 41 52 00 	mov	82(r1),	r12	;0x00052
    710a:	0c 86       	sub	r6,	r12	;
    710c:	3c 53       	add	#-1,	r12	;r3 As==11
    710e:	81 4c 20 00 	mov	r12,	32(r1)	; 0x0020
    7112:	0c 93       	cmp	#0,	r12	;r3 As==00
    7114:	07 34       	jge	$+16     	;abs 0x7124
    7116:	07 43       	clr	r7		;
    7118:	07 8c       	sub	r12,	r7	;
    711a:	81 47 22 00 	mov	r7,	34(r1)	; 0x0022
    711e:	81 43 20 00 	mov	#0,	32(r1)	;r3 As==00, 0x0020
    7122:	02 3c       	jmp	$+6      	;abs 0x7128
    7124:	81 43 22 00 	mov	#0,	34(r1)	;r3 As==00, 0x0022
    7128:	04 93       	cmp	#0,	r4	;r3 As==00
    712a:	07 38       	jl	$+16     	;abs 0x713a
    712c:	81 54 20 00 	add	r4,	32(r1)	; 0x0020
    7130:	81 44 42 00 	mov	r4,	66(r1)	; 0x0042
    7134:	81 43 34 00 	mov	#0,	52(r1)	;r3 As==00, 0x0034
    7138:	08 3c       	jmp	$+18     	;abs 0x714a
    713a:	81 84 22 00 	sub	r4,	34(r1)	; 0x0022
    713e:	07 43       	clr	r7		;
    7140:	07 84       	sub	r4,	r7	;
    7142:	81 47 34 00 	mov	r7,	52(r1)	; 0x0034
    7146:	81 43 42 00 	mov	#0,	66(r1)	;r3 As==00, 0x0042
    714a:	39 40 09 00 	mov	#9,	r9	;
    714e:	19 91 24 00 	cmp	36(r1),	r9	;0x00024
    7152:	40 28       	jnc	$+130    	;abs 0x71d4
    7154:	3a 40 05 00 	mov	#5,	r10	;
    7158:	1a 91 24 00 	cmp	36(r1),	r10	;0x00024
    715c:	05 34       	jge	$+12     	;abs 0x7168
    715e:	b1 50 fc ff 	add	#65532,	36(r1)	;#0xfffc, 0x0024
    7162:	24 00 
    7164:	09 43       	clr	r9		;
    7166:	01 3c       	jmp	$+4      	;abs 0x716a
    7168:	19 43       	mov	#1,	r9	;r3 As==01
    716a:	b1 90 03 00 	cmp	#3,	36(r1)	; 0x0024
    716e:	24 00 
    7170:	23 24       	jz	$+72     	;abs 0x71b8
    7172:	3c 40 03 00 	mov	#3,	r12	;
    7176:	1c 91 24 00 	cmp	36(r1),	r12	;0x00024
    717a:	06 38       	jl	$+14     	;abs 0x7188
    717c:	a1 93 24 00 	cmp	#2,	36(r1)	;r3 As==10, 0x0024
    7180:	38 20       	jnz	$+114    	;abs 0x71f2
    7182:	81 43 36 00 	mov	#0,	54(r1)	;r3 As==00, 0x0036
    7186:	0c 3c       	jmp	$+26     	;abs 0x71a0
    7188:	a1 92 24 00 	cmp	#4,	36(r1)	;r2 As==10, 0x0024
    718c:	07 24       	jz	$+16     	;abs 0x719c
    718e:	b1 90 05 00 	cmp	#5,	36(r1)	; 0x0024
    7192:	24 00 
    7194:	2e 20       	jnz	$+94     	;abs 0x71f2
    7196:	91 43 36 00 	mov	#1,	54(r1)	;r3 As==01, 0x0036
    719a:	10 3c       	jmp	$+34     	;abs 0x71bc
    719c:	91 43 36 00 	mov	#1,	54(r1)	;r3 As==01, 0x0036
    71a0:	0d 43       	clr	r13		;
    71a2:	1d 91 3e 00 	cmp	62(r1),	r13	;0x0003e
    71a6:	30 38       	jl	$+98     	;abs 0x7208
    71a8:	91 43 0c 00 	mov	#1,	12(r1)	;r3 As==01, 0x000c
    71ac:	16 41 0c 00 	mov	12(r1),	r6	;0x0000c
    71b0:	0c 46       	mov	r6,	r12	;
    71b2:	81 46 3e 00 	mov	r6,	62(r1)	; 0x003e
    71b6:	30 3c       	jmp	$+98     	;abs 0x7218
    71b8:	81 43 36 00 	mov	#0,	54(r1)	;r3 As==00, 0x0036
    71bc:	17 41 3e 00 	mov	62(r1),	r7	;0x0003e
    71c0:	07 54       	add	r4,	r7	;
    71c2:	81 47 0c 00 	mov	r7,	12(r1)	; 0x000c
    71c6:	06 47       	mov	r7,	r6	;
    71c8:	16 53       	inc	r6		;
    71ca:	0a 43       	clr	r10		;
    71cc:	0a 96       	cmp	r6,	r10	;
    71ce:	23 38       	jl	$+72     	;abs 0x7216
    71d0:	1c 43       	mov	#1,	r12	;r3 As==01
    71d2:	22 3c       	jmp	$+70     	;abs 0x7218
    71d4:	19 43       	mov	#1,	r9	;r3 As==01
    71d6:	81 43 24 00 	mov	#0,	36(r1)	;r3 As==00, 0x0024
    71da:	81 49 36 00 	mov	r9,	54(r1)	; 0x0036
    71de:	b1 43 0c 00 	mov	#-1,	12(r1)	;r3 As==11, 0x000c
    71e2:	16 41 0c 00 	mov	12(r1),	r6	;0x0000c
    71e6:	3c 40 12 00 	mov	#18,	r12	;#0x0012
    71ea:	91 41 24 00 	mov	36(r1),	62(r1)	;0x00024, 0x003e
    71ee:	3e 00 
    71f0:	13 3c       	jmp	$+40     	;abs 0x7218
    71f2:	91 43 36 00 	mov	#1,	54(r1)	;r3 As==01, 0x0036
    71f6:	b1 43 0c 00 	mov	#-1,	12(r1)	;r3 As==11, 0x000c
    71fa:	16 41 0c 00 	mov	12(r1),	r6	;0x0000c
    71fe:	3c 40 12 00 	mov	#18,	r12	;#0x0012
    7202:	81 43 3e 00 	mov	#0,	62(r1)	;r3 As==00, 0x003e
    7206:	08 3c       	jmp	$+18     	;abs 0x7218
    7208:	91 41 3e 00 	mov	62(r1),	12(r1)	;0x0003e, 0x000c
    720c:	0c 00 
    720e:	16 41 3e 00 	mov	62(r1),	r6	;0x0003e
    7212:	0c 46       	mov	r6,	r12	;
    7214:	01 3c       	jmp	$+4      	;abs 0x7218
    7216:	0c 46       	mov	r6,	r12	;
    7218:	1d 41 1e 00 	mov	30(r1),	r13	;0x0001e
    721c:	1a 4d 12 00 	mov	18(r13),r10	;0x00012
    7220:	8a 43 02 00 	mov	#0,	2(r10)	;r3 As==00
    7224:	2d 42       	mov	#4,	r13	;r2 As==10
    7226:	0e 4d       	mov	r13,	r14	;
    7228:	3e 50 0a 00 	add	#10,	r14	;#0x000a
    722c:	0c 9e       	cmp	r14,	r12	;
    722e:	04 28       	jnc	$+10     	;abs 0x7238
    7230:	9a 53 02 00 	inc	2(r10)		;
    7234:	0d 5d       	rla	r13		;
    7236:	f7 3f       	jmp	$-16     	;abs 0x7226
    7238:	1c 41 1e 00 	mov	30(r1),	r12	;0x0001e
    723c:	1d 4a 02 00 	mov	2(r10),	r13	;
    7240:	b0 12 c6 86 	call	#34502		;#0x86c6
    7244:	8a 4c 00 00 	mov	r12,	0(r10)	;
    7248:	1e 41 1e 00 	mov	30(r1),	r14	;0x0001e
    724c:	1c 4e 12 00 	mov	18(r14),r12	;0x00012
    7250:	a1 4c 2a 00 	mov	@r12,	42(r1)	; 0x002a
    7254:	37 40 0e 00 	mov	#14,	r7	;#0x000e
    7258:	07 96       	cmp	r6,	r7	;
    725a:	02 2c       	jc	$+6      	;abs 0x7260
    725c:	80 00 0a 78 	mova	#30730,	r0	;0x0780a
    7260:	09 93       	cmp	#0,	r9	;r3 As==00
    7262:	02 20       	jnz	$+6      	;abs 0x7268
    7264:	80 00 0a 78 	mova	#30730,	r0	;0x0780a
    7268:	81 45 4c 00 	mov	r5,	76(r1)	; 0x004c
    726c:	91 41 14 00 	mov	20(r1),	78(r1)	;0x00014, 0x004e
    7270:	4e 00 
    7272:	09 43       	clr	r9		;
    7274:	09 94       	cmp	r4,	r9	;
    7276:	7c 34       	jge	$+250    	;abs 0x7370
    7278:	0c 44       	mov	r4,	r12	;
    727a:	3c f0 0f 00 	and	#15,	r12	;#0x000f
    727e:	42 18 0c 5c 	rpt #3 { rlax.w	r12		;
    7282:	3c 50 06 45 	add	#17670,	r12	;#0x4506
    7286:	a1 4c 38 00 	mov	@r12,	56(r1)	; 0x0038
    728a:	91 4c 02 00 	mov	2(r12),	58(r1)	; 0x003a
    728e:	3a 00 
    7290:	91 4c 04 00 	mov	4(r12),	60(r1)	; 0x003c
    7294:	3c 00 
    7296:	91 4c 06 00 	mov	6(r12),	64(r1)	; 0x0040
    729a:	40 00 
    729c:	07 44       	mov	r4,	r7	;
    729e:	43 18 07 11 	rpt #4 { rrax.w	r7		;
    72a2:	81 47 32 00 	mov	r7,	50(r1)	; 0x0032
    72a6:	37 b0 10 00 	bit	#16,	r7	;#0x0010
    72aa:	20 24       	jz	$+66     	;abs 0x72ec
    72ac:	37 f0 0f 00 	and	#15,	r7	;#0x000f
    72b0:	81 47 32 00 	mov	r7,	50(r1)	; 0x0032
    72b4:	18 41 28 00 	mov	40(r1),	r8	;0x00028
    72b8:	19 41 30 00 	mov	48(r1),	r9	;0x00030
    72bc:	0a 45       	mov	r5,	r10	;
    72be:	1b 41 14 00 	mov	20(r1),	r11	;0x00014
    72c2:	1c 42 fe 44 	mov	&0x44fe,r12	;0x44fe
    72c6:	1d 42 00 45 	mov	&0x4500,r13	;0x4500
    72ca:	1e 42 02 45 	mov	&0x4502,r14	;0x4502
    72ce:	1f 42 04 45 	mov	&0x4504,r15	;0x4504
    72d2:	b0 12 c6 b9 	call	#47558		;#0xb9c6
    72d6:	81 4c 2c 00 	mov	r12,	44(r1)	; 0x002c
    72da:	81 4d 2e 00 	mov	r13,	46(r1)	; 0x002e
    72de:	05 4e       	mov	r14,	r5	;
    72e0:	81 4f 14 00 	mov	r15,	20(r1)	; 0x0014
    72e4:	b1 40 03 00 	mov	#3,	22(r1)	; 0x0016
    72e8:	16 00 
    72ea:	02 3c       	jmp	$+6      	;abs 0x72f0
    72ec:	a1 43 16 00 	mov	#2,	22(r1)	;r3 As==10, 0x0016
    72f0:	37 40 de 44 	mov	#17630,	r7	;#0x44de
    72f4:	81 93 32 00 	cmp	#0,	50(r1)	;r3 As==00, 0x0032
    72f8:	22 24       	jz	$+70     	;abs 0x733e
    72fa:	91 b3 32 00 	bit	#1,	50(r1)	;r3 As==01, 0x0032
    72fe:	1b 24       	jz	$+56     	;abs 0x7336
    7300:	91 53 16 00 	inc	22(r1)		;
    7304:	18 41 38 00 	mov	56(r1),	r8	;0x00038
    7308:	19 41 3a 00 	mov	58(r1),	r9	;0x0003a
    730c:	1a 41 3c 00 	mov	60(r1),	r10	;0x0003c
    7310:	1b 41 40 00 	mov	64(r1),	r11	;0x00040
    7314:	2c 47       	mov	@r7,	r12	;
    7316:	1d 47 02 00 	mov	2(r7),	r13	;
    731a:	1e 47 04 00 	mov	4(r7),	r14	;
    731e:	1f 47 06 00 	mov	6(r7),	r15	;
    7322:	b0 12 f4 b4 	call	#46324		;#0xb4f4
    7326:	81 4c 38 00 	mov	r12,	56(r1)	; 0x0038
    732a:	81 4d 3a 00 	mov	r13,	58(r1)	; 0x003a
    732e:	81 4e 3c 00 	mov	r14,	60(r1)	; 0x003c
    7332:	81 4f 40 00 	mov	r15,	64(r1)	; 0x0040
    7336:	11 11 32 00 	rra	50(r1)		;00032
    733a:	37 52       	add	#8,	r7	;r2 As==11
    733c:	db 3f       	jmp	$-72     	;abs 0x72f4
    733e:	18 41 2c 00 	mov	44(r1),	r8	;0x0002c
    7342:	19 41 2e 00 	mov	46(r1),	r9	;0x0002e
    7346:	0a 45       	mov	r5,	r10	;
    7348:	1b 41 14 00 	mov	20(r1),	r11	;0x00014
    734c:	1c 41 38 00 	mov	56(r1),	r12	;0x00038
    7350:	1d 41 3a 00 	mov	58(r1),	r13	;0x0003a
    7354:	1e 41 3c 00 	mov	60(r1),	r14	;0x0003c
    7358:	1f 41 40 00 	mov	64(r1),	r15	;0x00040
    735c:	b0 12 c6 b9 	call	#47558		;#0xb9c6
    7360:	81 4c 2c 00 	mov	r12,	44(r1)	; 0x002c
    7364:	81 4d 2e 00 	mov	r13,	46(r1)	; 0x002e
    7368:	05 4e       	mov	r14,	r5	;
    736a:	81 4f 14 00 	mov	r15,	20(r1)	; 0x0014
    736e:	48 3c       	jmp	$+146    	;abs 0x7400
    7370:	07 43       	clr	r7		;
    7372:	07 84       	sub	r4,	r7	;
    7374:	07 93       	cmp	#0,	r7	;r3 As==00
    7376:	42 24       	jz	$+134    	;abs 0x73fc
    7378:	0f 47       	mov	r7,	r15	;
    737a:	3f f0 0f 00 	and	#15,	r15	;#0x000f
    737e:	42 18 0f 5f 	rpt #3 { rlax.w	r15		;
    7382:	3f 50 06 45 	add	#17670,	r15	;#0x4506
    7386:	18 41 28 00 	mov	40(r1),	r8	;0x00028
    738a:	19 41 30 00 	mov	48(r1),	r9	;0x00030
    738e:	1a 41 4c 00 	mov	76(r1),	r10	;0x0004c
    7392:	1b 41 4e 00 	mov	78(r1),	r11	;0x0004e
    7396:	2c 4f       	mov	@r15,	r12	;
    7398:	1d 4f 02 00 	mov	2(r15),	r13	;
    739c:	1e 4f 04 00 	mov	4(r15),	r14	;
    73a0:	1f 4f 06 00 	mov	6(r15),	r15	;
    73a4:	b0 12 f4 b4 	call	#46324		;#0xb4f4
    73a8:	43 18 07 11 	rpt #4 { rrax.w	r7		;
    73ac:	81 47 14 00 	mov	r7,	20(r1)	; 0x0014
    73b0:	35 40 de 44 	mov	#17630,	r5	;#0x44de
    73b4:	a1 43 16 00 	mov	#2,	22(r1)	;r3 As==10, 0x0016
    73b8:	37 40 f4 b4 	mov	#46324,	r7	;#0xb4f4
    73bc:	81 93 14 00 	cmp	#0,	20(r1)	;r3 As==00, 0x0014
    73c0:	15 24       	jz	$+44     	;abs 0x73ec
    73c2:	91 b3 14 00 	bit	#1,	20(r1)	;r3 As==01, 0x0014
    73c6:	0e 24       	jz	$+30     	;abs 0x73e4
    73c8:	91 53 16 00 	inc	22(r1)		;
    73cc:	08 4c       	mov	r12,	r8	;
    73ce:	09 4d       	mov	r13,	r9	;
    73d0:	0a 4e       	mov	r14,	r10	;
    73d2:	0b 4f       	mov	r15,	r11	;
    73d4:	2c 45       	mov	@r5,	r12	;
    73d6:	1d 45 02 00 	mov	2(r5),	r13	;
    73da:	1e 45 04 00 	mov	4(r5),	r14	;
    73de:	1f 45 06 00 	mov	6(r5),	r15	;
    73e2:	87 12       	call	r7		;
    73e4:	11 11 14 00 	rra	20(r1)		;00014
    73e8:	35 52       	add	#8,	r5	;r2 As==11
    73ea:	e8 3f       	jmp	$-46     	;abs 0x73bc
    73ec:	81 4c 2c 00 	mov	r12,	44(r1)	; 0x002c
    73f0:	81 4d 2e 00 	mov	r13,	46(r1)	; 0x002e
    73f4:	05 4e       	mov	r14,	r5	;
    73f6:	81 4f 14 00 	mov	r15,	20(r1)	; 0x0014
    73fa:	02 3c       	jmp	$+6      	;abs 0x7400
    73fc:	a1 43 16 00 	mov	#2,	22(r1)	;r3 As==10, 0x0016
    7400:	81 93 44 00 	cmp	#0,	68(r1)	;r3 As==00, 0x0044
    7404:	38 24       	jz	$+114    	;abs 0x7476
    7406:	81 43 00 00 	mov	#0,	0(r1)	;r3 As==00
    740a:	81 43 02 00 	mov	#0,	2(r1)	;r3 As==00
    740e:	81 43 04 00 	mov	#0,	4(r1)	;r3 As==00
    7412:	b1 40 f0 3f 	mov	#16368,	6(r1)	;#0x3ff0
    7416:	06 00 
    7418:	1c 41 2c 00 	mov	44(r1),	r12	;0x0002c
    741c:	1d 41 2e 00 	mov	46(r1),	r13	;0x0002e
    7420:	0e 45       	mov	r5,	r14	;
    7422:	1f 41 14 00 	mov	20(r1),	r15	;0x00014
    7426:	b0 12 5e be 	call	#48734		;#0xbe5e
    742a:	0c 93       	cmp	#0,	r12	;r3 As==00
    742c:	24 34       	jge	$+74     	;abs 0x7476
    742e:	06 93       	cmp	#0,	r6	;r3 As==00
    7430:	22 24       	jz	$+70     	;abs 0x7476
    7432:	09 43       	clr	r9		;
    7434:	19 91 0c 00 	cmp	12(r1),	r9	;0x0000c
    7438:	e3 35       	jge	$+968    	;abs 0x7800
    743a:	07 44       	mov	r4,	r7	;
    743c:	37 53       	add	#-1,	r7	;r3 As==11
    743e:	81 47 32 00 	mov	r7,	50(r1)	; 0x0032
    7442:	18 41 2c 00 	mov	44(r1),	r8	;0x0002c
    7446:	19 41 2e 00 	mov	46(r1),	r9	;0x0002e
    744a:	0a 45       	mov	r5,	r10	;
    744c:	1b 41 14 00 	mov	20(r1),	r11	;0x00014
    7450:	0c 43       	clr	r12		;
    7452:	0d 4c       	mov	r12,	r13	;
    7454:	0e 4c       	mov	r12,	r14	;
    7456:	3f 40 24 40 	mov	#16420,	r15	;#0x4024
    745a:	b0 12 f4 b4 	call	#46324		;#0xb4f4
    745e:	81 4c 2c 00 	mov	r12,	44(r1)	; 0x002c
    7462:	81 4d 2e 00 	mov	r13,	46(r1)	; 0x002e
    7466:	05 4e       	mov	r14,	r5	;
    7468:	81 4f 14 00 	mov	r15,	20(r1)	; 0x0014
    746c:	91 53 16 00 	inc	22(r1)		;
    7470:	17 41 0c 00 	mov	12(r1),	r7	;0x0000c
    7474:	03 3c       	jmp	$+8      	;abs 0x747c
    7476:	81 44 32 00 	mov	r4,	50(r1)	; 0x0032
    747a:	07 46       	mov	r6,	r7	;
    747c:	19 41 16 00 	mov	22(r1),	r9	;0x00016
    7480:	0c 49       	mov	r9,	r12	;
    7482:	0d 49       	mov	r9,	r13	;
    7484:	4e 18 0d 11 	rpt #15 { rrax.w	r13		;
    7488:	b0 12 d0 be 	call	#48848		;#0xbed0
    748c:	08 4c       	mov	r12,	r8	;
    748e:	09 4d       	mov	r13,	r9	;
    7490:	0a 4e       	mov	r14,	r10	;
    7492:	0b 4f       	mov	r15,	r11	;
    7494:	1c 41 2c 00 	mov	44(r1),	r12	;0x0002c
    7498:	1d 41 2e 00 	mov	46(r1),	r13	;0x0002e
    749c:	0e 45       	mov	r5,	r14	;
    749e:	1f 41 14 00 	mov	20(r1),	r15	;0x00014
    74a2:	b0 12 f4 b4 	call	#46324		;#0xb4f4
    74a6:	08 4c       	mov	r12,	r8	;
    74a8:	09 4d       	mov	r13,	r9	;
    74aa:	0a 4e       	mov	r14,	r10	;
    74ac:	0b 4f       	mov	r15,	r11	;
    74ae:	0c 43       	clr	r12		;
    74b0:	0d 4c       	mov	r12,	r13	;
    74b2:	0e 4c       	mov	r12,	r14	;
    74b4:	3f 40 1c 40 	mov	#16412,	r15	;#0x401c
    74b8:	b0 12 2c b4 	call	#46124		;#0xb42c
    74bc:	81 4c 16 00 	mov	r12,	22(r1)	; 0x0016
    74c0:	81 4d 18 00 	mov	r13,	24(r1)	; 0x0018
    74c4:	81 4e 1a 00 	mov	r14,	26(r1)	; 0x001a
    74c8:	81 4f 1c 00 	mov	r15,	28(r1)	; 0x001c
    74cc:	81 53 1a 00 	add	#0,	26(r1)	;r3 As==00, 0x001a
    74d0:	b1 60 c0 fc 	addc	#64704,	28(r1)	;#0xfcc0, 0x001c
    74d4:	1c 00 
    74d6:	07 93       	cmp	#0,	r7	;r3 As==00
    74d8:	36 20       	jnz	$+110    	;abs 0x7546
    74da:	18 41 2c 00 	mov	44(r1),	r8	;0x0002c
    74de:	19 41 2e 00 	mov	46(r1),	r9	;0x0002e
    74e2:	0a 45       	mov	r5,	r10	;
    74e4:	1b 41 14 00 	mov	20(r1),	r11	;0x00014
    74e8:	0c 47       	mov	r7,	r12	;
    74ea:	0d 47       	mov	r7,	r13	;
    74ec:	0e 47       	mov	r7,	r14	;
    74ee:	3f 40 14 40 	mov	#16404,	r15	;#0x4014
    74f2:	b0 12 8e b4 	call	#46222		;#0xb48e
    74f6:	08 4c       	mov	r12,	r8	;
    74f8:	05 4d       	mov	r13,	r5	;
    74fa:	09 4e       	mov	r14,	r9	;
    74fc:	0a 4f       	mov	r15,	r10	;
    74fe:	91 41 16 00 	mov	22(r1),	0(r1)	;0x00016
    7502:	00 00 
    7504:	91 41 18 00 	mov	24(r1),	2(r1)	;0x00018
    7508:	02 00 
    750a:	91 41 1a 00 	mov	26(r1),	4(r1)	;0x0001a
    750e:	04 00 
    7510:	91 41 1c 00 	mov	28(r1),	6(r1)	;0x0001c
    7514:	06 00 
    7516:	b0 12 7a bd 	call	#48506		;#0xbd7a
    751a:	0d 43       	clr	r13		;
    751c:	0d 9c       	cmp	r12,	r13	;
    751e:	02 34       	jge	$+6      	;abs 0x7524
    7520:	80 00 9a 7c 	mova	#31898,	r0	;0x07c9a
    7524:	1e 41 1c 00 	mov	28(r1),	r14	;0x0001c
    7528:	3e 50 00 80 	add	#32768,	r14	;#0x8000
    752c:	81 4e 06 00 	mov	r14,	6(r1)	;
    7530:	0c 48       	mov	r8,	r12	;
    7532:	0d 45       	mov	r5,	r13	;
    7534:	0e 49       	mov	r9,	r14	;
    7536:	0f 4a       	mov	r10,	r15	;
    7538:	b0 12 5e be 	call	#48734		;#0xbe5e
    753c:	0c 93       	cmp	#0,	r12	;r3 As==00
    753e:	02 34       	jge	$+6      	;abs 0x7544
    7540:	80 00 80 7c 	mova	#31872,	r0	;0x07c80
    7544:	5d 3d       	jmp	$+700    	;abs 0x7800
    7546:	0f 47       	mov	r7,	r15	;
    7548:	3f 53       	add	#-1,	r15	;r3 As==11
    754a:	42 18 0f 5f 	rpt #3 { rlax.w	r15		;
    754e:	3f 50 06 45 	add	#17670,	r15	;#0x4506
    7552:	81 93 36 00 	cmp	#0,	54(r1)	;r3 As==00, 0x0036
    7556:	a8 24       	jz	$+338    	;abs 0x76a8
    7558:	08 43       	clr	r8		;
    755a:	09 48       	mov	r8,	r9	;
    755c:	0a 48       	mov	r8,	r10	;
    755e:	3b 40 e0 3f 	mov	#16352,	r11	;#0x3fe0
    7562:	2c 4f       	mov	@r15,	r12	;
    7564:	1d 4f 02 00 	mov	2(r15),	r13	;
    7568:	1e 4f 04 00 	mov	4(r15),	r14	;
    756c:	1f 4f 06 00 	mov	6(r15),	r15	;
    7570:	b0 12 c6 b9 	call	#47558		;#0xb9c6
    7574:	08 4c       	mov	r12,	r8	;
    7576:	09 4d       	mov	r13,	r9	;
    7578:	0a 4e       	mov	r14,	r10	;
    757a:	0b 4f       	mov	r15,	r11	;
    757c:	1c 41 16 00 	mov	22(r1),	r12	;0x00016
    7580:	1d 41 18 00 	mov	24(r1),	r13	;0x00018
    7584:	1e 41 1a 00 	mov	26(r1),	r14	;0x0001a
    7588:	1f 41 1c 00 	mov	28(r1),	r15	;0x0001c
    758c:	b0 12 8e b4 	call	#46222		;#0xb48e
    7590:	81 4c 16 00 	mov	r12,	22(r1)	; 0x0016
    7594:	81 4d 38 00 	mov	r13,	56(r1)	; 0x0038
    7598:	81 4e 3a 00 	mov	r14,	58(r1)	; 0x003a
    759c:	81 4f 3c 00 	mov	r15,	60(r1)	; 0x003c
    75a0:	18 41 2c 00 	mov	44(r1),	r8	;0x0002c
    75a4:	19 41 2e 00 	mov	46(r1),	r9	;0x0002e
    75a8:	0a 45       	mov	r5,	r10	;
    75aa:	1b 41 14 00 	mov	20(r1),	r11	;0x00014
    75ae:	91 41 2a 00 	mov	42(r1),	20(r1)	;0x0002a, 0x0014
    75b2:	14 00 
    75b4:	0c 48       	mov	r8,	r12	;
    75b6:	0d 49       	mov	r9,	r13	;
    75b8:	0e 4a       	mov	r10,	r14	;
    75ba:	0f 4b       	mov	r11,	r15	;
    75bc:	81 4b 0a 00 	mov	r11,	10(r1)	; 0x000a
    75c0:	b0 12 66 bf 	call	#48998		;#0xbf66
    75c4:	81 4c 50 00 	mov	r12,	80(r1)	; 0x0050
    75c8:	b0 12 d0 be 	call	#48848		;#0xbed0
    75cc:	1b 41 0a 00 	mov	10(r1),	r11	;0x0000a
    75d0:	b0 12 8e b4 	call	#46222		;#0xb48e
    75d4:	81 4c 2c 00 	mov	r12,	44(r1)	; 0x002c
    75d8:	81 4d 2e 00 	mov	r13,	46(r1)	; 0x002e
    75dc:	81 4e 40 00 	mov	r14,	64(r1)	; 0x0040
    75e0:	81 4f 46 00 	mov	r15,	70(r1)	; 0x0046
    75e4:	15 41 14 00 	mov	20(r1),	r5	;0x00014
    75e8:	15 53       	inc	r5		;
    75ea:	5a 41 50 00 	mov.b	80(r1),	r10	;0x00050
    75ee:	7a 50 30 00 	add.b	#48,	r10	;#0x0030
    75f2:	19 41 14 00 	mov	20(r1),	r9	;0x00014
    75f6:	c9 4a 00 00 	mov.b	r10,	0(r9)	;
    75fa:	91 41 16 00 	mov	22(r1),	0(r1)	;0x00016
    75fe:	00 00 
    7600:	91 41 38 00 	mov	56(r1),	2(r1)	;0x00038
    7604:	02 00 
    7606:	91 41 3a 00 	mov	58(r1),	4(r1)	;0x0003a
    760a:	04 00 
    760c:	91 41 3c 00 	mov	60(r1),	6(r1)	;0x0003c
    7610:	06 00 
    7612:	b0 12 5e be 	call	#48734		;#0xbe5e
    7616:	0c 93       	cmp	#0,	r12	;r3 As==00
    7618:	02 34       	jge	$+6      	;abs 0x761e
    761a:	80 00 8c 7f 	mova	#32652,	r0	;0x07f8c
    761e:	08 43       	clr	r8		;
    7620:	09 48       	mov	r8,	r9	;
    7622:	0a 48       	mov	r8,	r10	;
    7624:	3b 40 f0 3f 	mov	#16368,	r11	;#0x3ff0
    7628:	1c 41 2c 00 	mov	44(r1),	r12	;0x0002c
    762c:	1d 41 2e 00 	mov	46(r1),	r13	;0x0002e
    7630:	1e 41 40 00 	mov	64(r1),	r14	;0x00040
    7634:	1f 41 46 00 	mov	70(r1),	r15	;0x00046
    7638:	b0 12 8e b4 	call	#46222		;#0xb48e
    763c:	b0 12 5e be 	call	#48734		;#0xbe5e
    7640:	0c 98       	cmp	r8,	r12	;
    7642:	93 39       	jl	$+808    	;abs 0x796a
    7644:	0c 45       	mov	r5,	r12	;
    7646:	1c 81 2a 00 	sub	42(r1),	r12	;0x0002a
    764a:	0c 97       	cmp	r7,	r12	;
    764c:	d9 34       	jge	$+436    	;abs 0x7800
    764e:	18 41 16 00 	mov	22(r1),	r8	;0x00016
    7652:	19 41 38 00 	mov	56(r1),	r9	;0x00038
    7656:	1a 41 3a 00 	mov	58(r1),	r10	;0x0003a
    765a:	1b 41 3c 00 	mov	60(r1),	r11	;0x0003c
    765e:	0c 43       	clr	r12		;
    7660:	0d 4c       	mov	r12,	r13	;
    7662:	0e 4c       	mov	r12,	r14	;
    7664:	3f 40 24 40 	mov	#16420,	r15	;#0x4024
    7668:	b0 12 f4 b4 	call	#46324		;#0xb4f4
    766c:	81 4c 16 00 	mov	r12,	22(r1)	; 0x0016
    7670:	81 4d 38 00 	mov	r13,	56(r1)	; 0x0038
    7674:	81 4e 3a 00 	mov	r14,	58(r1)	; 0x003a
    7678:	81 4f 3c 00 	mov	r15,	60(r1)	; 0x003c
    767c:	18 41 2c 00 	mov	44(r1),	r8	;0x0002c
    7680:	19 41 2e 00 	mov	46(r1),	r9	;0x0002e
    7684:	1a 41 40 00 	mov	64(r1),	r10	;0x00040
    7688:	1b 41 46 00 	mov	70(r1),	r11	;0x00046
    768c:	0c 43       	clr	r12		;
    768e:	0d 4c       	mov	r12,	r13	;
    7690:	0e 4c       	mov	r12,	r14	;
    7692:	3f 40 24 40 	mov	#16420,	r15	;#0x4024
    7696:	b0 12 f4 b4 	call	#46324		;#0xb4f4
    769a:	08 4c       	mov	r12,	r8	;
    769c:	09 4d       	mov	r13,	r9	;
    769e:	0a 4e       	mov	r14,	r10	;
    76a0:	0b 4f       	mov	r15,	r11	;
    76a2:	81 45 14 00 	mov	r5,	20(r1)	; 0x0014
    76a6:	86 3f       	jmp	$-242    	;abs 0x75b4
    76a8:	28 4f       	mov	@r15,	r8	;
    76aa:	19 4f 02 00 	mov	2(r15),	r9	;
    76ae:	1a 4f 04 00 	mov	4(r15),	r10	;
    76b2:	1b 4f 06 00 	mov	6(r15),	r11	;
    76b6:	1c 41 16 00 	mov	22(r1),	r12	;0x00016
    76ba:	1d 41 18 00 	mov	24(r1),	r13	;0x00018
    76be:	1e 41 1a 00 	mov	26(r1),	r14	;0x0001a
    76c2:	1f 41 1c 00 	mov	28(r1),	r15	;0x0001c
    76c6:	b0 12 f4 b4 	call	#46324		;#0xb4f4
    76ca:	81 4c 38 00 	mov	r12,	56(r1)	; 0x0038
    76ce:	81 4d 3a 00 	mov	r13,	58(r1)	; 0x003a
    76d2:	81 4e 3c 00 	mov	r14,	60(r1)	; 0x003c
    76d6:	81 4f 40 00 	mov	r15,	64(r1)	; 0x0040
    76da:	18 41 2c 00 	mov	44(r1),	r8	;0x0002c
    76de:	19 41 2e 00 	mov	46(r1),	r9	;0x0002e
    76e2:	0a 45       	mov	r5,	r10	;
    76e4:	1b 41 14 00 	mov	20(r1),	r11	;0x00014
    76e8:	91 41 2a 00 	mov	42(r1),	20(r1)	;0x0002a, 0x0014
    76ec:	14 00 
    76ee:	15 41 2a 00 	mov	42(r1),	r5	;0x0002a
    76f2:	05 57       	add	r7,	r5	;
    76f4:	0c 48       	mov	r8,	r12	;
    76f6:	0d 49       	mov	r9,	r13	;
    76f8:	0e 4a       	mov	r10,	r14	;
    76fa:	0f 4b       	mov	r11,	r15	;
    76fc:	81 4b 0a 00 	mov	r11,	10(r1)	; 0x000a
    7700:	b0 12 66 bf 	call	#48998		;#0xbf66
    7704:	81 4c 46 00 	mov	r12,	70(r1)	; 0x0046
    7708:	b0 12 d0 be 	call	#48848		;#0xbed0
    770c:	1b 41 0a 00 	mov	10(r1),	r11	;0x0000a
    7710:	b0 12 8e b4 	call	#46222		;#0xb48e
    7714:	81 4c 16 00 	mov	r12,	22(r1)	; 0x0016
    7718:	81 4d 2c 00 	mov	r13,	44(r1)	; 0x002c
    771c:	81 4e 2e 00 	mov	r14,	46(r1)	; 0x002e
    7720:	07 4f       	mov	r15,	r7	;
    7722:	5d 41 46 00 	mov.b	70(r1),	r13	;0x00046
    7726:	7d 50 30 00 	add.b	#48,	r13	;#0x0030
    772a:	1c 41 14 00 	mov	20(r1),	r12	;0x00014
    772e:	cc 4d 00 00 	mov.b	r13,	0(r12)	;
    7732:	1c 53       	inc	r12		;
    7734:	81 4c 14 00 	mov	r12,	20(r1)	; 0x0014
    7738:	05 9c       	cmp	r12,	r5	;
    773a:	4f 20       	jnz	$+160    	;abs 0x77da
    773c:	18 41 38 00 	mov	56(r1),	r8	;0x00038
    7740:	19 41 3a 00 	mov	58(r1),	r9	;0x0003a
    7744:	1a 41 3c 00 	mov	60(r1),	r10	;0x0003c
    7748:	1b 41 40 00 	mov	64(r1),	r11	;0x00040
    774c:	0c 43       	clr	r12		;
    774e:	0d 4c       	mov	r12,	r13	;
    7750:	0e 4c       	mov	r12,	r14	;
    7752:	3f 40 e0 3f 	mov	#16352,	r15	;#0x3fe0
    7756:	b0 12 2c b4 	call	#46124		;#0xb42c
    775a:	81 4c 00 00 	mov	r12,	0(r1)	;
    775e:	81 4d 02 00 	mov	r13,	2(r1)	;
    7762:	81 4e 04 00 	mov	r14,	4(r1)	;
    7766:	81 4f 06 00 	mov	r15,	6(r1)	;
    776a:	1c 41 16 00 	mov	22(r1),	r12	;0x00016
    776e:	1d 41 2c 00 	mov	44(r1),	r13	;0x0002c
    7772:	1e 41 2e 00 	mov	46(r1),	r14	;0x0002e
    7776:	0f 47       	mov	r7,	r15	;
    7778:	b0 12 7a bd 	call	#48506		;#0xbd7a
    777c:	0e 43       	clr	r14		;
    777e:	0e 9c       	cmp	r12,	r14	;
    7780:	f4 38       	jl	$+490    	;abs 0x796a
    7782:	08 4e       	mov	r14,	r8	;
    7784:	09 4e       	mov	r14,	r9	;
    7786:	0a 4e       	mov	r14,	r10	;
    7788:	3b 40 e0 3f 	mov	#16352,	r11	;#0x3fe0
    778c:	1c 41 38 00 	mov	56(r1),	r12	;0x00038
    7790:	1d 41 3a 00 	mov	58(r1),	r13	;0x0003a
    7794:	1e 41 3c 00 	mov	60(r1),	r14	;0x0003c
    7798:	1f 41 40 00 	mov	64(r1),	r15	;0x00040
    779c:	b0 12 8e b4 	call	#46222		;#0xb48e
    77a0:	81 4c 00 00 	mov	r12,	0(r1)	;
    77a4:	81 4d 02 00 	mov	r13,	2(r1)	;
    77a8:	81 4e 04 00 	mov	r14,	4(r1)	;
    77ac:	81 4f 06 00 	mov	r15,	6(r1)	;
    77b0:	1c 41 16 00 	mov	22(r1),	r12	;0x00016
    77b4:	1d 41 2c 00 	mov	44(r1),	r13	;0x0002c
    77b8:	1e 41 2e 00 	mov	46(r1),	r14	;0x0002e
    77bc:	0f 47       	mov	r7,	r15	;
    77be:	b0 12 5e be 	call	#48734		;#0xbe5e
    77c2:	0c 98       	cmp	r8,	r12	;
    77c4:	1d 34       	jge	$+60     	;abs 0x7800
    77c6:	0c 45       	mov	r5,	r12	;
    77c8:	3c 53       	add	#-1,	r12	;r3 As==11
    77ca:	fc 90 30 00 	cmp.b	#48,	0(r12)	;#0x0030
    77ce:	00 00 
    77d0:	02 24       	jz	$+6      	;abs 0x77d6
    77d2:	80 00 8c 7f 	mova	#32652,	r0	;0x07f8c
    77d6:	05 4c       	mov	r12,	r5	;
    77d8:	f6 3f       	jmp	$-18     	;abs 0x77c6
    77da:	18 41 16 00 	mov	22(r1),	r8	;0x00016
    77de:	19 41 2c 00 	mov	44(r1),	r9	;0x0002c
    77e2:	1a 41 2e 00 	mov	46(r1),	r10	;0x0002e
    77e6:	0b 47       	mov	r7,	r11	;
    77e8:	0c 43       	clr	r12		;
    77ea:	0d 4c       	mov	r12,	r13	;
    77ec:	0e 4c       	mov	r12,	r14	;
    77ee:	3f 40 24 40 	mov	#16420,	r15	;#0x4024
    77f2:	b0 12 f4 b4 	call	#46324		;#0xb4f4
    77f6:	08 4c       	mov	r12,	r8	;
    77f8:	09 4d       	mov	r13,	r9	;
    77fa:	0a 4e       	mov	r14,	r10	;
    77fc:	0b 4f       	mov	r15,	r11	;
    77fe:	7a 3f       	jmp	$-266    	;abs 0x76f4
    7800:	15 41 4c 00 	mov	76(r1),	r5	;0x0004c
    7804:	91 41 4e 00 	mov	78(r1),	20(r1)	;0x0004e, 0x0014
    7808:	14 00 
    780a:	1c 41 54 00 	mov	84(r1),	r12	;0x00054
    780e:	0c 93       	cmp	#0,	r12	;r3 As==00
    7810:	e0 38       	jl	$+450    	;abs 0x79d2
    7812:	37 40 0e 00 	mov	#14,	r7	;#0x000e
    7816:	07 94       	cmp	r4,	r7	;
    7818:	dc 38       	jl	$+442    	;abs 0x79d2
    781a:	0c 44       	mov	r4,	r12	;
    781c:	42 18 0c 5c 	rpt #3 { rlax.w	r12		;
    7820:	3c 50 06 45 	add	#17670,	r12	;#0x4506
    7824:	a1 4c 0c 00 	mov	@r12,	12(r1)	; 0x000c
    7828:	91 4c 02 00 	mov	2(r12),	22(r1)	; 0x0016
    782c:	16 00 
    782e:	91 4c 04 00 	mov	4(r12),	32(r1)	; 0x0020
    7832:	20 00 
    7834:	91 4c 06 00 	mov	6(r12),	34(r1)	; 0x0022
    7838:	22 00 
    783a:	81 93 3e 00 	cmp	#0,	62(r1)	;r3 As==00, 0x003e
    783e:	2b 34       	jge	$+88     	;abs 0x7896
    7840:	09 43       	clr	r9		;
    7842:	09 96       	cmp	r6,	r9	;
    7844:	28 38       	jl	$+82     	;abs 0x7896
    7846:	06 99       	cmp	r9,	r6	;
    7848:	02 24       	jz	$+6      	;abs 0x784e
    784a:	80 00 86 7c 	mova	#31878,	r0	;0x07c86
    784e:	18 41 0c 00 	mov	12(r1),	r8	;0x0000c
    7852:	19 41 16 00 	mov	22(r1),	r9	;0x00016
    7856:	1a 41 20 00 	mov	32(r1),	r10	;0x00020
    785a:	1b 41 22 00 	mov	34(r1),	r11	;0x00022
    785e:	0c 46       	mov	r6,	r12	;
    7860:	0d 46       	mov	r6,	r13	;
    7862:	0e 46       	mov	r6,	r14	;
    7864:	3f 40 14 40 	mov	#16404,	r15	;#0x4014
    7868:	b0 12 f4 b4 	call	#46324		;#0xb4f4
    786c:	91 41 28 00 	mov	40(r1),	0(r1)	;0x00028
    7870:	00 00 
    7872:	91 41 30 00 	mov	48(r1),	2(r1)	;0x00030
    7876:	02 00 
    7878:	81 45 04 00 	mov	r5,	4(r1)	;
    787c:	91 41 14 00 	mov	20(r1),	6(r1)	;0x00014
    7880:	06 00 
    7882:	b0 12 ec bd 	call	#48620		;#0xbdec
    7886:	09 46       	mov	r6,	r9	;
    7888:	0a 46       	mov	r6,	r10	;
    788a:	0c 93       	cmp	#0,	r12	;r3 As==00
    788c:	02 38       	jl	$+6      	;abs 0x7892
    788e:	80 00 8a 7c 	mova	#31882,	r0	;0x07c8a
    7892:	30 40 a2 7c 	br	#0x7ca2		;
    7896:	81 45 24 00 	mov	r5,	36(r1)	; 0x0024
    789a:	17 41 14 00 	mov	20(r1),	r7	;0x00014
    789e:	15 41 2a 00 	mov	42(r1),	r5	;0x0002a
    78a2:	18 41 28 00 	mov	40(r1),	r8	;0x00028
    78a6:	19 41 30 00 	mov	48(r1),	r9	;0x00030
    78aa:	1a 41 24 00 	mov	36(r1),	r10	;0x00024
    78ae:	0b 47       	mov	r7,	r11	;
    78b0:	1c 41 0c 00 	mov	12(r1),	r12	;0x0000c
    78b4:	1d 41 16 00 	mov	22(r1),	r13	;0x00016
    78b8:	1e 41 20 00 	mov	32(r1),	r14	;0x00020
    78bc:	1f 41 22 00 	mov	34(r1),	r15	;0x00022
    78c0:	b0 12 c6 b9 	call	#47558		;#0xb9c6
    78c4:	b0 12 66 bf 	call	#48998		;#0xbf66
    78c8:	81 4c 14 00 	mov	r12,	20(r1)	; 0x0014
    78cc:	b0 12 d0 be 	call	#48848		;#0xbed0
    78d0:	08 4c       	mov	r12,	r8	;
    78d2:	09 4d       	mov	r13,	r9	;
    78d4:	0a 4e       	mov	r14,	r10	;
    78d6:	0b 4f       	mov	r15,	r11	;
    78d8:	1c 41 0c 00 	mov	12(r1),	r12	;0x0000c
    78dc:	1d 41 16 00 	mov	22(r1),	r13	;0x00016
    78e0:	1e 41 20 00 	mov	32(r1),	r14	;0x00020
    78e4:	1f 41 22 00 	mov	34(r1),	r15	;0x00022
    78e8:	b0 12 f4 b4 	call	#46324		;#0xb4f4
    78ec:	18 41 28 00 	mov	40(r1),	r8	;0x00028
    78f0:	19 41 30 00 	mov	48(r1),	r9	;0x00030
    78f4:	1a 41 24 00 	mov	36(r1),	r10	;0x00024
    78f8:	0b 47       	mov	r7,	r11	;
    78fa:	b0 12 8e b4 	call	#46222		;#0xb48e
    78fe:	08 4c       	mov	r12,	r8	;
    7900:	09 4d       	mov	r13,	r9	;
    7902:	0a 4e       	mov	r14,	r10	;
    7904:	0b 4f       	mov	r15,	r11	;
    7906:	15 53       	inc	r5		;
    7908:	57 41 14 00 	mov.b	20(r1),	r7	;0x00014
    790c:	77 50 30 00 	add.b	#48,	r7	;#0x0030
    7910:	c5 47 ff ff 	mov.b	r7,	-1(r5)	; 0xffff
    7914:	07 45       	mov	r5,	r7	;
    7916:	17 81 2a 00 	sub	42(r1),	r7	;0x0002a
    791a:	07 96       	cmp	r6,	r7	;
    791c:	3e 20       	jnz	$+126    	;abs 0x799a
    791e:	b0 12 2c b4 	call	#46124		;#0xb42c
    7922:	07 4c       	mov	r12,	r7	;
    7924:	08 4d       	mov	r13,	r8	;
    7926:	09 4e       	mov	r14,	r9	;
    7928:	0a 4f       	mov	r15,	r10	;
    792a:	91 41 0c 00 	mov	12(r1),	0(r1)	;0x0000c
    792e:	00 00 
    7930:	91 41 16 00 	mov	22(r1),	2(r1)	;0x00016
    7934:	02 00 
    7936:	91 41 20 00 	mov	32(r1),	4(r1)	;0x00020
    793a:	04 00 
    793c:	91 41 22 00 	mov	34(r1),	6(r1)	;0x00022
    7940:	06 00 
    7942:	b0 12 7a bd 	call	#48506		;#0xbd7a
    7946:	0d 43       	clr	r13		;
    7948:	0d 9c       	cmp	r12,	r13	;
    794a:	13 38       	jl	$+40     	;abs 0x7972
    794c:	0c 47       	mov	r7,	r12	;
    794e:	0d 48       	mov	r8,	r13	;
    7950:	0e 49       	mov	r9,	r14	;
    7952:	0f 4a       	mov	r10,	r15	;
    7954:	b0 12 96 bc 	call	#48278		;#0xbc96
    7958:	0c 93       	cmp	#0,	r12	;r3 As==00
    795a:	02 24       	jz	$+6      	;abs 0x7960
    795c:	80 00 90 7f 	mova	#32656,	r0	;0x07f90
    7960:	91 b3 14 00 	bit	#1,	20(r1)	;r3 As==01, 0x0014
    7964:	06 20       	jnz	$+14     	;abs 0x7972
    7966:	30 40 90 7f 	br	#0x7f90		;
    796a:	14 41 32 00 	mov	50(r1),	r4	;0x00032
    796e:	01 3c       	jmp	$+4      	;abs 0x7972
    7970:	05 4c       	mov	r12,	r5	;
    7972:	0c 45       	mov	r5,	r12	;
    7974:	3c 53       	add	#-1,	r12	;r3 As==11
    7976:	fc 90 39 00 	cmp.b	#57,	0(r12)	;#0x0039
    797a:	00 00 
    797c:	0a 20       	jnz	$+22     	;abs 0x7992
    797e:	1c 91 2a 00 	cmp	42(r1),	r12	;0x0002a
    7982:	f6 23       	jnz	$-18     	;abs 0x7970
    7984:	14 53       	inc	r4		;
    7986:	17 41 2a 00 	mov	42(r1),	r7	;0x0002a
    798a:	f7 40 30 00 	mov.b	#48,	0(r7)	;#0x0030
    798e:	00 00 
    7990:	0c 47       	mov	r7,	r12	;
    7992:	dc 53 00 00 	inc.b	0(r12)		;
    7996:	30 40 90 7f 	br	#0x7f90		;
    799a:	0c 43       	clr	r12		;
    799c:	0d 4c       	mov	r12,	r13	;
    799e:	0e 4c       	mov	r12,	r14	;
    79a0:	3f 40 24 40 	mov	#16420,	r15	;#0x4024
    79a4:	b0 12 f4 b4 	call	#46324		;#0xb4f4
    79a8:	81 4c 28 00 	mov	r12,	40(r1)	; 0x0028
    79ac:	81 4d 30 00 	mov	r13,	48(r1)	; 0x0030
    79b0:	81 4e 24 00 	mov	r14,	36(r1)	; 0x0024
    79b4:	07 4f       	mov	r15,	r7	;
    79b6:	81 43 00 00 	mov	#0,	0(r1)	;r3 As==00
    79ba:	81 43 02 00 	mov	#0,	2(r1)	;r3 As==00
    79be:	81 43 04 00 	mov	#0,	4(r1)	;r3 As==00
    79c2:	81 43 06 00 	mov	#0,	6(r1)	;r3 As==00
    79c6:	b0 12 96 bc 	call	#48278		;#0xbc96
    79ca:	0c 93       	cmp	#0,	r12	;r3 As==00
    79cc:	6a 23       	jnz	$-298    	;abs 0x78a2
    79ce:	30 40 90 7f 	br	#0x7f90		;
    79d2:	81 93 36 00 	cmp	#0,	54(r1)	;r3 As==00, 0x0036
    79d6:	3b 24       	jz	$+120    	;abs 0x7a4e
    79d8:	19 43       	mov	#1,	r9	;r3 As==01
    79da:	19 91 24 00 	cmp	36(r1),	r9	;0x00024
    79de:	13 38       	jl	$+40     	;abs 0x7a06
    79e0:	81 93 4a 00 	cmp	#0,	74(r1)	;r3 As==00, 0x004a
    79e4:	07 24       	jz	$+16     	;abs 0x79f4
    79e6:	3c 50 33 04 	add	#1075,	r12	;#0x0433
    79ea:	17 41 34 00 	mov	52(r1),	r7	;0x00034
    79ee:	18 41 22 00 	mov	34(r1),	r8	;0x00022
    79f2:	22 3c       	jmp	$+70     	;abs 0x7a38
    79f4:	3c 40 36 00 	mov	#54,	r12	;#0x0036
    79f8:	1c 81 52 00 	sub	82(r1),	r12	;0x00052
    79fc:	17 41 34 00 	mov	52(r1),	r7	;0x00034
    7a00:	18 41 22 00 	mov	34(r1),	r8	;0x00022
    7a04:	19 3c       	jmp	$+52     	;abs 0x7a38
    7a06:	0c 46       	mov	r6,	r12	;
    7a08:	3c 53       	add	#-1,	r12	;r3 As==11
    7a0a:	81 9c 34 00 	cmp	r12,	52(r1)	; 0x0034
    7a0e:	04 38       	jl	$+10     	;abs 0x7a18
    7a10:	17 41 34 00 	mov	52(r1),	r7	;0x00034
    7a14:	07 8c       	sub	r12,	r7	;
    7a16:	08 3c       	jmp	$+18     	;abs 0x7a28
    7a18:	0d 4c       	mov	r12,	r13	;
    7a1a:	1d 81 34 00 	sub	52(r1),	r13	;0x00034
    7a1e:	81 5d 42 00 	add	r13,	66(r1)	; 0x0042
    7a22:	81 4c 34 00 	mov	r12,	52(r1)	; 0x0034
    7a26:	07 43       	clr	r7		;
    7a28:	18 41 22 00 	mov	34(r1),	r8	;0x00022
    7a2c:	06 93       	cmp	#0,	r6	;r3 As==00
    7a2e:	03 34       	jge	$+8      	;abs 0x7a36
    7a30:	08 86       	sub	r6,	r8	;
    7a32:	0c 43       	clr	r12		;
    7a34:	01 3c       	jmp	$+4      	;abs 0x7a38
    7a36:	0c 46       	mov	r6,	r12	;
    7a38:	81 5c 22 00 	add	r12,	34(r1)	; 0x0022
    7a3c:	81 5c 20 00 	add	r12,	32(r1)	; 0x0020
    7a40:	1c 41 1e 00 	mov	30(r1),	r12	;0x0001e
    7a44:	1d 43       	mov	#1,	r13	;r3 As==01
    7a46:	b0 12 b6 8a 	call	#35510		;#0x8ab6
    7a4a:	0a 4c       	mov	r12,	r10	;
    7a4c:	06 3c       	jmp	$+14     	;abs 0x7a5a
    7a4e:	17 41 34 00 	mov	52(r1),	r7	;0x00034
    7a52:	18 41 22 00 	mov	34(r1),	r8	;0x00022
    7a56:	1a 41 36 00 	mov	54(r1),	r10	;0x00036
    7a5a:	08 93       	cmp	#0,	r8	;r3 As==00
    7a5c:	0e 24       	jz	$+30     	;abs 0x7a7a
    7a5e:	0c 43       	clr	r12		;
    7a60:	1c 91 20 00 	cmp	32(r1),	r12	;0x00020
    7a64:	0a 34       	jge	$+22     	;abs 0x7a7a
    7a66:	1c 41 20 00 	mov	32(r1),	r12	;0x00020
    7a6a:	08 9c       	cmp	r12,	r8	;
    7a6c:	01 34       	jge	$+4      	;abs 0x7a70
    7a6e:	0c 48       	mov	r8,	r12	;
    7a70:	81 8c 22 00 	sub	r12,	34(r1)	; 0x0022
    7a74:	08 8c       	sub	r12,	r8	;
    7a76:	81 8c 20 00 	sub	r12,	32(r1)	; 0x0020
    7a7a:	0d 43       	clr	r13		;
    7a7c:	1d 91 34 00 	cmp	52(r1),	r13	;0x00034
    7a80:	34 34       	jge	$+106    	;abs 0x7aea
    7a82:	81 9d 36 00 	cmp	r13,	54(r1)	; 0x0036
    7a86:	27 24       	jz	$+80     	;abs 0x7ad6
    7a88:	0d 97       	cmp	r7,	r13	;
    7a8a:	17 34       	jge	$+48     	;abs 0x7aba
    7a8c:	1c 41 1e 00 	mov	30(r1),	r12	;0x0001e
    7a90:	0d 4a       	mov	r10,	r13	;
    7a92:	0e 47       	mov	r7,	r14	;
    7a94:	b0 12 3a 8d 	call	#36154		;#0x8d3a
    7a98:	0a 4c       	mov	r12,	r10	;
    7a9a:	1c 41 1e 00 	mov	30(r1),	r12	;0x0001e
    7a9e:	0d 4a       	mov	r10,	r13	;
    7aa0:	1e 41 26 00 	mov	38(r1),	r14	;0x00026
    7aa4:	b0 12 d8 8a 	call	#35544		;#0x8ad8
    7aa8:	09 4c       	mov	r12,	r9	;
    7aaa:	1c 41 1e 00 	mov	30(r1),	r12	;0x0001e
    7aae:	1d 41 26 00 	mov	38(r1),	r13	;0x00026
    7ab2:	b0 12 64 87 	call	#34660		;#0x8764
    7ab6:	81 49 26 00 	mov	r9,	38(r1)	; 0x0026
    7aba:	1e 41 34 00 	mov	52(r1),	r14	;0x00034
    7abe:	0e 87       	sub	r7,	r14	;
    7ac0:	0e 93       	cmp	#0,	r14	;r3 As==00
    7ac2:	13 24       	jz	$+40     	;abs 0x7aea
    7ac4:	1c 41 1e 00 	mov	30(r1),	r12	;0x0001e
    7ac8:	1d 41 26 00 	mov	38(r1),	r13	;0x00026
    7acc:	b0 12 3a 8d 	call	#36154		;#0x8d3a
    7ad0:	81 4c 26 00 	mov	r12,	38(r1)	; 0x0026
    7ad4:	0a 3c       	jmp	$+22     	;abs 0x7aea
    7ad6:	1c 41 1e 00 	mov	30(r1),	r12	;0x0001e
    7ada:	1d 41 26 00 	mov	38(r1),	r13	;0x00026
    7ade:	1e 41 34 00 	mov	52(r1),	r14	;0x00034
    7ae2:	b0 12 3a 8d 	call	#36154		;#0x8d3a
    7ae6:	81 4c 26 00 	mov	r12,	38(r1)	; 0x0026
    7aea:	1c 41 1e 00 	mov	30(r1),	r12	;0x0001e
    7aee:	1d 43       	mov	#1,	r13	;r3 As==01
    7af0:	b0 12 b6 8a 	call	#35510		;#0x8ab6
    7af4:	09 4c       	mov	r12,	r9	;
    7af6:	0e 43       	clr	r14		;
    7af8:	1e 91 42 00 	cmp	66(r1),	r14	;0x00042
    7afc:	0e 34       	jge	$+30     	;abs 0x7b1a
    7afe:	1c 41 1e 00 	mov	30(r1),	r12	;0x0001e
    7b02:	0d 49       	mov	r9,	r13	;
    7b04:	1e 41 42 00 	mov	66(r1),	r14	;0x00042
    7b08:	b0 12 3a 8d 	call	#36154		;#0x8d3a
    7b0c:	09 4c       	mov	r12,	r9	;
    7b0e:	17 43       	mov	#1,	r7	;r3 As==01
    7b10:	17 91 24 00 	cmp	36(r1),	r7	;0x00024
    7b14:	06 34       	jge	$+14     	;abs 0x7b22
    7b16:	07 43       	clr	r7		;
    7b18:	22 3c       	jmp	$+70     	;abs 0x7b5e
    7b1a:	1c 43       	mov	#1,	r12	;r3 As==01
    7b1c:	1c 91 24 00 	cmp	36(r1),	r12	;0x00024
    7b20:	1a 38       	jl	$+54     	;abs 0x7b56
    7b22:	17 41 28 00 	mov	40(r1),	r7	;0x00028
    7b26:	17 d1 30 00 	bis	48(r1),	r7	;0x00030
    7b2a:	07 93       	cmp	#0,	r7	;r3 As==00
    7b2c:	14 20       	jnz	$+42     	;abs 0x7b56
    7b2e:	0c 45       	mov	r5,	r12	;
    7b30:	1d 41 14 00 	mov	20(r1),	r13	;0x00014
    7b34:	3d f0 0f 00 	and	#15,	r13	;#0x000f
    7b38:	0c dd       	bis	r13,	r12	;
    7b3a:	0c 93       	cmp	#0,	r12	;r3 As==00
    7b3c:	0d 20       	jnz	$+28     	;abs 0x7b58
    7b3e:	17 41 14 00 	mov	20(r1),	r7	;0x00014
    7b42:	37 f0 f0 7f 	and	#32752,	r7	;#0x7ff0
    7b46:	07 93       	cmp	#0,	r7	;r3 As==00
    7b48:	07 24       	jz	$+16     	;abs 0x7b58
    7b4a:	91 53 22 00 	inc	34(r1)		;
    7b4e:	91 53 20 00 	inc	32(r1)		;
    7b52:	17 43       	mov	#1,	r7	;r3 As==01
    7b54:	01 3c       	jmp	$+4      	;abs 0x7b58
    7b56:	07 43       	clr	r7		;
    7b58:	81 93 42 00 	cmp	#0,	66(r1)	;r3 As==00, 0x0042
    7b5c:	11 24       	jz	$+36     	;abs 0x7b80
    7b5e:	1c 49 08 00 	mov	8(r9),	r12	;
    7b62:	3c 53       	add	#-1,	r12	;r3 As==11
    7b64:	41 18 0c 5c 	rpt #2 { rlax.w	r12		;
    7b68:	0c 59       	add	r9,	r12	;
    7b6a:	1d 4c 0c 00 	mov	12(r12),r13	;0x0000c
    7b6e:	1c 4c 0a 00 	mov	10(r12),r12	;0x0000a
    7b72:	b0 12 86 89 	call	#35206		;#0x8986
    7b76:	3d 40 20 00 	mov	#32,	r13	;#0x0020
    7b7a:	0d 8c       	sub	r12,	r13	;
    7b7c:	0c 4d       	mov	r13,	r12	;
    7b7e:	01 3c       	jmp	$+4      	;abs 0x7b82
    7b80:	1c 43       	mov	#1,	r12	;r3 As==01
    7b82:	1c 51 20 00 	add	32(r1),	r12	;0x00020
    7b86:	3c f0 1f 00 	and	#31,	r12	;#0x001f
    7b8a:	0c 93       	cmp	#0,	r12	;r3 As==00
    7b8c:	12 24       	jz	$+38     	;abs 0x7bb2
    7b8e:	3d 40 20 00 	mov	#32,	r13	;#0x0020
    7b92:	0d 8c       	sub	r12,	r13	;
    7b94:	2e 42       	mov	#4,	r14	;r2 As==10
    7b96:	0e 9d       	cmp	r13,	r14	;
    7b98:	09 34       	jge	$+20     	;abs 0x7bac
    7b9a:	3d 40 1c 00 	mov	#28,	r13	;#0x001c
    7b9e:	0d 8c       	sub	r12,	r13	;
    7ba0:	81 5d 22 00 	add	r13,	34(r1)	; 0x0022
    7ba4:	08 5d       	add	r13,	r8	;
    7ba6:	81 5d 20 00 	add	r13,	32(r1)	; 0x0020
    7baa:	0a 3c       	jmp	$+22     	;abs 0x7bc0
    7bac:	2d 92       	cmp	#4,	r13	;r2 As==10
    7bae:	08 24       	jz	$+18     	;abs 0x7bc0
    7bb0:	0c 4d       	mov	r13,	r12	;
    7bb2:	3c 50 1c 00 	add	#28,	r12	;#0x001c
    7bb6:	81 5c 22 00 	add	r12,	34(r1)	; 0x0022
    7bba:	08 5c       	add	r12,	r8	;
    7bbc:	81 5c 20 00 	add	r12,	32(r1)	; 0x0020
    7bc0:	0c 43       	clr	r12		;
    7bc2:	1c 91 22 00 	cmp	34(r1),	r12	;0x00022
    7bc6:	0a 34       	jge	$+22     	;abs 0x7bdc
    7bc8:	1c 41 1e 00 	mov	30(r1),	r12	;0x0001e
    7bcc:	1d 41 26 00 	mov	38(r1),	r13	;0x00026
    7bd0:	1e 41 22 00 	mov	34(r1),	r14	;0x00022
    7bd4:	b0 12 ea 8d 	call	#36330		;#0x8dea
    7bd8:	81 4c 26 00 	mov	r12,	38(r1)	; 0x0026
    7bdc:	0d 43       	clr	r13		;
    7bde:	1d 91 20 00 	cmp	32(r1),	r13	;0x00020
    7be2:	08 34       	jge	$+18     	;abs 0x7bf4
    7be4:	1c 41 1e 00 	mov	30(r1),	r12	;0x0001e
    7be8:	0d 49       	mov	r9,	r13	;
    7bea:	1e 41 20 00 	mov	32(r1),	r14	;0x00020
    7bee:	b0 12 ea 8d 	call	#36330		;#0x8dea
    7bf2:	09 4c       	mov	r12,	r9	;
    7bf4:	81 93 44 00 	cmp	#0,	68(r1)	;r3 As==00, 0x0044
    7bf8:	24 24       	jz	$+74     	;abs 0x7c42
    7bfa:	1c 41 26 00 	mov	38(r1),	r12	;0x00026
    7bfe:	0d 49       	mov	r9,	r13	;
    7c00:	b0 12 10 8f 	call	#36624		;#0x8f10
    7c04:	0c 93       	cmp	#0,	r12	;r3 As==00
    7c06:	1d 34       	jge	$+60     	;abs 0x7c42
    7c08:	34 53       	add	#-1,	r4	;r3 As==11
    7c0a:	36 40 a8 87 	mov	#34728,	r6	;#0x87a8
    7c0e:	1c 41 1e 00 	mov	30(r1),	r12	;0x0001e
    7c12:	1d 41 26 00 	mov	38(r1),	r13	;0x00026
    7c16:	3e 40 0a 00 	mov	#10,	r14	;#0x000a
    7c1a:	0f 43       	clr	r15		;
    7c1c:	86 12       	call	r6		;
    7c1e:	81 4c 26 00 	mov	r12,	38(r1)	; 0x0026
    7c22:	81 93 36 00 	cmp	#0,	54(r1)	;r3 As==00, 0x0036
    7c26:	d2 25       	jz	$+934    	;abs 0x7fcc
    7c28:	1c 41 1e 00 	mov	30(r1),	r12	;0x0001e
    7c2c:	0d 4a       	mov	r10,	r13	;
    7c2e:	3e 40 0a 00 	mov	#10,	r14	;#0x000a
    7c32:	0f 43       	clr	r15		;
    7c34:	86 12       	call	r6		;
    7c36:	0a 4c       	mov	r12,	r10	;
    7c38:	0e 43       	clr	r14		;
    7c3a:	1e 91 0c 00 	cmp	12(r1),	r14	;0x0000c
    7c3e:	4a 38       	jl	$+150    	;abs 0x7cd4
    7c40:	ce 3d       	jmp	$+926    	;abs 0x7fde
    7c42:	0c 43       	clr	r12		;
    7c44:	0c 96       	cmp	r6,	r12	;
    7c46:	39 38       	jl	$+116    	;abs 0x7cba
    7c48:	2d 43       	mov	#2,	r13	;r3 As==10
    7c4a:	1d 91 24 00 	cmp	36(r1),	r13	;0x00024
    7c4e:	35 34       	jge	$+108    	;abs 0x7cba
    7c50:	81 46 0c 00 	mov	r6,	12(r1)	; 0x000c
    7c54:	81 93 0c 00 	cmp	#0,	12(r1)	;r3 As==00, 0x000c
    7c58:	18 20       	jnz	$+50     	;abs 0x7c8a
    7c5a:	1c 41 1e 00 	mov	30(r1),	r12	;0x0001e
    7c5e:	0d 49       	mov	r9,	r13	;
    7c60:	3e 40 05 00 	mov	#5,	r14	;
    7c64:	1f 41 0c 00 	mov	12(r1),	r15	;0x0000c
    7c68:	b0 12 a8 87 	call	#34728		;#0x87a8
    7c6c:	09 4c       	mov	r12,	r9	;
    7c6e:	1c 41 26 00 	mov	38(r1),	r12	;0x00026
    7c72:	0d 49       	mov	r9,	r13	;
    7c74:	b0 12 10 8f 	call	#36624		;#0x8f10
    7c78:	0e 43       	clr	r14		;
    7c7a:	0e 9c       	cmp	r12,	r14	;
    7c7c:	12 38       	jl	$+38     	;abs 0x7ca2
    7c7e:	05 3c       	jmp	$+12     	;abs 0x7c8a
    7c80:	09 47       	mov	r7,	r9	;
    7c82:	0a 47       	mov	r7,	r10	;
    7c84:	02 3c       	jmp	$+6      	;abs 0x7c8a
    7c86:	09 43       	clr	r9		;
    7c88:	0a 49       	mov	r9,	r10	;
    7c8a:	14 41 3e 00 	mov	62(r1),	r4	;0x0003e
    7c8e:	34 e3       	inv	r4		;
    7c90:	15 41 2a 00 	mov	42(r1),	r5	;0x0002a
    7c94:	06 4a       	mov	r10,	r6	;
    7c96:	0a 43       	clr	r10		;
    7c98:	63 3d       	jmp	$+712    	;abs 0x7f60
    7c9a:	14 41 32 00 	mov	50(r1),	r4	;0x00032
    7c9e:	09 47       	mov	r7,	r9	;
    7ca0:	0a 47       	mov	r7,	r10	;
    7ca2:	15 41 2a 00 	mov	42(r1),	r5	;0x0002a
    7ca6:	15 53       	inc	r5		;
    7ca8:	17 41 2a 00 	mov	42(r1),	r7	;0x0002a
    7cac:	f7 40 31 00 	mov.b	#49,	0(r7)	;#0x0031
    7cb0:	00 00 
    7cb2:	14 53       	inc	r4		;
    7cb4:	06 4a       	mov	r10,	r6	;
    7cb6:	0a 43       	clr	r10		;
    7cb8:	53 3d       	jmp	$+680    	;abs 0x7f60
    7cba:	81 93 36 00 	cmp	#0,	54(r1)	;r3 As==00, 0x0036
    7cbe:	08 20       	jnz	$+18     	;abs 0x7cd0
    7cc0:	81 46 0c 00 	mov	r6,	12(r1)	; 0x000c
    7cc4:	17 41 26 00 	mov	38(r1),	r7	;0x00026
    7cc8:	06 43       	clr	r6		;
    7cca:	35 40 a8 87 	mov	#34728,	r5	;#0x87a8
    7cce:	fd 3c       	jmp	$+508    	;abs 0x7eca
    7cd0:	81 46 0c 00 	mov	r6,	12(r1)	; 0x000c
    7cd4:	0c 43       	clr	r12		;
    7cd6:	0c 98       	cmp	r8,	r12	;
    7cd8:	07 34       	jge	$+16     	;abs 0x7ce8
    7cda:	1c 41 1e 00 	mov	30(r1),	r12	;0x0001e
    7cde:	0d 4a       	mov	r10,	r13	;
    7ce0:	0e 48       	mov	r8,	r14	;
    7ce2:	b0 12 ea 8d 	call	#36330		;#0x8dea
    7ce6:	0a 4c       	mov	r12,	r10	;
    7ce8:	07 93       	cmp	#0,	r7	;r3 As==00
    7cea:	1b 24       	jz	$+56     	;abs 0x7d22
    7cec:	1c 41 1e 00 	mov	30(r1),	r12	;0x0001e
    7cf0:	1d 4a 02 00 	mov	2(r10),	r13	;
    7cf4:	b0 12 c6 86 	call	#34502		;#0x86c6
    7cf8:	08 4c       	mov	r12,	r8	;
    7cfa:	1e 4a 08 00 	mov	8(r10),	r14	;
    7cfe:	1e 53       	inc	r14		;
    7d00:	3c 50 06 00 	add	#6,	r12	;
    7d04:	0d 4a       	mov	r10,	r13	;
    7d06:	3d 50 06 00 	add	#6,	r13	;
    7d0a:	41 18 0e 5e 	rpt #2 { rlax.w	r14		;
    7d0e:	b0 12 98 86 	call	#34456		;#0x8698
    7d12:	1c 41 1e 00 	mov	30(r1),	r12	;0x0001e
    7d16:	0d 48       	mov	r8,	r13	;
    7d18:	1e 43       	mov	#1,	r14	;r3 As==01
    7d1a:	b0 12 ea 8d 	call	#36330		;#0x8dea
    7d1e:	06 4c       	mov	r12,	r6	;
    7d20:	01 3c       	jmp	$+4      	;abs 0x7d24
    7d22:	06 4a       	mov	r10,	r6	;
    7d24:	1f 41 2a 00 	mov	42(r1),	r15	;0x0002a
    7d28:	1c 41 0c 00 	mov	12(r1),	r12	;0x0000c
    7d2c:	3c 53       	add	#-1,	r12	;r3 As==11
    7d2e:	0c 5f       	add	r15,	r12	;
    7d30:	81 4c 0c 00 	mov	r12,	12(r1)	; 0x000c
    7d34:	17 41 26 00 	mov	38(r1),	r7	;0x00026
    7d38:	1d 41 28 00 	mov	40(r1),	r13	;0x00028
    7d3c:	1d f3       	and	#1,	r13	;r3 As==01
    7d3e:	81 4d 28 00 	mov	r13,	40(r1)	; 0x0028
    7d42:	0c 47       	mov	r7,	r12	;
    7d44:	0d 49       	mov	r9,	r13	;
    7d46:	81 4f 08 00 	mov	r15,	8(r1)	;
    7d4a:	b0 12 ae 6a 	call	#27310		;#0x6aae
    7d4e:	81 4c 14 00 	mov	r12,	20(r1)	; 0x0014
    7d52:	08 4c       	mov	r12,	r8	;
    7d54:	38 50 30 00 	add	#48,	r8	;#0x0030
    7d58:	0c 47       	mov	r7,	r12	;
    7d5a:	0d 4a       	mov	r10,	r13	;
    7d5c:	b0 12 10 8f 	call	#36624		;#0x8f10
    7d60:	05 4c       	mov	r12,	r5	;
    7d62:	1c 41 1e 00 	mov	30(r1),	r12	;0x0001e
    7d66:	0d 49       	mov	r9,	r13	;
    7d68:	0e 46       	mov	r6,	r14	;
    7d6a:	b0 12 70 8f 	call	#36720		;#0x8f70
    7d6e:	0b 4c       	mov	r12,	r11	;
    7d70:	1f 41 08 00 	mov	8(r1),	r15	;
    7d74:	8c 93 06 00 	cmp	#0,	6(r12)	;r3 As==00
    7d78:	0c 20       	jnz	$+26     	;abs 0x7d92
    7d7a:	0c 47       	mov	r7,	r12	;
    7d7c:	0d 4b       	mov	r11,	r13	;
    7d7e:	81 4b 0a 00 	mov	r11,	10(r1)	; 0x000a
    7d82:	b0 12 10 8f 	call	#36624		;#0x8f10
    7d86:	0e 4c       	mov	r12,	r14	;
    7d88:	1b 41 0a 00 	mov	10(r1),	r11	;0x0000a
    7d8c:	1f 41 08 00 	mov	8(r1),	r15	;
    7d90:	01 3c       	jmp	$+4      	;abs 0x7d94
    7d92:	1e 43       	mov	#1,	r14	;r3 As==01
    7d94:	1c 41 1e 00 	mov	30(r1),	r12	;0x0001e
    7d98:	0d 4b       	mov	r11,	r13	;
    7d9a:	81 4e 0a 00 	mov	r14,	10(r1)	; 0x000a
    7d9e:	81 4f 08 00 	mov	r15,	8(r1)	;
    7da2:	b0 12 64 87 	call	#34660		;#0x8764
    7da6:	1e 41 0a 00 	mov	10(r1),	r14	;0x0000a
    7daa:	1f 41 08 00 	mov	8(r1),	r15	;
    7dae:	0e 93       	cmp	#0,	r14	;r3 As==00
    7db0:	12 20       	jnz	$+38     	;abs 0x7dd6
    7db2:	81 93 24 00 	cmp	#0,	36(r1)	;r3 As==00, 0x0024
    7db6:	0f 20       	jnz	$+32     	;abs 0x7dd6
    7db8:	81 93 28 00 	cmp	#0,	40(r1)	;r3 As==00, 0x0028
    7dbc:	0c 20       	jnz	$+26     	;abs 0x7dd6
    7dbe:	81 47 26 00 	mov	r7,	38(r1)	; 0x0026
    7dc2:	38 90 39 00 	cmp	#57,	r8	;#0x0039
    7dc6:	43 24       	jz	$+136    	;abs 0x7e4e
    7dc8:	0e 95       	cmp	r5,	r14	;
    7dca:	30 34       	jge	$+98     	;abs 0x7e2c
    7dcc:	18 41 14 00 	mov	20(r1),	r8	;0x00014
    7dd0:	38 50 31 00 	add	#49,	r8	;#0x0031
    7dd4:	2b 3c       	jmp	$+88     	;abs 0x7e2c
    7dd6:	05 93       	cmp	#0,	r5	;r3 As==00
    7dd8:	06 34       	jge	$+14     	;abs 0x7de6
    7dda:	81 47 26 00 	mov	r7,	38(r1)	; 0x0026
    7dde:	0c 43       	clr	r12		;
    7de0:	0c 9e       	cmp	r14,	r12	;
    7de2:	0a 38       	jl	$+22     	;abs 0x7df8
    7de4:	23 3c       	jmp	$+72     	;abs 0x7e2c
    7de6:	05 93       	cmp	#0,	r5	;r3 As==00
    7de8:	26 20       	jnz	$+78     	;abs 0x7e36
    7dea:	81 93 24 00 	cmp	#0,	36(r1)	;r3 As==00, 0x0024
    7dee:	23 20       	jnz	$+72     	;abs 0x7e36
    7df0:	81 93 28 00 	cmp	#0,	40(r1)	;r3 As==00, 0x0028
    7df4:	20 20       	jnz	$+66     	;abs 0x7e36
    7df6:	f1 3f       	jmp	$-28     	;abs 0x7dda
    7df8:	1c 41 1e 00 	mov	30(r1),	r12	;0x0001e
    7dfc:	0d 47       	mov	r7,	r13	;
    7dfe:	1e 43       	mov	#1,	r14	;r3 As==01
    7e00:	81 4f 08 00 	mov	r15,	8(r1)	;
    7e04:	b0 12 ea 8d 	call	#36330		;#0x8dea
    7e08:	81 4c 26 00 	mov	r12,	38(r1)	; 0x0026
    7e0c:	0d 49       	mov	r9,	r13	;
    7e0e:	b0 12 10 8f 	call	#36624		;#0x8f10
    7e12:	1f 41 08 00 	mov	8(r1),	r15	;
    7e16:	0d 43       	clr	r13		;
    7e18:	0d 9c       	cmp	r12,	r13	;
    7e1a:	04 38       	jl	$+10     	;abs 0x7e24
    7e1c:	0c 9d       	cmp	r13,	r12	;
    7e1e:	06 20       	jnz	$+14     	;abs 0x7e2c
    7e20:	18 b3       	bit	#1,	r8	;r3 As==01
    7e22:	04 24       	jz	$+10     	;abs 0x7e2c
    7e24:	38 90 39 00 	cmp	#57,	r8	;#0x0039
    7e28:	12 24       	jz	$+38     	;abs 0x7e4e
    7e2a:	18 53       	inc	r8		;
    7e2c:	05 4f       	mov	r15,	r5	;
    7e2e:	15 53       	inc	r5		;
    7e30:	cf 48 00 00 	mov.b	r8,	0(r15)	;
    7e34:	95 3c       	jmp	$+300    	;abs 0x7f60
    7e36:	0c 4f       	mov	r15,	r12	;
    7e38:	1c 53       	inc	r12		;
    7e3a:	81 4c 14 00 	mov	r12,	20(r1)	; 0x0014
    7e3e:	0d 43       	clr	r13		;
    7e40:	0d 9e       	cmp	r14,	r13	;
    7e42:	11 34       	jge	$+36     	;abs 0x7e66
    7e44:	81 47 26 00 	mov	r7,	38(r1)	; 0x0026
    7e48:	38 90 39 00 	cmp	#57,	r8	;#0x0039
    7e4c:	06 20       	jnz	$+14     	;abs 0x7e5a
    7e4e:	05 4f       	mov	r15,	r5	;
    7e50:	15 53       	inc	r5		;
    7e52:	ff 40 39 00 	mov.b	#57,	0(r15)	;#0x0039
    7e56:	00 00 
    7e58:	67 3c       	jmp	$+208    	;abs 0x7f28
    7e5a:	15 41 14 00 	mov	20(r1),	r5	;0x00014
    7e5e:	58 53       	inc.b	r8		;
    7e60:	cf 48 00 00 	mov.b	r8,	0(r15)	;
    7e64:	7d 3c       	jmp	$+252    	;abs 0x7f60
    7e66:	15 41 14 00 	mov	20(r1),	r5	;0x00014
    7e6a:	cf 48 00 00 	mov.b	r8,	0(r15)	;
    7e6e:	1f 91 0c 00 	cmp	12(r1),	r15	;0x0000c
    7e72:	46 24       	jz	$+142    	;abs 0x7f00
    7e74:	38 40 a8 87 	mov	#34728,	r8	;#0x87a8
    7e78:	1c 41 1e 00 	mov	30(r1),	r12	;0x0001e
    7e7c:	0d 47       	mov	r7,	r13	;
    7e7e:	3e 40 0a 00 	mov	#10,	r14	;#0x000a
    7e82:	0f 43       	clr	r15		;
    7e84:	88 12       	call	r8		;
    7e86:	07 4c       	mov	r12,	r7	;
    7e88:	1c 41 1e 00 	mov	30(r1),	r12	;0x0001e
    7e8c:	0d 4a       	mov	r10,	r13	;
    7e8e:	3e 40 0a 00 	mov	#10,	r14	;#0x000a
    7e92:	0f 43       	clr	r15		;
    7e94:	0a 96       	cmp	r6,	r10	;
    7e96:	04 20       	jnz	$+10     	;abs 0x7ea0
    7e98:	88 12       	call	r8		;
    7e9a:	0a 4c       	mov	r12,	r10	;
    7e9c:	06 4c       	mov	r12,	r6	;
    7e9e:	0a 3c       	jmp	$+22     	;abs 0x7eb4
    7ea0:	88 12       	call	r8		;
    7ea2:	0a 4c       	mov	r12,	r10	;
    7ea4:	1c 41 1e 00 	mov	30(r1),	r12	;0x0001e
    7ea8:	0d 46       	mov	r6,	r13	;
    7eaa:	3e 40 0a 00 	mov	#10,	r14	;#0x000a
    7eae:	0f 43       	clr	r15		;
    7eb0:	88 12       	call	r8		;
    7eb2:	06 4c       	mov	r12,	r6	;
    7eb4:	1f 41 14 00 	mov	20(r1),	r15	;0x00014
    7eb8:	44 3f       	jmp	$-374    	;abs 0x7d42
    7eba:	1c 41 1e 00 	mov	30(r1),	r12	;0x0001e
    7ebe:	0d 47       	mov	r7,	r13	;
    7ec0:	3e 40 0a 00 	mov	#10,	r14	;#0x000a
    7ec4:	0f 43       	clr	r15		;
    7ec6:	85 12       	call	r5		;
    7ec8:	07 4c       	mov	r12,	r7	;
    7eca:	0c 47       	mov	r7,	r12	;
    7ecc:	0d 49       	mov	r9,	r13	;
    7ece:	b0 12 ae 6a 	call	#27310		;#0x6aae
    7ed2:	08 4c       	mov	r12,	r8	;
    7ed4:	38 50 30 00 	add	#48,	r8	;#0x0030
    7ed8:	1c 41 2a 00 	mov	42(r1),	r12	;0x0002a
    7edc:	0c 56       	add	r6,	r12	;
    7ede:	cc 48 00 00 	mov.b	r8,	0(r12)	;
    7ee2:	16 53       	inc	r6		;
    7ee4:	16 91 0c 00 	cmp	12(r1),	r6	;0x0000c
    7ee8:	e8 3b       	jl	$-46     	;abs 0x7eba
    7eea:	1c 41 0c 00 	mov	12(r1),	r12	;0x0000c
    7eee:	0e 43       	clr	r14		;
    7ef0:	0e 9c       	cmp	r12,	r14	;
    7ef2:	01 38       	jl	$+4      	;abs 0x7ef6
    7ef4:	1c 43       	mov	#1,	r12	;r3 As==01
    7ef6:	15 41 2a 00 	mov	42(r1),	r5	;0x0002a
    7efa:	05 5c       	add	r12,	r5	;
    7efc:	06 4a       	mov	r10,	r6	;
    7efe:	0a 43       	clr	r10		;
    7f00:	1c 41 1e 00 	mov	30(r1),	r12	;0x0001e
    7f04:	0d 47       	mov	r7,	r13	;
    7f06:	1e 43       	mov	#1,	r14	;r3 As==01
    7f08:	b0 12 ea 8d 	call	#36330		;#0x8dea
    7f0c:	81 4c 26 00 	mov	r12,	38(r1)	; 0x0026
    7f10:	0d 49       	mov	r9,	r13	;
    7f12:	b0 12 10 8f 	call	#36624		;#0x8f10
    7f16:	07 43       	clr	r7		;
    7f18:	07 9c       	cmp	r12,	r7	;
    7f1a:	06 38       	jl	$+14     	;abs 0x7f28
    7f1c:	0c 97       	cmp	r7,	r12	;
    7f1e:	18 20       	jnz	$+50     	;abs 0x7f50
    7f20:	18 b3       	bit	#1,	r8	;r3 As==01
    7f22:	02 20       	jnz	$+6      	;abs 0x7f28
    7f24:	15 3c       	jmp	$+44     	;abs 0x7f50
    7f26:	05 4c       	mov	r12,	r5	;
    7f28:	0c 45       	mov	r5,	r12	;
    7f2a:	3c 53       	add	#-1,	r12	;r3 As==11
    7f2c:	6d 4c       	mov.b	@r12,	r13	;
    7f2e:	3d 90 39 00 	cmp	#57,	r13	;#0x0039
    7f32:	0a 20       	jnz	$+22     	;abs 0x7f48
    7f34:	1c 91 2a 00 	cmp	42(r1),	r12	;0x0002a
    7f38:	f6 23       	jnz	$-18     	;abs 0x7f26
    7f3a:	14 53       	inc	r4		;
    7f3c:	17 41 2a 00 	mov	42(r1),	r7	;0x0002a
    7f40:	f7 40 31 00 	mov.b	#49,	0(r7)	;#0x0031
    7f44:	00 00 
    7f46:	0c 3c       	jmp	$+26     	;abs 0x7f60
    7f48:	5d 53       	inc.b	r13		;
    7f4a:	cc 4d 00 00 	mov.b	r13,	0(r12)	;
    7f4e:	08 3c       	jmp	$+18     	;abs 0x7f60
    7f50:	0c 45       	mov	r5,	r12	;
    7f52:	3c 53       	add	#-1,	r12	;r3 As==11
    7f54:	fc 90 30 00 	cmp.b	#48,	0(r12)	;#0x0030
    7f58:	00 00 
    7f5a:	02 20       	jnz	$+6      	;abs 0x7f60
    7f5c:	05 4c       	mov	r12,	r5	;
    7f5e:	f8 3f       	jmp	$-14     	;abs 0x7f50
    7f60:	38 40 64 87 	mov	#34660,	r8	;#0x8764
    7f64:	1c 41 1e 00 	mov	30(r1),	r12	;0x0001e
    7f68:	0d 49       	mov	r9,	r13	;
    7f6a:	88 12       	call	r8		;
    7f6c:	09 48       	mov	r8,	r9	;
    7f6e:	06 93       	cmp	#0,	r6	;r3 As==00
    7f70:	0f 24       	jz	$+32     	;abs 0x7f90
    7f72:	0a 93       	cmp	#0,	r10	;r3 As==00
    7f74:	06 24       	jz	$+14     	;abs 0x7f82
    7f76:	0a 96       	cmp	r6,	r10	;
    7f78:	04 24       	jz	$+10     	;abs 0x7f82
    7f7a:	1c 41 1e 00 	mov	30(r1),	r12	;0x0001e
    7f7e:	0d 4a       	mov	r10,	r13	;
    7f80:	88 12       	call	r8		;
    7f82:	1c 41 1e 00 	mov	30(r1),	r12	;0x0001e
    7f86:	0d 46       	mov	r6,	r13	;
    7f88:	89 12       	call	r9		;
    7f8a:	02 3c       	jmp	$+6      	;abs 0x7f90
    7f8c:	14 41 32 00 	mov	50(r1),	r4	;0x00032
    7f90:	1c 41 1e 00 	mov	30(r1),	r12	;0x0001e
    7f94:	1d 41 26 00 	mov	38(r1),	r13	;0x00026
    7f98:	b0 12 64 87 	call	#34660		;#0x8764
    7f9c:	c5 43 00 00 	mov.b	#0,	0(r5)	;r3 As==00
    7fa0:	09 44       	mov	r4,	r9	;
    7fa2:	19 53       	inc	r9		;
    7fa4:	17 41 48 00 	mov	72(r1),	r7	;0x00048
    7fa8:	87 49 00 00 	mov	r9,	0(r7)	;
    7fac:	81 93 70 00 	cmp	#0,	112(r1)	;r3 As==00, 0x0070
    7fb0:	0a 24       	jz	$+22     	;abs 0x7fc6
    7fb2:	17 41 70 00 	mov	112(r1),r7	;0x00070
    7fb6:	87 45 00 00 	mov	r5,	0(r7)	;
    7fba:	1c 41 2a 00 	mov	42(r1),	r12	;0x0002a
    7fbe:	14 3c       	jmp	$+42     	;abs 0x7fe8
    7fc0:	3c 40 68 44 	mov	#17512,	r12	;#0x4468
    7fc4:	11 3c       	jmp	$+36     	;abs 0x7fe8
    7fc6:	1c 41 2a 00 	mov	42(r1),	r12	;0x0002a
    7fca:	0e 3c       	jmp	$+30     	;abs 0x7fe8
    7fcc:	0c 43       	clr	r12		;
    7fce:	1c 91 0c 00 	cmp	12(r1),	r12	;0x0000c
    7fd2:	78 3a       	jl	$-782    	;abs 0x7cc4
    7fd4:	2d 43       	mov	#2,	r13	;r3 As==10
    7fd6:	1d 91 24 00 	cmp	36(r1),	r13	;0x00024
    7fda:	3c 3a       	jl	$-902    	;abs 0x7c54
    7fdc:	73 3e       	jmp	$-792    	;abs 0x7cc4
    7fde:	2e 43       	mov	#2,	r14	;r3 As==10
    7fe0:	1e 91 24 00 	cmp	36(r1),	r14	;0x00024
    7fe4:	37 3a       	jl	$-912    	;abs 0x7c54
    7fe6:	76 3e       	jmp	$-786    	;abs 0x7cd4
    7fe8:	31 50 56 00 	add	#86,	r1	;#0x0056
    7fec:	64 17       	popm	#7,	r10	;16-bit words
    7fee:	30 41       	ret			

00007ff0 <__sflush_r>:
    7ff0:	4a 15       	pushm	#5,	r10	;16-bit words
    7ff2:	21 83       	decd	r1		;
    7ff4:	09 4c       	mov	r12,	r9	;
    7ff6:	0a 4d       	mov	r13,	r10	;
    7ff8:	1d 4d 06 00 	mov	6(r13),	r13	;
    7ffc:	08 4d       	mov	r13,	r8	;
    7ffe:	38 f2       	and	#8,	r8	;r2 As==11
    8000:	08 93       	cmp	#0,	r8	;r3 As==00
    8002:	91 20       	jnz	$+292    	;abs 0x8126
    8004:	06 4d       	mov	r13,	r6	;
    8006:	36 d0 00 08 	bis	#2048,	r6	;#0x0800
    800a:	8a 46 06 00 	mov	r6,	6(r10)	;
    800e:	0c 43       	clr	r12		;
    8010:	1c 9a 02 00 	cmp	2(r10),	r12	;
    8014:	03 38       	jl	$+8      	;abs 0x801c
    8016:	1c 9a 22 00 	cmp	34(r10),r12	;0x00022
    801a:	28 34       	jge	$+82     	;abs 0x806c
    801c:	1b 4a 18 00 	mov	24(r10),r11	;0x00018
    8020:	0b 93       	cmp	#0,	r11	;r3 As==00
    8022:	24 24       	jz	$+74     	;abs 0x806c
    8024:	27 49       	mov	@r9,	r7	;
    8026:	89 43 00 00 	mov	#0,	0(r9)	;r3 As==00
    802a:	3d b0 00 10 	bit	#4096,	r13	;#0x1000
    802e:	05 24       	jz	$+12     	;abs 0x803a
    8030:	1e 4a 2e 00 	mov	46(r10),r14	;0x0002e
    8034:	1f 4a 30 00 	mov	48(r10),r15	;0x00030
    8038:	1b 3c       	jmp	$+56     	;abs 0x8070
    803a:	1d 4a 12 00 	mov	18(r10),r13	;0x00012
    803e:	91 43 00 00 	mov	#1,	0(r1)	;r3 As==01
    8042:	0c 49       	mov	r9,	r12	;
    8044:	0e 43       	clr	r14		;
    8046:	0f 43       	clr	r15		;
    8048:	8b 12       	call	r11		;
    804a:	0e 4c       	mov	r12,	r14	;
    804c:	0f 4d       	mov	r13,	r15	;
    804e:	3c 93       	cmp	#-1,	r12	;r3 As==11
    8050:	0f 20       	jnz	$+32     	;abs 0x8070
    8052:	3d 93       	cmp	#-1,	r13	;r3 As==11
    8054:	0d 20       	jnz	$+28     	;abs 0x8070
    8056:	2c 49       	mov	@r9,	r12	;
    8058:	0c 93       	cmp	#0,	r12	;r3 As==00
    805a:	0a 24       	jz	$+22     	;abs 0x8070
    805c:	3c 90 1d 00 	cmp	#29,	r12	;#0x001d
    8060:	03 24       	jz	$+8      	;abs 0x8068
    8062:	3c 90 16 00 	cmp	#22,	r12	;#0x0016
    8066:	5a 20       	jnz	$+182    	;abs 0x811c
    8068:	89 47 00 00 	mov	r7,	0(r9)	;
    806c:	08 43       	clr	r8		;
    806e:	83 3c       	jmp	$+264    	;abs 0x8176
    8070:	ea b2 06 00 	bit.b	#4,	6(r10)	;r2 As==10
    8074:	13 24       	jz	$+40     	;abs 0x809c
    8076:	16 4a 02 00 	mov	2(r10),	r6	;
    807a:	0c 46       	mov	r6,	r12	;
    807c:	0d 46       	mov	r6,	r13	;
    807e:	4e 18 0d 11 	rpt #15 { rrax.w	r13		;
    8082:	0e 8c       	sub	r12,	r14	;
    8084:	0f 7d       	subc	r13,	r15	;
    8086:	8a 93 1c 00 	cmp	#0,	28(r10)	;r3 As==00, 0x001c
    808a:	08 24       	jz	$+18     	;abs 0x809c
    808c:	16 4a 22 00 	mov	34(r10),r6	;0x00022
    8090:	0c 46       	mov	r6,	r12	;
    8092:	0d 46       	mov	r6,	r13	;
    8094:	4e 18 0d 11 	rpt #15 { rrax.w	r13		;
    8098:	0e 8c       	sub	r12,	r14	;
    809a:	0f 7d       	subc	r13,	r15	;
    809c:	1d 4a 12 00 	mov	18(r10),r13	;0x00012
    80a0:	81 43 00 00 	mov	#0,	0(r1)	;r3 As==00
    80a4:	0c 49       	mov	r9,	r12	;
    80a6:	16 4a 18 00 	mov	24(r10),r6	;0x00018
    80aa:	86 12       	call	r6		;
    80ac:	3c 93       	cmp	#-1,	r12	;r3 As==11
    80ae:	0b 20       	jnz	$+24     	;abs 0x80c6
    80b0:	3d 93       	cmp	#-1,	r13	;r3 As==11
    80b2:	09 20       	jnz	$+20     	;abs 0x80c6
    80b4:	2e 49       	mov	@r9,	r14	;
    80b6:	0e 93       	cmp	#0,	r14	;r3 As==00
    80b8:	06 24       	jz	$+14     	;abs 0x80c6
    80ba:	3e 90 1d 00 	cmp	#29,	r14	;#0x001d
    80be:	03 24       	jz	$+8      	;abs 0x80c6
    80c0:	3e 90 16 00 	cmp	#22,	r14	;#0x0016
    80c4:	2b 20       	jnz	$+88     	;abs 0x811c
    80c6:	1e 4a 06 00 	mov	6(r10),	r14	;
    80ca:	0f 4e       	mov	r14,	r15	;
    80cc:	3f f0 ff f7 	and	#63487,	r15	;#0xf7ff
    80d0:	8a 4f 06 00 	mov	r15,	6(r10)	;
    80d4:	8a 43 02 00 	mov	#0,	2(r10)	;r3 As==00
    80d8:	9a 4a 0a 00 	mov	10(r10),0(r10)	;0x0000a
    80dc:	00 00 
    80de:	3e b0 00 10 	bit	#4096,	r14	;#0x1000
    80e2:	0b 24       	jz	$+24     	;abs 0x80fa
    80e4:	3c 93       	cmp	#-1,	r12	;r3 As==11
    80e6:	05 20       	jnz	$+12     	;abs 0x80f2
    80e8:	3d 93       	cmp	#-1,	r13	;r3 As==11
    80ea:	03 20       	jnz	$+8      	;abs 0x80f2
    80ec:	89 93 00 00 	cmp	#0,	0(r9)	;r3 As==00
    80f0:	04 20       	jnz	$+10     	;abs 0x80fa
    80f2:	8a 4c 2e 00 	mov	r12,	46(r10)	; 0x002e
    80f6:	8a 4d 30 00 	mov	r13,	48(r10)	; 0x0030
    80fa:	89 47 00 00 	mov	r7,	0(r9)	;
    80fe:	1d 4a 1c 00 	mov	28(r10),r13	;0x0001c
    8102:	0d 93       	cmp	#0,	r13	;r3 As==00
    8104:	b3 27       	jz	$-152    	;abs 0x806c
    8106:	0c 4a       	mov	r10,	r12	;
    8108:	3c 50 24 00 	add	#36,	r12	;#0x0024
    810c:	0d 9c       	cmp	r12,	r13	;
    810e:	03 24       	jz	$+8      	;abs 0x8116
    8110:	0c 49       	mov	r9,	r12	;
    8112:	b0 12 86 96 	call	#38534		;#0x9686
    8116:	8a 43 1c 00 	mov	#0,	28(r10)	;r3 As==00, 0x001c
    811a:	2d 3c       	jmp	$+92     	;abs 0x8176
    811c:	ba d0 40 00 	bis	#64,	6(r10)	;#0x0040
    8120:	06 00 
    8122:	08 4d       	mov	r13,	r8	;
    8124:	28 3c       	jmp	$+82     	;abs 0x8176
    8126:	18 4a 0a 00 	mov	10(r10),r8	;0x0000a
    812a:	08 93       	cmp	#0,	r8	;r3 As==00
    812c:	9f 27       	jz	$-192    	;abs 0x806c
    812e:	27 4a       	mov	@r10,	r7	;
    8130:	07 88       	sub	r8,	r7	;
    8132:	8a 48 00 00 	mov	r8,	0(r10)	;
    8136:	3d f0 03 00 	and	#3,	r13	;
    813a:	0d 93       	cmp	#0,	r13	;r3 As==00
    813c:	03 20       	jnz	$+8      	;abs 0x8144
    813e:	1c 4a 0c 00 	mov	12(r10),r12	;0x0000c
    8142:	01 3c       	jmp	$+4      	;abs 0x8146
    8144:	0c 43       	clr	r12		;
    8146:	8a 4c 04 00 	mov	r12,	4(r10)	;
    814a:	0f 43       	clr	r15		;
    814c:	0f 97       	cmp	r7,	r15	;
    814e:	8e 37       	jge	$-226    	;abs 0x806c
    8150:	0c 49       	mov	r9,	r12	;
    8152:	1d 4a 12 00 	mov	18(r10),r13	;0x00012
    8156:	0e 48       	mov	r8,	r14	;
    8158:	0f 47       	mov	r7,	r15	;
    815a:	16 4a 16 00 	mov	22(r10),r6	;0x00016
    815e:	86 12       	call	r6		;
    8160:	0d 43       	clr	r13		;
    8162:	0d 9c       	cmp	r12,	r13	;
    8164:	05 38       	jl	$+12     	;abs 0x8170
    8166:	ba d0 40 00 	bis	#64,	6(r10)	;#0x0040
    816a:	06 00 
    816c:	38 43       	mov	#-1,	r8	;r3 As==11
    816e:	03 3c       	jmp	$+8      	;abs 0x8176
    8170:	08 5c       	add	r12,	r8	;
    8172:	07 8c       	sub	r12,	r7	;
    8174:	ea 3f       	jmp	$-42     	;abs 0x814a
    8176:	0c 48       	mov	r8,	r12	;
    8178:	21 53       	incd	r1		;
    817a:	46 17       	popm	#5,	r10	;16-bit words
    817c:	30 41       	ret			

0000817e <_fflush_r>:
    817e:	0a 15       	pushm	#1,	r10	;16-bit words
    8180:	21 83       	decd	r1		;
    8182:	0a 4c       	mov	r12,	r10	;
    8184:	8d 93 0a 00 	cmp	#0,	10(r13)	;r3 As==00, 0x000a
    8188:	02 20       	jnz	$+6      	;abs 0x818e
    818a:	0c 43       	clr	r12		;
    818c:	21 3c       	jmp	$+68     	;abs 0x81d0
    818e:	0c 93       	cmp	#0,	r12	;r3 As==00
    8190:	08 24       	jz	$+18     	;abs 0x81a2
    8192:	8c 93 0c 00 	cmp	#0,	12(r12)	;r3 As==00, 0x000c
    8196:	05 20       	jnz	$+12     	;abs 0x81a2
    8198:	81 4d 00 00 	mov	r13,	0(r1)	;
    819c:	b0 12 56 82 	call	#33366		;#0x8256
    81a0:	2d 41       	mov	@r1,	r13	;
    81a2:	3d 90 8e 44 	cmp	#17550,	r13	;#0x448e
    81a6:	03 20       	jnz	$+8      	;abs 0x81ae
    81a8:	1d 4a 02 00 	mov	2(r10),	r13	;
    81ac:	0b 3c       	jmp	$+24     	;abs 0x81c4
    81ae:	3d 90 7c 44 	cmp	#17532,	r13	;#0x447c
    81b2:	03 20       	jnz	$+8      	;abs 0x81ba
    81b4:	1d 4a 04 00 	mov	4(r10),	r13	;
    81b8:	05 3c       	jmp	$+12     	;abs 0x81c4
    81ba:	3d 90 6a 44 	cmp	#17514,	r13	;#0x446a
    81be:	02 20       	jnz	$+6      	;abs 0x81c4
    81c0:	1d 4a 06 00 	mov	6(r10),	r13	;
    81c4:	8d 93 06 00 	cmp	#0,	6(r13)	;r3 As==00
    81c8:	e0 27       	jz	$-62     	;abs 0x818a
    81ca:	0c 4a       	mov	r10,	r12	;
    81cc:	b0 12 f0 7f 	call	#32752		;#0x7ff0
    81d0:	21 53       	incd	r1		;
    81d2:	0a 17       	popm	#1,	r10	;16-bit words
    81d4:	30 41       	ret			

000081d6 <fflush>:
    81d6:	0d 4c       	mov	r12,	r13	;
    81d8:	0c 93       	cmp	#0,	r12	;r3 As==00
    81da:	07 20       	jnz	$+16     	;abs 0x81ea
    81dc:	1c 42 a0 44 	mov	&0x44a0,r12	;0x44a0
    81e0:	3d 40 7e 81 	mov	#33150,	r13	;#0x817e
    81e4:	b0 12 b0 84 	call	#33968		;#0x84b0
    81e8:	04 3c       	jmp	$+10     	;abs 0x81f2
    81ea:	1c 42 04 1c 	mov	&0x1c04,r12	;0x1c04
    81ee:	b0 12 7e 81 	call	#33150		;#0x817e
    81f2:	30 41       	ret			

000081f4 <__fp_lock>:
    81f4:	0c 43       	clr	r12		;
    81f6:	30 41       	ret			

000081f8 <__fp_unlock>:
    81f8:	0c 43       	clr	r12		;
    81fa:	30 41       	ret			

000081fc <_cleanup_r>:
    81fc:	3d 40 f2 a5 	mov	#42482,	r13	;#0xa5f2
    8200:	b0 12 68 84 	call	#33896		;#0x8468
    8204:	30 41       	ret			

00008206 <__sfmoreglue>:
    8206:	2a 15       	pushm	#3,	r10	;16-bit words
    8208:	08 4d       	mov	r13,	r8	;
    820a:	0a 4d       	mov	r13,	r10	;
    820c:	3a 53       	add	#-1,	r10	;r3 As==11
    820e:	0d 4a       	mov	r10,	r13	;
    8210:	41 18 0d 5d 	rpt #2 { rlax.w	r13		;
    8214:	45 18 0a 5a 	rpt #6 { rlax.w	r10		;
    8218:	0a 8d       	sub	r13,	r10	;
    821a:	0d 4a       	mov	r10,	r13	;
    821c:	3d 50 42 00 	add	#66,	r13	;#0x0042
    8220:	b0 12 70 97 	call	#38768		;#0x9770
    8224:	09 4c       	mov	r12,	r9	;
    8226:	0c 93       	cmp	#0,	r12	;r3 As==00
    8228:	0e 24       	jz	$+30     	;abs 0x8246
    822a:	8c 43 00 00 	mov	#0,	0(r12)	;r3 As==00
    822e:	8c 48 02 00 	mov	r8,	2(r12)	;
    8232:	3c 50 06 00 	add	#6,	r12	;
    8236:	89 4c 04 00 	mov	r12,	4(r9)	;
    823a:	0d 43       	clr	r13		;
    823c:	0e 4a       	mov	r10,	r14	;
    823e:	3e 50 3c 00 	add	#60,	r14	;#0x003c
    8242:	b0 12 b4 86 	call	#34484		;#0x86b4
    8246:	0c 49       	mov	r9,	r12	;
    8248:	28 17       	popm	#3,	r10	;16-bit words
    824a:	30 41       	ret			

0000824c <_cleanup>:
    824c:	1c 42 a0 44 	mov	&0x44a0,r12	;0x44a0
    8250:	b0 12 fc 81 	call	#33276		;#0x81fc
    8254:	30 41       	ret			

00008256 <__sinit>:
    8256:	2a 15       	pushm	#3,	r10	;16-bit words
    8258:	8c 93 0c 00 	cmp	#0,	12(r12)	;r3 As==00, 0x000c
    825c:	9d 20       	jnz	$+316    	;abs 0x8398
    825e:	bc 40 fc 81 	mov	#33276,	20(r12)	;#0x81fc, 0x0014
    8262:	14 00 
    8264:	8c 43 6c 00 	mov	#0,	108(r12);r3 As==00, 0x006c
    8268:	8c 43 6e 00 	mov	#0,	110(r12);r3 As==00, 0x006e
    826c:	8c 43 70 00 	mov	#0,	112(r12);r3 As==00, 0x0070
    8270:	1c 92 a0 44 	cmp	&0x44a0,r12	;0x44a0
    8274:	02 20       	jnz	$+6      	;abs 0x827a
    8276:	9c 43 0c 00 	mov	#1,	12(r12)	;r3 As==01, 0x000c
    827a:	0a 4c       	mov	r12,	r10	;
    827c:	39 40 9c 83 	mov	#33692,	r9	;#0x839c
    8280:	89 12       	call	r9		;
    8282:	8a 4c 02 00 	mov	r12,	2(r10)	;
    8286:	0c 4a       	mov	r10,	r12	;
    8288:	89 12       	call	r9		;
    828a:	8a 4c 04 00 	mov	r12,	4(r10)	;
    828e:	0c 4a       	mov	r10,	r12	;
    8290:	89 12       	call	r9		;
    8292:	8a 4c 06 00 	mov	r12,	6(r10)	;
    8296:	19 4a 02 00 	mov	2(r10),	r9	;
    829a:	89 43 00 00 	mov	#0,	0(r9)	;r3 As==00
    829e:	89 43 02 00 	mov	#0,	2(r9)	;r3 As==00
    82a2:	89 43 04 00 	mov	#0,	4(r9)	;r3 As==00
    82a6:	a9 42 06 00 	mov	#4,	6(r9)	;r2 As==10
    82aa:	89 43 3a 00 	mov	#0,	58(r9)	;r3 As==00, 0x003a
    82ae:	89 43 08 00 	mov	#0,	8(r9)	;r3 As==00
    82b2:	89 43 0a 00 	mov	#0,	10(r9)	;r3 As==00, 0x000a
    82b6:	89 43 0c 00 	mov	#0,	12(r9)	;r3 As==00, 0x000c
    82ba:	89 43 0e 00 	mov	#0,	14(r9)	;r3 As==00, 0x000e
    82be:	38 40 b4 86 	mov	#34484,	r8	;#0x86b4
    82c2:	0c 49       	mov	r9,	r12	;
    82c4:	3c 50 34 00 	add	#52,	r12	;#0x0034
    82c8:	0d 43       	clr	r13		;
    82ca:	3e 40 06 00 	mov	#6,	r14	;
    82ce:	88 12       	call	r8		;
    82d0:	89 49 12 00 	mov	r9,	18(r9)	; 0x0012
    82d4:	b9 40 f0 98 	mov	#39152,	20(r9)	;#0x98f0, 0x0014
    82d8:	14 00 
    82da:	b9 40 2c 99 	mov	#39212,	22(r9)	;#0x992c, 0x0016
    82de:	16 00 
    82e0:	b9 40 68 99 	mov	#39272,	24(r9)	;#0x9968, 0x0018
    82e4:	18 00 
    82e6:	b9 40 a0 99 	mov	#39328,	26(r9)	;#0x99a0, 0x001a
    82ea:	1a 00 
    82ec:	19 4a 04 00 	mov	4(r10),	r9	;
    82f0:	89 43 00 00 	mov	#0,	0(r9)	;r3 As==00
    82f4:	89 43 02 00 	mov	#0,	2(r9)	;r3 As==00
    82f8:	89 43 04 00 	mov	#0,	4(r9)	;r3 As==00
    82fc:	b9 40 09 00 	mov	#9,	6(r9)	;
    8300:	06 00 
    8302:	89 43 3a 00 	mov	#0,	58(r9)	;r3 As==00, 0x003a
    8306:	99 43 08 00 	mov	#1,	8(r9)	;r3 As==01
    830a:	89 43 0a 00 	mov	#0,	10(r9)	;r3 As==00, 0x000a
    830e:	89 43 0c 00 	mov	#0,	12(r9)	;r3 As==00, 0x000c
    8312:	89 43 0e 00 	mov	#0,	14(r9)	;r3 As==00, 0x000e
    8316:	0c 49       	mov	r9,	r12	;
    8318:	3c 50 34 00 	add	#52,	r12	;#0x0034
    831c:	0d 43       	clr	r13		;
    831e:	3e 40 06 00 	mov	#6,	r14	;
    8322:	88 12       	call	r8		;
    8324:	89 49 12 00 	mov	r9,	18(r9)	; 0x0012
    8328:	b9 40 f0 98 	mov	#39152,	20(r9)	;#0x98f0, 0x0014
    832c:	14 00 
    832e:	b9 40 2c 99 	mov	#39212,	22(r9)	;#0x992c, 0x0016
    8332:	16 00 
    8334:	b9 40 68 99 	mov	#39272,	24(r9)	;#0x9968, 0x0018
    8338:	18 00 
    833a:	b9 40 a0 99 	mov	#39328,	26(r9)	;#0x99a0, 0x001a
    833e:	1a 00 
    8340:	19 4a 06 00 	mov	6(r10),	r9	;
    8344:	89 43 00 00 	mov	#0,	0(r9)	;r3 As==00
    8348:	89 43 02 00 	mov	#0,	2(r9)	;r3 As==00
    834c:	89 43 04 00 	mov	#0,	4(r9)	;r3 As==00
    8350:	b9 40 12 00 	mov	#18,	6(r9)	;#0x0012
    8354:	06 00 
    8356:	89 43 3a 00 	mov	#0,	58(r9)	;r3 As==00, 0x003a
    835a:	a9 43 08 00 	mov	#2,	8(r9)	;r3 As==10
    835e:	89 43 0a 00 	mov	#0,	10(r9)	;r3 As==00, 0x000a
    8362:	89 43 0c 00 	mov	#0,	12(r9)	;r3 As==00, 0x000c
    8366:	89 43 0e 00 	mov	#0,	14(r9)	;r3 As==00, 0x000e
    836a:	0c 49       	mov	r9,	r12	;
    836c:	3c 50 34 00 	add	#52,	r12	;#0x0034
    8370:	0d 43       	clr	r13		;
    8372:	3e 40 06 00 	mov	#6,	r14	;
    8376:	88 12       	call	r8		;
    8378:	89 49 12 00 	mov	r9,	18(r9)	; 0x0012
    837c:	b9 40 f0 98 	mov	#39152,	20(r9)	;#0x98f0, 0x0014
    8380:	14 00 
    8382:	b9 40 2c 99 	mov	#39212,	22(r9)	;#0x992c, 0x0016
    8386:	16 00 
    8388:	b9 40 68 99 	mov	#39272,	24(r9)	;#0x9968, 0x0018
    838c:	18 00 
    838e:	b9 40 a0 99 	mov	#39328,	26(r9)	;#0x99a0, 0x001a
    8392:	1a 00 
    8394:	9a 43 0c 00 	mov	#1,	12(r10)	;r3 As==01, 0x000c
    8398:	28 17       	popm	#3,	r10	;16-bit words
    839a:	30 41       	ret			

0000839c <__sfp>:
    839c:	3a 15       	pushm	#4,	r10	;16-bit words
    839e:	08 4c       	mov	r12,	r8	;
    83a0:	19 42 a0 44 	mov	&0x44a0,r9	;0x44a0
    83a4:	89 93 0c 00 	cmp	#0,	12(r9)	;r3 As==00, 0x000c
    83a8:	03 20       	jnz	$+8      	;abs 0x83b0
    83aa:	0c 49       	mov	r9,	r12	;
    83ac:	b0 12 56 82 	call	#33366		;#0x8256
    83b0:	39 50 6c 00 	add	#108,	r9	;#0x006c
    83b4:	37 40 06 82 	mov	#33286,	r7	;#0x8206
    83b8:	1e 49 02 00 	mov	2(r9),	r14	;
    83bc:	1d 49 04 00 	mov	4(r9),	r13	;
    83c0:	3d 50 06 00 	add	#6,	r13	;
    83c4:	0a 4d       	mov	r13,	r10	;
    83c6:	3a 50 fa ff 	add	#65530,	r10	;#0xfffa
    83ca:	3e 53       	add	#-1,	r14	;r3 As==11
    83cc:	0e 93       	cmp	#0,	r14	;r3 As==00
    83ce:	29 38       	jl	$+84     	;abs 0x8422
    83d0:	3d 50 3c 00 	add	#60,	r13	;#0x003c
    83d4:	8d 93 c4 ff 	cmp	#0,	-60(r13);r3 As==00, 0xffc4
    83d8:	f5 23       	jnz	$-20     	;abs 0x83c4
    83da:	ba 43 08 00 	mov	#-1,	8(r10)	;r3 As==11
    83de:	9a 43 06 00 	mov	#1,	6(r10)	;r3 As==01
    83e2:	8a 43 3a 00 	mov	#0,	58(r10)	;r3 As==00, 0x003a
    83e6:	8a 43 00 00 	mov	#0,	0(r10)	;r3 As==00
    83ea:	8a 43 04 00 	mov	#0,	4(r10)	;r3 As==00
    83ee:	8a 43 02 00 	mov	#0,	2(r10)	;r3 As==00
    83f2:	8a 43 0a 00 	mov	#0,	10(r10)	;r3 As==00, 0x000a
    83f6:	8a 43 0c 00 	mov	#0,	12(r10)	;r3 As==00, 0x000c
    83fa:	8a 43 0e 00 	mov	#0,	14(r10)	;r3 As==00, 0x000e
    83fe:	0c 4a       	mov	r10,	r12	;
    8400:	3c 50 34 00 	add	#52,	r12	;#0x0034
    8404:	0d 43       	clr	r13		;
    8406:	3e 40 06 00 	mov	#6,	r14	;
    840a:	b0 12 b4 86 	call	#34484		;#0x86b4
    840e:	8a 43 1c 00 	mov	#0,	28(r10)	;r3 As==00, 0x001c
    8412:	8a 43 1e 00 	mov	#0,	30(r10)	;r3 As==00, 0x001e
    8416:	8a 43 28 00 	mov	#0,	40(r10)	;r3 As==00, 0x0028
    841a:	8a 43 2a 00 	mov	#0,	42(r10)	;r3 As==00, 0x002a
    841e:	0c 4a       	mov	r10,	r12	;
    8420:	0f 3c       	jmp	$+32     	;abs 0x8440
    8422:	89 93 00 00 	cmp	#0,	0(r9)	;r3 As==00
    8426:	07 20       	jnz	$+16     	;abs 0x8436
    8428:	0c 48       	mov	r8,	r12	;
    842a:	2d 42       	mov	#4,	r13	;r2 As==10
    842c:	87 12       	call	r7		;
    842e:	89 4c 00 00 	mov	r12,	0(r9)	;
    8432:	0c 93       	cmp	#0,	r12	;r3 As==00
    8434:	02 24       	jz	$+6      	;abs 0x843a
    8436:	29 49       	mov	@r9,	r9	;
    8438:	bf 3f       	jmp	$-128    	;abs 0x83b8
    843a:	b8 40 0c 00 	mov	#12,	0(r8)	;#0x000c
    843e:	00 00 
    8440:	37 17       	popm	#4,	r10	;16-bit words
    8442:	30 41       	ret			

00008444 <__sfp_lock_acquire>:
    8444:	30 41       	ret			

00008446 <__sfp_lock_release>:
    8446:	30 41       	ret			

00008448 <__sinit_lock_acquire>:
    8448:	30 41       	ret			

0000844a <__sinit_lock_release>:
    844a:	30 41       	ret			

0000844c <__fp_lock_all>:
    844c:	1c 42 04 1c 	mov	&0x1c04,r12	;0x1c04
    8450:	3d 40 f4 81 	mov	#33268,	r13	;#0x81f4
    8454:	b0 12 68 84 	call	#33896		;#0x8468
    8458:	30 41       	ret			

0000845a <__fp_unlock_all>:
    845a:	1c 42 04 1c 	mov	&0x1c04,r12	;0x1c04
    845e:	3d 40 f8 81 	mov	#33272,	r13	;#0x81f8
    8462:	b0 12 68 84 	call	#33896		;#0x8468
    8466:	30 41       	ret			

00008468 <_fwalk>:
    8468:	4a 15       	pushm	#5,	r10	;16-bit words
    846a:	06 4d       	mov	r13,	r6	;
    846c:	0a 4c       	mov	r12,	r10	;
    846e:	3a 50 6c 00 	add	#108,	r10	;#0x006c
    8472:	08 43       	clr	r8		;
    8474:	0a 93       	cmp	#0,	r10	;r3 As==00
    8476:	19 24       	jz	$+52     	;abs 0x84aa
    8478:	17 4a 02 00 	mov	2(r10),	r7	;
    847c:	19 4a 04 00 	mov	4(r10),	r9	;
    8480:	39 50 06 00 	add	#6,	r9	;
    8484:	0c 49       	mov	r9,	r12	;
    8486:	3c 50 fa ff 	add	#65530,	r12	;#0xfffa
    848a:	37 53       	add	#-1,	r7	;r3 As==11
    848c:	07 93       	cmp	#0,	r7	;r3 As==00
    848e:	0b 38       	jl	$+24     	;abs 0x84a6
    8490:	1d 43       	mov	#1,	r13	;r3 As==01
    8492:	2d 99       	cmp	@r9,	r13	;
    8494:	05 2c       	jc	$+12     	;abs 0x84a0
    8496:	b9 93 02 00 	cmp	#-1,	2(r9)	;r3 As==11
    849a:	02 24       	jz	$+6      	;abs 0x84a0
    849c:	86 12       	call	r6		;
    849e:	08 dc       	bis	r12,	r8	;
    84a0:	39 50 3c 00 	add	#60,	r9	;#0x003c
    84a4:	ef 3f       	jmp	$-32     	;abs 0x8484
    84a6:	2a 4a       	mov	@r10,	r10	;
    84a8:	e5 3f       	jmp	$-52     	;abs 0x8474
    84aa:	0c 48       	mov	r8,	r12	;
    84ac:	46 17       	popm	#5,	r10	;16-bit words
    84ae:	30 41       	ret			

000084b0 <_fwalk_reent>:
    84b0:	5a 15       	pushm	#6,	r10	;16-bit words
    84b2:	06 4c       	mov	r12,	r6	;
    84b4:	05 4d       	mov	r13,	r5	;
    84b6:	0a 4c       	mov	r12,	r10	;
    84b8:	3a 50 6c 00 	add	#108,	r10	;#0x006c
    84bc:	08 43       	clr	r8		;
    84be:	0a 93       	cmp	#0,	r10	;r3 As==00
    84c0:	1a 24       	jz	$+54     	;abs 0x84f6
    84c2:	17 4a 02 00 	mov	2(r10),	r7	;
    84c6:	19 4a 04 00 	mov	4(r10),	r9	;
    84ca:	39 50 06 00 	add	#6,	r9	;
    84ce:	0d 49       	mov	r9,	r13	;
    84d0:	3d 50 fa ff 	add	#65530,	r13	;#0xfffa
    84d4:	37 53       	add	#-1,	r7	;r3 As==11
    84d6:	07 93       	cmp	#0,	r7	;r3 As==00
    84d8:	0c 38       	jl	$+26     	;abs 0x84f2
    84da:	1c 43       	mov	#1,	r12	;r3 As==01
    84dc:	2c 99       	cmp	@r9,	r12	;
    84de:	06 2c       	jc	$+14     	;abs 0x84ec
    84e0:	b9 93 02 00 	cmp	#-1,	2(r9)	;r3 As==11
    84e4:	03 24       	jz	$+8      	;abs 0x84ec
    84e6:	0c 46       	mov	r6,	r12	;
    84e8:	85 12       	call	r5		;
    84ea:	08 dc       	bis	r12,	r8	;
    84ec:	39 50 3c 00 	add	#60,	r9	;#0x003c
    84f0:	ee 3f       	jmp	$-34     	;abs 0x84ce
    84f2:	2a 4a       	mov	@r10,	r10	;
    84f4:	e4 3f       	jmp	$-54     	;abs 0x84be
    84f6:	0c 48       	mov	r8,	r12	;
    84f8:	55 17       	popm	#6,	r10	;16-bit words
    84fa:	30 41       	ret			

000084fc <_setlocale_r>:
    84fc:	1a 15       	pushm	#2,	r10	;16-bit words
    84fe:	0e 93       	cmp	#0,	r14	;r3 As==00
    8500:	15 24       	jz	$+44     	;abs 0x852c
    8502:	0a 4e       	mov	r14,	r10	;
    8504:	39 40 aa 99 	mov	#39338,	r9	;#0x99aa
    8508:	0c 4e       	mov	r14,	r12	;
    850a:	3d 40 a6 44 	mov	#17574,	r13	;#0x44a6
    850e:	89 12       	call	r9		;
    8510:	0c 93       	cmp	#0,	r12	;r3 As==00
    8512:	0c 24       	jz	$+26     	;abs 0x852c
    8514:	0c 4a       	mov	r10,	r12	;
    8516:	3d 40 a4 44 	mov	#17572,	r13	;#0x44a4
    851a:	89 12       	call	r9		;
    851c:	0c 93       	cmp	#0,	r12	;r3 As==00
    851e:	06 24       	jz	$+14     	;abs 0x852c
    8520:	0c 4a       	mov	r10,	r12	;
    8522:	3d 40 ac 44 	mov	#17580,	r13	;#0x44ac
    8526:	89 12       	call	r9		;
    8528:	0c 93       	cmp	#0,	r12	;r3 As==00
    852a:	03 20       	jnz	$+8      	;abs 0x8532
    852c:	3c 40 a4 44 	mov	#17572,	r12	;#0x44a4
    8530:	01 3c       	jmp	$+4      	;abs 0x8534
    8532:	0c 43       	clr	r12		;
    8534:	19 17       	popm	#2,	r10	;16-bit words
    8536:	30 41       	ret			

00008538 <__locale_charset>:
    8538:	3c 40 9e 1c 	mov	#7326,	r12	;#0x1c9e
    853c:	30 41       	ret			

0000853e <__locale_mb_cur_max>:
    853e:	1c 42 e0 1c 	mov	&0x1ce0,r12	;0x1ce0
    8542:	30 41       	ret			

00008544 <__locale_msgcharset>:
    8544:	3c 40 7e 1c 	mov	#7294,	r12	;#0x1c7e
    8548:	30 41       	ret			

0000854a <__locale_cjk_lang>:
    854a:	0c 43       	clr	r12		;
    854c:	30 41       	ret			

0000854e <_localeconv_r>:
    854e:	3c 40 be 1c 	mov	#7358,	r12	;#0x1cbe
    8552:	30 41       	ret			

00008554 <setlocale>:
    8554:	0f 4c       	mov	r12,	r15	;
    8556:	0e 4d       	mov	r13,	r14	;
    8558:	1c 42 04 1c 	mov	&0x1c04,r12	;0x1c04
    855c:	0d 4f       	mov	r15,	r13	;
    855e:	b0 12 fc 84 	call	#34044		;#0x84fc
    8562:	30 41       	ret			

00008564 <localeconv>:
    8564:	3c 40 be 1c 	mov	#7358,	r12	;#0x1cbe
    8568:	30 41       	ret			

0000856a <__smakebuf_r>:
    856a:	3a 15       	pushm	#4,	r10	;16-bit words
    856c:	31 80 3c 00 	sub	#60,	r1	;#0x003c
    8570:	09 4c       	mov	r12,	r9	;
    8572:	17 4d 06 00 	mov	6(r13),	r7	;
    8576:	27 f3       	and	#2,	r7	;r3 As==10
    8578:	07 93       	cmp	#0,	r7	;r3 As==00
    857a:	0a 24       	jz	$+22     	;abs 0x8590
    857c:	0c 4d       	mov	r13,	r12	;
    857e:	3c 50 27 00 	add	#39,	r12	;#0x0027
    8582:	8d 4c 00 00 	mov	r12,	0(r13)	;
    8586:	8d 4c 0a 00 	mov	r12,	10(r13)	; 0x000a
    858a:	9d 43 0c 00 	mov	#1,	12(r13)	;r3 As==01, 0x000c
    858e:	68 3c       	jmp	$+210    	;abs 0x8660
    8590:	0a 4d       	mov	r13,	r10	;
    8592:	1d 4d 08 00 	mov	8(r13),	r13	;
    8596:	0d 93       	cmp	#0,	r13	;r3 As==00
    8598:	08 34       	jge	$+18     	;abs 0x85aa
    859a:	1c 4a 06 00 	mov	6(r10),	r12	;
    859e:	3c b0 80 00 	bit	#128,	r12	;#0x0080
    85a2:	09 20       	jnz	$+20     	;abs 0x85b6
    85a4:	37 40 00 04 	mov	#1024,	r7	;#0x0400
    85a8:	08 3c       	jmp	$+18     	;abs 0x85ba
    85aa:	0e 41       	mov	r1,	r14	;
    85ac:	b0 12 42 a7 	call	#42818		;#0xa742
    85b0:	0c 93       	cmp	#0,	r12	;r3 As==00
    85b2:	09 34       	jge	$+20     	;abs 0x85c6
    85b4:	f2 3f       	jmp	$-26     	;abs 0x859a
    85b6:	37 40 40 00 	mov	#64,	r7	;#0x0040
    85ba:	3c d0 00 08 	bis	#2048,	r12	;#0x0800
    85be:	8a 4c 06 00 	mov	r12,	6(r10)	;
    85c2:	08 43       	clr	r8		;
    85c4:	1e 3c       	jmp	$+62     	;abs 0x8602
    85c6:	1c 41 04 00 	mov	4(r1),	r12	;
    85ca:	3c f0 00 f0 	and	#61440,	r12	;#0xf000
    85ce:	18 43       	mov	#1,	r8	;r3 As==01
    85d0:	3c 90 00 20 	cmp	#8192,	r12	;#0x2000
    85d4:	01 24       	jz	$+4      	;abs 0x85d8
    85d6:	08 47       	mov	r7,	r8	;
    85d8:	3c 90 00 80 	cmp	#32768,	r12	;#0x8000
    85dc:	0d 20       	jnz	$+28     	;abs 0x85f8
    85de:	ba 90 68 99 	cmp	#39272,	24(r10)	;#0x9968, 0x0018
    85e2:	18 00 
    85e4:	09 20       	jnz	$+20     	;abs 0x85f8
    85e6:	ba d0 00 04 	bis	#1024,	6(r10)	;#0x0400
    85ea:	06 00 
    85ec:	ba 40 00 04 	mov	#1024,	44(r10)	;#0x0400, 0x002c
    85f0:	2c 00 
    85f2:	37 40 00 04 	mov	#1024,	r7	;#0x0400
    85f6:	05 3c       	jmp	$+12     	;abs 0x8602
    85f8:	ba d0 00 08 	bis	#2048,	6(r10)	;#0x0800
    85fc:	06 00 
    85fe:	37 40 00 04 	mov	#1024,	r7	;#0x0400
    8602:	0c 49       	mov	r9,	r12	;
    8604:	0d 47       	mov	r7,	r13	;
    8606:	b0 12 70 97 	call	#38768		;#0x9770
    860a:	0c 93       	cmp	#0,	r12	;r3 As==00
    860c:	12 20       	jnz	$+38     	;abs 0x8632
    860e:	1c 4a 06 00 	mov	6(r10),	r12	;
    8612:	3c b0 00 02 	bit	#512,	r12	;#0x0200
    8616:	24 20       	jnz	$+74     	;abs 0x8660
    8618:	2c d3       	bis	#2,	r12	;r3 As==10
    861a:	8a 4c 06 00 	mov	r12,	6(r10)	;
    861e:	0c 4a       	mov	r10,	r12	;
    8620:	3c 50 27 00 	add	#39,	r12	;#0x0027
    8624:	8a 4c 00 00 	mov	r12,	0(r10)	;
    8628:	8a 4c 0a 00 	mov	r12,	10(r10)	; 0x000a
    862c:	9a 43 0c 00 	mov	#1,	12(r10)	;r3 As==01, 0x000c
    8630:	17 3c       	jmp	$+48     	;abs 0x8660
    8632:	b9 40 fc 81 	mov	#33276,	20(r9)	;#0x81fc, 0x0014
    8636:	14 00 
    8638:	ba d0 80 00 	bis	#128,	6(r10)	;#0x0080
    863c:	06 00 
    863e:	8a 4c 00 00 	mov	r12,	0(r10)	;
    8642:	8a 4c 0a 00 	mov	r12,	10(r10)	; 0x000a
    8646:	8a 47 0c 00 	mov	r7,	12(r10)	; 0x000c
    864a:	08 93       	cmp	#0,	r8	;r3 As==00
    864c:	09 24       	jz	$+20     	;abs 0x8660
    864e:	0c 49       	mov	r9,	r12	;
    8650:	1d 4a 08 00 	mov	8(r10),	r13	;
    8654:	b0 12 5a aa 	call	#43610		;#0xaa5a
    8658:	0c 93       	cmp	#0,	r12	;r3 As==00
    865a:	02 24       	jz	$+6      	;abs 0x8660
    865c:	9a d3 06 00 	bis	#1,	6(r10)	;r3 As==01
    8660:	31 50 3c 00 	add	#60,	r1	;#0x003c
    8664:	37 17       	popm	#4,	r10	;16-bit words
    8666:	30 41       	ret			

00008668 <malloc>:
    8668:	0d 4c       	mov	r12,	r13	;
    866a:	1c 42 04 1c 	mov	&0x1c04,r12	;0x1c04
    866e:	b0 12 70 97 	call	#38768		;#0x9770
    8672:	30 41       	ret			

00008674 <free>:
    8674:	0d 4c       	mov	r12,	r13	;
    8676:	1c 42 04 1c 	mov	&0x1c04,r12	;0x1c04
    867a:	b0 12 86 96 	call	#38534		;#0x9686
    867e:	30 41       	ret			

00008680 <memchr>:
    8680:	3d f0 ff 00 	and	#255,	r13	;#0x00ff
    8684:	0e 5c       	add	r12,	r14	;
    8686:	0c 9e       	cmp	r14,	r12	;
    8688:	05 24       	jz	$+12     	;abs 0x8694
    868a:	cc 9d 00 00 	cmp.b	r13,	0(r12)	;
    868e:	03 24       	jz	$+8      	;abs 0x8696
    8690:	1c 53       	inc	r12		;
    8692:	f9 3f       	jmp	$-12     	;abs 0x8686
    8694:	0c 43       	clr	r12		;
    8696:	30 41       	ret			

00008698 <memcpy>:
    8698:	0a 15       	pushm	#1,	r10	;16-bit words
    869a:	0f 43       	clr	r15		;
    869c:	0f 9e       	cmp	r14,	r15	;
    869e:	08 24       	jz	$+18     	;abs 0x86b0
    86a0:	0a 4d       	mov	r13,	r10	;
    86a2:	0a 5f       	add	r15,	r10	;
    86a4:	0b 4c       	mov	r12,	r11	;
    86a6:	0b 5f       	add	r15,	r11	;
    86a8:	eb 4a 00 00 	mov.b	@r10,	0(r11)	;
    86ac:	1f 53       	inc	r15		;
    86ae:	f6 3f       	jmp	$-18     	;abs 0x869c
    86b0:	0a 17       	popm	#1,	r10	;16-bit words
    86b2:	30 41       	ret			

000086b4 <memset>:
    86b4:	0f 4c       	mov	r12,	r15	;
    86b6:	0e 5c       	add	r12,	r14	;
    86b8:	0f 9e       	cmp	r14,	r15	;
    86ba:	04 24       	jz	$+10     	;abs 0x86c4
    86bc:	cf 4d 00 00 	mov.b	r13,	0(r15)	;
    86c0:	1f 53       	inc	r15		;
    86c2:	fa 3f       	jmp	$-10     	;abs 0x86b8
    86c4:	30 41       	ret			

000086c6 <_Balloc>:
    86c6:	2a 15       	pushm	#3,	r10	;16-bit words
    86c8:	0a 4c       	mov	r12,	r10	;
    86ca:	09 4d       	mov	r13,	r9	;
    86cc:	8c 93 12 00 	cmp	#0,	18(r12)	;r3 As==00, 0x0012
    86d0:	0d 20       	jnz	$+28     	;abs 0x86ec
    86d2:	3c 42       	mov	#8,	r12	;r2 As==11
    86d4:	b0 12 68 86 	call	#34408		;#0x8668
    86d8:	8a 4c 12 00 	mov	r12,	18(r10)	; 0x0012
    86dc:	8c 43 02 00 	mov	#0,	2(r12)	;r3 As==00
    86e0:	8c 43 04 00 	mov	#0,	4(r12)	;r3 As==00
    86e4:	8c 43 00 00 	mov	#0,	0(r12)	;r3 As==00
    86e8:	8c 43 06 00 	mov	#0,	6(r12)	;r3 As==00
    86ec:	18 4a 12 00 	mov	18(r10),r8	;0x00012
    86f0:	88 93 06 00 	cmp	#0,	6(r8)	;r3 As==00
    86f4:	0c 24       	jz	$+26     	;abs 0x870e
    86f6:	1d 4a 12 00 	mov	18(r10),r13	;0x00012
    86fa:	0c 49       	mov	r9,	r12	;
    86fc:	0c 59       	add	r9,	r12	;
    86fe:	1c 5d 06 00 	add	6(r13),	r12	;
    8702:	2e 4c       	mov	@r12,	r14	;
    8704:	0e 93       	cmp	#0,	r14	;r3 As==00
    8706:	12 24       	jz	$+38     	;abs 0x872c
    8708:	ac 4e 00 00 	mov	@r14,	0(r12)	;
    870c:	24 3c       	jmp	$+74     	;abs 0x8756
    870e:	0c 4a       	mov	r10,	r12	;
    8710:	2d 43       	mov	#2,	r13	;r3 As==10
    8712:	3e 40 11 00 	mov	#17,	r14	;#0x0011
    8716:	b0 12 5c 96 	call	#38492		;#0x965c
    871a:	88 4c 06 00 	mov	r12,	6(r8)	;
    871e:	1c 4a 12 00 	mov	18(r10),r12	;0x00012
    8722:	8c 93 06 00 	cmp	#0,	6(r12)	;r3 As==00
    8726:	e7 23       	jnz	$-48     	;abs 0x86f6
    8728:	0c 43       	clr	r12		;
    872a:	1a 3c       	jmp	$+54     	;abs 0x8760
    872c:	1c 43       	mov	#1,	r12	;r3 As==01
    872e:	0d 49       	mov	r9,	r13	;
    8730:	b0 12 46 52 	call	#21062		;#0x5246
    8734:	08 4c       	mov	r12,	r8	;
    8736:	0e 4c       	mov	r12,	r14	;
    8738:	41 18 0e 5e 	rpt #2 { rlax.w	r14		;
    873c:	0c 4a       	mov	r10,	r12	;
    873e:	1d 43       	mov	#1,	r13	;r3 As==01
    8740:	3e 50 0a 00 	add	#10,	r14	;#0x000a
    8744:	b0 12 5c 96 	call	#38492		;#0x965c
    8748:	0e 4c       	mov	r12,	r14	;
    874a:	0c 93       	cmp	#0,	r12	;r3 As==00
    874c:	ed 27       	jz	$-36     	;abs 0x8728
    874e:	8c 49 02 00 	mov	r9,	2(r12)	;
    8752:	8c 48 04 00 	mov	r8,	4(r12)	;
    8756:	8e 43 08 00 	mov	#0,	8(r14)	;r3 As==00
    875a:	8e 43 06 00 	mov	#0,	6(r14)	;r3 As==00
    875e:	0c 4e       	mov	r14,	r12	;
    8760:	28 17       	popm	#3,	r10	;16-bit words
    8762:	30 41       	ret			

00008764 <_Bfree>:
    8764:	1a 15       	pushm	#2,	r10	;16-bit words
    8766:	09 4c       	mov	r12,	r9	;
    8768:	0a 4d       	mov	r13,	r10	;
    876a:	8c 93 12 00 	cmp	#0,	18(r12)	;r3 As==00, 0x0012
    876e:	0d 20       	jnz	$+28     	;abs 0x878a
    8770:	3c 42       	mov	#8,	r12	;r2 As==11
    8772:	b0 12 68 86 	call	#34408		;#0x8668
    8776:	89 4c 12 00 	mov	r12,	18(r9)	; 0x0012
    877a:	8c 43 02 00 	mov	#0,	2(r12)	;r3 As==00
    877e:	8c 43 04 00 	mov	#0,	4(r12)	;r3 As==00
    8782:	8c 43 00 00 	mov	#0,	0(r12)	;r3 As==00
    8786:	8c 43 06 00 	mov	#0,	6(r12)	;r3 As==00
    878a:	0a 93       	cmp	#0,	r10	;r3 As==00
    878c:	0b 24       	jz	$+24     	;abs 0x87a4
    878e:	1d 49 12 00 	mov	18(r9),	r13	;0x00012
    8792:	1c 4a 02 00 	mov	2(r10),	r12	;
    8796:	0c 5c       	rla	r12		;
    8798:	1c 5d 06 00 	add	6(r13),	r12	;
    879c:	aa 4c 00 00 	mov	@r12,	0(r10)	;
    87a0:	8c 4a 00 00 	mov	r10,	0(r12)	;
    87a4:	19 17       	popm	#2,	r10	;16-bit words
    87a6:	30 41       	ret			

000087a8 <__multadd>:
    87a8:	6a 15       	pushm	#7,	r10	;16-bit words
    87aa:	31 80 0a 00 	sub	#10,	r1	;#0x000a
    87ae:	81 4c 02 00 	mov	r12,	2(r1)	;
    87b2:	0a 4d       	mov	r13,	r10	;
    87b4:	07 4f       	mov	r15,	r7	;
    87b6:	15 4d 08 00 	mov	8(r13),	r5	;
    87ba:	09 4d       	mov	r13,	r9	;
    87bc:	39 50 0a 00 	add	#10,	r9	;#0x000a
    87c0:	0b 43       	clr	r11		;
    87c2:	0c 4e       	mov	r14,	r12	;
    87c4:	0d 4e       	mov	r14,	r13	;
    87c6:	4e 18 0d 11 	rpt #15 { rrax.w	r13		;
    87ca:	81 4c 04 00 	mov	r12,	4(r1)	;
    87ce:	81 4d 06 00 	mov	r13,	6(r1)	;
    87d2:	26 49       	mov	@r9,	r6	;
    87d4:	14 49 02 00 	mov	2(r9),	r4	;
    87d8:	0c 46       	mov	r6,	r12	;
    87da:	0d 43       	clr	r13		;
    87dc:	1e 41 04 00 	mov	4(r1),	r14	;
    87e0:	1f 41 06 00 	mov	6(r1),	r15	;
    87e4:	81 4b 00 00 	mov	r11,	0(r1)	;
    87e8:	b0 12 68 c4 	call	#50280		;#0xc468
    87ec:	0e 47       	mov	r7,	r14	;
    87ee:	0f 47       	mov	r7,	r15	;
    87f0:	4e 18 0f 11 	rpt #15 { rrax.w	r15		;
    87f4:	08 4c       	mov	r12,	r8	;
    87f6:	08 5e       	add	r14,	r8	;
    87f8:	0d 6f       	addc	r15,	r13	;
    87fa:	0c 48       	mov	r8,	r12	;
    87fc:	3e 40 10 00 	mov	#16,	r14	;#0x0010
    8800:	b0 12 38 c3 	call	#49976		;#0xc338
    8804:	07 4c       	mov	r12,	r7	;
    8806:	81 4d 08 00 	mov	r13,	8(r1)	;
    880a:	0c 46       	mov	r6,	r12	;
    880c:	0d 44       	mov	r4,	r13	;
    880e:	3e 40 10 00 	mov	#16,	r14	;#0x0010
    8812:	b0 12 38 c3 	call	#49976		;#0xc338
    8816:	1e 41 04 00 	mov	4(r1),	r14	;
    881a:	1f 41 06 00 	mov	6(r1),	r15	;
    881e:	b0 12 68 c4 	call	#50280		;#0xc468
    8822:	04 47       	mov	r7,	r4	;
    8824:	04 5c       	add	r12,	r4	;
    8826:	16 41 08 00 	mov	8(r1),	r6	;
    882a:	06 6d       	addc	r13,	r6	;
    882c:	0c 44       	mov	r4,	r12	;
    882e:	0d 46       	mov	r6,	r13	;
    8830:	3e 40 10 00 	mov	#16,	r14	;#0x0010
    8834:	b0 12 38 c3 	call	#49976		;#0xc338
    8838:	07 4c       	mov	r12,	r7	;
    883a:	0c 44       	mov	r4,	r12	;
    883c:	0d 46       	mov	r6,	r13	;
    883e:	3e 40 10 00 	mov	#16,	r14	;#0x0010
    8842:	b0 12 90 52 	call	#21136		;#0x5290
    8846:	0c 58       	add	r8,	r12	;
    8848:	89 4c 00 00 	mov	r12,	0(r9)	;
    884c:	0c 43       	clr	r12		;
    884e:	0d 6c       	addc	r12,	r13	;
    8850:	89 4d 02 00 	mov	r13,	2(r9)	;
    8854:	2b 41       	mov	@r1,	r11	;
    8856:	1b 53       	inc	r11		;
    8858:	29 52       	add	#4,	r9	;r2 As==10
    885a:	0b 95       	cmp	r5,	r11	;
    885c:	ba 3b       	jl	$-138    	;abs 0x87d2
    885e:	07 9c       	cmp	r12,	r7	;
    8860:	2c 24       	jz	$+90     	;abs 0x88ba
    8862:	15 9a 04 00 	cmp	4(r10),	r5	;
    8866:	1a 38       	jl	$+54     	;abs 0x889c
    8868:	1c 41 02 00 	mov	2(r1),	r12	;
    886c:	1d 4a 02 00 	mov	2(r10),	r13	;
    8870:	1d 53       	inc	r13		;
    8872:	b0 12 c6 86 	call	#34502		;#0x86c6
    8876:	09 4c       	mov	r12,	r9	;
    8878:	1e 4a 08 00 	mov	8(r10),	r14	;
    887c:	1e 53       	inc	r14		;
    887e:	3c 50 06 00 	add	#6,	r12	;
    8882:	0d 4a       	mov	r10,	r13	;
    8884:	3d 50 06 00 	add	#6,	r13	;
    8888:	41 18 0e 5e 	rpt #2 { rlax.w	r14		;
    888c:	b0 12 98 86 	call	#34456		;#0x8698
    8890:	1c 41 02 00 	mov	2(r1),	r12	;
    8894:	0d 4a       	mov	r10,	r13	;
    8896:	b0 12 64 87 	call	#34660		;#0x8764
    889a:	0a 49       	mov	r9,	r10	;
    889c:	0c 45       	mov	r5,	r12	;
    889e:	41 18 0c 5c 	rpt #2 { rlax.w	r12		;
    88a2:	0c 5a       	add	r10,	r12	;
    88a4:	0d 47       	mov	r7,	r13	;
    88a6:	0e 47       	mov	r7,	r14	;
    88a8:	4e 18 0e 11 	rpt #15 { rrax.w	r14		;
    88ac:	8c 4d 0a 00 	mov	r13,	10(r12)	; 0x000a
    88b0:	8c 4e 0c 00 	mov	r14,	12(r12)	; 0x000c
    88b4:	15 53       	inc	r5		;
    88b6:	8a 45 08 00 	mov	r5,	8(r10)	;
    88ba:	0c 4a       	mov	r10,	r12	;
    88bc:	31 50 0a 00 	add	#10,	r1	;#0x000a
    88c0:	64 17       	popm	#7,	r10	;16-bit words
    88c2:	30 41       	ret			

000088c4 <__s2b>:
    88c4:	6a 15       	pushm	#7,	r10	;16-bit words
    88c6:	07 4c       	mov	r12,	r7	;
    88c8:	0a 4d       	mov	r13,	r10	;
    88ca:	08 4e       	mov	r14,	r8	;
    88cc:	06 4f       	mov	r15,	r6	;
    88ce:	0c 4f       	mov	r15,	r12	;
    88d0:	3c 52       	add	#8,	r12	;r2 As==11
    88d2:	3d 40 09 00 	mov	#9,	r13	;
    88d6:	b0 12 a0 c0 	call	#49312		;#0xc0a0
    88da:	3c b0 00 80 	bit	#32768,	r12	;#0x8000
    88de:	0d 7d       	subc	r13,	r13	;
    88e0:	3d e3       	inv	r13		;
    88e2:	1e 43       	mov	#1,	r14	;r3 As==01
    88e4:	0f 43       	clr	r15		;
    88e6:	09 43       	clr	r9		;
    88e8:	0b 4d       	mov	r13,	r11	;
    88ea:	0f 9d       	cmp	r13,	r15	;
    88ec:	08 34       	jge	$+18     	;abs 0x88fe
    88ee:	04 4e       	mov	r14,	r4	;
    88f0:	05 4f       	mov	r15,	r5	;
    88f2:	04 5e       	add	r14,	r4	;
    88f4:	05 6f       	addc	r15,	r5	;
    88f6:	0e 44       	mov	r4,	r14	;
    88f8:	0f 45       	mov	r5,	r15	;
    88fa:	19 53       	inc	r9		;
    88fc:	f6 3f       	jmp	$-18     	;abs 0x88ea
    88fe:	0b 9f       	cmp	r15,	r11	;
    8900:	02 20       	jnz	$+6      	;abs 0x8906
    8902:	0e 9c       	cmp	r12,	r14	;
    8904:	f4 2b       	jnc	$-22     	;abs 0x88ee
    8906:	0c 47       	mov	r7,	r12	;
    8908:	0d 49       	mov	r9,	r13	;
    890a:	b0 12 c6 86 	call	#34502		;#0x86c6
    890e:	0d 4c       	mov	r12,	r13	;
    8910:	9c 41 10 00 	mov	16(r1),	10(r12)	;0x00010, 0x000a
    8914:	0a 00 
    8916:	9c 41 12 00 	mov	18(r1),	12(r12)	;0x00012, 0x000c
    891a:	0c 00 
    891c:	9c 43 08 00 	mov	#1,	8(r12)	;r3 As==01
    8920:	35 40 09 00 	mov	#9,	r5	;
    8924:	05 98       	cmp	r8,	r5	;
    8926:	16 34       	jge	$+46     	;abs 0x8954
    8928:	09 4a       	mov	r10,	r9	;
    892a:	09 55       	add	r5,	r9	;
    892c:	04 49       	mov	r9,	r4	;
    892e:	0a 58       	add	r8,	r10	;
    8930:	35 40 a8 87 	mov	#34728,	r5	;#0x87a8
    8934:	6f 44       	mov.b	@r4,	r15	;
    8936:	0c 47       	mov	r7,	r12	;
    8938:	3e 40 0a 00 	mov	#10,	r14	;#0x000a
    893c:	3f 50 d0 ff 	add	#65488,	r15	;#0xffd0
    8940:	85 12       	call	r5		;
    8942:	0d 4c       	mov	r12,	r13	;
    8944:	14 53       	inc	r4		;
    8946:	04 9a       	cmp	r10,	r4	;
    8948:	f5 23       	jnz	$-20     	;abs 0x8934
    894a:	0a 49       	mov	r9,	r10	;
    894c:	0a 58       	add	r8,	r10	;
    894e:	3a 50 f8 ff 	add	#65528,	r10	;#0xfff8
    8952:	04 3c       	jmp	$+10     	;abs 0x895c
    8954:	3a 50 0a 00 	add	#10,	r10	;#0x000a
    8958:	38 40 09 00 	mov	#9,	r8	;
    895c:	09 48       	mov	r8,	r9	;
    895e:	35 40 a8 87 	mov	#34728,	r5	;#0x87a8
    8962:	09 96       	cmp	r6,	r9	;
    8964:	0d 34       	jge	$+28     	;abs 0x8980
    8966:	0c 49       	mov	r9,	r12	;
    8968:	0c 88       	sub	r8,	r12	;
    896a:	0c 5a       	add	r10,	r12	;
    896c:	6f 4c       	mov.b	@r12,	r15	;
    896e:	0c 47       	mov	r7,	r12	;
    8970:	3e 40 0a 00 	mov	#10,	r14	;#0x000a
    8974:	3f 50 d0 ff 	add	#65488,	r15	;#0xffd0
    8978:	85 12       	call	r5		;
    897a:	0d 4c       	mov	r12,	r13	;
    897c:	19 53       	inc	r9		;
    897e:	f1 3f       	jmp	$-28     	;abs 0x8962
    8980:	0c 4d       	mov	r13,	r12	;
    8982:	64 17       	popm	#7,	r10	;16-bit words
    8984:	30 41       	ret			

00008986 <__hi0bits>:
    8986:	0a 15       	pushm	#1,	r10	;16-bit words
    8988:	0e 4c       	mov	r12,	r14	;
    898a:	0f 4d       	mov	r13,	r15	;
    898c:	0d 93       	cmp	#0,	r13	;r3 As==00
    898e:	09 20       	jnz	$+20     	;abs 0x89a2
    8990:	3e 40 10 00 	mov	#16,	r14	;#0x0010
    8994:	b0 12 90 52 	call	#21136		;#0x5290
    8998:	0e 4c       	mov	r12,	r14	;
    899a:	0f 4d       	mov	r13,	r15	;
    899c:	3a 40 10 00 	mov	#16,	r10	;#0x0010
    89a0:	01 3c       	jmp	$+4      	;abs 0x89a4
    89a2:	0a 43       	clr	r10		;
    89a4:	3f b0 00 ff 	bit	#65280,	r15	;#0xff00
    89a8:	07 20       	jnz	$+16     	;abs 0x89b8
    89aa:	3a 52       	add	#8,	r10	;r2 As==11
    89ac:	0c 4e       	mov	r14,	r12	;
    89ae:	0d 4f       	mov	r15,	r13	;
    89b0:	b0 12 68 52 	call	#21096		;#0x5268
    89b4:	0e 4c       	mov	r12,	r14	;
    89b6:	0f 4d       	mov	r13,	r15	;
    89b8:	3f b0 00 f0 	bit	#61440,	r15	;#0xf000
    89bc:	07 20       	jnz	$+16     	;abs 0x89cc
    89be:	2a 52       	add	#4,	r10	;r2 As==10
    89c0:	0c 4e       	mov	r14,	r12	;
    89c2:	0d 4f       	mov	r15,	r13	;
    89c4:	b0 12 78 52 	call	#21112		;#0x5278
    89c8:	0e 4c       	mov	r12,	r14	;
    89ca:	0f 4d       	mov	r13,	r15	;
    89cc:	3f b0 00 c0 	bit	#49152,	r15	;#0xc000
    89d0:	05 20       	jnz	$+12     	;abs 0x89dc
    89d2:	2a 53       	incd	r10		;
    89d4:	0e 5e       	rla	r14		;
    89d6:	0f 6f       	rlc	r15		;
    89d8:	0e 5e       	rla	r14		;
    89da:	0f 6f       	rlc	r15		;
    89dc:	0f 93       	cmp	#0,	r15	;r3 As==00
    89de:	06 38       	jl	$+14     	;abs 0x89ec
    89e0:	3f b0 00 40 	bit	#16384,	r15	;#0x4000
    89e4:	05 24       	jz	$+12     	;abs 0x89f0
    89e6:	0c 4a       	mov	r10,	r12	;
    89e8:	1c 53       	inc	r12		;
    89ea:	04 3c       	jmp	$+10     	;abs 0x89f4
    89ec:	0c 4a       	mov	r10,	r12	;
    89ee:	02 3c       	jmp	$+6      	;abs 0x89f4
    89f0:	3c 40 20 00 	mov	#32,	r12	;#0x0020
    89f4:	0a 17       	popm	#1,	r10	;16-bit words
    89f6:	30 41       	ret			

000089f8 <__lo0bits>:
    89f8:	1a 15       	pushm	#2,	r10	;16-bit words
    89fa:	0e 4c       	mov	r12,	r14	;
    89fc:	2c 4c       	mov	@r12,	r12	;
    89fe:	1d 4e 02 00 	mov	2(r14),	r13	;
    8a02:	0a 4c       	mov	r12,	r10	;
    8a04:	3a f0 07 00 	and	#7,	r10	;
    8a08:	0a 93       	cmp	#0,	r10	;r3 As==00
    8a0a:	1d 24       	jz	$+60     	;abs 0x8a46
    8a0c:	0f 4c       	mov	r12,	r15	;
    8a0e:	1f f3       	and	#1,	r15	;r3 As==01
    8a10:	0f 93       	cmp	#0,	r15	;r3 As==00
    8a12:	4b 20       	jnz	$+152    	;abs 0x8aaa
    8a14:	0f 4c       	mov	r12,	r15	;
    8a16:	2f f3       	and	#2,	r15	;r3 As==10
    8a18:	0a 4c       	mov	r12,	r10	;
    8a1a:	0b 4d       	mov	r13,	r11	;
    8a1c:	0f 93       	cmp	#0,	r15	;r3 As==00
    8a1e:	09 24       	jz	$+20     	;abs 0x8a32
    8a20:	12 c3       	clrc			
    8a22:	0b 10       	rrc	r11		;
    8a24:	0a 10       	rrc	r10		;
    8a26:	8e 4a 00 00 	mov	r10,	0(r14)	;
    8a2a:	8e 4b 02 00 	mov	r11,	2(r14)	;
    8a2e:	1c 43       	mov	#1,	r12	;r3 As==01
    8a30:	40 3c       	jmp	$+130    	;abs 0x8ab2
    8a32:	5b 03       	rrum	#1,	r11	;
    8a34:	0a 10       	rrc	r10		;
    8a36:	5b 03       	rrum	#1,	r11	;
    8a38:	0a 10       	rrc	r10		;
    8a3a:	8e 4a 00 00 	mov	r10,	0(r14)	;
    8a3e:	8e 4b 02 00 	mov	r11,	2(r14)	;
    8a42:	2c 43       	mov	#2,	r12	;r3 As==10
    8a44:	36 3c       	jmp	$+110    	;abs 0x8ab2
    8a46:	09 4e       	mov	r14,	r9	;
    8a48:	0c 93       	cmp	#0,	r12	;r3 As==00
    8a4a:	06 20       	jnz	$+14     	;abs 0x8a58
    8a4c:	3e 40 10 00 	mov	#16,	r14	;#0x0010
    8a50:	b0 12 38 c3 	call	#49976		;#0xc338
    8a54:	3a 40 10 00 	mov	#16,	r10	;#0x0010
    8a58:	4c 93       	cmp.b	#0,	r12	;r3 As==00
    8a5a:	03 20       	jnz	$+8      	;abs 0x8a62
    8a5c:	3a 52       	add	#8,	r10	;r2 As==11
    8a5e:	b0 12 fe c2 	call	#49918		;#0xc2fe
    8a62:	0e 4c       	mov	r12,	r14	;
    8a64:	3e f0 0f 00 	and	#15,	r14	;#0x000f
    8a68:	0e 93       	cmp	#0,	r14	;r3 As==00
    8a6a:	03 20       	jnz	$+8      	;abs 0x8a72
    8a6c:	2a 52       	add	#4,	r10	;r2 As==10
    8a6e:	b0 12 16 c3 	call	#49942		;#0xc316
    8a72:	0e 4c       	mov	r12,	r14	;
    8a74:	3e f0 03 00 	and	#3,	r14	;
    8a78:	0e 93       	cmp	#0,	r14	;r3 As==00
    8a7a:	05 20       	jnz	$+12     	;abs 0x8a86
    8a7c:	2a 53       	incd	r10		;
    8a7e:	5d 03       	rrum	#1,	r13	;
    8a80:	0c 10       	rrc	r12		;
    8a82:	5d 03       	rrum	#1,	r13	;
    8a84:	0c 10       	rrc	r12		;
    8a86:	0e 4c       	mov	r12,	r14	;
    8a88:	1e f3       	and	#1,	r14	;r3 As==01
    8a8a:	0e 93       	cmp	#0,	r14	;r3 As==00
    8a8c:	08 20       	jnz	$+18     	;abs 0x8a9e
    8a8e:	12 c3       	clrc			
    8a90:	0d 10       	rrc	r13		;
    8a92:	0c 10       	rrc	r12		;
    8a94:	0e 4c       	mov	r12,	r14	;
    8a96:	0e dd       	bis	r13,	r14	;
    8a98:	0e 93       	cmp	#0,	r14	;r3 As==00
    8a9a:	09 24       	jz	$+20     	;abs 0x8aae
    8a9c:	1a 53       	inc	r10		;
    8a9e:	89 4c 00 00 	mov	r12,	0(r9)	;
    8aa2:	89 4d 02 00 	mov	r13,	2(r9)	;
    8aa6:	0c 4a       	mov	r10,	r12	;
    8aa8:	04 3c       	jmp	$+10     	;abs 0x8ab2
    8aaa:	0c 43       	clr	r12		;
    8aac:	02 3c       	jmp	$+6      	;abs 0x8ab2
    8aae:	3c 40 20 00 	mov	#32,	r12	;#0x0020
    8ab2:	19 17       	popm	#2,	r10	;16-bit words
    8ab4:	30 41       	ret			

00008ab6 <__i2b>:
    8ab6:	2a 15       	pushm	#3,	r10	;16-bit words
    8ab8:	0a 4d       	mov	r13,	r10	;
    8aba:	1d 43       	mov	#1,	r13	;r3 As==01
    8abc:	b0 12 c6 86 	call	#34502		;#0x86c6
    8ac0:	08 4a       	mov	r10,	r8	;
    8ac2:	09 4a       	mov	r10,	r9	;
    8ac4:	4e 18 09 11 	rpt #15 { rrax.w	r9		;
    8ac8:	8c 48 0a 00 	mov	r8,	10(r12)	; 0x000a
    8acc:	8c 49 0c 00 	mov	r9,	12(r12)	; 0x000c
    8ad0:	9c 43 08 00 	mov	#1,	8(r12)	;r3 As==01
    8ad4:	28 17       	popm	#3,	r10	;16-bit words
    8ad6:	30 41       	ret			

00008ad8 <__multiply>:
    8ad8:	6a 15       	pushm	#7,	r10	;16-bit words
    8ada:	31 80 18 00 	sub	#24,	r1	;#0x0018
    8ade:	0a 4d       	mov	r13,	r10	;
    8ae0:	09 4e       	mov	r14,	r9	;
    8ae2:	9d 9e 08 00 	cmp	8(r14),	8(r13)	;
    8ae6:	08 00 
    8ae8:	02 34       	jge	$+6      	;abs 0x8aee
    8aea:	0a 4e       	mov	r14,	r10	;
    8aec:	09 4d       	mov	r13,	r9	;
    8aee:	1d 4a 02 00 	mov	2(r10),	r13	;
    8af2:	17 4a 08 00 	mov	8(r10),	r7	;
    8af6:	18 49 08 00 	mov	8(r9),	r8	;
    8afa:	0e 47       	mov	r7,	r14	;
    8afc:	0e 58       	add	r8,	r14	;
    8afe:	81 4e 04 00 	mov	r14,	4(r1)	;
    8b02:	8a 9e 04 00 	cmp	r14,	4(r10)	;
    8b06:	01 34       	jge	$+4      	;abs 0x8b0a
    8b08:	1d 53       	inc	r13		;
    8b0a:	b0 12 c6 86 	call	#34502		;#0x86c6
    8b0e:	81 4c 0e 00 	mov	r12,	14(r1)	; 0x000e
    8b12:	0b 4c       	mov	r12,	r11	;
    8b14:	3b 50 0a 00 	add	#10,	r11	;#0x000a
    8b18:	1c 41 04 00 	mov	4(r1),	r12	;
    8b1c:	41 18 0c 5c 	rpt #2 { rlax.w	r12		;
    8b20:	0c 5b       	add	r11,	r12	;
    8b22:	81 4c 0a 00 	mov	r12,	10(r1)	; 0x000a
    8b26:	0c 4b       	mov	r11,	r12	;
    8b28:	1c 91 0a 00 	cmp	10(r1),	r12	;0x0000a
    8b2c:	06 2c       	jc	$+14     	;abs 0x8b3a
    8b2e:	8c 43 00 00 	mov	#0,	0(r12)	;r3 As==00
    8b32:	8c 43 02 00 	mov	#0,	2(r12)	;r3 As==00
    8b36:	2c 52       	add	#4,	r12	;r2 As==10
    8b38:	f7 3f       	jmp	$-16     	;abs 0x8b28
    8b3a:	3a 50 0a 00 	add	#10,	r10	;#0x000a
    8b3e:	81 4a 10 00 	mov	r10,	16(r1)	; 0x0010
    8b42:	41 18 07 57 	rpt #2 { rlax.w	r7		;
    8b46:	07 5a       	add	r10,	r7	;
    8b48:	81 47 12 00 	mov	r7,	18(r1)	; 0x0012
    8b4c:	39 50 0a 00 	add	#10,	r9	;#0x000a
    8b50:	81 49 06 00 	mov	r9,	6(r1)	;
    8b54:	41 18 08 58 	rpt #2 { rlax.w	r8		;
    8b58:	08 59       	add	r9,	r8	;
    8b5a:	81 48 14 00 	mov	r8,	20(r1)	; 0x0014
    8b5e:	91 91 14 00 	cmp	20(r1),	6(r1)	;0x00014
    8b62:	06 00 
    8b64:	dd 2c       	jc	$+444    	;abs 0x8d20
    8b66:	1c 41 06 00 	mov	6(r1),	r12	;
    8b6a:	25 4c       	mov	@r12,	r5	;
    8b6c:	05 93       	cmp	#0,	r5	;r3 As==00
    8b6e:	5f 24       	jz	$+192    	;abs 0x8c2e
    8b70:	0a 4b       	mov	r11,	r10	;
    8b72:	14 41 10 00 	mov	16(r1),	r4	;0x00010
    8b76:	08 43       	clr	r8		;
    8b78:	07 48       	mov	r8,	r7	;
    8b7a:	81 4a 08 00 	mov	r10,	8(r1)	;
    8b7e:	26 44       	mov	@r4,	r6	;
    8b80:	91 44 02 00 	mov	2(r4),	12(r1)	; 0x000c
    8b84:	0c 00 
    8b86:	91 4a 02 00 	mov	2(r10),	22(r1)	; 0x0016
    8b8a:	16 00 
    8b8c:	29 4a       	mov	@r10,	r9	;
    8b8e:	0c 46       	mov	r6,	r12	;
    8b90:	0d 43       	clr	r13		;
    8b92:	0e 45       	mov	r5,	r14	;
    8b94:	0f 4d       	mov	r13,	r15	;
    8b96:	81 4b 00 00 	mov	r11,	0(r1)	;
    8b9a:	b0 12 68 c4 	call	#50280		;#0xc468
    8b9e:	0c 59       	add	r9,	r12	;
    8ba0:	0e 43       	clr	r14		;
    8ba2:	0d 6e       	addc	r14,	r13	;
    8ba4:	0c 58       	add	r8,	r12	;
    8ba6:	81 4c 02 00 	mov	r12,	2(r1)	;
    8baa:	07 6d       	addc	r13,	r7	;
    8bac:	24 52       	add	#4,	r4	;r2 As==10
    8bae:	0c 49       	mov	r9,	r12	;
    8bb0:	1d 41 16 00 	mov	22(r1),	r13	;0x00016
    8bb4:	3e 40 10 00 	mov	#16,	r14	;#0x0010
    8bb8:	b0 12 38 c3 	call	#49976		;#0xc338
    8bbc:	09 4c       	mov	r12,	r9	;
    8bbe:	08 4d       	mov	r13,	r8	;
    8bc0:	0c 46       	mov	r6,	r12	;
    8bc2:	1d 41 0c 00 	mov	12(r1),	r13	;0x0000c
    8bc6:	3e 40 10 00 	mov	#16,	r14	;#0x0010
    8bca:	b0 12 38 c3 	call	#49976		;#0xc338
    8bce:	0e 45       	mov	r5,	r14	;
    8bd0:	0f 43       	clr	r15		;
    8bd2:	b0 12 68 c4 	call	#50280		;#0xc468
    8bd6:	09 5c       	add	r12,	r9	;
    8bd8:	08 6d       	addc	r13,	r8	;
    8bda:	1c 41 02 00 	mov	2(r1),	r12	;
    8bde:	0d 47       	mov	r7,	r13	;
    8be0:	3e 40 10 00 	mov	#16,	r14	;#0x0010
    8be4:	b0 12 38 c3 	call	#49976		;#0xc338
    8be8:	09 5c       	add	r12,	r9	;
    8bea:	06 48       	mov	r8,	r6	;
    8bec:	06 6d       	addc	r13,	r6	;
    8bee:	0c 49       	mov	r9,	r12	;
    8bf0:	0d 46       	mov	r6,	r13	;
    8bf2:	3e 40 10 00 	mov	#16,	r14	;#0x0010
    8bf6:	b0 12 38 c3 	call	#49976		;#0xc338
    8bfa:	08 4c       	mov	r12,	r8	;
    8bfc:	07 4d       	mov	r13,	r7	;
    8bfe:	0c 49       	mov	r9,	r12	;
    8c00:	0d 46       	mov	r6,	r13	;
    8c02:	3e 40 10 00 	mov	#16,	r14	;#0x0010
    8c06:	b0 12 90 52 	call	#21136		;#0x5290
    8c0a:	1e 41 02 00 	mov	2(r1),	r14	;
    8c0e:	0c de       	bis	r14,	r12	;
    8c10:	8a 4c 00 00 	mov	r12,	0(r10)	;
    8c14:	8a 4d 02 00 	mov	r13,	2(r10)	;
    8c18:	2a 52       	add	#4,	r10	;r2 As==10
    8c1a:	2b 41       	mov	@r1,	r11	;
    8c1c:	14 91 12 00 	cmp	18(r1),	r4	;0x00012
    8c20:	ac 2b       	jnc	$-166    	;abs 0x8b7a
    8c22:	1d 41 08 00 	mov	8(r1),	r13	;
    8c26:	8d 48 04 00 	mov	r8,	4(r13)	;
    8c2a:	8d 47 06 00 	mov	r7,	6(r13)	;
    8c2e:	1e 41 06 00 	mov	6(r1),	r14	;
    8c32:	2c 4e       	mov	@r14,	r12	;
    8c34:	1d 4e 02 00 	mov	2(r14),	r13	;
    8c38:	3e 40 10 00 	mov	#16,	r14	;#0x0010
    8c3c:	81 4b 00 00 	mov	r11,	0(r1)	;
    8c40:	b0 12 38 c3 	call	#49976		;#0xc338
    8c44:	81 4c 08 00 	mov	r12,	8(r1)	;
    8c48:	81 4d 02 00 	mov	r13,	2(r1)	;
    8c4c:	0c dd       	bis	r13,	r12	;
    8c4e:	2b 41       	mov	@r1,	r11	;
    8c50:	0c 93       	cmp	#0,	r12	;r3 As==00
    8c52:	56 24       	jz	$+174    	;abs 0x8d00
    8c54:	2a 4b       	mov	@r11,	r10	;
    8c56:	14 41 10 00 	mov	16(r1),	r4	;0x00010
    8c5a:	08 4b       	mov	r11,	r8	;
    8c5c:	07 43       	clr	r7		;
    8c5e:	06 47       	mov	r7,	r6	;
    8c60:	2c 44       	mov	@r4,	r12	;
    8c62:	0d 43       	clr	r13		;
    8c64:	1e 41 08 00 	mov	8(r1),	r14	;
    8c68:	1f 41 02 00 	mov	2(r1),	r15	;
    8c6c:	81 4b 00 00 	mov	r11,	0(r1)	;
    8c70:	b0 12 68 c4 	call	#50280		;#0xc468
    8c74:	05 4c       	mov	r12,	r5	;
    8c76:	09 4d       	mov	r13,	r9	;
    8c78:	2c 48       	mov	@r8,	r12	;
    8c7a:	1d 48 02 00 	mov	2(r8),	r13	;
    8c7e:	3e 40 10 00 	mov	#16,	r14	;#0x0010
    8c82:	b0 12 38 c3 	call	#49976		;#0xc338
    8c86:	0c 55       	add	r5,	r12	;
    8c88:	0d 69       	addc	r9,	r13	;
    8c8a:	07 5c       	add	r12,	r7	;
    8c8c:	06 6d       	addc	r13,	r6	;
    8c8e:	05 48       	mov	r8,	r5	;
    8c90:	25 52       	add	#4,	r5	;r2 As==10
    8c92:	0c 47       	mov	r7,	r12	;
    8c94:	0d 46       	mov	r6,	r13	;
    8c96:	3e 40 10 00 	mov	#16,	r14	;#0x0010
    8c9a:	b0 12 90 52 	call	#21136		;#0x5290
    8c9e:	0c da       	bis	r10,	r12	;
    8ca0:	88 4c 00 00 	mov	r12,	0(r8)	;
    8ca4:	85 4d fe ff 	mov	r13,	-2(r5)	; 0xfffe
    8ca8:	2c 44       	mov	@r4,	r12	;
    8caa:	1d 44 02 00 	mov	2(r4),	r13	;
    8cae:	3e 40 10 00 	mov	#16,	r14	;#0x0010
    8cb2:	b0 12 38 c3 	call	#49976		;#0xc338
    8cb6:	1e 41 08 00 	mov	8(r1),	r14	;
    8cba:	1f 41 02 00 	mov	2(r1),	r15	;
    8cbe:	b0 12 68 c4 	call	#50280		;#0xc468
    8cc2:	2a 45       	mov	@r5,	r10	;
    8cc4:	0a 5c       	add	r12,	r10	;
    8cc6:	09 43       	clr	r9		;
    8cc8:	09 6d       	addc	r13,	r9	;
    8cca:	0c 47       	mov	r7,	r12	;
    8ccc:	0d 46       	mov	r6,	r13	;
    8cce:	3e 40 10 00 	mov	#16,	r14	;#0x0010
    8cd2:	b0 12 38 c3 	call	#49976		;#0xc338
    8cd6:	0a 5c       	add	r12,	r10	;
    8cd8:	09 6d       	addc	r13,	r9	;
    8cda:	0c 4a       	mov	r10,	r12	;
    8cdc:	0d 49       	mov	r9,	r13	;
    8cde:	3e 40 10 00 	mov	#16,	r14	;#0x0010
    8ce2:	b0 12 38 c3 	call	#49976		;#0xc338
    8ce6:	07 4c       	mov	r12,	r7	;
    8ce8:	06 4d       	mov	r13,	r6	;
    8cea:	24 52       	add	#4,	r4	;r2 As==10
    8cec:	2b 41       	mov	@r1,	r11	;
    8cee:	14 91 12 00 	cmp	18(r1),	r4	;0x00012
    8cf2:	02 2c       	jc	$+6      	;abs 0x8cf8
    8cf4:	08 45       	mov	r5,	r8	;
    8cf6:	b4 3f       	jmp	$-150    	;abs 0x8c60
    8cf8:	88 4a 04 00 	mov	r10,	4(r8)	;
    8cfc:	88 49 06 00 	mov	r9,	6(r8)	;
    8d00:	a1 52 06 00 	add	#4,	6(r1)	;r2 As==10
    8d04:	2b 52       	add	#4,	r11	;r2 As==10
    8d06:	2b 3f       	jmp	$-424    	;abs 0x8b5e
    8d08:	b1 50 fc ff 	add	#65532,	10(r1)	;#0xfffc, 0x000a
    8d0c:	0a 00 
    8d0e:	1d 41 0a 00 	mov	10(r1),	r13	;0x0000a
    8d12:	2c 4d       	mov	@r13,	r12	;
    8d14:	1c dd 02 00 	bis	2(r13),	r12	;
    8d18:	0c 93       	cmp	#0,	r12	;r3 As==00
    8d1a:	06 20       	jnz	$+14     	;abs 0x8d28
    8d1c:	b1 53 04 00 	add	#-1,	4(r1)	;r3 As==11
    8d20:	0c 43       	clr	r12		;
    8d22:	1c 91 04 00 	cmp	4(r1),	r12	;
    8d26:	f0 3b       	jl	$-30     	;abs 0x8d08
    8d28:	1c 41 0e 00 	mov	14(r1),	r12	;0x0000e
    8d2c:	9c 41 04 00 	mov	4(r1),	8(r12)	;
    8d30:	08 00 
    8d32:	31 50 18 00 	add	#24,	r1	;#0x0018
    8d36:	64 17       	popm	#7,	r10	;16-bit words
    8d38:	30 41       	ret			

00008d3a <__pow5mult>:
    8d3a:	6a 15       	pushm	#7,	r10	;16-bit words
    8d3c:	08 4c       	mov	r12,	r8	;
    8d3e:	07 4d       	mov	r13,	r7	;
    8d40:	09 4e       	mov	r14,	r9	;
    8d42:	0f 4e       	mov	r14,	r15	;
    8d44:	3f f0 03 00 	and	#3,	r15	;
    8d48:	0f 93       	cmp	#0,	r15	;r3 As==00
    8d4a:	08 24       	jz	$+18     	;abs 0x8d5c
    8d4c:	3f 53       	add	#-1,	r15	;r3 As==11
    8d4e:	0f 5f       	rla	r15		;
    8d50:	1e 4f b0 44 	mov	17584(r15),r14	;0x044b0
    8d54:	0f 43       	clr	r15		;
    8d56:	b0 12 a8 87 	call	#34728		;#0x87a8
    8d5a:	07 4c       	mov	r12,	r7	;
    8d5c:	41 18 09 11 	rpt #2 { rrax.w	r9		;
    8d60:	09 93       	cmp	#0,	r9	;r3 As==00
    8d62:	40 24       	jz	$+130    	;abs 0x8de4
    8d64:	88 93 12 00 	cmp	#0,	18(r8)	;r3 As==00, 0x0012
    8d68:	0d 20       	jnz	$+28     	;abs 0x8d84
    8d6a:	3c 42       	mov	#8,	r12	;r2 As==11
    8d6c:	b0 12 68 86 	call	#34408		;#0x8668
    8d70:	88 4c 12 00 	mov	r12,	18(r8)	; 0x0012
    8d74:	8c 43 02 00 	mov	#0,	2(r12)	;r3 As==00
    8d78:	8c 43 04 00 	mov	#0,	4(r12)	;r3 As==00
    8d7c:	8c 43 00 00 	mov	#0,	0(r12)	;r3 As==00
    8d80:	8c 43 06 00 	mov	#0,	6(r12)	;r3 As==00
    8d84:	16 48 12 00 	mov	18(r8),	r6	;0x00012
    8d88:	1a 46 04 00 	mov	4(r6),	r10	;
    8d8c:	0a 93       	cmp	#0,	r10	;r3 As==00
    8d8e:	0a 20       	jnz	$+22     	;abs 0x8da4
    8d90:	0c 48       	mov	r8,	r12	;
    8d92:	3d 40 71 02 	mov	#625,	r13	;#0x0271
    8d96:	b0 12 b6 8a 	call	#35510		;#0x8ab6
    8d9a:	0a 4c       	mov	r12,	r10	;
    8d9c:	86 4c 04 00 	mov	r12,	4(r6)	;
    8da0:	8c 43 00 00 	mov	#0,	0(r12)	;r3 As==00
    8da4:	36 40 d8 8a 	mov	#35544,	r6	;#0x8ad8
    8da8:	35 40 64 87 	mov	#34660,	r5	;#0x8764
    8dac:	19 b3       	bit	#1,	r9	;r3 As==01
    8dae:	09 24       	jz	$+20     	;abs 0x8dc2
    8db0:	0c 48       	mov	r8,	r12	;
    8db2:	0d 47       	mov	r7,	r13	;
    8db4:	0e 4a       	mov	r10,	r14	;
    8db6:	86 12       	call	r6		;
    8db8:	04 4c       	mov	r12,	r4	;
    8dba:	0c 48       	mov	r8,	r12	;
    8dbc:	0d 47       	mov	r7,	r13	;
    8dbe:	85 12       	call	r5		;
    8dc0:	07 44       	mov	r4,	r7	;
    8dc2:	09 11       	rra	r9		;
    8dc4:	09 93       	cmp	#0,	r9	;r3 As==00
    8dc6:	0e 24       	jz	$+30     	;abs 0x8de4
    8dc8:	2c 4a       	mov	@r10,	r12	;
    8dca:	0c 93       	cmp	#0,	r12	;r3 As==00
    8dcc:	02 24       	jz	$+6      	;abs 0x8dd2
    8dce:	0a 4c       	mov	r12,	r10	;
    8dd0:	ed 3f       	jmp	$-36     	;abs 0x8dac
    8dd2:	0c 48       	mov	r8,	r12	;
    8dd4:	0d 4a       	mov	r10,	r13	;
    8dd6:	0e 4a       	mov	r10,	r14	;
    8dd8:	86 12       	call	r6		;
    8dda:	8a 4c 00 00 	mov	r12,	0(r10)	;
    8dde:	8c 43 00 00 	mov	#0,	0(r12)	;r3 As==00
    8de2:	f5 3f       	jmp	$-20     	;abs 0x8dce
    8de4:	0c 47       	mov	r7,	r12	;
    8de6:	64 17       	popm	#7,	r10	;16-bit words
    8de8:	30 41       	ret			

00008dea <__lshift>:
    8dea:	6a 15       	pushm	#7,	r10	;16-bit words
    8dec:	31 80 10 00 	sub	#16,	r1	;#0x0010
    8df0:	81 4c 06 00 	mov	r12,	6(r1)	;
    8df4:	08 4d       	mov	r13,	r8	;
    8df6:	07 4e       	mov	r14,	r7	;
    8df8:	09 4e       	mov	r14,	r9	;
    8dfa:	44 18 09 11 	rpt #5 { rrax.w	r9		;
    8dfe:	1d 4d 02 00 	mov	2(r13),	r13	;
    8e02:	0c 49       	mov	r9,	r12	;
    8e04:	1c 58 08 00 	add	8(r8),	r12	;
    8e08:	81 4c 02 00 	mov	r12,	2(r1)	;
    8e0c:	04 4c       	mov	r12,	r4	;
    8e0e:	14 53       	inc	r4		;
    8e10:	1c 48 04 00 	mov	4(r8),	r12	;
    8e14:	0c 94       	cmp	r4,	r12	;
    8e16:	03 34       	jge	$+8      	;abs 0x8e1e
    8e18:	1d 53       	inc	r13		;
    8e1a:	0c 5c       	rla	r12		;
    8e1c:	fb 3f       	jmp	$-8      	;abs 0x8e14
    8e1e:	1c 41 06 00 	mov	6(r1),	r12	;
    8e22:	b0 12 c6 86 	call	#34502		;#0x86c6
    8e26:	05 4c       	mov	r12,	r5	;
    8e28:	0a 4c       	mov	r12,	r10	;
    8e2a:	3a 50 0a 00 	add	#10,	r10	;#0x000a
    8e2e:	0d 4a       	mov	r10,	r13	;
    8e30:	0c 43       	clr	r12		;
    8e32:	0c 99       	cmp	r9,	r12	;
    8e34:	07 34       	jge	$+16     	;abs 0x8e44
    8e36:	8d 43 00 00 	mov	#0,	0(r13)	;r3 As==00
    8e3a:	8d 43 02 00 	mov	#0,	2(r13)	;r3 As==00
    8e3e:	1c 53       	inc	r12		;
    8e40:	2d 52       	add	#4,	r13	;r2 As==10
    8e42:	f7 3f       	jmp	$-16     	;abs 0x8e32
    8e44:	09 93       	cmp	#0,	r9	;r3 As==00
    8e46:	01 34       	jge	$+4      	;abs 0x8e4a
    8e48:	09 43       	clr	r9		;
    8e4a:	41 18 09 59 	rpt #2 { rlax.w	r9		;
    8e4e:	0a 59       	add	r9,	r10	;
    8e50:	09 48       	mov	r8,	r9	;
    8e52:	39 50 0a 00 	add	#10,	r9	;#0x000a
    8e56:	1c 48 08 00 	mov	8(r8),	r12	;
    8e5a:	b0 12 3c 52 	call	#21052		;#0x523c
    8e5e:	0c 59       	add	r9,	r12	;
    8e60:	81 4c 04 00 	mov	r12,	4(r1)	;
    8e64:	0c 47       	mov	r7,	r12	;
    8e66:	3c f0 1f 00 	and	#31,	r12	;#0x001f
    8e6a:	0c 93       	cmp	#0,	r12	;r3 As==00
    8e6c:	3a 24       	jz	$+118    	;abs 0x8ee2
    8e6e:	3d 40 20 00 	mov	#32,	r13	;#0x0020
    8e72:	0d 8c       	sub	r12,	r13	;
    8e74:	06 43       	clr	r6		;
    8e76:	07 46       	mov	r6,	r7	;
    8e78:	0e 4c       	mov	r12,	r14	;
    8e7a:	0f 43       	clr	r15		;
    8e7c:	81 4e 08 00 	mov	r14,	8(r1)	;
    8e80:	81 4f 0a 00 	mov	r15,	10(r1)	; 0x000a
    8e84:	0e 4d       	mov	r13,	r14	;
    8e86:	0f 43       	clr	r15		;
    8e88:	81 4e 0c 00 	mov	r14,	12(r1)	; 0x000c
    8e8c:	81 4f 0e 00 	mov	r15,	14(r1)	; 0x000e
    8e90:	2c 49       	mov	@r9,	r12	;
    8e92:	1d 49 02 00 	mov	2(r9),	r13	;
    8e96:	1e 41 08 00 	mov	8(r1),	r14	;
    8e9a:	81 4a 00 00 	mov	r10,	0(r1)	;
    8e9e:	b0 12 90 52 	call	#21136		;#0x5290
    8ea2:	06 dc       	bis	r12,	r6	;
    8ea4:	8a 46 00 00 	mov	r6,	0(r10)	;
    8ea8:	07 dd       	bis	r13,	r7	;
    8eaa:	8a 47 02 00 	mov	r7,	2(r10)	;
    8eae:	2c 49       	mov	@r9,	r12	;
    8eb0:	1d 49 02 00 	mov	2(r9),	r13	;
    8eb4:	1e 41 0c 00 	mov	12(r1),	r14	;0x0000c
    8eb8:	b0 12 38 c3 	call	#49976		;#0xc338
    8ebc:	06 4c       	mov	r12,	r6	;
    8ebe:	07 4d       	mov	r13,	r7	;
    8ec0:	29 52       	add	#4,	r9	;r2 As==10
    8ec2:	2a 52       	add	#4,	r10	;r2 As==10
    8ec4:	2b 41       	mov	@r1,	r11	;
    8ec6:	19 91 04 00 	cmp	4(r1),	r9	;
    8eca:	e2 2b       	jnc	$-58     	;abs 0x8e90
    8ecc:	8b 4c 04 00 	mov	r12,	4(r11)	;
    8ed0:	8b 4d 06 00 	mov	r13,	6(r11)	;
    8ed4:	07 dc       	bis	r12,	r7	;
    8ed6:	07 93       	cmp	#0,	r7	;r3 As==00
    8ed8:	0e 24       	jz	$+30     	;abs 0x8ef6
    8eda:	14 41 02 00 	mov	2(r1),	r4	;
    8ede:	24 53       	incd	r4		;
    8ee0:	0a 3c       	jmp	$+22     	;abs 0x8ef6
    8ee2:	aa 49 00 00 	mov	@r9,	0(r10)	;
    8ee6:	9a 49 02 00 	mov	2(r9),	2(r10)	;
    8eea:	02 00 
    8eec:	29 52       	add	#4,	r9	;r2 As==10
    8eee:	2a 52       	add	#4,	r10	;r2 As==10
    8ef0:	19 91 04 00 	cmp	4(r1),	r9	;
    8ef4:	f6 2b       	jnc	$-18     	;abs 0x8ee2
    8ef6:	34 53       	add	#-1,	r4	;r3 As==11
    8ef8:	85 44 08 00 	mov	r4,	8(r5)	;
    8efc:	1c 41 06 00 	mov	6(r1),	r12	;
    8f00:	0d 48       	mov	r8,	r13	;
    8f02:	b0 12 64 87 	call	#34660		;#0x8764
    8f06:	0c 45       	mov	r5,	r12	;
    8f08:	31 50 10 00 	add	#16,	r1	;#0x0010
    8f0c:	64 17       	popm	#7,	r10	;16-bit words
    8f0e:	30 41       	ret			

00008f10 <__mcmp>:
    8f10:	1a 15       	pushm	#2,	r10	;16-bit words
    8f12:	1e 4d 08 00 	mov	8(r13),	r14	;
    8f16:	1f 4c 08 00 	mov	8(r12),	r15	;
    8f1a:	0f 8e       	sub	r14,	r15	;
    8f1c:	0f 93       	cmp	#0,	r15	;r3 As==00
    8f1e:	23 20       	jnz	$+72     	;abs 0x8f66
    8f20:	3c 50 0a 00 	add	#10,	r12	;#0x000a
    8f24:	41 18 0e 5e 	rpt #2 { rlax.w	r14		;
    8f28:	0f 4c       	mov	r12,	r15	;
    8f2a:	0f 5e       	add	r14,	r15	;
    8f2c:	3d 50 0a 00 	add	#10,	r13	;#0x000a
    8f30:	0d 5e       	add	r14,	r13	;
    8f32:	3f 50 fc ff 	add	#65532,	r15	;#0xfffc
    8f36:	2a 4f       	mov	@r15,	r10	;
    8f38:	1e 4f 02 00 	mov	2(r15),	r14	;
    8f3c:	3d 50 fc ff 	add	#65532,	r13	;#0xfffc
    8f40:	29 4d       	mov	@r13,	r9	;
    8f42:	1b 4d 02 00 	mov	2(r13),	r11	;
    8f46:	0a 99       	cmp	r9,	r10	;
    8f48:	02 20       	jnz	$+6      	;abs 0x8f4e
    8f4a:	0e 9b       	cmp	r11,	r14	;
    8f4c:	08 24       	jz	$+18     	;abs 0x8f5e
    8f4e:	0e 9b       	cmp	r11,	r14	;
    8f50:	0c 28       	jnc	$+26     	;abs 0x8f6a
    8f52:	0b 9e       	cmp	r14,	r11	;
    8f54:	02 20       	jnz	$+6      	;abs 0x8f5a
    8f56:	0a 99       	cmp	r9,	r10	;
    8f58:	08 28       	jnc	$+18     	;abs 0x8f6a
    8f5a:	1c 43       	mov	#1,	r12	;r3 As==01
    8f5c:	07 3c       	jmp	$+16     	;abs 0x8f6c
    8f5e:	0c 9f       	cmp	r15,	r12	;
    8f60:	e8 2b       	jnc	$-46     	;abs 0x8f32
    8f62:	0c 43       	clr	r12		;
    8f64:	03 3c       	jmp	$+8      	;abs 0x8f6c
    8f66:	0c 4f       	mov	r15,	r12	;
    8f68:	01 3c       	jmp	$+4      	;abs 0x8f6c
    8f6a:	3c 43       	mov	#-1,	r12	;r3 As==11
    8f6c:	19 17       	popm	#2,	r10	;16-bit words
    8f6e:	30 41       	ret			

00008f70 <__mdiff>:
    8f70:	6a 15       	pushm	#7,	r10	;16-bit words
    8f72:	31 80 16 00 	sub	#22,	r1	;#0x0016
    8f76:	07 4c       	mov	r12,	r7	;
    8f78:	0a 4d       	mov	r13,	r10	;
    8f7a:	09 4e       	mov	r14,	r9	;
    8f7c:	0c 4d       	mov	r13,	r12	;
    8f7e:	0d 4e       	mov	r14,	r13	;
    8f80:	b0 12 10 8f 	call	#36624		;#0x8f10
    8f84:	0d 4c       	mov	r12,	r13	;
    8f86:	3e 40 c6 86 	mov	#34502,	r14	;#0x86c6
    8f8a:	0c 93       	cmp	#0,	r12	;r3 As==00
    8f8c:	09 20       	jnz	$+20     	;abs 0x8fa0
    8f8e:	0c 47       	mov	r7,	r12	;
    8f90:	8e 12       	call	r14		;
    8f92:	9c 43 08 00 	mov	#1,	8(r12)	;r3 As==01
    8f96:	8c 43 0a 00 	mov	#0,	10(r12)	;r3 As==00, 0x000a
    8f9a:	8c 43 0c 00 	mov	#0,	12(r12)	;r3 As==00, 0x000c
    8f9e:	c4 3c       	jmp	$+394    	;abs 0x9128
    8fa0:	0c 93       	cmp	#0,	r12	;r3 As==00
    8fa2:	05 34       	jge	$+12     	;abs 0x8fae
    8fa4:	0c 4a       	mov	r10,	r12	;
    8fa6:	0a 49       	mov	r9,	r10	;
    8fa8:	09 4c       	mov	r12,	r9	;
    8faa:	18 43       	mov	#1,	r8	;r3 As==01
    8fac:	01 3c       	jmp	$+4      	;abs 0x8fb0
    8fae:	08 43       	clr	r8		;
    8fb0:	0c 47       	mov	r7,	r12	;
    8fb2:	1d 4a 02 00 	mov	2(r10),	r13	;
    8fb6:	8e 12       	call	r14		;
    8fb8:	81 4c 06 00 	mov	r12,	6(r1)	;
    8fbc:	8c 48 06 00 	mov	r8,	6(r12)	;
    8fc0:	91 4a 08 00 	mov	8(r10),	4(r1)	;
    8fc4:	04 00 
    8fc6:	3a 50 0a 00 	add	#10,	r10	;#0x000a
    8fca:	1c 41 04 00 	mov	4(r1),	r12	;
    8fce:	41 18 0c 5c 	rpt #2 { rlax.w	r12		;
    8fd2:	0c 5a       	add	r10,	r12	;
    8fd4:	81 4c 12 00 	mov	r12,	18(r1)	; 0x0012
    8fd8:	07 49       	mov	r9,	r7	;
    8fda:	37 50 0a 00 	add	#10,	r7	;#0x000a
    8fde:	1c 49 08 00 	mov	8(r9),	r12	;
    8fe2:	b0 12 3c 52 	call	#21052		;#0x523c
    8fe6:	0c 57       	add	r7,	r12	;
    8fe8:	81 4c 14 00 	mov	r12,	20(r1)	; 0x0014
    8fec:	14 41 06 00 	mov	6(r1),	r4	;
    8ff0:	34 50 0a 00 	add	#10,	r4	;#0x000a
    8ff4:	09 43       	clr	r9		;
    8ff6:	06 49       	mov	r9,	r6	;
    8ff8:	1d 4a 02 00 	mov	2(r10),	r13	;
    8ffc:	25 47       	mov	@r7,	r5	;
    8ffe:	91 47 02 00 	mov	2(r7),	8(r1)	;
    9002:	08 00 
    9004:	2c 4a       	mov	@r10,	r12	;
    9006:	09 5c       	add	r12,	r9	;
    9008:	81 49 0a 00 	mov	r9,	10(r1)	; 0x000a
    900c:	0e 43       	clr	r14		;
    900e:	0e 66       	addc	r6,	r14	;
    9010:	81 4e 0c 00 	mov	r14,	12(r1)	; 0x000c
    9014:	81 45 0e 00 	mov	r5,	14(r1)	; 0x000e
    9018:	81 43 10 00 	mov	#0,	16(r1)	;r3 As==00, 0x0010
    901c:	1e 41 0a 00 	mov	10(r1),	r14	;0x0000a
    9020:	1f 41 0c 00 	mov	12(r1),	r15	;0x0000c
    9024:	1e 81 0e 00 	sub	14(r1),	r14	;0x0000e
    9028:	1f 71 10 00 	subc	16(r1),	r15	;0x00010
    902c:	81 4e 00 00 	mov	r14,	0(r1)	;
    9030:	81 4f 02 00 	mov	r15,	2(r1)	;
    9034:	2a 52       	add	#4,	r10	;r2 As==10
    9036:	27 52       	add	#4,	r7	;r2 As==10
    9038:	3e 40 10 00 	mov	#16,	r14	;#0x0010
    903c:	b0 12 38 c3 	call	#49976		;#0xc338
    9040:	08 4c       	mov	r12,	r8	;
    9042:	09 4d       	mov	r13,	r9	;
    9044:	0c 45       	mov	r5,	r12	;
    9046:	1d 41 08 00 	mov	8(r1),	r13	;
    904a:	3e 40 10 00 	mov	#16,	r14	;#0x0010
    904e:	b0 12 38 c3 	call	#49976		;#0xc338
    9052:	08 8c       	sub	r12,	r8	;
    9054:	09 7d       	subc	r13,	r9	;
    9056:	2c 41       	mov	@r1,	r12	;
    9058:	1d 41 02 00 	mov	2(r1),	r13	;
    905c:	3e 40 10 00 	mov	#16,	r14	;#0x0010
    9060:	b0 12 04 53 	call	#21252		;#0x5304
    9064:	08 5c       	add	r12,	r8	;
    9066:	05 49       	mov	r9,	r5	;
    9068:	05 6d       	addc	r13,	r5	;
    906a:	0c 48       	mov	r8,	r12	;
    906c:	0d 45       	mov	r5,	r13	;
    906e:	3e 40 10 00 	mov	#16,	r14	;#0x0010
    9072:	b0 12 04 53 	call	#21252		;#0x5304
    9076:	09 4c       	mov	r12,	r9	;
    9078:	06 4d       	mov	r13,	r6	;
    907a:	0f 44       	mov	r4,	r15	;
    907c:	2f 52       	add	#4,	r15	;r2 As==10
    907e:	81 4f 08 00 	mov	r15,	8(r1)	;
    9082:	0c 48       	mov	r8,	r12	;
    9084:	0d 45       	mov	r5,	r13	;
    9086:	3e 40 10 00 	mov	#16,	r14	;#0x0010
    908a:	b0 12 90 52 	call	#21136		;#0x5290
    908e:	2e 41       	mov	@r1,	r14	;
    9090:	0c de       	bis	r14,	r12	;
    9092:	84 4c 00 00 	mov	r12,	0(r4)	;
    9096:	84 4d 02 00 	mov	r13,	2(r4)	;
    909a:	14 41 08 00 	mov	8(r1),	r4	;
    909e:	17 91 14 00 	cmp	20(r1),	r7	;0x00014
    90a2:	aa 2b       	jnc	$-170    	;abs 0x8ff8
    90a4:	08 44       	mov	r4,	r8	;
    90a6:	0c 48       	mov	r8,	r12	;
    90a8:	1a 91 12 00 	cmp	18(r1),	r10	;0x00012
    90ac:	2e 2c       	jc	$+94     	;abs 0x910a
    90ae:	15 4a 02 00 	mov	2(r10),	r5	;
    90b2:	27 4a       	mov	@r10,	r7	;
    90b4:	04 47       	mov	r7,	r4	;
    90b6:	04 59       	add	r9,	r4	;
    90b8:	0d 43       	clr	r13		;
    90ba:	0d 66       	addc	r6,	r13	;
    90bc:	2a 52       	add	#4,	r10	;r2 As==10
    90be:	0c 44       	mov	r4,	r12	;
    90c0:	3e 40 10 00 	mov	#16,	r14	;#0x0010
    90c4:	b0 12 04 53 	call	#21252		;#0x5304
    90c8:	09 4c       	mov	r12,	r9	;
    90ca:	06 4d       	mov	r13,	r6	;
    90cc:	0c 47       	mov	r7,	r12	;
    90ce:	0d 45       	mov	r5,	r13	;
    90d0:	3e 40 10 00 	mov	#16,	r14	;#0x0010
    90d4:	b0 12 38 c3 	call	#49976		;#0xc338
    90d8:	07 49       	mov	r9,	r7	;
    90da:	07 5c       	add	r12,	r7	;
    90dc:	05 46       	mov	r6,	r5	;
    90de:	05 6d       	addc	r13,	r5	;
    90e0:	0c 47       	mov	r7,	r12	;
    90e2:	0d 45       	mov	r5,	r13	;
    90e4:	3e 40 10 00 	mov	#16,	r14	;#0x0010
    90e8:	b0 12 04 53 	call	#21252		;#0x5304
    90ec:	09 4c       	mov	r12,	r9	;
    90ee:	06 4d       	mov	r13,	r6	;
    90f0:	0c 47       	mov	r7,	r12	;
    90f2:	0d 45       	mov	r5,	r13	;
    90f4:	3e 40 10 00 	mov	#16,	r14	;#0x0010
    90f8:	b0 12 90 52 	call	#21136		;#0x5290
    90fc:	0c d4       	bis	r4,	r12	;
    90fe:	88 4c 00 00 	mov	r12,	0(r8)	;
    9102:	88 4d 02 00 	mov	r13,	2(r8)	;
    9106:	28 52       	add	#4,	r8	;r2 As==10
    9108:	ce 3f       	jmp	$-98     	;abs 0x90a6
    910a:	3c 50 fc ff 	add	#65532,	r12	;#0xfffc
    910e:	2d 4c       	mov	@r12,	r13	;
    9110:	1d dc 02 00 	bis	2(r12),	r13	;
    9114:	0d 93       	cmp	#0,	r13	;r3 As==00
    9116:	03 20       	jnz	$+8      	;abs 0x911e
    9118:	b1 53 04 00 	add	#-1,	4(r1)	;r3 As==11
    911c:	f6 3f       	jmp	$-18     	;abs 0x910a
    911e:	1c 41 06 00 	mov	6(r1),	r12	;
    9122:	9c 41 04 00 	mov	4(r1),	8(r12)	;
    9126:	08 00 
    9128:	31 50 16 00 	add	#22,	r1	;#0x0016
    912c:	64 17       	popm	#7,	r10	;16-bit words
    912e:	30 41       	ret			

00009130 <__ulp>:
    9130:	1a 15       	pushm	#2,	r10	;16-bit words
    9132:	0d 43       	clr	r13		;
    9134:	0c 4f       	mov	r15,	r12	;
    9136:	3c f0 f0 7f 	and	#32752,	r12	;#0x7ff0
    913a:	0a 4d       	mov	r13,	r10	;
    913c:	0a 53       	add	#0,	r10	;r3 As==00
    913e:	0b 4c       	mov	r12,	r11	;
    9140:	3b 60 c0 fc 	addc	#64704,	r11	;#0xfcc0
    9144:	0d 9b       	cmp	r11,	r13	;
    9146:	04 38       	jl	$+10     	;abs 0x9150
    9148:	0b 9d       	cmp	r13,	r11	;
    914a:	06 20       	jnz	$+14     	;abs 0x9158
    914c:	0a 9d       	cmp	r13,	r10	;
    914e:	04 24       	jz	$+10     	;abs 0x9158
    9150:	09 4b       	mov	r11,	r9	;
    9152:	0c 43       	clr	r12		;
    9154:	0d 4c       	mov	r12,	r13	;
    9156:	3a 3c       	jmp	$+118    	;abs 0x91cc
    9158:	0c 43       	clr	r12		;
    915a:	0d 43       	clr	r13		;
    915c:	0c 8a       	sub	r10,	r12	;
    915e:	0d 7b       	subc	r11,	r13	;
    9160:	3e 40 14 00 	mov	#20,	r14	;#0x0014
    9164:	b0 12 04 53 	call	#21252		;#0x5304
    9168:	0e 4c       	mov	r12,	r14	;
    916a:	0c 43       	clr	r12		;
    916c:	0c 9d       	cmp	r13,	r12	;
    916e:	13 38       	jl	$+40     	;abs 0x9196
    9170:	0d 93       	cmp	#0,	r13	;r3 As==00
    9172:	04 20       	jnz	$+10     	;abs 0x917c
    9174:	3c 40 13 00 	mov	#19,	r12	;#0x0013
    9178:	0c 9e       	cmp	r14,	r12	;
    917a:	0d 28       	jnc	$+28     	;abs 0x9196
    917c:	0c 43       	clr	r12		;
    917e:	3d 42       	mov	#8,	r13	;r2 As==11
    9180:	3e b0 00 80 	bit	#32768,	r14	;#0x8000
    9184:	0f 7f       	subc	r15,	r15	;
    9186:	3f e3       	inv	r15		;
    9188:	b0 12 04 53 	call	#21252		;#0x5304
    918c:	0a 4c       	mov	r12,	r10	;
    918e:	09 4d       	mov	r13,	r9	;
    9190:	0c 43       	clr	r12		;
    9192:	0d 4c       	mov	r12,	r13	;
    9194:	1b 3c       	jmp	$+56     	;abs 0x91cc
    9196:	0a 43       	clr	r10		;
    9198:	09 4a       	mov	r10,	r9	;
    919a:	0b 4e       	mov	r14,	r11	;
    919c:	3b 50 ec ff 	add	#65516,	r11	;#0xffec
    91a0:	3d 63       	addc	#-1,	r13	;r3 As==11
    91a2:	0a 9d       	cmp	r13,	r10	;
    91a4:	11 38       	jl	$+36     	;abs 0x91c8
    91a6:	0d 9a       	cmp	r10,	r13	;
    91a8:	04 20       	jnz	$+10     	;abs 0x91b2
    91aa:	3c 40 1e 00 	mov	#30,	r12	;#0x001e
    91ae:	0c 9b       	cmp	r11,	r12	;
    91b0:	0b 28       	jnc	$+24     	;abs 0x91c8
    91b2:	1c 43       	mov	#1,	r12	;r3 As==01
    91b4:	3d 40 1f 00 	mov	#31,	r13	;#0x001f
    91b8:	0d 8b       	sub	r11,	r13	;
    91ba:	b0 12 46 52 	call	#21062		;#0x5246
    91be:	3c b0 00 80 	bit	#32768,	r12	;#0x8000
    91c2:	0d 7d       	subc	r13,	r13	;
    91c4:	3d e3       	inv	r13		;
    91c6:	02 3c       	jmp	$+6      	;abs 0x91cc
    91c8:	1c 43       	mov	#1,	r12	;r3 As==01
    91ca:	0d 43       	clr	r13		;
    91cc:	0e 4a       	mov	r10,	r14	;
    91ce:	0f 49       	mov	r9,	r15	;
    91d0:	19 17       	popm	#2,	r10	;16-bit words
    91d2:	30 41       	ret			

000091d4 <__b2d>:
    91d4:	6a 15       	pushm	#7,	r10	;16-bit words
    91d6:	31 80 0a 00 	sub	#10,	r1	;#0x000a
    91da:	0a 4d       	mov	r13,	r10	;
    91dc:	0d 4c       	mov	r12,	r13	;
    91de:	3d 50 0a 00 	add	#10,	r13	;#0x000a
    91e2:	81 4d 02 00 	mov	r13,	2(r1)	;
    91e6:	1c 4c 08 00 	mov	8(r12),	r12	;
    91ea:	b0 12 3c 52 	call	#21052		;#0x523c
    91ee:	19 41 02 00 	mov	2(r1),	r9	;
    91f2:	09 5c       	add	r12,	r9	;
    91f4:	0e 49       	mov	r9,	r14	;
    91f6:	3e 50 fc ff 	add	#65532,	r14	;#0xfffc
    91fa:	81 4e 00 00 	mov	r14,	0(r1)	;
    91fe:	14 49 fc ff 	mov	-4(r9),	r4	;
    9202:	15 49 fe ff 	mov	-2(r9),	r5	;
    9206:	0c 44       	mov	r4,	r12	;
    9208:	0d 45       	mov	r5,	r13	;
    920a:	b0 12 86 89 	call	#35206		;#0x8986
    920e:	08 4c       	mov	r12,	r8	;
    9210:	3c 40 20 00 	mov	#32,	r12	;#0x0020
    9214:	0c 88       	sub	r8,	r12	;
    9216:	8a 4c 00 00 	mov	r12,	0(r10)	;
    921a:	3d 40 0a 00 	mov	#10,	r13	;#0x000a
    921e:	0d 98       	cmp	r8,	r13	;
    9220:	2a 38       	jl	$+86     	;abs 0x9276
    9222:	36 40 0b 00 	mov	#11,	r6	;#0x000b
    9226:	06 88       	sub	r8,	r6	;
    9228:	07 43       	clr	r7		;
    922a:	0c 44       	mov	r4,	r12	;
    922c:	0d 45       	mov	r5,	r13	;
    922e:	0e 46       	mov	r6,	r14	;
    9230:	b0 12 38 c3 	call	#49976		;#0xc338
    9234:	3d d0 f0 3f 	bis	#16368,	r13	;#0x3ff0
    9238:	0a 4c       	mov	r12,	r10	;
    923a:	81 4d 04 00 	mov	r13,	4(r1)	;
    923e:	a1 91 02 00 	cmp	@r1,	2(r1)	;
    9242:	05 2c       	jc	$+12     	;abs 0x924e
    9244:	1c 49 f8 ff 	mov	-8(r9),	r12	;
    9248:	1d 49 fa ff 	mov	-6(r9),	r13	;
    924c:	02 3c       	jmp	$+6      	;abs 0x9252
    924e:	0c 43       	clr	r12		;
    9250:	0d 43       	clr	r13		;
    9252:	0e 46       	mov	r6,	r14	;
    9254:	b0 12 38 c3 	call	#49976		;#0xc338
    9258:	06 4c       	mov	r12,	r6	;
    925a:	07 4d       	mov	r13,	r7	;
    925c:	0e 48       	mov	r8,	r14	;
    925e:	3e 50 15 00 	add	#21,	r14	;#0x0015
    9262:	0c 44       	mov	r4,	r12	;
    9264:	0d 45       	mov	r5,	r13	;
    9266:	0f 43       	clr	r15		;
    9268:	b0 12 90 52 	call	#21136		;#0x5290
    926c:	0d d7       	bis	r7,	r13	;
    926e:	07 46       	mov	r6,	r7	;
    9270:	07 dc       	bis	r12,	r7	;
    9272:	0c 47       	mov	r7,	r12	;
    9274:	56 3c       	jmp	$+174    	;abs 0x9322
    9276:	a1 91 02 00 	cmp	@r1,	2(r1)	;
    927a:	0a 2c       	jc	$+22     	;abs 0x9290
    927c:	0e 49       	mov	r9,	r14	;
    927e:	3e 50 f8 ff 	add	#65528,	r14	;#0xfff8
    9282:	81 4e 00 00 	mov	r14,	0(r1)	;
    9286:	17 49 f8 ff 	mov	-8(r9),	r7	;
    928a:	16 49 fa ff 	mov	-6(r9),	r6	;
    928e:	02 3c       	jmp	$+6      	;abs 0x9294
    9290:	07 43       	clr	r7		;
    9292:	06 47       	mov	r7,	r6	;
    9294:	0c 48       	mov	r8,	r12	;
    9296:	3c 50 f5 ff 	add	#65525,	r12	;#0xfff5
    929a:	0c 93       	cmp	#0,	r12	;r3 As==00
    929c:	3a 24       	jz	$+118    	;abs 0x9312
    929e:	3a 40 2b 00 	mov	#43,	r10	;#0x002b
    92a2:	0a 88       	sub	r8,	r10	;
    92a4:	0d 4c       	mov	r12,	r13	;
    92a6:	0e 43       	clr	r14		;
    92a8:	81 4d 06 00 	mov	r13,	6(r1)	;
    92ac:	81 4e 08 00 	mov	r14,	8(r1)	;
    92b0:	0c 44       	mov	r4,	r12	;
    92b2:	0d 45       	mov	r5,	r13	;
    92b4:	1e 41 06 00 	mov	6(r1),	r14	;
    92b8:	b0 12 90 52 	call	#21136		;#0x5290
    92bc:	08 4c       	mov	r12,	r8	;
    92be:	09 4d       	mov	r13,	r9	;
    92c0:	39 d0 f0 3f 	bis	#16368,	r9	;#0x3ff0
    92c4:	04 4a       	mov	r10,	r4	;
    92c6:	05 43       	clr	r5		;
    92c8:	0c 47       	mov	r7,	r12	;
    92ca:	0d 46       	mov	r6,	r13	;
    92cc:	0e 44       	mov	r4,	r14	;
    92ce:	b0 12 38 c3 	call	#49976		;#0xc338
    92d2:	0d d9       	bis	r9,	r13	;
    92d4:	0a 48       	mov	r8,	r10	;
    92d6:	0a dc       	bis	r12,	r10	;
    92d8:	81 4d 04 00 	mov	r13,	4(r1)	;
    92dc:	a1 91 02 00 	cmp	@r1,	2(r1)	;
    92e0:	06 2c       	jc	$+14     	;abs 0x92ee
    92e2:	2e 41       	mov	@r1,	r14	;
    92e4:	1c 4e fc ff 	mov	-4(r14),r12	;
    92e8:	1d 4e fe ff 	mov	-2(r14),r13	;
    92ec:	02 3c       	jmp	$+6      	;abs 0x92f2
    92ee:	0c 43       	clr	r12		;
    92f0:	0d 43       	clr	r13		;
    92f2:	0e 44       	mov	r4,	r14	;
    92f4:	b0 12 38 c3 	call	#49976		;#0xc338
    92f8:	05 4c       	mov	r12,	r5	;
    92fa:	08 4d       	mov	r13,	r8	;
    92fc:	0c 47       	mov	r7,	r12	;
    92fe:	0d 46       	mov	r6,	r13	;
    9300:	1e 41 06 00 	mov	6(r1),	r14	;
    9304:	b0 12 90 52 	call	#21136		;#0x5290
    9308:	0d d8       	bis	r8,	r13	;
    930a:	07 45       	mov	r5,	r7	;
    930c:	07 dc       	bis	r12,	r7	;
    930e:	0c 47       	mov	r7,	r12	;
    9310:	08 3c       	jmp	$+18     	;abs 0x9322
    9312:	09 45       	mov	r5,	r9	;
    9314:	39 d0 f0 3f 	bis	#16368,	r9	;#0x3ff0
    9318:	0a 44       	mov	r4,	r10	;
    931a:	81 49 04 00 	mov	r9,	4(r1)	;
    931e:	0c 47       	mov	r7,	r12	;
    9320:	0d 46       	mov	r6,	r13	;
    9322:	0e 4a       	mov	r10,	r14	;
    9324:	1f 41 04 00 	mov	4(r1),	r15	;
    9328:	31 50 0a 00 	add	#10,	r1	;#0x000a
    932c:	64 17       	popm	#7,	r10	;16-bit words
    932e:	30 41       	ret			

00009330 <__d2b>:
    9330:	6a 15       	pushm	#7,	r10	;16-bit words
    9332:	31 80 0e 00 	sub	#14,	r1	;#0x000e
    9336:	91 41 1e 00 	mov	30(r1),	2(r1)	;0x0001e
    933a:	02 00 
    933c:	16 41 20 00 	mov	32(r1),	r6	;0x00020
    9340:	19 41 22 00 	mov	34(r1),	r9	;0x00022
    9344:	18 41 24 00 	mov	36(r1),	r8	;0x00024
    9348:	04 4d       	mov	r13,	r4	;
    934a:	05 4e       	mov	r14,	r5	;
    934c:	1d 43       	mov	#1,	r13	;r3 As==01
    934e:	b0 12 c6 86 	call	#34502		;#0x86c6
    9352:	0a 4c       	mov	r12,	r10	;
    9354:	07 49       	mov	r9,	r7	;
    9356:	0b 48       	mov	r8,	r11	;
    9358:	3b f0 0f 00 	and	#15,	r11	;#0x000f
    935c:	0c 49       	mov	r9,	r12	;
    935e:	0d 48       	mov	r8,	r13	;
    9360:	3d f0 ff 7f 	and	#32767,	r13	;#0x7fff
    9364:	3e 40 14 00 	mov	#20,	r14	;#0x0014
    9368:	81 4b 00 00 	mov	r11,	0(r1)	;
    936c:	b0 12 38 c3 	call	#49976		;#0xc338
    9370:	09 4c       	mov	r12,	r9	;
    9372:	08 4d       	mov	r13,	r8	;
    9374:	0c dd       	bis	r13,	r12	;
    9376:	2b 41       	mov	@r1,	r11	;
    9378:	81 47 0a 00 	mov	r7,	10(r1)	; 0x000a
    937c:	0c 93       	cmp	#0,	r12	;r3 As==00
    937e:	02 24       	jz	$+6      	;abs 0x9384
    9380:	3b d0 10 00 	bis	#16,	r11	;#0x0010
    9384:	81 4b 0c 00 	mov	r11,	12(r1)	; 0x000c
    9388:	1d 41 02 00 	mov	2(r1),	r13	;
    938c:	0e 4d       	mov	r13,	r14	;
    938e:	0e d6       	bis	r6,	r14	;
    9390:	3f 40 f8 89 	mov	#35320,	r15	;#0x89f8
    9394:	0e 93       	cmp	#0,	r14	;r3 As==00
    9396:	47 24       	jz	$+144    	;abs 0x9426
    9398:	81 4d 06 00 	mov	r13,	6(r1)	;
    939c:	81 46 08 00 	mov	r6,	8(r1)	;
    93a0:	0c 41       	mov	r1,	r12	;
    93a2:	3c 50 06 00 	add	#6,	r12	;
    93a6:	8f 12       	call	r15		;
    93a8:	06 4c       	mov	r12,	r6	;
    93aa:	0c 93       	cmp	#0,	r12	;r3 As==00
    93ac:	25 24       	jz	$+76     	;abs 0x93f8
    93ae:	91 41 0a 00 	mov	10(r1),	2(r1)	;0x0000a
    93b2:	02 00 
    93b4:	91 41 0c 00 	mov	12(r1),	4(r1)	;0x0000c
    93b8:	04 00 
    93ba:	1c 41 02 00 	mov	2(r1),	r12	;
    93be:	1d 41 04 00 	mov	4(r1),	r13	;
    93c2:	3e 40 20 00 	mov	#32,	r14	;#0x0020
    93c6:	0e 86       	sub	r6,	r14	;
    93c8:	0f 43       	clr	r15		;
    93ca:	b0 12 90 52 	call	#21136		;#0x5290
    93ce:	1c d1 06 00 	bis	6(r1),	r12	;
    93d2:	8a 4c 0a 00 	mov	r12,	10(r10)	; 0x000a
    93d6:	1d d1 08 00 	bis	8(r1),	r13	;
    93da:	8a 4d 0c 00 	mov	r13,	12(r10)	; 0x000c
    93de:	1c 41 02 00 	mov	2(r1),	r12	;
    93e2:	1d 41 04 00 	mov	4(r1),	r13	;
    93e6:	0e 46       	mov	r6,	r14	;
    93e8:	0f 43       	clr	r15		;
    93ea:	b0 12 38 c3 	call	#49976		;#0xc338
    93ee:	81 4c 0a 00 	mov	r12,	10(r1)	; 0x000a
    93f2:	81 4d 0c 00 	mov	r13,	12(r1)	; 0x000c
    93f6:	06 3c       	jmp	$+14     	;abs 0x9404
    93f8:	9a 41 06 00 	mov	6(r1),	10(r10)	; 0x000a
    93fc:	0a 00 
    93fe:	9a 41 08 00 	mov	8(r1),	12(r10)	; 0x000c
    9402:	0c 00 
    9404:	1d 41 0a 00 	mov	10(r1),	r13	;0x0000a
    9408:	1c 41 0c 00 	mov	12(r1),	r12	;0x0000c
    940c:	8a 4d 0e 00 	mov	r13,	14(r10)	; 0x000e
    9410:	8a 4c 10 00 	mov	r12,	16(r10)	; 0x0010
    9414:	0c dd       	bis	r13,	r12	;
    9416:	0c 93       	cmp	#0,	r12	;r3 As==00
    9418:	02 20       	jnz	$+6      	;abs 0x941e
    941a:	17 43       	mov	#1,	r7	;r3 As==01
    941c:	01 3c       	jmp	$+4      	;abs 0x9420
    941e:	27 43       	mov	#2,	r7	;r3 As==10
    9420:	8a 47 08 00 	mov	r7,	8(r10)	;
    9424:	10 3c       	jmp	$+34     	;abs 0x9446
    9426:	0c 41       	mov	r1,	r12	;
    9428:	3c 50 0a 00 	add	#10,	r12	;#0x000a
    942c:	8f 12       	call	r15		;
    942e:	9a 41 0a 00 	mov	10(r1),	10(r10)	;0x0000a, 0x000a
    9432:	0a 00 
    9434:	9a 41 0c 00 	mov	12(r1),	12(r10)	;0x0000c, 0x000c
    9438:	0c 00 
    943a:	9a 43 08 00 	mov	#1,	8(r10)	;r3 As==01
    943e:	06 4c       	mov	r12,	r6	;
    9440:	36 50 20 00 	add	#32,	r6	;#0x0020
    9444:	17 43       	mov	#1,	r7	;r3 As==01
    9446:	08 d9       	bis	r9,	r8	;
    9448:	08 93       	cmp	#0,	r8	;r3 As==00
    944a:	0b 24       	jz	$+24     	;abs 0x9462
    944c:	39 50 cd fb 	add	#64461,	r9	;#0xfbcd
    9450:	09 56       	add	r6,	r9	;
    9452:	84 49 00 00 	mov	r9,	0(r4)	;
    9456:	3c 40 35 00 	mov	#53,	r12	;#0x0035
    945a:	0c 86       	sub	r6,	r12	;
    945c:	85 4c 00 00 	mov	r12,	0(r5)	;
    9460:	15 3c       	jmp	$+44     	;abs 0x948c
    9462:	36 50 ce fb 	add	#64462,	r6	;#0xfbce
    9466:	84 46 00 00 	mov	r6,	0(r4)	;
    946a:	0c 47       	mov	r7,	r12	;
    946c:	3c 50 ff 3f 	add	#16383,	r12	;#0x3fff
    9470:	41 18 0c 5c 	rpt #2 { rlax.w	r12		;
    9474:	0c 5a       	add	r10,	r12	;
    9476:	1d 4c 0c 00 	mov	12(r12),r13	;0x0000c
    947a:	1c 4c 0a 00 	mov	10(r12),r12	;0x0000a
    947e:	b0 12 86 89 	call	#35206		;#0x8986
    9482:	44 18 07 57 	rpt #5 { rlax.w	r7		;
    9486:	07 8c       	sub	r12,	r7	;
    9488:	85 47 00 00 	mov	r7,	0(r5)	;
    948c:	0c 4a       	mov	r10,	r12	;
    948e:	31 50 0e 00 	add	#14,	r1	;#0x000e
    9492:	64 17       	popm	#7,	r10	;16-bit words
    9494:	30 41       	ret			

00009496 <__ratio>:
    9496:	6a 15       	pushm	#7,	r10	;16-bit words
    9498:	31 80 0c 00 	sub	#12,	r1	;#0x000c
    949c:	09 4c       	mov	r12,	r9	;
    949e:	0a 4d       	mov	r13,	r10	;
    94a0:	37 40 d4 91 	mov	#37332,	r7	;#0x91d4
    94a4:	0d 41       	mov	r1,	r13	;
    94a6:	3d 52       	add	#8,	r13	;r2 As==11
    94a8:	87 12       	call	r7		;
    94aa:	81 4c 00 00 	mov	r12,	0(r1)	;
    94ae:	81 4d 02 00 	mov	r13,	2(r1)	;
    94b2:	81 4e 04 00 	mov	r14,	4(r1)	;
    94b6:	81 4f 06 00 	mov	r15,	6(r1)	;
    94ba:	0c 4a       	mov	r10,	r12	;
    94bc:	0d 41       	mov	r1,	r13	;
    94be:	3d 50 0a 00 	add	#10,	r13	;#0x000a
    94c2:	87 12       	call	r7		;
    94c4:	04 4c       	mov	r12,	r4	;
    94c6:	05 4d       	mov	r13,	r5	;
    94c8:	06 4e       	mov	r14,	r6	;
    94ca:	07 4f       	mov	r15,	r7	;
    94cc:	1d 41 08 00 	mov	8(r1),	r13	;
    94d0:	1d 81 0a 00 	sub	10(r1),	r13	;0x0000a
    94d4:	1c 49 08 00 	mov	8(r9),	r12	;
    94d8:	1c 8a 08 00 	sub	8(r10),	r12	;
    94dc:	44 18 0c 5c 	rpt #5 { rlax.w	r12		;
    94e0:	0c 5d       	add	r13,	r12	;
    94e2:	0d 43       	clr	r13		;
    94e4:	0d 9c       	cmp	r12,	r13	;
    94e6:	11 34       	jge	$+36     	;abs 0x950a
    94e8:	3c b0 00 80 	bit	#32768,	r12	;#0x8000
    94ec:	0d 7d       	subc	r13,	r13	;
    94ee:	3d e3       	inv	r13		;
    94f0:	3e 40 14 00 	mov	#20,	r14	;#0x0014
    94f4:	b0 12 90 52 	call	#21136		;#0x5290
    94f8:	1c 51 04 00 	add	4(r1),	r12	;
    94fc:	1d 61 06 00 	addc	6(r1),	r13	;
    9500:	81 4c 04 00 	mov	r12,	4(r1)	;
    9504:	81 4d 06 00 	mov	r13,	6(r1)	;
    9508:	0b 3c       	jmp	$+24     	;abs 0x9520
    950a:	0d 43       	clr	r13		;
    950c:	0d 8c       	sub	r12,	r13	;
    950e:	0c 4d       	mov	r13,	r12	;
    9510:	4e 18 0d 11 	rpt #15 { rrax.w	r13		;
    9514:	3e 40 14 00 	mov	#20,	r14	;#0x0014
    9518:	b0 12 90 52 	call	#21136		;#0x5290
    951c:	06 5c       	add	r12,	r6	;
    951e:	07 6d       	addc	r13,	r7	;
    9520:	28 41       	mov	@r1,	r8	;
    9522:	19 41 02 00 	mov	2(r1),	r9	;
    9526:	1a 41 04 00 	mov	4(r1),	r10	;
    952a:	1b 41 06 00 	mov	6(r1),	r11	;
    952e:	0c 44       	mov	r4,	r12	;
    9530:	0d 45       	mov	r5,	r13	;
    9532:	0e 46       	mov	r6,	r14	;
    9534:	0f 47       	mov	r7,	r15	;
    9536:	b0 12 c6 b9 	call	#47558		;#0xb9c6
    953a:	31 50 0c 00 	add	#12,	r1	;#0x000c
    953e:	64 17       	popm	#7,	r10	;16-bit words
    9540:	30 41       	ret			

00009542 <_mprec_log10>:
    9542:	4a 15       	pushm	#5,	r10	;16-bit words
    9544:	07 4c       	mov	r12,	r7	;
    9546:	3c 40 17 00 	mov	#23,	r12	;#0x0017
    954a:	0c 97       	cmp	r7,	r12	;
    954c:	0c 38       	jl	$+26     	;abs 0x9566
    954e:	42 18 07 57 	rpt #3 { rlax.w	r7		;
    9552:	37 50 06 45 	add	#17670,	r7	;#0x4506
    9556:	2c 47       	mov	@r7,	r12	;
    9558:	1d 47 02 00 	mov	2(r7),	r13	;
    955c:	1e 47 04 00 	mov	4(r7),	r14	;
    9560:	1f 47 06 00 	mov	6(r7),	r15	;
    9564:	14 3c       	jmp	$+42     	;abs 0x958e
    9566:	0c 43       	clr	r12		;
    9568:	0d 4c       	mov	r12,	r13	;
    956a:	0e 4c       	mov	r12,	r14	;
    956c:	3f 40 f0 3f 	mov	#16368,	r15	;#0x3ff0
    9570:	36 40 f4 b4 	mov	#46324,	r6	;#0xb4f4
    9574:	08 4c       	mov	r12,	r8	;
    9576:	09 4d       	mov	r13,	r9	;
    9578:	0a 4e       	mov	r14,	r10	;
    957a:	0b 4f       	mov	r15,	r11	;
    957c:	0c 43       	clr	r12		;
    957e:	0d 4c       	mov	r12,	r13	;
    9580:	0e 4c       	mov	r12,	r14	;
    9582:	3f 40 24 40 	mov	#16420,	r15	;#0x4024
    9586:	86 12       	call	r6		;
    9588:	37 53       	add	#-1,	r7	;r3 As==11
    958a:	07 93       	cmp	#0,	r7	;r3 As==00
    958c:	f3 23       	jnz	$-24     	;abs 0x9574
    958e:	46 17       	popm	#5,	r10	;16-bit words
    9590:	30 41       	ret			

00009592 <__copybits>:
    9592:	2a 15       	pushm	#3,	r10	;16-bit words
    9594:	0a 4c       	mov	r12,	r10	;
    9596:	3d 53       	add	#-1,	r13	;r3 As==11
    9598:	09 4d       	mov	r13,	r9	;
    959a:	44 18 09 11 	rpt #5 { rrax.w	r9		;
    959e:	19 53       	inc	r9		;
    95a0:	41 18 09 59 	rpt #2 { rlax.w	r9		;
    95a4:	09 5c       	add	r12,	r9	;
    95a6:	08 4e       	mov	r14,	r8	;
    95a8:	38 50 0a 00 	add	#10,	r8	;#0x000a
    95ac:	1c 4e 08 00 	mov	8(r14),	r12	;
    95b0:	b0 12 3c 52 	call	#21052		;#0x523c
    95b4:	0e 48       	mov	r8,	r14	;
    95b6:	0e 5c       	add	r12,	r14	;
    95b8:	0c 4a       	mov	r10,	r12	;
    95ba:	0d 48       	mov	r8,	r13	;
    95bc:	0d 9e       	cmp	r14,	r13	;
    95be:	08 2c       	jc	$+18     	;abs 0x95d0
    95c0:	ac 4d 00 00 	mov	@r13,	0(r12)	;
    95c4:	9c 4d 02 00 	mov	2(r13),	2(r12)	;
    95c8:	02 00 
    95ca:	2c 52       	add	#4,	r12	;r2 As==10
    95cc:	2d 52       	add	#4,	r13	;r2 As==10
    95ce:	f6 3f       	jmp	$-18     	;abs 0x95bc
    95d0:	0c 99       	cmp	r9,	r12	;
    95d2:	06 2c       	jc	$+14     	;abs 0x95e0
    95d4:	8c 43 00 00 	mov	#0,	0(r12)	;r3 As==00
    95d8:	8c 43 02 00 	mov	#0,	2(r12)	;r3 As==00
    95dc:	2c 52       	add	#4,	r12	;r2 As==10
    95de:	f8 3f       	jmp	$-14     	;abs 0x95d0
    95e0:	28 17       	popm	#3,	r10	;16-bit words
    95e2:	30 41       	ret			

000095e4 <__any_on>:
    95e4:	5a 15       	pushm	#6,	r10	;16-bit words
    95e6:	07 4c       	mov	r12,	r7	;
    95e8:	37 50 0a 00 	add	#10,	r7	;#0x000a
    95ec:	1c 4c 08 00 	mov	8(r12),	r12	;
    95f0:	0a 4d       	mov	r13,	r10	;
    95f2:	44 18 0a 11 	rpt #5 { rrax.w	r10		;
    95f6:	0c 9a       	cmp	r10,	r12	;
    95f8:	1c 38       	jl	$+58     	;abs 0x9632
    95fa:	0a 9c       	cmp	r12,	r10	;
    95fc:	1b 34       	jge	$+56     	;abs 0x9634
    95fe:	08 4d       	mov	r13,	r8	;
    9600:	38 f0 1f 00 	and	#31,	r8	;#0x001f
    9604:	08 93       	cmp	#0,	r8	;r3 As==00
    9606:	16 24       	jz	$+46     	;abs 0x9634
    9608:	0d 4a       	mov	r10,	r13	;
    960a:	41 18 0d 5d 	rpt #2 { rlax.w	r13		;
    960e:	0d 57       	add	r7,	r13	;
    9610:	25 4d       	mov	@r13,	r5	;
    9612:	16 4d 02 00 	mov	2(r13),	r6	;
    9616:	09 43       	clr	r9		;
    9618:	0c 45       	mov	r5,	r12	;
    961a:	0d 46       	mov	r6,	r13	;
    961c:	0e 48       	mov	r8,	r14	;
    961e:	b0 12 38 c3 	call	#49976		;#0xc338
    9622:	0e 48       	mov	r8,	r14	;
    9624:	b0 12 90 52 	call	#21136		;#0x5290
    9628:	0c 95       	cmp	r5,	r12	;
    962a:	14 20       	jnz	$+42     	;abs 0x9654
    962c:	0d 96       	cmp	r6,	r13	;
    962e:	12 20       	jnz	$+38     	;abs 0x9654
    9630:	01 3c       	jmp	$+4      	;abs 0x9634
    9632:	0a 4c       	mov	r12,	r10	;
    9634:	41 18 0a 5a 	rpt #2 { rlax.w	r10		;
    9638:	0a 57       	add	r7,	r10	;
    963a:	07 9a       	cmp	r10,	r7	;
    963c:	08 2c       	jc	$+18     	;abs 0x964e
    963e:	3a 50 fc ff 	add	#65532,	r10	;#0xfffc
    9642:	2c 4a       	mov	@r10,	r12	;
    9644:	1c da 02 00 	bis	2(r10),	r12	;
    9648:	0c 93       	cmp	#0,	r12	;r3 As==00
    964a:	f7 27       	jz	$-16     	;abs 0x963a
    964c:	03 3c       	jmp	$+8      	;abs 0x9654
    964e:	0c 43       	clr	r12		;
    9650:	0d 43       	clr	r13		;
    9652:	02 3c       	jmp	$+6      	;abs 0x9658
    9654:	1c 43       	mov	#1,	r12	;r3 As==01
    9656:	0d 43       	clr	r13		;
    9658:	55 17       	popm	#6,	r10	;16-bit words
    965a:	30 41       	ret			

0000965c <_calloc_r>:
    965c:	1a 15       	pushm	#2,	r10	;16-bit words
    965e:	0a 4c       	mov	r12,	r10	;
    9660:	0c 4d       	mov	r13,	r12	;
    9662:	0d 4e       	mov	r14,	r13	;
    9664:	b0 12 24 c4 	call	#50212		;#0xc424
    9668:	09 4c       	mov	r12,	r9	;
    966a:	0c 4a       	mov	r10,	r12	;
    966c:	0d 49       	mov	r9,	r13	;
    966e:	b0 12 70 97 	call	#38768		;#0x9770
    9672:	0a 4c       	mov	r12,	r10	;
    9674:	0c 93       	cmp	#0,	r12	;r3 As==00
    9676:	04 24       	jz	$+10     	;abs 0x9680
    9678:	0d 43       	clr	r13		;
    967a:	0e 49       	mov	r9,	r14	;
    967c:	b0 12 b4 86 	call	#34484		;#0x86b4
    9680:	0c 4a       	mov	r10,	r12	;
    9682:	19 17       	popm	#2,	r10	;16-bit words
    9684:	30 41       	ret			

00009686 <_free_r>:
    9686:	3a 15       	pushm	#4,	r10	;16-bit words
    9688:	0d 93       	cmp	#0,	r13	;r3 As==00
    968a:	70 24       	jz	$+226    	;abs 0x976c
    968c:	0e 4d       	mov	r13,	r14	;
    968e:	3e 50 fc ff 	add	#65532,	r14	;#0xfffc
    9692:	1f 4d fc ff 	mov	-4(r13),r15	;
    9696:	8d 93 fe ff 	cmp	#0,	-2(r13)	;r3 As==00, 0xfffe
    969a:	01 34       	jge	$+4      	;abs 0x969e
    969c:	0e 5f       	add	r15,	r14	;
    969e:	1d 42 be 1d 	mov	&0x1dbe,r13	;0x1dbe
    96a2:	0d 93       	cmp	#0,	r13	;r3 As==00
    96a4:	16 24       	jz	$+46     	;abs 0x96d2
    96a6:	0e 9d       	cmp	r13,	r14	;
    96a8:	1c 2c       	jc	$+58     	;abs 0x96e2
    96aa:	2a 4e       	mov	@r14,	r10	;
    96ac:	1b 4e 02 00 	mov	2(r14),	r11	;
    96b0:	0c 4e       	mov	r14,	r12	;
    96b2:	0c 5a       	add	r10,	r12	;
    96b4:	0c 9d       	cmp	r13,	r12	;
    96b6:	0d 20       	jnz	$+28     	;abs 0x96d2
    96b8:	08 4a       	mov	r10,	r8	;
    96ba:	09 4b       	mov	r11,	r9	;
    96bc:	28 5c       	add	@r12,	r8	;
    96be:	19 6c 02 00 	addc	2(r12),	r9	;
    96c2:	8e 48 00 00 	mov	r8,	0(r14)	;
    96c6:	8e 49 02 00 	mov	r9,	2(r14)	;
    96ca:	9e 4c 04 00 	mov	4(r12),	4(r14)	;
    96ce:	04 00 
    96d0:	02 3c       	jmp	$+6      	;abs 0x96d6
    96d2:	8e 4d 04 00 	mov	r13,	4(r14)	;
    96d6:	82 4e be 1d 	mov	r14,	&0x1dbe	;
    96da:	48 3c       	jmp	$+146    	;abs 0x976c
    96dc:	0e 9f       	cmp	r15,	r14	;
    96de:	05 28       	jnc	$+12     	;abs 0x96ea
    96e0:	0d 4f       	mov	r15,	r13	;
    96e2:	1f 4d 04 00 	mov	4(r13),	r15	;
    96e6:	0f 93       	cmp	#0,	r15	;r3 As==00
    96e8:	f9 23       	jnz	$-12     	;abs 0x96dc
    96ea:	29 4d       	mov	@r13,	r9	;
    96ec:	17 4d 02 00 	mov	2(r13),	r7	;
    96f0:	08 4d       	mov	r13,	r8	;
    96f2:	08 59       	add	r9,	r8	;
    96f4:	08 9e       	cmp	r14,	r8	;
    96f6:	1a 20       	jnz	$+54     	;abs 0x972c
    96f8:	2a 4e       	mov	@r14,	r10	;
    96fa:	0a 59       	add	r9,	r10	;
    96fc:	1b 4e 02 00 	mov	2(r14),	r11	;
    9700:	0b 67       	addc	r7,	r11	;
    9702:	8d 4a 00 00 	mov	r10,	0(r13)	;
    9706:	8d 4b 02 00 	mov	r11,	2(r13)	;
    970a:	0c 4d       	mov	r13,	r12	;
    970c:	0c 5a       	add	r10,	r12	;
    970e:	0c 9f       	cmp	r15,	r12	;
    9710:	2d 20       	jnz	$+92     	;abs 0x976c
    9712:	08 4a       	mov	r10,	r8	;
    9714:	09 4b       	mov	r11,	r9	;
    9716:	28 5f       	add	@r15,	r8	;
    9718:	19 6f 02 00 	addc	2(r15),	r9	;
    971c:	8d 48 00 00 	mov	r8,	0(r13)	;
    9720:	8d 49 02 00 	mov	r9,	2(r13)	;
    9724:	9d 4f 04 00 	mov	4(r15),	4(r13)	;
    9728:	04 00 
    972a:	20 3c       	jmp	$+66     	;abs 0x976c
    972c:	0e 98       	cmp	r8,	r14	;
    972e:	04 2c       	jc	$+10     	;abs 0x9738
    9730:	bc 40 0c 00 	mov	#12,	0(r12)	;#0x000c
    9734:	00 00 
    9736:	1a 3c       	jmp	$+54     	;abs 0x976c
    9738:	2a 4e       	mov	@r14,	r10	;
    973a:	1b 4e 02 00 	mov	2(r14),	r11	;
    973e:	0c 4e       	mov	r14,	r12	;
    9740:	0c 5a       	add	r10,	r12	;
    9742:	0c 9f       	cmp	r15,	r12	;
    9744:	0f 20       	jnz	$+32     	;abs 0x9764
    9746:	08 4a       	mov	r10,	r8	;
    9748:	09 4b       	mov	r11,	r9	;
    974a:	28 5f       	add	@r15,	r8	;
    974c:	19 6f 02 00 	addc	2(r15),	r9	;
    9750:	8e 48 00 00 	mov	r8,	0(r14)	;
    9754:	8e 49 02 00 	mov	r9,	2(r14)	;
    9758:	9e 4f 04 00 	mov	4(r15),	4(r14)	;
    975c:	04 00 
    975e:	8d 4e 04 00 	mov	r14,	4(r13)	;
    9762:	04 3c       	jmp	$+10     	;abs 0x976c
    9764:	8e 4f 04 00 	mov	r15,	4(r14)	;
    9768:	8d 4e 04 00 	mov	r14,	4(r13)	;
    976c:	37 17       	popm	#4,	r10	;16-bit words
    976e:	30 41       	ret			

00009770 <_malloc_r>:
    9770:	2a 15       	pushm	#3,	r10	;16-bit words
    9772:	08 4c       	mov	r12,	r8	;
    9774:	0a 4d       	mov	r13,	r10	;
    9776:	1a 53       	inc	r10		;
    9778:	1a c3       	bic	#1,	r10	;r3 As==01
    977a:	3a 50 0a 00 	add	#10,	r10	;#0x000a
    977e:	3a 90 0c 00 	cmp	#12,	r10	;#0x000c
    9782:	02 2c       	jc	$+6      	;abs 0x9788
    9784:	3a 40 0c 00 	mov	#12,	r10	;#0x000c
    9788:	0a 9d       	cmp	r13,	r10	;
    978a:	05 2c       	jc	$+12     	;abs 0x9796
    978c:	b8 40 0c 00 	mov	#12,	0(r8)	;#0x000c
    9790:	00 00 
    9792:	0c 43       	clr	r12		;
    9794:	61 3c       	jmp	$+196    	;abs 0x9858
    9796:	1e 42 be 1d 	mov	&0x1dbe,r14	;0x1dbe
    979a:	0d 4e       	mov	r14,	r13	;
    979c:	0d 93       	cmp	#0,	r13	;r3 As==00
    979e:	28 24       	jz	$+82     	;abs 0x97f0
    97a0:	2c 4d       	mov	@r13,	r12	;
    97a2:	0c 8a       	sub	r10,	r12	;
    97a4:	0c 93       	cmp	#0,	r12	;r3 As==00
    97a6:	20 38       	jl	$+66     	;abs 0x97e8
    97a8:	3f 40 0b 00 	mov	#11,	r15	;#0x000b
    97ac:	0f 9c       	cmp	r12,	r15	;
    97ae:	11 2c       	jc	$+36     	;abs 0x97d2
    97b0:	0e 4c       	mov	r12,	r14	;
    97b2:	0f 4c       	mov	r12,	r15	;
    97b4:	4e 18 0f 11 	rpt #15 { rrax.w	r15		;
    97b8:	8d 4e 00 00 	mov	r14,	0(r13)	;
    97bc:	8d 4f 02 00 	mov	r15,	2(r13)	;
    97c0:	0e 4d       	mov	r13,	r14	;
    97c2:	0e 5c       	add	r12,	r14	;
    97c4:	0c 4a       	mov	r10,	r12	;
    97c6:	0d 43       	clr	r13		;
    97c8:	8e 4c 00 00 	mov	r12,	0(r14)	;
    97cc:	8e 4d 02 00 	mov	r13,	2(r14)	;
    97d0:	29 3c       	jmp	$+84     	;abs 0x9824
    97d2:	0e 9d       	cmp	r13,	r14	;
    97d4:	04 20       	jnz	$+10     	;abs 0x97de
    97d6:	92 4e 04 00 	mov	4(r14),	&0x1dbe	;
    97da:	be 1d 
    97dc:	23 3c       	jmp	$+72     	;abs 0x9824
    97de:	9e 4d 04 00 	mov	4(r13),	4(r14)	;
    97e2:	04 00 
    97e4:	0e 4d       	mov	r13,	r14	;
    97e6:	1e 3c       	jmp	$+62     	;abs 0x9824
    97e8:	0e 4d       	mov	r13,	r14	;
    97ea:	1d 4d 04 00 	mov	4(r13),	r13	;
    97ee:	d6 3f       	jmp	$-82     	;abs 0x979c
    97f0:	39 40 ce 98 	mov	#39118,	r9	;#0x98ce
    97f4:	82 93 bc 1d 	cmp	#0,	&0x1dbc	;r3 As==00
    97f8:	04 20       	jnz	$+10     	;abs 0x9802
    97fa:	0c 48       	mov	r8,	r12	;
    97fc:	89 12       	call	r9		;
    97fe:	82 4c bc 1d 	mov	r12,	&0x1dbc	;
    9802:	0c 48       	mov	r8,	r12	;
    9804:	0d 4a       	mov	r10,	r13	;
    9806:	89 12       	call	r9		;
    9808:	0e 4c       	mov	r12,	r14	;
    980a:	3c 93       	cmp	#-1,	r12	;r3 As==11
    980c:	bf 27       	jz	$-128    	;abs 0x978c
    980e:	09 4c       	mov	r12,	r9	;
    9810:	19 53       	inc	r9		;
    9812:	19 c3       	bic	#1,	r9	;r3 As==01
    9814:	09 9c       	cmp	r12,	r9	;
    9816:	17 20       	jnz	$+48     	;abs 0x9846
    9818:	0c 4a       	mov	r10,	r12	;
    981a:	0d 43       	clr	r13		;
    981c:	8e 4c 00 00 	mov	r12,	0(r14)	;
    9820:	8e 4d 02 00 	mov	r13,	2(r14)	;
    9824:	0f 4e       	mov	r14,	r15	;
    9826:	2f 52       	add	#4,	r15	;r2 As==10
    9828:	0c 4f       	mov	r15,	r12	;
    982a:	3c 50 07 00 	add	#7,	r12	;
    982e:	3c f0 f8 ff 	and	#65528,	r12	;#0xfff8
    9832:	0d 4c       	mov	r12,	r13	;
    9834:	0d 8f       	sub	r15,	r13	;
    9836:	0d 93       	cmp	#0,	r13	;r3 As==00
    9838:	0f 24       	jz	$+32     	;abs 0x9858
    983a:	0e 5d       	add	r13,	r14	;
    983c:	0f 43       	clr	r15		;
    983e:	0f 8d       	sub	r13,	r15	;
    9840:	8e 4f 00 00 	mov	r15,	0(r14)	;
    9844:	09 3c       	jmp	$+20     	;abs 0x9858
    9846:	0c 48       	mov	r8,	r12	;
    9848:	0d 49       	mov	r9,	r13	;
    984a:	0d 8e       	sub	r14,	r13	;
    984c:	b0 12 ce 98 	call	#39118		;#0x98ce
    9850:	3c 93       	cmp	#-1,	r12	;r3 As==11
    9852:	9c 27       	jz	$-198    	;abs 0x978c
    9854:	0e 49       	mov	r9,	r14	;
    9856:	e0 3f       	jmp	$-62     	;abs 0x9818
    9858:	28 17       	popm	#3,	r10	;16-bit words
    985a:	30 41       	ret			

0000985c <__fpclassifyd>:
    985c:	2a 15       	pushm	#3,	r10	;16-bit words
    985e:	09 4e       	mov	r14,	r9	;
    9860:	08 4f       	mov	r15,	r8	;
    9862:	0a 4c       	mov	r12,	r10	;
    9864:	0b 4f       	mov	r15,	r11	;
    9866:	3b f0 ff 7f 	and	#32767,	r11	;#0x7fff
    986a:	0c 4e       	mov	r14,	r12	;
    986c:	0c db       	bis	r11,	r12	;
    986e:	0c 93       	cmp	#0,	r12	;r3 As==00
    9870:	27 24       	jz	$+80     	;abs 0x98c0
    9872:	0c 49       	mov	r9,	r12	;
    9874:	0c 53       	add	#0,	r12	;r3 As==00
    9876:	0c 4f       	mov	r15,	r12	;
    9878:	3c 60 f0 ff 	addc	#65520,	r12	;#0xfff0
    987c:	3f 40 df 7f 	mov	#32735,	r15	;#0x7fdf
    9880:	0f 9c       	cmp	r12,	r15	;
    9882:	07 2c       	jc	$+16     	;abs 0x9892
    9884:	09 53       	add	#0,	r9	;r3 As==00
    9886:	38 60 f0 7f 	addc	#32752,	r8	;#0x7ff0
    988a:	3c 40 df 7f 	mov	#32735,	r12	;#0x7fdf
    988e:	0c 98       	cmp	r8,	r12	;
    9890:	02 28       	jnc	$+6      	;abs 0x9896
    9892:	2c 42       	mov	#4,	r12	;r2 As==10
    9894:	1a 3c       	jmp	$+54     	;abs 0x98ca
    9896:	3f 40 0f 00 	mov	#15,	r15	;#0x000f
    989a:	0f 9b       	cmp	r11,	r15	;
    989c:	03 28       	jnc	$+8      	;abs 0x98a4
    989e:	3c 40 03 00 	mov	#3,	r12	;
    98a2:	13 3c       	jmp	$+40     	;abs 0x98ca
    98a4:	0e 93       	cmp	#0,	r14	;r3 As==00
    98a6:	0a 20       	jnz	$+22     	;abs 0x98bc
    98a8:	3b 90 f0 7f 	cmp	#32752,	r11	;#0x7ff0
    98ac:	07 20       	jnz	$+16     	;abs 0x98bc
    98ae:	1c 43       	mov	#1,	r12	;r3 As==01
    98b0:	0b 4a       	mov	r10,	r11	;
    98b2:	0b dd       	bis	r13,	r11	;
    98b4:	0b 93       	cmp	#0,	r11	;r3 As==00
    98b6:	09 24       	jz	$+20     	;abs 0x98ca
    98b8:	0c 4e       	mov	r14,	r12	;
    98ba:	07 3c       	jmp	$+16     	;abs 0x98ca
    98bc:	0c 43       	clr	r12		;
    98be:	05 3c       	jmp	$+12     	;abs 0x98ca
    98c0:	0c 4a       	mov	r10,	r12	;
    98c2:	0c dd       	bis	r13,	r12	;
    98c4:	0c 93       	cmp	#0,	r12	;r3 As==00
    98c6:	de 23       	jnz	$-66     	;abs 0x9884
    98c8:	2c 43       	mov	#2,	r12	;r3 As==10
    98ca:	28 17       	popm	#3,	r10	;16-bit words
    98cc:	30 41       	ret			

000098ce <_sbrk_r>:
    98ce:	0a 15       	pushm	#1,	r10	;16-bit words
    98d0:	0a 4c       	mov	r12,	r10	;
    98d2:	82 43 c0 1d 	mov	#0,	&0x1dc0	;r3 As==00
    98d6:	0c 4d       	mov	r13,	r12	;
    98d8:	b0 12 76 cd 	call	#52598		;#0xcd76
    98dc:	3c 93       	cmp	#-1,	r12	;r3 As==11
    98de:	06 20       	jnz	$+14     	;abs 0x98ec
    98e0:	1d 42 c0 1d 	mov	&0x1dc0,r13	;0x1dc0
    98e4:	0d 93       	cmp	#0,	r13	;r3 As==00
    98e6:	02 24       	jz	$+6      	;abs 0x98ec
    98e8:	8a 4d 00 00 	mov	r13,	0(r10)	;
    98ec:	0a 17       	popm	#1,	r10	;16-bit words
    98ee:	30 41       	ret			

000098f0 <__sread>:
    98f0:	2a 15       	pushm	#3,	r10	;16-bit words
    98f2:	0a 4d       	mov	r13,	r10	;
    98f4:	1d 4d 08 00 	mov	8(r13),	r13	;
    98f8:	b0 12 3a ab 	call	#43834		;#0xab3a
    98fc:	0c 93       	cmp	#0,	r12	;r3 As==00
    98fe:	0f 38       	jl	$+32     	;abs 0x991e
    9900:	0e 4c       	mov	r12,	r14	;
    9902:	0f 4c       	mov	r12,	r15	;
    9904:	4e 18 0f 11 	rpt #15 { rrax.w	r15		;
    9908:	08 4e       	mov	r14,	r8	;
    990a:	09 4f       	mov	r15,	r9	;
    990c:	18 5a 2e 00 	add	46(r10),r8	;0x0002e
    9910:	19 6a 30 00 	addc	48(r10),r9	;0x00030
    9914:	8a 48 2e 00 	mov	r8,	46(r10)	; 0x002e
    9918:	8a 49 30 00 	mov	r9,	48(r10)	; 0x0030
    991c:	03 3c       	jmp	$+8      	;abs 0x9924
    991e:	ba f0 ff ef 	and	#61439,	6(r10)	;#0xefff
    9922:	06 00 
    9924:	28 17       	popm	#3,	r10	;16-bit words
    9926:	30 41       	ret			

00009928 <__seofread>:
    9928:	0c 43       	clr	r12		;
    992a:	30 41       	ret			

0000992c <__swrite>:
    992c:	3a 15       	pushm	#4,	r10	;16-bit words
    992e:	21 83       	decd	r1		;
    9930:	07 4c       	mov	r12,	r7	;
    9932:	0a 4d       	mov	r13,	r10	;
    9934:	08 4e       	mov	r14,	r8	;
    9936:	09 4f       	mov	r15,	r9	;
    9938:	dd b3 07 00 	bit.b	#1,	7(r13)	;r3 As==01
    993c:	08 24       	jz	$+18     	;abs 0x994e
    993e:	1d 4d 08 00 	mov	8(r13),	r13	;
    9942:	a1 43 00 00 	mov	#2,	0(r1)	;r3 As==10
    9946:	0e 43       	clr	r14		;
    9948:	0f 43       	clr	r15		;
    994a:	b0 12 7c aa 	call	#43644		;#0xaa7c
    994e:	ba f0 ff ef 	and	#61439,	6(r10)	;#0xefff
    9952:	06 00 
    9954:	0c 47       	mov	r7,	r12	;
    9956:	1d 4a 08 00 	mov	8(r10),	r13	;
    995a:	0e 48       	mov	r8,	r14	;
    995c:	0f 49       	mov	r9,	r15	;
    995e:	b0 12 f4 a4 	call	#42228		;#0xa4f4
    9962:	21 53       	incd	r1		;
    9964:	37 17       	popm	#4,	r10	;16-bit words
    9966:	30 41       	ret			

00009968 <__sseek>:
    9968:	0a 15       	pushm	#1,	r10	;16-bit words
    996a:	21 83       	decd	r1		;
    996c:	0a 4d       	mov	r13,	r10	;
    996e:	1d 4d 08 00 	mov	8(r13),	r13	;
    9972:	91 41 06 00 	mov	6(r1),	0(r1)	;
    9976:	00 00 
    9978:	b0 12 7c aa 	call	#43644		;#0xaa7c
    997c:	3c 93       	cmp	#-1,	r12	;r3 As==11
    997e:	06 20       	jnz	$+14     	;abs 0x998c
    9980:	3d 93       	cmp	#-1,	r13	;r3 As==11
    9982:	04 20       	jnz	$+10     	;abs 0x998c
    9984:	ba f0 ff ef 	and	#61439,	6(r10)	;#0xefff
    9988:	06 00 
    998a:	07 3c       	jmp	$+16     	;abs 0x999a
    998c:	ba d0 00 10 	bis	#4096,	6(r10)	;#0x1000
    9990:	06 00 
    9992:	8a 4c 2e 00 	mov	r12,	46(r10)	; 0x002e
    9996:	8a 4d 30 00 	mov	r13,	48(r10)	; 0x0030
    999a:	21 53       	incd	r1		;
    999c:	0a 17       	popm	#1,	r10	;16-bit words
    999e:	30 41       	ret			

000099a0 <__sclose>:
    99a0:	1d 4d 08 00 	mov	8(r13),	r13	;
    99a4:	b0 12 1a a5 	call	#42266		;#0xa51a
    99a8:	30 41       	ret			

000099aa <strcmp>:
    99aa:	6e 4c       	mov.b	@r12,	r14	;
    99ac:	0e 93       	cmp	#0,	r14	;r3 As==00
    99ae:	06 24       	jz	$+14     	;abs 0x99bc
    99b0:	cd 9e 00 00 	cmp.b	r14,	0(r13)	;
    99b4:	03 20       	jnz	$+8      	;abs 0x99bc
    99b6:	1c 53       	inc	r12		;
    99b8:	1d 53       	inc	r13		;
    99ba:	f7 3f       	jmp	$-16     	;abs 0x99aa
    99bc:	6c 4d       	mov.b	@r13,	r12	;
    99be:	0e 8c       	sub	r12,	r14	;
    99c0:	0c 4e       	mov	r14,	r12	;
    99c2:	30 41       	ret			

000099c4 <strlen>:
    99c4:	0d 4c       	mov	r12,	r13	;
    99c6:	cd 93 00 00 	cmp.b	#0,	0(r13)	;r3 As==00
    99ca:	02 24       	jz	$+6      	;abs 0x99d0
    99cc:	1d 53       	inc	r13		;
    99ce:	fb 3f       	jmp	$-8      	;abs 0x99c6
    99d0:	0d 8c       	sub	r12,	r13	;
    99d2:	0c 4d       	mov	r13,	r12	;
    99d4:	30 41       	ret			

000099d6 <__sprint_r>:
    99d6:	6a 15       	pushm	#7,	r10	;16-bit words
    99d8:	21 83       	decd	r1		;
    99da:	06 4c       	mov	r12,	r6	;
    99dc:	08 4d       	mov	r13,	r8	;
    99de:	0a 4e       	mov	r14,	r10	;
    99e0:	8e 93 04 00 	cmp	#0,	4(r14)	;r3 As==00
    99e4:	04 20       	jnz	$+10     	;abs 0x99ee
    99e6:	8e 43 02 00 	mov	#0,	2(r14)	;r3 As==00
    99ea:	0c 43       	clr	r12		;
    99ec:	2e 3c       	jmp	$+94     	;abs 0x9a4a
    99ee:	81 4c 00 00 	mov	r12,	0(r1)	;
    99f2:	fd b0 20 00 	bit.b	#32,	59(r13)	;#0x0020, 0x003b
    99f6:	3b 00 
    99f8:	22 24       	jz	$+70     	;abs 0x9a3e
    99fa:	29 4e       	mov	@r14,	r9	;
    99fc:	34 40 fe a5 	mov	#42494,	r4	;#0xa5fe
    9a00:	8a 93 04 00 	cmp	#0,	4(r10)	;r3 As==00
    9a04:	1a 24       	jz	$+54     	;abs 0x9a3a
    9a06:	1c 49 02 00 	mov	2(r9),	r12	;
    9a0a:	b0 12 be c2 	call	#49854		;#0xc2be
    9a0e:	07 4c       	mov	r12,	r7	;
    9a10:	26 49       	mov	@r9,	r6	;
    9a12:	05 43       	clr	r5		;
    9a14:	05 97       	cmp	r7,	r5	;
    9a16:	0b 34       	jge	$+24     	;abs 0x9a2e
    9a18:	2c 41       	mov	@r1,	r12	;
    9a1a:	2d 46       	mov	@r6,	r13	;
    9a1c:	1e 46 02 00 	mov	2(r6),	r14	;
    9a20:	0f 48       	mov	r8,	r15	;
    9a22:	84 12       	call	r4		;
    9a24:	26 52       	add	#4,	r6	;r2 As==10
    9a26:	3c 93       	cmp	#-1,	r12	;r3 As==11
    9a28:	0c 24       	jz	$+26     	;abs 0x9a42
    9a2a:	15 53       	inc	r5		;
    9a2c:	f3 3f       	jmp	$-24     	;abs 0x9a14
    9a2e:	41 18 07 57 	rpt #2 { rlax.w	r7		;
    9a32:	8a 87 04 00 	sub	r7,	4(r10)	;
    9a36:	29 52       	add	#4,	r9	;r2 As==10
    9a38:	e3 3f       	jmp	$-56     	;abs 0x9a00
    9a3a:	0c 43       	clr	r12		;
    9a3c:	02 3c       	jmp	$+6      	;abs 0x9a42
    9a3e:	b0 12 66 a7 	call	#42854		;#0xa766
    9a42:	8a 43 04 00 	mov	#0,	4(r10)	;r3 As==00
    9a46:	8a 43 02 00 	mov	#0,	2(r10)	;r3 As==00
    9a4a:	21 53       	incd	r1		;
    9a4c:	64 17       	popm	#7,	r10	;16-bit words
    9a4e:	30 41       	ret			

00009a50 <_vfiprintf_r>:
    9a50:	6a 15       	pushm	#7,	r10	;16-bit words
    9a52:	31 80 64 00 	sub	#100,	r1	;#0x0064
    9a56:	81 4c 02 00 	mov	r12,	2(r1)	;
    9a5a:	07 4d       	mov	r13,	r7	;
    9a5c:	81 4e 06 00 	mov	r14,	6(r1)	;
    9a60:	08 4f       	mov	r15,	r8	;
    9a62:	0c 93       	cmp	#0,	r12	;r3 As==00
    9a64:	05 24       	jz	$+12     	;abs 0x9a70
    9a66:	8c 93 0c 00 	cmp	#0,	12(r12)	;r3 As==00, 0x000c
    9a6a:	02 20       	jnz	$+6      	;abs 0x9a70
    9a6c:	b0 12 56 82 	call	#33366		;#0x8256
    9a70:	37 90 8e 44 	cmp	#17550,	r7	;#0x448e
    9a74:	05 20       	jnz	$+12     	;abs 0x9a80
    9a76:	1c 41 02 00 	mov	2(r1),	r12	;
    9a7a:	17 4c 02 00 	mov	2(r12),	r7	;
    9a7e:	0f 3c       	jmp	$+32     	;abs 0x9a9e
    9a80:	37 90 7c 44 	cmp	#17532,	r7	;#0x447c
    9a84:	05 20       	jnz	$+12     	;abs 0x9a90
    9a86:	1c 41 02 00 	mov	2(r1),	r12	;
    9a8a:	17 4c 04 00 	mov	4(r12),	r7	;
    9a8e:	07 3c       	jmp	$+16     	;abs 0x9a9e
    9a90:	37 90 6a 44 	cmp	#17514,	r7	;#0x446a
    9a94:	04 20       	jnz	$+10     	;abs 0x9a9e
    9a96:	1c 41 02 00 	mov	2(r1),	r12	;
    9a9a:	17 4c 06 00 	mov	6(r12),	r7	;
    9a9e:	1c 47 06 00 	mov	6(r7),	r12	;
    9aa2:	3c b0 00 20 	bit	#8192,	r12	;#0x2000
    9aa6:	07 20       	jnz	$+16     	;abs 0x9ab6
    9aa8:	3c d0 00 20 	bis	#8192,	r12	;#0x2000
    9aac:	87 4c 06 00 	mov	r12,	6(r7)	;
    9ab0:	b7 f0 ff df 	and	#57343,	58(r7)	;#0xdfff, 0x003a
    9ab4:	3a 00 
    9ab6:	f7 b2 06 00 	bit.b	#8,	6(r7)	;r2 As==11
    9aba:	0b 24       	jz	$+24     	;abs 0x9ad2
    9abc:	87 93 0a 00 	cmp	#0,	10(r7)	;r3 As==00, 0x000a
    9ac0:	08 24       	jz	$+18     	;abs 0x9ad2
    9ac2:	1c 47 06 00 	mov	6(r7),	r12	;
    9ac6:	3c f0 1a 00 	and	#26,	r12	;#0x001a
    9aca:	3c 90 0a 00 	cmp	#10,	r12	;#0x000a
    9ace:	18 20       	jnz	$+50     	;abs 0x9b00
    9ad0:	0a 3c       	jmp	$+22     	;abs 0x9ae6
    9ad2:	1c 41 02 00 	mov	2(r1),	r12	;
    9ad6:	0d 47       	mov	r7,	r13	;
    9ad8:	b0 12 b4 69 	call	#27060		;#0x69b4
    9adc:	0c 93       	cmp	#0,	r12	;r3 As==00
    9ade:	f1 27       	jz	$-28     	;abs 0x9ac2
    9ae0:	3c 43       	mov	#-1,	r12	;r3 As==11
    9ae2:	30 40 52 a4 	br	#0xa452		;
    9ae6:	87 93 08 00 	cmp	#0,	8(r7)	;r3 As==00
    9aea:	0a 38       	jl	$+22     	;abs 0x9b00
    9aec:	1c 41 02 00 	mov	2(r1),	r12	;
    9af0:	0d 47       	mov	r7,	r13	;
    9af2:	1e 41 06 00 	mov	6(r1),	r14	;
    9af6:	0f 48       	mov	r8,	r15	;
    9af8:	b0 12 72 a4 	call	#42098		;#0xa472
    9afc:	30 40 52 a4 	br	#0xa452		;
    9b00:	3d 40 1c 00 	mov	#28,	r13	;#0x001c
    9b04:	0d 51       	add	r1,	r13	;
    9b06:	81 4d 16 00 	mov	r13,	22(r1)	; 0x0016
    9b0a:	81 43 1a 00 	mov	#0,	26(r1)	;r3 As==00, 0x001a
    9b0e:	81 43 18 00 	mov	#0,	24(r1)	;r3 As==00, 0x0018
    9b12:	0a 4d       	mov	r13,	r10	;
    9b14:	81 43 0e 00 	mov	#0,	14(r1)	;r3 As==00, 0x000e
    9b18:	91 41 0e 00 	mov	14(r1),	12(r1)	;0x0000e, 0x000c
    9b1c:	0c 00 
    9b1e:	19 41 06 00 	mov	6(r1),	r9	;
    9b22:	6c 49       	mov.b	@r9,	r12	;
    9b24:	0c 93       	cmp	#0,	r12	;r3 As==00
    9b26:	06 20       	jnz	$+14     	;abs 0x9b34
    9b28:	06 49       	mov	r9,	r6	;
    9b2a:	16 81 06 00 	sub	6(r1),	r6	;
    9b2e:	06 93       	cmp	#0,	r6	;r3 As==00
    9b30:	06 20       	jnz	$+14     	;abs 0x9b3e
    9b32:	28 3c       	jmp	$+82     	;abs 0x9b84
    9b34:	3c 90 25 00 	cmp	#37,	r12	;#0x0025
    9b38:	f7 27       	jz	$-16     	;abs 0x9b28
    9b3a:	19 53       	inc	r9		;
    9b3c:	f2 3f       	jmp	$-26     	;abs 0x9b22
    9b3e:	9a 41 06 00 	mov	6(r1),	0(r10)	;
    9b42:	00 00 
    9b44:	8a 46 02 00 	mov	r6,	2(r10)	;
    9b48:	81 56 1a 00 	add	r6,	26(r1)	; 0x001a
    9b4c:	1c 41 18 00 	mov	24(r1),	r12	;0x00018
    9b50:	1c 53       	inc	r12		;
    9b52:	81 4c 18 00 	mov	r12,	24(r1)	; 0x0018
    9b56:	3e 40 07 00 	mov	#7,	r14	;
    9b5a:	0e 9c       	cmp	r12,	r14	;
    9b5c:	02 38       	jl	$+6      	;abs 0x9b62
    9b5e:	2a 52       	add	#4,	r10	;r2 As==10
    9b60:	0f 3c       	jmp	$+32     	;abs 0x9b80
    9b62:	1c 41 02 00 	mov	2(r1),	r12	;
    9b66:	0d 47       	mov	r7,	r13	;
    9b68:	0e 41       	mov	r1,	r14	;
    9b6a:	3e 50 16 00 	add	#22,	r14	;#0x0016
    9b6e:	b0 12 d6 99 	call	#39382		;#0x99d6
    9b72:	0c 93       	cmp	#0,	r12	;r3 As==00
    9b74:	02 24       	jz	$+6      	;abs 0x9b7a
    9b76:	80 00 34 a4 	mova	#42036,	r0	;0x0a434
    9b7a:	0a 41       	mov	r1,	r10	;
    9b7c:	3a 50 1c 00 	add	#28,	r10	;#0x001c
    9b80:	81 56 0c 00 	add	r6,	12(r1)	; 0x000c
    9b84:	c9 93 00 00 	cmp.b	#0,	0(r9)	;r3 As==00
    9b88:	02 20       	jnz	$+6      	;abs 0x9b8e
    9b8a:	80 00 1e a4 	mova	#42014,	r0	;0x0a41e
    9b8e:	19 53       	inc	r9		;
    9b90:	c1 43 13 00 	mov.b	#0,	19(r1)	;r3 As==00, 0x0013
    9b94:	0d 43       	clr	r13		;
    9b96:	35 43       	mov	#-1,	r5	;r3 As==11
    9b98:	81 4d 08 00 	mov	r13,	8(r1)	;
    9b9c:	06 4d       	mov	r13,	r6	;
    9b9e:	0f 49       	mov	r9,	r15	;
    9ba0:	1f 53       	inc	r15		;
    9ba2:	81 4f 06 00 	mov	r15,	6(r1)	;
    9ba6:	6c 49       	mov.b	@r9,	r12	;
    9ba8:	3c 90 58 00 	cmp	#88,	r12	;#0x0058
    9bac:	97 24       	jz	$+304    	;abs 0x9cdc
    9bae:	39 40 58 00 	mov	#88,	r9	;#0x0058
    9bb2:	09 9c       	cmp	r12,	r9	;
    9bb4:	43 38       	jl	$+136    	;abs 0x9c3c
    9bb6:	3c 90 2e 00 	cmp	#46,	r12	;#0x002e
    9bba:	ab 24       	jz	$+344    	;abs 0x9d12
    9bbc:	3e 40 2e 00 	mov	#46,	r14	;#0x002e
    9bc0:	0e 9c       	cmp	r12,	r14	;
    9bc2:	1d 38       	jl	$+60     	;abs 0x9bfe
    9bc4:	3c 90 2a 00 	cmp	#42,	r12	;#0x002a
    9bc8:	93 24       	jz	$+296    	;abs 0x9cf0
    9bca:	3f 40 2a 00 	mov	#42,	r15	;#0x002a
    9bce:	0f 9c       	cmp	r12,	r15	;
    9bd0:	0c 38       	jl	$+26     	;abs 0x9bea
    9bd2:	3c 90 20 00 	cmp	#32,	r12	;#0x0020
    9bd6:	89 24       	jz	$+276    	;abs 0x9cea
    9bd8:	3c 90 23 00 	cmp	#35,	r12	;#0x0023
    9bdc:	02 24       	jz	$+6      	;abs 0x9be2
    9bde:	80 00 62 a0 	mova	#41058,	r0	;0x0a062
    9be2:	16 d3       	bis	#1,	r6	;r3 As==01
    9be4:	19 41 06 00 	mov	6(r1),	r9	;
    9be8:	da 3f       	jmp	$-74     	;abs 0x9b9e
    9bea:	3c 90 2b 00 	cmp	#43,	r12	;#0x002b
    9bee:	02 20       	jnz	$+6      	;abs 0x9bf4
    9bf0:	0d 4c       	mov	r12,	r13	;
    9bf2:	f8 3f       	jmp	$-14     	;abs 0x9be4
    9bf4:	3c 90 2d 00 	cmp	#45,	r12	;#0x002d
    9bf8:	8a 24       	jz	$+278    	;abs 0x9d0e
    9bfa:	30 40 62 a0 	br	#0xa062		;
    9bfe:	39 40 39 00 	mov	#57,	r9	;#0x0039
    9c02:	09 9c       	cmp	r12,	r9	;
    9c04:	0b 38       	jl	$+24     	;abs 0x9c1c
    9c06:	3c 90 31 00 	cmp	#49,	r12	;#0x0031
    9c0a:	b1 34       	jge	$+356    	;abs 0x9d6e
    9c0c:	3c 90 30 00 	cmp	#48,	r12	;#0x0030
    9c10:	02 24       	jz	$+6      	;abs 0x9c16
    9c12:	80 00 62 a0 	mova	#41058,	r0	;0x0a062
    9c16:	36 d0 80 00 	bis	#128,	r6	;#0x0080
    9c1a:	e4 3f       	jmp	$-54     	;abs 0x9be4
    9c1c:	3c 90 4f 00 	cmp	#79,	r12	;#0x004f
    9c20:	15 25       	jz	$+556    	;abs 0x9e4c
    9c22:	3c 90 55 00 	cmp	#85,	r12	;#0x0055
    9c26:	4e 25       	jz	$+670    	;abs 0x9ec4
    9c28:	3c 90 44 00 	cmp	#68,	r12	;#0x0044
    9c2c:	02 24       	jz	$+6      	;abs 0x9c32
    9c2e:	80 00 62 a0 	mova	#41058,	r0	;0x0a062
    9c32:	c1 4d 13 00 	mov.b	r13,	19(r1)	; 0x0013
    9c36:	36 d0 10 00 	bis	#16,	r6	;#0x0010
    9c3a:	cc 3c       	jmp	$+410    	;abs 0x9dd4
    9c3c:	3c 90 6e 00 	cmp	#110,	r12	;#0x006e
    9c40:	ed 24       	jz	$+476    	;abs 0x9e1c
    9c42:	3e 40 6e 00 	mov	#110,	r14	;#0x006e
    9c46:	0e 9c       	cmp	r12,	r14	;
    9c48:	16 38       	jl	$+46     	;abs 0x9c76
    9c4a:	3c 90 68 00 	cmp	#104,	r12	;#0x0068
    9c4e:	ac 24       	jz	$+346    	;abs 0x9da8
    9c50:	3f 40 68 00 	mov	#104,	r15	;#0x0068
    9c54:	0f 9c       	cmp	r12,	r15	;
    9c56:	08 38       	jl	$+18     	;abs 0x9c68
    9c58:	3c 90 63 00 	cmp	#99,	r12	;#0x0063
    9c5c:	ab 24       	jz	$+344    	;abs 0x9db4
    9c5e:	3c 90 64 00 	cmp	#100,	r12	;#0x0064
    9c62:	39 24       	jz	$+116    	;abs 0x9cd6
    9c64:	30 40 62 a0 	br	#0xa062		;
    9c68:	3c 90 69 00 	cmp	#105,	r12	;#0x0069
    9c6c:	34 24       	jz	$+106    	;abs 0x9cd6
    9c6e:	3c 90 6c 00 	cmp	#108,	r12	;#0x006c
    9c72:	9d 24       	jz	$+316    	;abs 0x9dae
    9c74:	f6 3d       	jmp	$+1006   	;abs 0xa062
    9c76:	3c 90 71 00 	cmp	#113,	r12	;#0x0071
    9c7a:	99 24       	jz	$+308    	;abs 0x9dae
    9c7c:	39 40 71 00 	mov	#113,	r9	;#0x0071
    9c80:	09 9c       	cmp	r12,	r9	;
    9c82:	1b 38       	jl	$+56     	;abs 0x9cba
    9c84:	3c 90 6f 00 	cmp	#111,	r12	;#0x006f
    9c88:	24 24       	jz	$+74     	;abs 0x9cd2
    9c8a:	3c 90 70 00 	cmp	#112,	r12	;#0x0070
    9c8e:	02 24       	jz	$+6      	;abs 0x9c94
    9c90:	80 00 62 a0 	mova	#41058,	r0	;0x0a062
    9c94:	09 48       	mov	r8,	r9	;
    9c96:	29 53       	incd	r9		;
    9c98:	81 49 04 00 	mov	r9,	4(r1)	;
    9c9c:	28 48       	mov	@r8,	r8	;
    9c9e:	09 43       	clr	r9		;
    9ca0:	0d 46       	mov	r6,	r13	;
    9ca2:	2d d3       	bis	#2,	r13	;r3 As==10
    9ca4:	f1 40 30 00 	mov.b	#48,	20(r1)	;#0x0030, 0x0014
    9ca8:	14 00 
    9caa:	f1 40 78 00 	mov.b	#120,	21(r1)	;#0x0078, 0x0015
    9cae:	15 00 
    9cb0:	b1 40 df 45 	mov	#17887,	14(r1)	;#0x45df, 0x000e
    9cb4:	0e 00 
    9cb6:	2c 43       	mov	#2,	r12	;r3 As==10
    9cb8:	45 3d       	jmp	$+652    	;abs 0x9f44
    9cba:	3c 90 75 00 	cmp	#117,	r12	;#0x0075
    9cbe:	07 24       	jz	$+16     	;abs 0x9cce
    9cc0:	3c 90 78 00 	cmp	#120,	r12	;#0x0078
    9cc4:	17 25       	jz	$+560    	;abs 0x9ef4
    9cc6:	3c 90 73 00 	cmp	#115,	r12	;#0x0073
    9cca:	cb 21       	jnz	$+920    	;abs 0xa062
    9ccc:	df 3c       	jmp	$+448    	;abs 0x9e8c
    9cce:	0d 46       	mov	r6,	r13	;
    9cd0:	fc 3c       	jmp	$+506    	;abs 0x9eca
    9cd2:	0d 46       	mov	r6,	r13	;
    9cd4:	be 3c       	jmp	$+382    	;abs 0x9e52
    9cd6:	c1 4d 13 00 	mov.b	r13,	19(r1)	; 0x0013
    9cda:	7c 3c       	jmp	$+250    	;abs 0x9dd4
    9cdc:	c1 4d 13 00 	mov.b	r13,	19(r1)	; 0x0013
    9ce0:	0d 46       	mov	r6,	r13	;
    9ce2:	b1 40 ce 45 	mov	#17870,	14(r1)	;#0x45ce, 0x000e
    9ce6:	0e 00 
    9ce8:	0b 3d       	jmp	$+536    	;abs 0x9f00
    9cea:	0d 93       	cmp	#0,	r13	;r3 As==00
    9cec:	7b 23       	jnz	$-264    	;abs 0x9be4
    9cee:	80 3f       	jmp	$-254    	;abs 0x9bf0
    9cf0:	0f 48       	mov	r8,	r15	;
    9cf2:	1f 53       	inc	r15		;
    9cf4:	1f c3       	bic	#1,	r15	;r3 As==01
    9cf6:	08 4f       	mov	r15,	r8	;
    9cf8:	28 53       	incd	r8		;
    9cfa:	a1 4f 08 00 	mov	@r15,	8(r1)	;
    9cfe:	81 93 08 00 	cmp	#0,	8(r1)	;r3 As==00
    9d02:	70 37       	jge	$-286    	;abs 0x9be4
    9d04:	09 43       	clr	r9		;
    9d06:	19 81 08 00 	sub	8(r1),	r9	;
    9d0a:	81 49 08 00 	mov	r9,	8(r1)	;
    9d0e:	26 d2       	bis	#4,	r6	;r2 As==10
    9d10:	69 3f       	jmp	$-300    	;abs 0x9be4
    9d12:	1f 41 06 00 	mov	6(r1),	r15	;
    9d16:	1f 53       	inc	r15		;
    9d18:	15 41 06 00 	mov	6(r1),	r5	;
    9d1c:	6c 45       	mov.b	@r5,	r12	;
    9d1e:	3c 90 2a 00 	cmp	#42,	r12	;#0x002a
    9d22:	02 24       	jz	$+6      	;abs 0x9d28
    9d24:	0e 43       	clr	r14		;
    9d26:	0c 3c       	jmp	$+26     	;abs 0x9d40
    9d28:	81 4f 06 00 	mov	r15,	6(r1)	;
    9d2c:	0f 48       	mov	r8,	r15	;
    9d2e:	1f 53       	inc	r15		;
    9d30:	1f c3       	bic	#1,	r15	;r3 As==01
    9d32:	08 4f       	mov	r15,	r8	;
    9d34:	28 53       	incd	r8		;
    9d36:	25 4f       	mov	@r15,	r5	;
    9d38:	05 93       	cmp	#0,	r5	;r3 As==00
    9d3a:	54 37       	jge	$-342    	;abs 0x9be4
    9d3c:	35 43       	mov	#-1,	r5	;r3 As==11
    9d3e:	52 3f       	jmp	$-346    	;abs 0x9be4
    9d40:	81 4f 06 00 	mov	r15,	6(r1)	;
    9d44:	09 4c       	mov	r12,	r9	;
    9d46:	39 50 d0 ff 	add	#65488,	r9	;#0xffd0
    9d4a:	35 40 09 00 	mov	#9,	r5	;
    9d4e:	05 99       	cmp	r9,	r5	;
    9d50:	09 28       	jnc	$+20     	;abs 0x9d64
    9d52:	0e 5e       	rla	r14		;
    9d54:	0c 4e       	mov	r14,	r12	;
    9d56:	41 18 0c 5c 	rpt #2 { rlax.w	r12		;
    9d5a:	0e 5c       	add	r12,	r14	;
    9d5c:	0e 59       	add	r9,	r14	;
    9d5e:	6c 4f       	mov.b	@r15,	r12	;
    9d60:	1f 53       	inc	r15		;
    9d62:	ee 3f       	jmp	$-34     	;abs 0x9d40
    9d64:	05 4e       	mov	r14,	r5	;
    9d66:	0e 93       	cmp	#0,	r14	;r3 As==00
    9d68:	1f 37       	jge	$-448    	;abs 0x9ba8
    9d6a:	35 43       	mov	#-1,	r5	;r3 As==11
    9d6c:	1d 3f       	jmp	$-452    	;abs 0x9ba8
    9d6e:	1f 41 06 00 	mov	6(r1),	r15	;
    9d72:	81 43 08 00 	mov	#0,	8(r1)	;r3 As==00
    9d76:	19 41 08 00 	mov	8(r1),	r9	;
    9d7a:	09 59       	rla	r9		;
    9d7c:	0e 49       	mov	r9,	r14	;
    9d7e:	41 18 0e 5e 	rpt #2 { rlax.w	r14		;
    9d82:	0e 59       	add	r9,	r14	;
    9d84:	3c 50 d0 ff 	add	#65488,	r12	;#0xffd0
    9d88:	0e 5c       	add	r12,	r14	;
    9d8a:	81 4e 08 00 	mov	r14,	8(r1)	;
    9d8e:	91 53 06 00 	inc	6(r1)		;
    9d92:	6c 4f       	mov.b	@r15,	r12	;
    9d94:	1f 41 06 00 	mov	6(r1),	r15	;
    9d98:	0e 4c       	mov	r12,	r14	;
    9d9a:	3e 50 d0 ff 	add	#65488,	r14	;#0xffd0
    9d9e:	39 40 09 00 	mov	#9,	r9	;
    9da2:	09 9e       	cmp	r14,	r9	;
    9da4:	e8 2f       	jc	$-46     	;abs 0x9d76
    9da6:	00 3f       	jmp	$-510    	;abs 0x9ba8
    9da8:	36 d0 40 00 	bis	#64,	r6	;#0x0040
    9dac:	1b 3f       	jmp	$-456    	;abs 0x9be4
    9dae:	36 d0 10 00 	bis	#16,	r6	;#0x0010
    9db2:	18 3f       	jmp	$-462    	;abs 0x9be4
    9db4:	18 53       	inc	r8		;
    9db6:	18 c3       	bic	#1,	r8	;r3 As==01
    9db8:	05 48       	mov	r8,	r5	;
    9dba:	25 53       	incd	r5		;
    9dbc:	81 45 04 00 	mov	r5,	4(r1)	;
    9dc0:	e1 48 3c 00 	mov.b	@r8,	60(r1)	; 0x003c
    9dc4:	c1 43 13 00 	mov.b	#0,	19(r1)	;r3 As==00, 0x0013
    9dc8:	19 43       	mov	#1,	r9	;r3 As==01
    9dca:	05 43       	clr	r5		;
    9dcc:	04 41       	mov	r1,	r4	;
    9dce:	34 50 3c 00 	add	#60,	r4	;#0x003c
    9dd2:	58 3d       	jmp	$+690    	;abs 0xa084
    9dd4:	18 53       	inc	r8		;
    9dd6:	18 c3       	bic	#1,	r8	;r3 As==01
    9dd8:	09 48       	mov	r8,	r9	;
    9dda:	36 b0 10 00 	bit	#16,	r6	;#0x0010
    9dde:	07 24       	jz	$+16     	;abs 0x9dee
    9de0:	29 52       	add	#4,	r9	;r2 As==10
    9de2:	81 49 04 00 	mov	r9,	4(r1)	;
    9de6:	19 48 02 00 	mov	2(r8),	r9	;
    9dea:	28 48       	mov	@r8,	r8	;
    9dec:	08 3c       	jmp	$+18     	;abs 0x9dfe
    9dee:	29 53       	incd	r9		;
    9df0:	81 49 04 00 	mov	r9,	4(r1)	;
    9df4:	28 48       	mov	@r8,	r8	;
    9df6:	38 b0 00 80 	bit	#32768,	r8	;#0x8000
    9dfa:	09 79       	subc	r9,	r9	;
    9dfc:	39 e3       	inv	r9		;
    9dfe:	09 93       	cmp	#0,	r9	;r3 As==00
    9e00:	a5 34       	jge	$+332    	;abs 0x9f4c
    9e02:	0c 43       	clr	r12		;
    9e04:	0d 43       	clr	r13		;
    9e06:	0e 4c       	mov	r12,	r14	;
    9e08:	0f 4d       	mov	r13,	r15	;
    9e0a:	0e 88       	sub	r8,	r14	;
    9e0c:	0f 79       	subc	r9,	r15	;
    9e0e:	08 4e       	mov	r14,	r8	;
    9e10:	09 4f       	mov	r15,	r9	;
    9e12:	f1 40 2d 00 	mov.b	#45,	19(r1)	;#0x002d, 0x0013
    9e16:	13 00 
    9e18:	1c 43       	mov	#1,	r12	;r3 As==01
    9e1a:	99 3c       	jmp	$+308    	;abs 0x9f4e
    9e1c:	c1 4d 13 00 	mov.b	r13,	19(r1)	; 0x0013
    9e20:	0c 48       	mov	r8,	r12	;
    9e22:	2c 53       	incd	r12		;
    9e24:	2d 48       	mov	@r8,	r13	;
    9e26:	36 b0 10 00 	bit	#16,	r6	;#0x0010
    9e2a:	0b 24       	jz	$+24     	;abs 0x9e42
    9e2c:	1f 41 0c 00 	mov	12(r1),	r15	;0x0000c
    9e30:	0e 4f       	mov	r15,	r14	;
    9e32:	4e 18 0f 11 	rpt #15 { rrax.w	r15		;
    9e36:	8d 4e 00 00 	mov	r14,	0(r13)	;
    9e3a:	8d 4f 02 00 	mov	r15,	2(r13)	;
    9e3e:	08 4c       	mov	r12,	r8	;
    9e40:	6e 3e       	jmp	$-802    	;abs 0x9b1e
    9e42:	9d 41 0c 00 	mov	12(r1),	0(r13)	;0x0000c
    9e46:	00 00 
    9e48:	08 4c       	mov	r12,	r8	;
    9e4a:	69 3e       	jmp	$-812    	;abs 0x9b1e
    9e4c:	0d 46       	mov	r6,	r13	;
    9e4e:	3d d0 10 00 	bis	#16,	r13	;#0x0010
    9e52:	0e 4d       	mov	r13,	r14	;
    9e54:	3e f0 10 00 	and	#16,	r14	;#0x0010
    9e58:	18 53       	inc	r8		;
    9e5a:	0e 93       	cmp	#0,	r14	;r3 As==00
    9e5c:	0a 24       	jz	$+22     	;abs 0x9e72
    9e5e:	18 c3       	bic	#1,	r8	;r3 As==01
    9e60:	09 48       	mov	r8,	r9	;
    9e62:	29 52       	add	#4,	r9	;r2 As==10
    9e64:	81 49 04 00 	mov	r9,	4(r1)	;
    9e68:	19 48 02 00 	mov	2(r8),	r9	;
    9e6c:	28 48       	mov	@r8,	r8	;
    9e6e:	0c 43       	clr	r12		;
    9e70:	69 3c       	jmp	$+212    	;abs 0x9f44
    9e72:	0c 4d       	mov	r13,	r12	;
    9e74:	3c f0 40 00 	and	#64,	r12	;#0x0040
    9e78:	18 c3       	bic	#1,	r8	;r3 As==01
    9e7a:	09 48       	mov	r8,	r9	;
    9e7c:	29 53       	incd	r9		;
    9e7e:	81 49 04 00 	mov	r9,	4(r1)	;
    9e82:	28 48       	mov	@r8,	r8	;
    9e84:	09 43       	clr	r9		;
    9e86:	0c 93       	cmp	#0,	r12	;r3 As==00
    9e88:	5d 24       	jz	$+188    	;abs 0x9f44
    9e8a:	f1 3f       	jmp	$-28     	;abs 0x9e6e
    9e8c:	09 45       	mov	r5,	r9	;
    9e8e:	0c 48       	mov	r8,	r12	;
    9e90:	2c 53       	incd	r12		;
    9e92:	81 4c 04 00 	mov	r12,	4(r1)	;
    9e96:	24 48       	mov	@r8,	r4	;
    9e98:	c1 43 13 00 	mov.b	#0,	19(r1)	;r3 As==00, 0x0013
    9e9c:	0c 44       	mov	r4,	r12	;
    9e9e:	05 93       	cmp	#0,	r5	;r3 As==00
    9ea0:	0c 38       	jl	$+26     	;abs 0x9eba
    9ea2:	0d 43       	clr	r13		;
    9ea4:	0e 45       	mov	r5,	r14	;
    9ea6:	b0 12 80 86 	call	#34432		;#0x8680
    9eaa:	0c 93       	cmp	#0,	r12	;r3 As==00
    9eac:	ea 24       	jz	$+470    	;abs 0xa082
    9eae:	09 4c       	mov	r12,	r9	;
    9eb0:	09 84       	sub	r4,	r9	;
    9eb2:	05 99       	cmp	r9,	r5	;
    9eb4:	05 34       	jge	$+12     	;abs 0x9ec0
    9eb6:	09 45       	mov	r5,	r9	;
    9eb8:	03 3c       	jmp	$+8      	;abs 0x9ec0
    9eba:	b0 12 c4 99 	call	#39364		;#0x99c4
    9ebe:	09 4c       	mov	r12,	r9	;
    9ec0:	05 43       	clr	r5		;
    9ec2:	e0 3c       	jmp	$+450    	;abs 0xa084
    9ec4:	0d 46       	mov	r6,	r13	;
    9ec6:	3d d0 10 00 	bis	#16,	r13	;#0x0010
    9eca:	18 53       	inc	r8		;
    9ecc:	18 c3       	bic	#1,	r8	;r3 As==01
    9ece:	09 48       	mov	r8,	r9	;
    9ed0:	3d b0 10 00 	bit	#16,	r13	;#0x0010
    9ed4:	08 24       	jz	$+18     	;abs 0x9ee6
    9ed6:	29 52       	add	#4,	r9	;r2 As==10
    9ed8:	81 49 04 00 	mov	r9,	4(r1)	;
    9edc:	19 48 02 00 	mov	2(r8),	r9	;
    9ee0:	28 48       	mov	@r8,	r8	;
    9ee2:	1c 43       	mov	#1,	r12	;r3 As==01
    9ee4:	2f 3c       	jmp	$+96     	;abs 0x9f44
    9ee6:	29 53       	incd	r9		;
    9ee8:	81 49 04 00 	mov	r9,	4(r1)	;
    9eec:	28 48       	mov	@r8,	r8	;
    9eee:	09 43       	clr	r9		;
    9ef0:	1c 43       	mov	#1,	r12	;r3 As==01
    9ef2:	28 3c       	jmp	$+82     	;abs 0x9f44
    9ef4:	c1 4d 13 00 	mov.b	r13,	19(r1)	; 0x0013
    9ef8:	0d 46       	mov	r6,	r13	;
    9efa:	b1 40 df 45 	mov	#17887,	14(r1)	;#0x45df, 0x000e
    9efe:	0e 00 
    9f00:	18 53       	inc	r8		;
    9f02:	18 c3       	bic	#1,	r8	;r3 As==01
    9f04:	09 48       	mov	r8,	r9	;
    9f06:	36 b0 10 00 	bit	#16,	r6	;#0x0010
    9f0a:	07 24       	jz	$+16     	;abs 0x9f1a
    9f0c:	29 52       	add	#4,	r9	;r2 As==10
    9f0e:	81 49 04 00 	mov	r9,	4(r1)	;
    9f12:	19 48 02 00 	mov	2(r8),	r9	;
    9f16:	28 48       	mov	@r8,	r8	;
    9f18:	05 3c       	jmp	$+12     	;abs 0x9f24
    9f1a:	29 53       	incd	r9		;
    9f1c:	81 49 04 00 	mov	r9,	4(r1)	;
    9f20:	28 48       	mov	@r8,	r8	;
    9f22:	09 43       	clr	r9		;
    9f24:	16 b3       	bit	#1,	r6	;r3 As==01
    9f26:	0d 24       	jz	$+28     	;abs 0x9f42
    9f28:	0e 48       	mov	r8,	r14	;
    9f2a:	0e d9       	bis	r9,	r14	;
    9f2c:	0e 93       	cmp	#0,	r14	;r3 As==00
    9f2e:	09 24       	jz	$+20     	;abs 0x9f42
    9f30:	f1 40 30 00 	mov.b	#48,	20(r1)	;#0x0030, 0x0014
    9f34:	14 00 
    9f36:	c1 4c 15 00 	mov.b	r12,	21(r1)	; 0x0015
    9f3a:	0d 46       	mov	r6,	r13	;
    9f3c:	2d d3       	bis	#2,	r13	;r3 As==10
    9f3e:	2c 43       	mov	#2,	r12	;r3 As==10
    9f40:	01 3c       	jmp	$+4      	;abs 0x9f44
    9f42:	2c 43       	mov	#2,	r12	;r3 As==10
    9f44:	c1 43 13 00 	mov.b	#0,	19(r1)	;r3 As==00, 0x0013
    9f48:	06 4d       	mov	r13,	r6	;
    9f4a:	01 3c       	jmp	$+4      	;abs 0x9f4e
    9f4c:	1c 43       	mov	#1,	r12	;r3 As==01
    9f4e:	05 93       	cmp	#0,	r5	;r3 As==00
    9f50:	02 38       	jl	$+6      	;abs 0x9f56
    9f52:	36 f0 7f ff 	and	#65407,	r6	;#0xff7f
    9f56:	0d 48       	mov	r8,	r13	;
    9f58:	0d d9       	bis	r9,	r13	;
    9f5a:	0d 93       	cmp	#0,	r13	;r3 As==00
    9f5c:	05 20       	jnz	$+12     	;abs 0x9f68
    9f5e:	05 93       	cmp	#0,	r5	;r3 As==00
    9f60:	02 24       	jz	$+6      	;abs 0x9f66
    9f62:	80 00 46 a4 	mova	#42054,	r0	;0x0a446
    9f66:	6a 3c       	jmp	$+214    	;abs 0xa03c
    9f68:	5c 93       	cmp.b	#1,	r12	;r3 As==01
    9f6a:	28 24       	jz	$+82     	;abs 0x9fbc
    9f6c:	6c 93       	cmp.b	#2,	r12	;r3 As==10
    9f6e:	51 24       	jz	$+164    	;abs 0xa012
    9f70:	0e 41       	mov	r1,	r14	;
    9f72:	3e 50 64 00 	add	#100,	r14	;#0x0064
    9f76:	3e 53       	add	#-1,	r14	;r3 As==11
    9f78:	4c 48       	mov.b	r8,	r12	;
    9f7a:	7c f0 07 00 	and.b	#7,	r12	;
    9f7e:	7c 50 30 00 	add.b	#48,	r12	;#0x0030
    9f82:	4f 4c       	mov.b	r12,	r15	;
    9f84:	81 4f 0a 00 	mov	r15,	10(r1)	; 0x000a
    9f88:	ce 4c 00 00 	mov.b	r12,	0(r14)	;
    9f8c:	0c 48       	mov	r8,	r12	;
    9f8e:	0d 49       	mov	r9,	r13	;
    9f90:	81 4e 00 00 	mov	r14,	0(r1)	;
    9f94:	b0 12 1c c3 	call	#49948		;#0xc31c
    9f98:	08 4c       	mov	r12,	r8	;
    9f9a:	09 4d       	mov	r13,	r9	;
    9f9c:	0c dd       	bis	r13,	r12	;
    9f9e:	2e 41       	mov	@r1,	r14	;
    9fa0:	0c 93       	cmp	#0,	r12	;r3 As==00
    9fa2:	e9 23       	jnz	$-44     	;abs 0x9f76
    9fa4:	04 4e       	mov	r14,	r4	;
    9fa6:	16 b3       	bit	#1,	r6	;r3 As==01
    9fa8:	57 24       	jz	$+176    	;abs 0xa058
    9faa:	b1 90 30 00 	cmp	#48,	10(r1)	;#0x0030, 0x000a
    9fae:	0a 00 
    9fb0:	53 24       	jz	$+168    	;abs 0xa058
    9fb2:	34 53       	add	#-1,	r4	;r3 As==11
    9fb4:	fe 40 30 00 	mov.b	#48,	-1(r14)	;#0x0030, 0xffff
    9fb8:	ff ff 
    9fba:	4e 3c       	jmp	$+158    	;abs 0xa058
    9fbc:	09 93       	cmp	#0,	r9	;r3 As==00
    9fbe:	0d 20       	jnz	$+28     	;abs 0x9fda
    9fc0:	3c 40 09 00 	mov	#9,	r12	;
    9fc4:	0c 98       	cmp	r8,	r12	;
    9fc6:	09 28       	jnc	$+20     	;abs 0x9fda
    9fc8:	4d 48       	mov.b	r8,	r13	;
    9fca:	7d 50 30 00 	add.b	#48,	r13	;#0x0030
    9fce:	c1 4d 63 00 	mov.b	r13,	99(r1)	; 0x0063
    9fd2:	04 41       	mov	r1,	r4	;
    9fd4:	34 50 63 00 	add	#99,	r4	;#0x0063
    9fd8:	3f 3c       	jmp	$+128    	;abs 0xa058
    9fda:	04 41       	mov	r1,	r4	;
    9fdc:	34 50 64 00 	add	#100,	r4	;#0x0064
    9fe0:	34 53       	add	#-1,	r4	;r3 As==11
    9fe2:	0c 48       	mov	r8,	r12	;
    9fe4:	0d 49       	mov	r9,	r13	;
    9fe6:	3e 40 0a 00 	mov	#10,	r14	;#0x000a
    9fea:	0f 43       	clr	r15		;
    9fec:	b0 12 7c c2 	call	#49788		;#0xc27c
    9ff0:	7c 50 30 00 	add.b	#48,	r12	;#0x0030
    9ff4:	c4 4c 00 00 	mov.b	r12,	0(r4)	;
    9ff8:	0c 48       	mov	r8,	r12	;
    9ffa:	0d 49       	mov	r9,	r13	;
    9ffc:	3e 40 0a 00 	mov	#10,	r14	;#0x000a
    a000:	0f 43       	clr	r15		;
    a002:	b0 12 6e c2 	call	#49774		;#0xc26e
    a006:	08 4c       	mov	r12,	r8	;
    a008:	09 4d       	mov	r13,	r9	;
    a00a:	0c dd       	bis	r13,	r12	;
    a00c:	0c 93       	cmp	#0,	r12	;r3 As==00
    a00e:	e8 23       	jnz	$-46     	;abs 0x9fe0
    a010:	23 3c       	jmp	$+72     	;abs 0xa058
    a012:	04 41       	mov	r1,	r4	;
    a014:	34 50 64 00 	add	#100,	r4	;#0x0064
    a018:	34 53       	add	#-1,	r4	;r3 As==11
    a01a:	0c 48       	mov	r8,	r12	;
    a01c:	3c f0 0f 00 	and	#15,	r12	;#0x000f
    a020:	1c 51 0e 00 	add	14(r1),	r12	;0x0000e
    a024:	e4 4c 00 00 	mov.b	@r12,	0(r4)	;
    a028:	0c 48       	mov	r8,	r12	;
    a02a:	0d 49       	mov	r9,	r13	;
    a02c:	b0 12 16 c3 	call	#49942		;#0xc316
    a030:	08 4c       	mov	r12,	r8	;
    a032:	09 4d       	mov	r13,	r9	;
    a034:	0c dd       	bis	r13,	r12	;
    a036:	0c 93       	cmp	#0,	r12	;r3 As==00
    a038:	ef 23       	jnz	$-32     	;abs 0xa018
    a03a:	0e 3c       	jmp	$+30     	;abs 0xa058
    a03c:	0c 93       	cmp	#0,	r12	;r3 As==00
    a03e:	09 20       	jnz	$+20     	;abs 0xa052
    a040:	16 b3       	bit	#1,	r6	;r3 As==01
    a042:	07 24       	jz	$+16     	;abs 0xa052
    a044:	f1 40 30 00 	mov.b	#48,	99(r1)	;#0x0030, 0x0063
    a048:	63 00 
    a04a:	04 41       	mov	r1,	r4	;
    a04c:	34 50 63 00 	add	#99,	r4	;#0x0063
    a050:	03 3c       	jmp	$+8      	;abs 0xa058
    a052:	04 41       	mov	r1,	r4	;
    a054:	34 50 64 00 	add	#100,	r4	;#0x0064
    a058:	39 40 64 00 	mov	#100,	r9	;#0x0064
    a05c:	09 51       	add	r1,	r9	;
    a05e:	09 84       	sub	r4,	r9	;
    a060:	11 3c       	jmp	$+36     	;abs 0xa084
    a062:	c1 4d 13 00 	mov.b	r13,	19(r1)	; 0x0013
    a066:	0c 93       	cmp	#0,	r12	;r3 As==00
    a068:	da 25       	jz	$+950    	;abs 0xa41e
    a06a:	c1 4c 3c 00 	mov.b	r12,	60(r1)	; 0x003c
    a06e:	c1 43 13 00 	mov.b	#0,	19(r1)	;r3 As==00, 0x0013
    a072:	81 48 04 00 	mov	r8,	4(r1)	;
    a076:	19 43       	mov	#1,	r9	;r3 As==01
    a078:	05 43       	clr	r5		;
    a07a:	04 41       	mov	r1,	r4	;
    a07c:	34 50 3c 00 	add	#60,	r4	;#0x003c
    a080:	01 3c       	jmp	$+4      	;abs 0xa084
    a082:	05 4c       	mov	r12,	r5	;
    a084:	81 49 0a 00 	mov	r9,	10(r1)	; 0x000a
    a088:	09 95       	cmp	r5,	r9	;
    a08a:	02 34       	jge	$+6      	;abs 0xa090
    a08c:	81 45 0a 00 	mov	r5,	10(r1)	; 0x000a
    a090:	c1 93 13 00 	cmp.b	#0,	19(r1)	;r3 As==00, 0x0013
    a094:	02 24       	jz	$+6      	;abs 0xa09a
    a096:	91 53 0a 00 	inc	10(r1)		;
    a09a:	0f 46       	mov	r6,	r15	;
    a09c:	2f f3       	and	#2,	r15	;r3 As==10
    a09e:	81 4f 10 00 	mov	r15,	16(r1)	; 0x0010
    a0a2:	0f 93       	cmp	#0,	r15	;r3 As==00
    a0a4:	02 24       	jz	$+6      	;abs 0xa0aa
    a0a6:	a1 53 0a 00 	incd	10(r1)		;
    a0aa:	08 46       	mov	r6,	r8	;
    a0ac:	38 f0 84 00 	and	#132,	r8	;#0x0084
    a0b0:	08 93       	cmp	#0,	r8	;r3 As==00
    a0b2:	4e 20       	jnz	$+158    	;abs 0xa150
    a0b4:	1f 41 08 00 	mov	8(r1),	r15	;
    a0b8:	1f 81 0a 00 	sub	10(r1),	r15	;0x0000a
    a0bc:	0c 43       	clr	r12		;
    a0be:	0c 9f       	cmp	r15,	r12	;
    a0c0:	47 34       	jge	$+144    	;abs 0xa150
    a0c2:	3e 40 10 00 	mov	#16,	r14	;#0x0010
    a0c6:	ba 40 00 46 	mov	#17920,	0(r10)	;#0x4600
    a0ca:	00 00 
    a0cc:	0e 9f       	cmp	r15,	r14	;
    a0ce:	24 34       	jge	$+74     	;abs 0xa118
    a0d0:	ba 40 10 00 	mov	#16,	2(r10)	;#0x0010
    a0d4:	02 00 
    a0d6:	b1 50 10 00 	add	#16,	26(r1)	;#0x0010, 0x001a
    a0da:	1a 00 
    a0dc:	1c 41 18 00 	mov	24(r1),	r12	;0x00018
    a0e0:	1c 53       	inc	r12		;
    a0e2:	81 4c 18 00 	mov	r12,	24(r1)	; 0x0018
    a0e6:	3d 40 07 00 	mov	#7,	r13	;
    a0ea:	0d 9c       	cmp	r12,	r13	;
    a0ec:	02 38       	jl	$+6      	;abs 0xa0f2
    a0ee:	2a 52       	add	#4,	r10	;r2 As==10
    a0f0:	10 3c       	jmp	$+34     	;abs 0xa112
    a0f2:	1c 41 02 00 	mov	2(r1),	r12	;
    a0f6:	0d 47       	mov	r7,	r13	;
    a0f8:	0e 41       	mov	r1,	r14	;
    a0fa:	3e 50 16 00 	add	#22,	r14	;#0x0016
    a0fe:	81 4f 00 00 	mov	r15,	0(r1)	;
    a102:	b0 12 d6 99 	call	#39382		;#0x99d6
    a106:	2f 41       	mov	@r1,	r15	;
    a108:	0c 93       	cmp	#0,	r12	;r3 As==00
    a10a:	94 21       	jnz	$+810    	;abs 0xa434
    a10c:	0a 41       	mov	r1,	r10	;
    a10e:	3a 50 1c 00 	add	#28,	r10	;#0x001c
    a112:	3f 50 f0 ff 	add	#65520,	r15	;#0xfff0
    a116:	d5 3f       	jmp	$-84     	;abs 0xa0c2
    a118:	8a 4f 02 00 	mov	r15,	2(r10)	;
    a11c:	81 5f 1a 00 	add	r15,	26(r1)	; 0x001a
    a120:	1c 41 18 00 	mov	24(r1),	r12	;0x00018
    a124:	1c 53       	inc	r12		;
    a126:	81 4c 18 00 	mov	r12,	24(r1)	; 0x0018
    a12a:	3f 40 07 00 	mov	#7,	r15	;
    a12e:	0f 9c       	cmp	r12,	r15	;
    a130:	02 38       	jl	$+6      	;abs 0xa136
    a132:	2a 52       	add	#4,	r10	;r2 As==10
    a134:	0d 3c       	jmp	$+28     	;abs 0xa150
    a136:	1c 41 02 00 	mov	2(r1),	r12	;
    a13a:	0d 47       	mov	r7,	r13	;
    a13c:	0e 41       	mov	r1,	r14	;
    a13e:	3e 50 16 00 	add	#22,	r14	;#0x0016
    a142:	b0 12 d6 99 	call	#39382		;#0x99d6
    a146:	0c 93       	cmp	#0,	r12	;r3 As==00
    a148:	75 21       	jnz	$+748    	;abs 0xa434
    a14a:	0a 41       	mov	r1,	r10	;
    a14c:	3a 50 1c 00 	add	#28,	r10	;#0x001c
    a150:	c1 93 13 00 	cmp.b	#0,	19(r1)	;r3 As==00, 0x0013
    a154:	21 24       	jz	$+68     	;abs 0xa198
    a156:	3c 40 13 00 	mov	#19,	r12	;#0x0013
    a15a:	0c 51       	add	r1,	r12	;
    a15c:	8a 4c 00 00 	mov	r12,	0(r10)	;
    a160:	9a 43 02 00 	mov	#1,	2(r10)	;r3 As==01
    a164:	91 53 1a 00 	inc	26(r1)		;
    a168:	1c 41 18 00 	mov	24(r1),	r12	;0x00018
    a16c:	1c 53       	inc	r12		;
    a16e:	81 4c 18 00 	mov	r12,	24(r1)	; 0x0018
    a172:	3d 40 07 00 	mov	#7,	r13	;
    a176:	0d 9c       	cmp	r12,	r13	;
    a178:	02 38       	jl	$+6      	;abs 0xa17e
    a17a:	2a 52       	add	#4,	r10	;r2 As==10
    a17c:	0d 3c       	jmp	$+28     	;abs 0xa198
    a17e:	1c 41 02 00 	mov	2(r1),	r12	;
    a182:	0d 47       	mov	r7,	r13	;
    a184:	0e 41       	mov	r1,	r14	;
    a186:	3e 50 16 00 	add	#22,	r14	;#0x0016
    a18a:	b0 12 d6 99 	call	#39382		;#0x99d6
    a18e:	0c 93       	cmp	#0,	r12	;r3 As==00
    a190:	51 21       	jnz	$+676    	;abs 0xa434
    a192:	0a 41       	mov	r1,	r10	;
    a194:	3a 50 1c 00 	add	#28,	r10	;#0x001c
    a198:	81 93 10 00 	cmp	#0,	16(r1)	;r3 As==00, 0x0010
    a19c:	21 24       	jz	$+68     	;abs 0xa1e0
    a19e:	3e 40 14 00 	mov	#20,	r14	;#0x0014
    a1a2:	0e 51       	add	r1,	r14	;
    a1a4:	8a 4e 00 00 	mov	r14,	0(r10)	;
    a1a8:	aa 43 02 00 	mov	#2,	2(r10)	;r3 As==10
    a1ac:	a1 53 1a 00 	incd	26(r1)		;
    a1b0:	1c 41 18 00 	mov	24(r1),	r12	;0x00018
    a1b4:	1c 53       	inc	r12		;
    a1b6:	81 4c 18 00 	mov	r12,	24(r1)	; 0x0018
    a1ba:	3f 40 07 00 	mov	#7,	r15	;
    a1be:	0f 9c       	cmp	r12,	r15	;
    a1c0:	02 38       	jl	$+6      	;abs 0xa1c6
    a1c2:	2a 52       	add	#4,	r10	;r2 As==10
    a1c4:	0d 3c       	jmp	$+28     	;abs 0xa1e0
    a1c6:	1c 41 02 00 	mov	2(r1),	r12	;
    a1ca:	0d 47       	mov	r7,	r13	;
    a1cc:	0e 41       	mov	r1,	r14	;
    a1ce:	3e 50 16 00 	add	#22,	r14	;#0x0016
    a1d2:	b0 12 d6 99 	call	#39382		;#0x99d6
    a1d6:	0c 93       	cmp	#0,	r12	;r3 As==00
    a1d8:	2d 21       	jnz	$+604    	;abs 0xa434
    a1da:	0a 41       	mov	r1,	r10	;
    a1dc:	3a 50 1c 00 	add	#28,	r10	;#0x001c
    a1e0:	38 90 80 00 	cmp	#128,	r8	;#0x0080
    a1e4:	4b 20       	jnz	$+152    	;abs 0xa27c
    a1e6:	18 41 08 00 	mov	8(r1),	r8	;
    a1ea:	18 81 0a 00 	sub	10(r1),	r8	;0x0000a
    a1ee:	0c 43       	clr	r12		;
    a1f0:	0c 98       	cmp	r8,	r12	;
    a1f2:	44 34       	jge	$+138    	;abs 0xa27c
    a1f4:	3e 40 10 00 	mov	#16,	r14	;#0x0010
    a1f8:	ba 40 f0 45 	mov	#17904,	0(r10)	;#0x45f0
    a1fc:	00 00 
    a1fe:	0e 98       	cmp	r8,	r14	;
    a200:	21 34       	jge	$+68     	;abs 0xa244
    a202:	ba 40 10 00 	mov	#16,	2(r10)	;#0x0010
    a206:	02 00 
    a208:	b1 50 10 00 	add	#16,	26(r1)	;#0x0010, 0x001a
    a20c:	1a 00 
    a20e:	1c 41 18 00 	mov	24(r1),	r12	;0x00018
    a212:	1c 53       	inc	r12		;
    a214:	81 4c 18 00 	mov	r12,	24(r1)	; 0x0018
    a218:	3d 40 07 00 	mov	#7,	r13	;
    a21c:	0d 9c       	cmp	r12,	r13	;
    a21e:	02 38       	jl	$+6      	;abs 0xa224
    a220:	2a 52       	add	#4,	r10	;r2 As==10
    a222:	0d 3c       	jmp	$+28     	;abs 0xa23e
    a224:	1c 41 02 00 	mov	2(r1),	r12	;
    a228:	0d 47       	mov	r7,	r13	;
    a22a:	0e 41       	mov	r1,	r14	;
    a22c:	3e 50 16 00 	add	#22,	r14	;#0x0016
    a230:	b0 12 d6 99 	call	#39382		;#0x99d6
    a234:	0c 93       	cmp	#0,	r12	;r3 As==00
    a236:	fe 20       	jnz	$+510    	;abs 0xa434
    a238:	0a 41       	mov	r1,	r10	;
    a23a:	3a 50 1c 00 	add	#28,	r10	;#0x001c
    a23e:	38 50 f0 ff 	add	#65520,	r8	;#0xfff0
    a242:	d8 3f       	jmp	$-78     	;abs 0xa1f4
    a244:	8a 48 02 00 	mov	r8,	2(r10)	;
    a248:	81 58 1a 00 	add	r8,	26(r1)	; 0x001a
    a24c:	1c 41 18 00 	mov	24(r1),	r12	;0x00018
    a250:	1c 53       	inc	r12		;
    a252:	81 4c 18 00 	mov	r12,	24(r1)	; 0x0018
    a256:	3f 40 07 00 	mov	#7,	r15	;
    a25a:	0f 9c       	cmp	r12,	r15	;
    a25c:	02 38       	jl	$+6      	;abs 0xa262
    a25e:	2a 52       	add	#4,	r10	;r2 As==10
    a260:	0d 3c       	jmp	$+28     	;abs 0xa27c
    a262:	1c 41 02 00 	mov	2(r1),	r12	;
    a266:	0d 47       	mov	r7,	r13	;
    a268:	0e 41       	mov	r1,	r14	;
    a26a:	3e 50 16 00 	add	#22,	r14	;#0x0016
    a26e:	b0 12 d6 99 	call	#39382		;#0x99d6
    a272:	0c 93       	cmp	#0,	r12	;r3 As==00
    a274:	df 20       	jnz	$+448    	;abs 0xa434
    a276:	0a 41       	mov	r1,	r10	;
    a278:	3a 50 1c 00 	add	#28,	r10	;#0x001c
    a27c:	05 89       	sub	r9,	r5	;
    a27e:	0c 43       	clr	r12		;
    a280:	0c 95       	cmp	r5,	r12	;
    a282:	45 34       	jge	$+140    	;abs 0xa30e
    a284:	38 40 d6 99 	mov	#39382,	r8	;#0x99d6
    a288:	3e 40 10 00 	mov	#16,	r14	;#0x0010
    a28c:	ba 40 f0 45 	mov	#17904,	0(r10)	;#0x45f0
    a290:	00 00 
    a292:	0e 95       	cmp	r5,	r14	;
    a294:	20 34       	jge	$+66     	;abs 0xa2d6
    a296:	ba 40 10 00 	mov	#16,	2(r10)	;#0x0010
    a29a:	02 00 
    a29c:	b1 50 10 00 	add	#16,	26(r1)	;#0x0010, 0x001a
    a2a0:	1a 00 
    a2a2:	1c 41 18 00 	mov	24(r1),	r12	;0x00018
    a2a6:	1c 53       	inc	r12		;
    a2a8:	81 4c 18 00 	mov	r12,	24(r1)	; 0x0018
    a2ac:	3d 40 07 00 	mov	#7,	r13	;
    a2b0:	0d 9c       	cmp	r12,	r13	;
    a2b2:	02 38       	jl	$+6      	;abs 0xa2b8
    a2b4:	2a 52       	add	#4,	r10	;r2 As==10
    a2b6:	0c 3c       	jmp	$+26     	;abs 0xa2d0
    a2b8:	1c 41 02 00 	mov	2(r1),	r12	;
    a2bc:	0d 47       	mov	r7,	r13	;
    a2be:	0e 41       	mov	r1,	r14	;
    a2c0:	3e 50 16 00 	add	#22,	r14	;#0x0016
    a2c4:	88 12       	call	r8		;
    a2c6:	0c 93       	cmp	#0,	r12	;r3 As==00
    a2c8:	b5 20       	jnz	$+364    	;abs 0xa434
    a2ca:	0a 41       	mov	r1,	r10	;
    a2cc:	3a 50 1c 00 	add	#28,	r10	;#0x001c
    a2d0:	35 50 f0 ff 	add	#65520,	r5	;#0xfff0
    a2d4:	d9 3f       	jmp	$-76     	;abs 0xa288
    a2d6:	8a 45 02 00 	mov	r5,	2(r10)	;
    a2da:	81 55 1a 00 	add	r5,	26(r1)	; 0x001a
    a2de:	1c 41 18 00 	mov	24(r1),	r12	;0x00018
    a2e2:	1c 53       	inc	r12		;
    a2e4:	81 4c 18 00 	mov	r12,	24(r1)	; 0x0018
    a2e8:	3f 40 07 00 	mov	#7,	r15	;
    a2ec:	0f 9c       	cmp	r12,	r15	;
    a2ee:	02 38       	jl	$+6      	;abs 0xa2f4
    a2f0:	2a 52       	add	#4,	r10	;r2 As==10
    a2f2:	0d 3c       	jmp	$+28     	;abs 0xa30e
    a2f4:	1c 41 02 00 	mov	2(r1),	r12	;
    a2f8:	0d 47       	mov	r7,	r13	;
    a2fa:	0e 41       	mov	r1,	r14	;
    a2fc:	3e 50 16 00 	add	#22,	r14	;#0x0016
    a300:	b0 12 d6 99 	call	#39382		;#0x99d6
    a304:	0c 93       	cmp	#0,	r12	;r3 As==00
    a306:	96 20       	jnz	$+302    	;abs 0xa434
    a308:	0a 41       	mov	r1,	r10	;
    a30a:	3a 50 1c 00 	add	#28,	r10	;#0x001c
    a30e:	8a 44 00 00 	mov	r4,	0(r10)	;
    a312:	8a 49 02 00 	mov	r9,	2(r10)	;
    a316:	81 59 1a 00 	add	r9,	26(r1)	; 0x001a
    a31a:	1c 41 18 00 	mov	24(r1),	r12	;0x00018
    a31e:	1c 53       	inc	r12		;
    a320:	81 4c 18 00 	mov	r12,	24(r1)	; 0x0018
    a324:	35 40 07 00 	mov	#7,	r5	;
    a328:	05 9c       	cmp	r12,	r5	;
    a32a:	02 38       	jl	$+6      	;abs 0xa330
    a32c:	2a 52       	add	#4,	r10	;r2 As==10
    a32e:	0d 3c       	jmp	$+28     	;abs 0xa34a
    a330:	1c 41 02 00 	mov	2(r1),	r12	;
    a334:	0d 47       	mov	r7,	r13	;
    a336:	0e 41       	mov	r1,	r14	;
    a338:	3e 50 16 00 	add	#22,	r14	;#0x0016
    a33c:	b0 12 d6 99 	call	#39382		;#0x99d6
    a340:	0c 93       	cmp	#0,	r12	;r3 As==00
    a342:	78 20       	jnz	$+242    	;abs 0xa434
    a344:	0a 41       	mov	r1,	r10	;
    a346:	3a 50 1c 00 	add	#28,	r10	;#0x001c
    a34a:	26 b2       	bit	#4,	r6	;r2 As==10
    a34c:	0d 20       	jnz	$+28     	;abs 0xa368
    a34e:	16 41 0a 00 	mov	10(r1),	r6	;0x0000a
    a352:	16 91 08 00 	cmp	8(r1),	r6	;
    a356:	02 34       	jge	$+6      	;abs 0xa35c
    a358:	16 41 08 00 	mov	8(r1),	r6	;
    a35c:	81 56 0c 00 	add	r6,	12(r1)	; 0x000c
    a360:	81 93 1a 00 	cmp	#0,	26(r1)	;r3 As==00, 0x001a
    a364:	53 24       	jz	$+168    	;abs 0xa40c
    a366:	48 3c       	jmp	$+146    	;abs 0xa3f8
    a368:	18 41 08 00 	mov	8(r1),	r8	;
    a36c:	18 81 0a 00 	sub	10(r1),	r8	;0x0000a
    a370:	09 43       	clr	r9		;
    a372:	09 98       	cmp	r8,	r9	;
    a374:	ec 37       	jge	$-38     	;abs 0xa34e
    a376:	39 40 d6 99 	mov	#39382,	r9	;#0x99d6
    a37a:	3e 40 10 00 	mov	#16,	r14	;#0x0010
    a37e:	ba 40 00 46 	mov	#17920,	0(r10)	;#0x4600
    a382:	00 00 
    a384:	0e 98       	cmp	r8,	r14	;
    a386:	20 34       	jge	$+66     	;abs 0xa3c8
    a388:	ba 40 10 00 	mov	#16,	2(r10)	;#0x0010
    a38c:	02 00 
    a38e:	b1 50 10 00 	add	#16,	26(r1)	;#0x0010, 0x001a
    a392:	1a 00 
    a394:	1c 41 18 00 	mov	24(r1),	r12	;0x00018
    a398:	1c 53       	inc	r12		;
    a39a:	81 4c 18 00 	mov	r12,	24(r1)	; 0x0018
    a39e:	3d 40 07 00 	mov	#7,	r13	;
    a3a2:	0d 9c       	cmp	r12,	r13	;
    a3a4:	02 38       	jl	$+6      	;abs 0xa3aa
    a3a6:	2a 52       	add	#4,	r10	;r2 As==10
    a3a8:	0c 3c       	jmp	$+26     	;abs 0xa3c2
    a3aa:	1c 41 02 00 	mov	2(r1),	r12	;
    a3ae:	0d 47       	mov	r7,	r13	;
    a3b0:	0e 41       	mov	r1,	r14	;
    a3b2:	3e 50 16 00 	add	#22,	r14	;#0x0016
    a3b6:	89 12       	call	r9		;
    a3b8:	0c 93       	cmp	#0,	r12	;r3 As==00
    a3ba:	3c 20       	jnz	$+122    	;abs 0xa434
    a3bc:	0a 41       	mov	r1,	r10	;
    a3be:	3a 50 1c 00 	add	#28,	r10	;#0x001c
    a3c2:	38 50 f0 ff 	add	#65520,	r8	;#0xfff0
    a3c6:	d9 3f       	jmp	$-76     	;abs 0xa37a
    a3c8:	8a 48 02 00 	mov	r8,	2(r10)	;
    a3cc:	81 58 1a 00 	add	r8,	26(r1)	; 0x001a
    a3d0:	1c 41 18 00 	mov	24(r1),	r12	;0x00018
    a3d4:	1c 53       	inc	r12		;
    a3d6:	81 4c 18 00 	mov	r12,	24(r1)	; 0x0018
    a3da:	3f 40 07 00 	mov	#7,	r15	;
    a3de:	0f 9c       	cmp	r12,	r15	;
    a3e0:	b6 37       	jge	$-146    	;abs 0xa34e
    a3e2:	1c 41 02 00 	mov	2(r1),	r12	;
    a3e6:	0d 47       	mov	r7,	r13	;
    a3e8:	0e 41       	mov	r1,	r14	;
    a3ea:	3e 50 16 00 	add	#22,	r14	;#0x0016
    a3ee:	b0 12 d6 99 	call	#39382		;#0x99d6
    a3f2:	0c 93       	cmp	#0,	r12	;r3 As==00
    a3f4:	ac 27       	jz	$-166    	;abs 0xa34e
    a3f6:	1e 3c       	jmp	$+62     	;abs 0xa434
    a3f8:	1c 41 02 00 	mov	2(r1),	r12	;
    a3fc:	0d 47       	mov	r7,	r13	;
    a3fe:	0e 41       	mov	r1,	r14	;
    a400:	3e 50 16 00 	add	#22,	r14	;#0x0016
    a404:	b0 12 d6 99 	call	#39382		;#0x99d6
    a408:	0c 93       	cmp	#0,	r12	;r3 As==00
    a40a:	14 20       	jnz	$+42     	;abs 0xa434
    a40c:	81 43 18 00 	mov	#0,	24(r1)	;r3 As==00, 0x0018
    a410:	18 41 04 00 	mov	4(r1),	r8	;
    a414:	0a 41       	mov	r1,	r10	;
    a416:	3a 50 1c 00 	add	#28,	r10	;#0x001c
    a41a:	30 40 1e 9b 	br	#0x9b1e		;
    a41e:	81 93 1a 00 	cmp	#0,	26(r1)	;r3 As==00, 0x001a
    a422:	08 24       	jz	$+18     	;abs 0xa434
    a424:	1c 41 02 00 	mov	2(r1),	r12	;
    a428:	0d 47       	mov	r7,	r13	;
    a42a:	0e 41       	mov	r1,	r14	;
    a42c:	3e 50 16 00 	add	#22,	r14	;#0x0016
    a430:	b0 12 d6 99 	call	#39382		;#0x99d6
    a434:	f7 b0 40 00 	bit.b	#64,	6(r7)	;#0x0040
    a438:	06 00 
    a43a:	02 24       	jz	$+6      	;abs 0xa440
    a43c:	80 00 e0 9a 	mova	#39648,	r0	;0x09ae0
    a440:	1c 41 0c 00 	mov	12(r1),	r12	;0x0000c
    a444:	06 3c       	jmp	$+14     	;abs 0xa452
    a446:	5c 93       	cmp.b	#1,	r12	;r3 As==01
    a448:	02 24       	jz	$+6      	;abs 0xa44e
    a44a:	80 00 6c 9f 	mova	#40812,	r0	;0x09f6c
    a44e:	30 40 c8 9f 	br	#0x9fc8		;
    a452:	31 50 64 00 	add	#100,	r1	;#0x0064
    a456:	64 17       	popm	#7,	r10	;16-bit words
    a458:	30 41       	ret			

0000a45a <vfiprintf>:
    a45a:	0a 15       	pushm	#1,	r10	;16-bit words
    a45c:	0a 4c       	mov	r12,	r10	;
    a45e:	0b 4d       	mov	r13,	r11	;
    a460:	0f 4e       	mov	r14,	r15	;
    a462:	1c 42 04 1c 	mov	&0x1c04,r12	;0x1c04
    a466:	0d 4a       	mov	r10,	r13	;
    a468:	0e 4b       	mov	r11,	r14	;
    a46a:	b0 12 50 9a 	call	#39504		;#0x9a50
    a46e:	0a 17       	popm	#1,	r10	;16-bit words
    a470:	30 41       	ret			

0000a472 <__sbprintf>:
    a472:	2a 15       	pushm	#3,	r10	;16-bit words
    a474:	31 80 3c 04 	sub	#1084,	r1	;#0x043c
    a478:	08 4c       	mov	r12,	r8	;
    a47a:	0a 4d       	mov	r13,	r10	;
    a47c:	1d 4d 06 00 	mov	6(r13),	r13	;
    a480:	2d c3       	bic	#2,	r13	;r3 As==10
    a482:	81 4d 06 00 	mov	r13,	6(r1)	;
    a486:	91 4a 3a 00 	mov	58(r10),58(r1)	;0x0003a, 0x003a
    a48a:	3a 00 
    a48c:	91 4a 08 00 	mov	8(r10),	8(r1)	;
    a490:	08 00 
    a492:	91 4a 12 00 	mov	18(r10),18(r1)	;0x00012, 0x0012
    a496:	12 00 
    a498:	91 4a 16 00 	mov	22(r10),22(r1)	;0x00016, 0x0016
    a49c:	16 00 
    a49e:	3d 40 3c 00 	mov	#60,	r13	;#0x003c
    a4a2:	0d 51       	add	r1,	r13	;
    a4a4:	81 4d 00 00 	mov	r13,	0(r1)	;
    a4a8:	3d 40 3c 00 	mov	#60,	r13	;#0x003c
    a4ac:	0d 51       	add	r1,	r13	;
    a4ae:	81 4d 0a 00 	mov	r13,	10(r1)	; 0x000a
    a4b2:	b1 40 00 04 	mov	#1024,	4(r1)	;#0x0400
    a4b6:	04 00 
    a4b8:	b1 40 00 04 	mov	#1024,	12(r1)	;#0x0400, 0x000c
    a4bc:	0c 00 
    a4be:	81 43 0e 00 	mov	#0,	14(r1)	;r3 As==00, 0x000e
    a4c2:	0d 41       	mov	r1,	r13	;
    a4c4:	b0 12 50 9a 	call	#39504		;#0x9a50
    a4c8:	09 4c       	mov	r12,	r9	;
    a4ca:	0c 93       	cmp	#0,	r12	;r3 As==00
    a4cc:	07 38       	jl	$+16     	;abs 0xa4dc
    a4ce:	0c 48       	mov	r8,	r12	;
    a4d0:	0d 41       	mov	r1,	r13	;
    a4d2:	b0 12 7e 81 	call	#33150		;#0x817e
    a4d6:	0c 93       	cmp	#0,	r12	;r3 As==00
    a4d8:	01 24       	jz	$+4      	;abs 0xa4dc
    a4da:	39 43       	mov	#-1,	r9	;r3 As==11
    a4dc:	f1 b0 40 00 	bit.b	#64,	6(r1)	;#0x0040
    a4e0:	06 00 
    a4e2:	03 24       	jz	$+8      	;abs 0xa4ea
    a4e4:	ba d0 40 00 	bis	#64,	6(r10)	;#0x0040
    a4e8:	06 00 
    a4ea:	0c 49       	mov	r9,	r12	;
    a4ec:	31 50 3c 04 	add	#1084,	r1	;#0x043c
    a4f0:	28 17       	popm	#3,	r10	;16-bit words
    a4f2:	30 41       	ret			

0000a4f4 <_write_r>:
    a4f4:	0a 15       	pushm	#1,	r10	;16-bit words
    a4f6:	0a 4c       	mov	r12,	r10	;
    a4f8:	82 43 c0 1d 	mov	#0,	&0x1dc0	;r3 As==00
    a4fc:	0c 4d       	mov	r13,	r12	;
    a4fe:	0d 4e       	mov	r14,	r13	;
    a500:	0e 4f       	mov	r15,	r14	;
    a502:	b0 12 04 cd 	call	#52484		;#0xcd04
    a506:	3c 93       	cmp	#-1,	r12	;r3 As==11
    a508:	06 20       	jnz	$+14     	;abs 0xa516
    a50a:	1d 42 c0 1d 	mov	&0x1dc0,r13	;0x1dc0
    a50e:	0d 93       	cmp	#0,	r13	;r3 As==00
    a510:	02 24       	jz	$+6      	;abs 0xa516
    a512:	8a 4d 00 00 	mov	r13,	0(r10)	;
    a516:	0a 17       	popm	#1,	r10	;16-bit words
    a518:	30 41       	ret			

0000a51a <_close_r>:
    a51a:	0a 15       	pushm	#1,	r10	;16-bit words
    a51c:	0a 4c       	mov	r12,	r10	;
    a51e:	82 43 c0 1d 	mov	#0,	&0x1dc0	;r3 As==00
    a522:	0c 4d       	mov	r13,	r12	;
    a524:	b0 12 b4 cc 	call	#52404		;#0xccb4
    a528:	3c 93       	cmp	#-1,	r12	;r3 As==11
    a52a:	06 20       	jnz	$+14     	;abs 0xa538
    a52c:	1d 42 c0 1d 	mov	&0x1dc0,r13	;0x1dc0
    a530:	0d 93       	cmp	#0,	r13	;r3 As==00
    a532:	02 24       	jz	$+6      	;abs 0xa538
    a534:	8a 4d 00 00 	mov	r13,	0(r10)	;
    a538:	0a 17       	popm	#1,	r10	;16-bit words
    a53a:	30 41       	ret			

0000a53c <_fclose_r>:
    a53c:	2a 15       	pushm	#3,	r10	;16-bit words
    a53e:	09 4c       	mov	r12,	r9	;
    a540:	0a 4d       	mov	r13,	r10	;
    a542:	0d 93       	cmp	#0,	r13	;r3 As==00
    a544:	02 20       	jnz	$+6      	;abs 0xa54a
    a546:	0c 43       	clr	r12		;
    a548:	52 3c       	jmp	$+166    	;abs 0xa5ee
    a54a:	0c 93       	cmp	#0,	r12	;r3 As==00
    a54c:	05 24       	jz	$+12     	;abs 0xa558
    a54e:	8c 93 0c 00 	cmp	#0,	12(r12)	;r3 As==00, 0x000c
    a552:	02 20       	jnz	$+6      	;abs 0xa558
    a554:	b0 12 56 82 	call	#33366		;#0x8256
    a558:	3a 90 8e 44 	cmp	#17550,	r10	;#0x448e
    a55c:	03 20       	jnz	$+8      	;abs 0xa564
    a55e:	1a 49 02 00 	mov	2(r9),	r10	;
    a562:	0b 3c       	jmp	$+24     	;abs 0xa57a
    a564:	3a 90 7c 44 	cmp	#17532,	r10	;#0x447c
    a568:	03 20       	jnz	$+8      	;abs 0xa570
    a56a:	1a 49 04 00 	mov	4(r9),	r10	;
    a56e:	05 3c       	jmp	$+12     	;abs 0xa57a
    a570:	3a 90 6a 44 	cmp	#17514,	r10	;#0x446a
    a574:	02 20       	jnz	$+6      	;abs 0xa57a
    a576:	1a 49 06 00 	mov	6(r9),	r10	;
    a57a:	8a 93 06 00 	cmp	#0,	6(r10)	;r3 As==00
    a57e:	e3 27       	jz	$-56     	;abs 0xa546
    a580:	0c 49       	mov	r9,	r12	;
    a582:	0d 4a       	mov	r10,	r13	;
    a584:	b0 12 7e 81 	call	#33150		;#0x817e
    a588:	08 4c       	mov	r12,	r8	;
    a58a:	1e 4a 1a 00 	mov	26(r10),r14	;0x0001a
    a58e:	0e 93       	cmp	#0,	r14	;r3 As==00
    a590:	07 24       	jz	$+16     	;abs 0xa5a0
    a592:	0c 49       	mov	r9,	r12	;
    a594:	1d 4a 12 00 	mov	18(r10),r13	;0x00012
    a598:	8e 12       	call	r14		;
    a59a:	0c 93       	cmp	#0,	r12	;r3 As==00
    a59c:	01 34       	jge	$+4      	;abs 0xa5a0
    a59e:	38 43       	mov	#-1,	r8	;r3 As==11
    a5a0:	fa b0 80 00 	bit.b	#128,	6(r10)	;#0x0080
    a5a4:	06 00 
    a5a6:	05 24       	jz	$+12     	;abs 0xa5b2
    a5a8:	0c 49       	mov	r9,	r12	;
    a5aa:	1d 4a 0a 00 	mov	10(r10),r13	;0x0000a
    a5ae:	b0 12 86 96 	call	#38534		;#0x9686
    a5b2:	1d 4a 1c 00 	mov	28(r10),r13	;0x0001c
    a5b6:	0d 93       	cmp	#0,	r13	;r3 As==00
    a5b8:	0a 24       	jz	$+22     	;abs 0xa5ce
    a5ba:	0c 4a       	mov	r10,	r12	;
    a5bc:	3c 50 24 00 	add	#36,	r12	;#0x0024
    a5c0:	0d 9c       	cmp	r12,	r13	;
    a5c2:	03 24       	jz	$+8      	;abs 0xa5ca
    a5c4:	0c 49       	mov	r9,	r12	;
    a5c6:	b0 12 86 96 	call	#38534		;#0x9686
    a5ca:	8a 43 1c 00 	mov	#0,	28(r10)	;r3 As==00, 0x001c
    a5ce:	1d 4a 28 00 	mov	40(r10),r13	;0x00028
    a5d2:	0d 93       	cmp	#0,	r13	;r3 As==00
    a5d4:	05 24       	jz	$+12     	;abs 0xa5e0
    a5d6:	0c 49       	mov	r9,	r12	;
    a5d8:	b0 12 86 96 	call	#38534		;#0x9686
    a5dc:	8a 43 28 00 	mov	#0,	40(r10)	;r3 As==00, 0x0028
    a5e0:	b0 12 44 84 	call	#33860		;#0x8444
    a5e4:	8a 43 06 00 	mov	#0,	6(r10)	;r3 As==00
    a5e8:	b0 12 46 84 	call	#33862		;#0x8446
    a5ec:	0c 48       	mov	r8,	r12	;
    a5ee:	28 17       	popm	#3,	r10	;16-bit words
    a5f0:	30 41       	ret			

0000a5f2 <fclose>:
    a5f2:	0d 4c       	mov	r12,	r13	;
    a5f4:	1c 42 04 1c 	mov	&0x1c04,r12	;0x1c04
    a5f8:	b0 12 3c a5 	call	#42300		;#0xa53c
    a5fc:	30 41       	ret			

0000a5fe <_fputwc_r>:
    a5fe:	6a 15       	pushm	#7,	r10	;16-bit words
    a600:	21 82       	sub	#4,	r1	;r2 As==10
    a602:	06 4c       	mov	r12,	r6	;
    a604:	09 4d       	mov	r13,	r9	;
    a606:	05 4e       	mov	r14,	r5	;
    a608:	0a 4f       	mov	r15,	r10	;
    a60a:	1c 4f 06 00 	mov	6(r15),	r12	;
    a60e:	3c b0 00 20 	bit	#8192,	r12	;#0x2000
    a612:	07 20       	jnz	$+16     	;abs 0xa622
    a614:	3c d0 00 20 	bis	#8192,	r12	;#0x2000
    a618:	8f 4c 06 00 	mov	r12,	6(r15)	;
    a61c:	bf d0 00 20 	bis	#8192,	58(r15)	;#0x2000, 0x003a
    a620:	3a 00 
    a622:	b0 12 3e 85 	call	#34110		;#0x853e
    a626:	07 41       	mov	r1,	r7	;
    a628:	37 50 03 00 	add	#3,	r7	;
    a62c:	1c 93       	cmp	#1,	r12	;r3 As==01
    a62e:	0e 20       	jnz	$+30     	;abs 0xa64c
    a630:	0e 49       	mov	r9,	r14	;
    a632:	3e 53       	add	#-1,	r14	;r3 As==11
    a634:	0d 45       	mov	r5,	r13	;
    a636:	3d 63       	addc	#-1,	r13	;r3 As==11
    a638:	0d 93       	cmp	#0,	r13	;r3 As==00
    a63a:	08 20       	jnz	$+18     	;abs 0xa64c
    a63c:	3d 40 fe 00 	mov	#254,	r13	;#0x00fe
    a640:	0d 9e       	cmp	r14,	r13	;
    a642:	04 28       	jnc	$+10     	;abs 0xa64c
    a644:	c1 49 03 00 	mov.b	r9,	3(r1)	;
    a648:	08 4c       	mov	r12,	r8	;
    a64a:	12 3c       	jmp	$+38     	;abs 0xa670
    a64c:	0c 4a       	mov	r10,	r12	;
    a64e:	3c 50 34 00 	add	#52,	r12	;#0x0034
    a652:	81 4c 00 00 	mov	r12,	0(r1)	;
    a656:	0c 46       	mov	r6,	r12	;
    a658:	0d 47       	mov	r7,	r13	;
    a65a:	0e 49       	mov	r9,	r14	;
    a65c:	0f 45       	mov	r5,	r15	;
    a65e:	b0 12 58 ad 	call	#44376		;#0xad58
    a662:	08 4c       	mov	r12,	r8	;
    a664:	3c 93       	cmp	#-1,	r12	;r3 As==11
    a666:	04 20       	jnz	$+10     	;abs 0xa670
    a668:	ba d0 40 00 	bis	#64,	6(r10)	;#0x0040
    a66c:	06 00 
    a66e:	3d 3c       	jmp	$+124    	;abs 0xa6ea
    a670:	04 47       	mov	r7,	r4	;
    a672:	35 40 80 ac 	mov	#44160,	r5	;#0xac80
    a676:	0c 44       	mov	r4,	r12	;
    a678:	0c 87       	sub	r7,	r12	;
    a67a:	0c 98       	cmp	r8,	r12	;
    a67c:	33 2c       	jc	$+104    	;abs 0xa6e4
    a67e:	1c 4a 04 00 	mov	4(r10),	r12	;
    a682:	3c 53       	add	#-1,	r12	;r3 As==11
    a684:	8a 4c 04 00 	mov	r12,	4(r10)	;
    a688:	0c 93       	cmp	#0,	r12	;r3 As==00
    a68a:	25 34       	jge	$+76     	;abs 0xa6d6
    a68c:	1c 9a 0e 00 	cmp	14(r10),r12	;0x0000e
    a690:	15 38       	jl	$+44     	;abs 0xa6bc
    a692:	2c 4a       	mov	@r10,	r12	;
    a694:	ec 44 00 00 	mov.b	@r4,	0(r12)	;
    a698:	2c 4a       	mov	@r10,	r12	;
    a69a:	fc 90 0a 00 	cmp.b	#10,	0(r12)	;#0x000a
    a69e:	00 00 
    a6a0:	04 24       	jz	$+10     	;abs 0xa6aa
    a6a2:	1c 53       	inc	r12		;
    a6a4:	8a 4c 00 00 	mov	r12,	0(r10)	;
    a6a8:	1b 3c       	jmp	$+56     	;abs 0xa6e0
    a6aa:	0c 46       	mov	r6,	r12	;
    a6ac:	3d 40 0a 00 	mov	#10,	r13	;#0x000a
    a6b0:	0e 4a       	mov	r10,	r14	;
    a6b2:	85 12       	call	r5		;
    a6b4:	5e 43       	mov.b	#1,	r14	;r3 As==01
    a6b6:	3c 93       	cmp	#-1,	r12	;r3 As==11
    a6b8:	08 20       	jnz	$+18     	;abs 0xa6ca
    a6ba:	08 3c       	jmp	$+18     	;abs 0xa6cc
    a6bc:	0c 46       	mov	r6,	r12	;
    a6be:	6d 44       	mov.b	@r4,	r13	;
    a6c0:	0e 4a       	mov	r10,	r14	;
    a6c2:	85 12       	call	r5		;
    a6c4:	5e 43       	mov.b	#1,	r14	;r3 As==01
    a6c6:	3c 93       	cmp	#-1,	r12	;r3 As==11
    a6c8:	01 24       	jz	$+4      	;abs 0xa6cc
    a6ca:	4e 43       	clr.b	r14		;
    a6cc:	3e f0 ff 00 	and	#255,	r14	;#0x00ff
    a6d0:	0e 93       	cmp	#0,	r14	;r3 As==00
    a6d2:	06 24       	jz	$+14     	;abs 0xa6e0
    a6d4:	09 3c       	jmp	$+20     	;abs 0xa6e8
    a6d6:	2c 4a       	mov	@r10,	r12	;
    a6d8:	ec 44 00 00 	mov.b	@r4,	0(r12)	;
    a6dc:	9a 53 00 00 	inc	0(r10)		;
    a6e0:	14 53       	inc	r4		;
    a6e2:	c9 3f       	jmp	$-108    	;abs 0xa676
    a6e4:	0c 49       	mov	r9,	r12	;
    a6e6:	01 3c       	jmp	$+4      	;abs 0xa6ea
    a6e8:	3c 43       	mov	#-1,	r12	;r3 As==11
    a6ea:	21 52       	add	#4,	r1	;r2 As==10
    a6ec:	64 17       	popm	#7,	r10	;16-bit words
    a6ee:	30 41       	ret			

0000a6f0 <fputwc>:
    a6f0:	1a 15       	pushm	#2,	r10	;16-bit words
    a6f2:	17 15       	pushm	#2,	r7	;16-bit words
    a6f4:	06 4c       	mov	r12,	r6	;
    a6f6:	07 4d       	mov	r13,	r7	;
    a6f8:	0a 4e       	mov	r14,	r10	;
    a6fa:	19 42 04 1c 	mov	&0x1c04,r9	;0x1c04
    a6fe:	09 93       	cmp	#0,	r9	;r3 As==00
    a700:	06 24       	jz	$+14     	;abs 0xa70e
    a702:	89 93 0c 00 	cmp	#0,	12(r9)	;r3 As==00, 0x000c
    a706:	03 20       	jnz	$+8      	;abs 0xa70e
    a708:	0c 49       	mov	r9,	r12	;
    a70a:	b0 12 56 82 	call	#33366		;#0x8256
    a70e:	3a 90 8e 44 	cmp	#17550,	r10	;#0x448e
    a712:	03 20       	jnz	$+8      	;abs 0xa71a
    a714:	1a 49 02 00 	mov	2(r9),	r10	;
    a718:	0b 3c       	jmp	$+24     	;abs 0xa730
    a71a:	3a 90 7c 44 	cmp	#17532,	r10	;#0x447c
    a71e:	03 20       	jnz	$+8      	;abs 0xa726
    a720:	1a 49 04 00 	mov	4(r9),	r10	;
    a724:	05 3c       	jmp	$+12     	;abs 0xa730
    a726:	3a 90 6a 44 	cmp	#17514,	r10	;#0x446a
    a72a:	02 20       	jnz	$+6      	;abs 0xa730
    a72c:	1a 49 06 00 	mov	6(r9),	r10	;
    a730:	0c 49       	mov	r9,	r12	;
    a732:	0d 46       	mov	r6,	r13	;
    a734:	0e 47       	mov	r7,	r14	;
    a736:	0f 4a       	mov	r10,	r15	;
    a738:	b0 12 fe a5 	call	#42494		;#0xa5fe
    a73c:	16 17       	popm	#2,	r7	;16-bit words
    a73e:	19 17       	popm	#2,	r10	;16-bit words
    a740:	30 41       	ret			

0000a742 <_fstat_r>:
    a742:	0a 15       	pushm	#1,	r10	;16-bit words
    a744:	0a 4c       	mov	r12,	r10	;
    a746:	82 43 c0 1d 	mov	#0,	&0x1dc0	;r3 As==00
    a74a:	0c 4d       	mov	r13,	r12	;
    a74c:	0d 4e       	mov	r14,	r13	;
    a74e:	b0 12 d0 cc 	call	#52432		;#0xccd0
    a752:	3c 93       	cmp	#-1,	r12	;r3 As==11
    a754:	06 20       	jnz	$+14     	;abs 0xa762
    a756:	1d 42 c0 1d 	mov	&0x1dc0,r13	;0x1dc0
    a75a:	0d 93       	cmp	#0,	r13	;r3 As==00
    a75c:	02 24       	jz	$+6      	;abs 0xa762
    a75e:	8a 4d 00 00 	mov	r13,	0(r10)	;
    a762:	0a 17       	popm	#1,	r10	;16-bit words
    a764:	30 41       	ret			

0000a766 <__sfvwrite_r>:
    a766:	6a 15       	pushm	#7,	r10	;16-bit words
    a768:	31 80 06 00 	sub	#6,	r1	;
    a76c:	8e 93 04 00 	cmp	#0,	4(r14)	;r3 As==00
    a770:	02 20       	jnz	$+6      	;abs 0xa776
    a772:	0c 43       	clr	r12		;
    a774:	6e 3d       	jmp	$+734    	;abs 0xaa52
    a776:	81 4e 02 00 	mov	r14,	2(r1)	;
    a77a:	0a 4d       	mov	r13,	r10	;
    a77c:	04 4c       	mov	r12,	r4	;
    a77e:	fd b2 06 00 	bit.b	#8,	6(r13)	;r2 As==11
    a782:	0f 24       	jz	$+32     	;abs 0xa7a2
    a784:	8d 93 0a 00 	cmp	#0,	10(r13)	;r3 As==00, 0x000a
    a788:	0c 24       	jz	$+26     	;abs 0xa7a2
    a78a:	16 41 02 00 	mov	2(r1),	r6	;
    a78e:	27 46       	mov	@r6,	r7	;
    a790:	16 4a 06 00 	mov	6(r10),	r6	;
    a794:	09 46       	mov	r6,	r9	;
    a796:	29 f3       	and	#2,	r9	;r3 As==10
    a798:	09 93       	cmp	#0,	r9	;r3 As==00
    a79a:	2d 24       	jz	$+92     	;abs 0xa7f6
    a79c:	08 43       	clr	r8		;
    a79e:	09 48       	mov	r8,	r9	;
    a7a0:	23 3c       	jmp	$+72     	;abs 0xa7e8
    a7a2:	0c 44       	mov	r4,	r12	;
    a7a4:	0d 4a       	mov	r10,	r13	;
    a7a6:	b0 12 b4 69 	call	#27060		;#0x69b4
    a7aa:	0c 93       	cmp	#0,	r12	;r3 As==00
    a7ac:	ee 27       	jz	$-34     	;abs 0xa78a
    a7ae:	3c 43       	mov	#-1,	r12	;r3 As==11
    a7b0:	50 3d       	jmp	$+674    	;abs 0xaa52
    a7b2:	1d 4a 12 00 	mov	18(r10),r13	;0x00012
    a7b6:	0f 49       	mov	r9,	r15	;
    a7b8:	3c 40 00 7c 	mov	#31744,	r12	;#0x7c00
    a7bc:	0c 99       	cmp	r9,	r12	;
    a7be:	01 2c       	jc	$+4      	;abs 0xa7c2
    a7c0:	0f 4c       	mov	r12,	r15	;
    a7c2:	0c 44       	mov	r4,	r12	;
    a7c4:	0e 48       	mov	r8,	r14	;
    a7c6:	16 4a 16 00 	mov	22(r10),r6	;0x00016
    a7ca:	86 12       	call	r6		;
    a7cc:	0d 43       	clr	r13		;
    a7ce:	0d 9c       	cmp	r12,	r13	;
    a7d0:	3c 35       	jge	$+634    	;abs 0xaa4a
    a7d2:	08 5c       	add	r12,	r8	;
    a7d4:	09 8c       	sub	r12,	r9	;
    a7d6:	16 41 02 00 	mov	2(r1),	r6	;
    a7da:	1d 46 04 00 	mov	4(r6),	r13	;
    a7de:	0d 8c       	sub	r12,	r13	;
    a7e0:	86 4d 04 00 	mov	r13,	4(r6)	;
    a7e4:	0d 93       	cmp	#0,	r13	;r3 As==00
    a7e6:	c5 27       	jz	$-116    	;abs 0xa772
    a7e8:	09 93       	cmp	#0,	r9	;r3 As==00
    a7ea:	e3 23       	jnz	$-56     	;abs 0xa7b2
    a7ec:	28 47       	mov	@r7,	r8	;
    a7ee:	19 47 02 00 	mov	2(r7),	r9	;
    a7f2:	27 52       	add	#4,	r7	;r2 As==10
    a7f4:	f9 3f       	jmp	$-12     	;abs 0xa7e8
    a7f6:	16 f3       	and	#1,	r6	;r3 As==01
    a7f8:	06 93       	cmp	#0,	r6	;r3 As==00
    a7fa:	05 24       	jz	$+12     	;abs 0xa806
    a7fc:	81 49 04 00 	mov	r9,	4(r1)	;
    a800:	05 49       	mov	r9,	r5	;
    a802:	06 49       	mov	r9,	r6	;
    a804:	e2 3c       	jmp	$+454    	;abs 0xa9ca
    a806:	09 46       	mov	r6,	r9	;
    a808:	09 93       	cmp	#0,	r9	;r3 As==00
    a80a:	05 20       	jnz	$+12     	;abs 0xa816
    a80c:	26 47       	mov	@r7,	r6	;
    a80e:	19 47 02 00 	mov	2(r7),	r9	;
    a812:	27 52       	add	#4,	r7	;r2 As==10
    a814:	f9 3f       	jmp	$-12     	;abs 0xa808
    a816:	1f 4a 04 00 	mov	4(r10),	r15	;
    a81a:	1c 4a 06 00 	mov	6(r10),	r12	;
    a81e:	3c b0 00 02 	bit	#512,	r12	;#0x0200
    a822:	63 24       	jz	$+200    	;abs 0xa8ea
    a824:	09 9f       	cmp	r15,	r9	;
    a826:	52 28       	jnc	$+166    	;abs 0xa8cc
    a828:	3c b0 80 04 	bit	#1152,	r12	;#0x0480
    a82c:	4d 24       	jz	$+156    	;abs 0xa8c8
    a82e:	1d 4a 0a 00 	mov	10(r10),r13	;0x0000a
    a832:	25 4a       	mov	@r10,	r5	;
    a834:	05 8d       	sub	r13,	r5	;
    a836:	18 4a 0c 00 	mov	12(r10),r8	;0x0000c
    a83a:	0e 48       	mov	r8,	r14	;
    a83c:	0e 58       	add	r8,	r14	;
    a83e:	08 5e       	add	r14,	r8	;
    a840:	0e 48       	mov	r8,	r14	;
    a842:	5e 03       	rrum	#1,	r14	;
    a844:	4d 18 0e 11 	rpt #14 { rrax.w	r14		;
    a848:	08 5e       	add	r14,	r8	;
    a84a:	08 11       	rra	r8		;
    a84c:	0e 45       	mov	r5,	r14	;
    a84e:	1e 53       	inc	r14		;
    a850:	0e 59       	add	r9,	r14	;
    a852:	08 9e       	cmp	r14,	r8	;
    a854:	01 2c       	jc	$+4      	;abs 0xa858
    a856:	08 4e       	mov	r14,	r8	;
    a858:	3c b0 00 04 	bit	#1024,	r12	;#0x0400
    a85c:	17 24       	jz	$+48     	;abs 0xa88c
    a85e:	0c 44       	mov	r4,	r12	;
    a860:	0d 48       	mov	r8,	r13	;
    a862:	b0 12 70 97 	call	#38768		;#0x9770
    a866:	0c 93       	cmp	#0,	r12	;r3 As==00
    a868:	20 24       	jz	$+66     	;abs 0xa8aa
    a86a:	1d 4a 0a 00 	mov	10(r10),r13	;0x0000a
    a86e:	0e 45       	mov	r5,	r14	;
    a870:	81 4c 00 00 	mov	r12,	0(r1)	;
    a874:	b0 12 98 86 	call	#34456		;#0x8698
    a878:	1c 4a 06 00 	mov	6(r10),	r12	;
    a87c:	3c f0 7f fb 	and	#64383,	r12	;#0xfb7f
    a880:	3c d0 80 00 	bis	#128,	r12	;#0x0080
    a884:	8a 4c 06 00 	mov	r12,	6(r10)	;
    a888:	2f 41       	mov	@r1,	r15	;
    a88a:	13 3c       	jmp	$+40     	;abs 0xa8b2
    a88c:	0c 44       	mov	r4,	r12	;
    a88e:	0e 48       	mov	r8,	r14	;
    a890:	b0 12 ea aa 	call	#43754		;#0xaaea
    a894:	0f 4c       	mov	r12,	r15	;
    a896:	0c 93       	cmp	#0,	r12	;r3 As==00
    a898:	0c 20       	jnz	$+26     	;abs 0xa8b2
    a89a:	0c 44       	mov	r4,	r12	;
    a89c:	1d 4a 0a 00 	mov	10(r10),r13	;0x0000a
    a8a0:	b0 12 86 96 	call	#38534		;#0x9686
    a8a4:	ba f0 7f ff 	and	#65407,	6(r10)	;#0xff7f
    a8a8:	06 00 
    a8aa:	b4 40 0c 00 	mov	#12,	0(r4)	;#0x000c
    a8ae:	00 00 
    a8b0:	cc 3c       	jmp	$+410    	;abs 0xaa4a
    a8b2:	8a 4f 0a 00 	mov	r15,	10(r10)	; 0x000a
    a8b6:	0f 55       	add	r5,	r15	;
    a8b8:	8a 4f 00 00 	mov	r15,	0(r10)	;
    a8bc:	8a 48 0c 00 	mov	r8,	12(r10)	; 0x000c
    a8c0:	0f 49       	mov	r9,	r15	;
    a8c2:	08 85       	sub	r5,	r8	;
    a8c4:	8a 48 04 00 	mov	r8,	4(r10)	;
    a8c8:	09 9f       	cmp	r15,	r9	;
    a8ca:	01 2c       	jc	$+4      	;abs 0xa8ce
    a8cc:	0f 49       	mov	r9,	r15	;
    a8ce:	2c 4a       	mov	@r10,	r12	;
    a8d0:	0d 46       	mov	r6,	r13	;
    a8d2:	0e 4f       	mov	r15,	r14	;
    a8d4:	81 4f 00 00 	mov	r15,	0(r1)	;
    a8d8:	b0 12 aa aa 	call	#43690		;#0xaaaa
    a8dc:	2f 41       	mov	@r1,	r15	;
    a8de:	8a 8f 04 00 	sub	r15,	4(r10)	;
    a8e2:	8a 5f 00 00 	add	r15,	0(r10)	;
    a8e6:	08 49       	mov	r9,	r8	;
    a8e8:	38 3c       	jmp	$+114    	;abs 0xa95a
    a8ea:	2c 4a       	mov	@r10,	r12	;
    a8ec:	8a 9c 0a 00 	cmp	r12,	10(r10)	; 0x000a
    a8f0:	04 28       	jnc	$+10     	;abs 0xa8fa
    a8f2:	18 4a 0c 00 	mov	12(r10),r8	;0x0000c
    a8f6:	09 98       	cmp	r8,	r9	;
    a8f8:	18 2c       	jc	$+50     	;abs 0xa92a
    a8fa:	08 49       	mov	r9,	r8	;
    a8fc:	0f 99       	cmp	r9,	r15	;
    a8fe:	01 2c       	jc	$+4      	;abs 0xa902
    a900:	08 4f       	mov	r15,	r8	;
    a902:	0d 46       	mov	r6,	r13	;
    a904:	0e 48       	mov	r8,	r14	;
    a906:	b0 12 aa aa 	call	#43690		;#0xaaaa
    a90a:	1c 4a 04 00 	mov	4(r10),	r12	;
    a90e:	0c 88       	sub	r8,	r12	;
    a910:	8a 4c 04 00 	mov	r12,	4(r10)	;
    a914:	8a 58 00 00 	add	r8,	0(r10)	;
    a918:	0c 93       	cmp	#0,	r12	;r3 As==00
    a91a:	1f 20       	jnz	$+64     	;abs 0xa95a
    a91c:	0c 44       	mov	r4,	r12	;
    a91e:	0d 4a       	mov	r10,	r13	;
    a920:	b0 12 7e 81 	call	#33150		;#0x817e
    a924:	0c 93       	cmp	#0,	r12	;r3 As==00
    a926:	19 24       	jz	$+52     	;abs 0xa95a
    a928:	90 3c       	jmp	$+290    	;abs 0xaa4a
    a92a:	0c 49       	mov	r9,	r12	;
    a92c:	3d 40 ff 7f 	mov	#32767,	r13	;#0x7fff
    a930:	0d 99       	cmp	r9,	r13	;
    a932:	01 2c       	jc	$+4      	;abs 0xa936
    a934:	0c 4d       	mov	r13,	r12	;
    a936:	0d 48       	mov	r8,	r13	;
    a938:	b0 12 a0 c0 	call	#49312		;#0xc0a0
    a93c:	0d 48       	mov	r8,	r13	;
    a93e:	b0 12 24 c4 	call	#50212		;#0xc424
    a942:	0f 4c       	mov	r12,	r15	;
    a944:	0c 44       	mov	r4,	r12	;
    a946:	1d 4a 12 00 	mov	18(r10),r13	;0x00012
    a94a:	0e 46       	mov	r6,	r14	;
    a94c:	18 4a 16 00 	mov	22(r10),r8	;0x00016
    a950:	88 12       	call	r8		;
    a952:	08 4c       	mov	r12,	r8	;
    a954:	0c 43       	clr	r12		;
    a956:	0c 98       	cmp	r8,	r12	;
    a958:	78 34       	jge	$+242    	;abs 0xaa4a
    a95a:	06 58       	add	r8,	r6	;
    a95c:	09 88       	sub	r8,	r9	;
    a95e:	1d 41 02 00 	mov	2(r1),	r13	;
    a962:	1c 4d 04 00 	mov	4(r13),	r12	;
    a966:	0c 88       	sub	r8,	r12	;
    a968:	8d 4c 04 00 	mov	r12,	4(r13)	;
    a96c:	0c 93       	cmp	#0,	r12	;r3 As==00
    a96e:	4c 23       	jnz	$-358    	;abs 0xa808
    a970:	00 3f       	jmp	$-510    	;abs 0xa772
    a972:	81 93 04 00 	cmp	#0,	4(r1)	;r3 As==00
    a976:	32 24       	jz	$+102    	;abs 0xa9dc
    a978:	0b 49       	mov	r9,	r11	;
    a97a:	06 99       	cmp	r9,	r6	;
    a97c:	01 2c       	jc	$+4      	;abs 0xa980
    a97e:	0b 46       	mov	r6,	r11	;
    a980:	18 4a 04 00 	mov	4(r10),	r8	;
    a984:	1f 4a 0c 00 	mov	12(r10),r15	;0x0000c
    a988:	2c 4a       	mov	@r10,	r12	;
    a98a:	8a 9c 0a 00 	cmp	r12,	10(r10)	; 0x000a
    a98e:	39 2c       	jc	$+116    	;abs 0xaa02
    a990:	08 5f       	add	r15,	r8	;
    a992:	08 9b       	cmp	r11,	r8	;
    a994:	36 34       	jge	$+110    	;abs 0xaa02
    a996:	0d 45       	mov	r5,	r13	;
    a998:	0e 48       	mov	r8,	r14	;
    a99a:	b0 12 aa aa 	call	#43690		;#0xaaaa
    a99e:	8a 58 00 00 	add	r8,	0(r10)	;
    a9a2:	0c 44       	mov	r4,	r12	;
    a9a4:	0d 4a       	mov	r10,	r13	;
    a9a6:	b0 12 7e 81 	call	#33150		;#0x817e
    a9aa:	0c 93       	cmp	#0,	r12	;r3 As==00
    a9ac:	4e 20       	jnz	$+158    	;abs 0xaa4a
    a9ae:	09 88       	sub	r8,	r9	;
    a9b0:	09 93       	cmp	#0,	r9	;r3 As==00
    a9b2:	42 24       	jz	$+134    	;abs 0xaa38
    a9b4:	05 58       	add	r8,	r5	;
    a9b6:	06 88       	sub	r8,	r6	;
    a9b8:	1d 41 02 00 	mov	2(r1),	r13	;
    a9bc:	1c 4d 04 00 	mov	4(r13),	r12	;
    a9c0:	0c 88       	sub	r8,	r12	;
    a9c2:	8d 4c 04 00 	mov	r12,	4(r13)	;
    a9c6:	0c 93       	cmp	#0,	r12	;r3 As==00
    a9c8:	d4 26       	jz	$-598    	;abs 0xa772
    a9ca:	06 93       	cmp	#0,	r6	;r3 As==00
    a9cc:	d2 23       	jnz	$-90     	;abs 0xa972
    a9ce:	25 47       	mov	@r7,	r5	;
    a9d0:	16 47 02 00 	mov	2(r7),	r6	;
    a9d4:	27 52       	add	#4,	r7	;r2 As==10
    a9d6:	81 43 04 00 	mov	#0,	4(r1)	;r3 As==00
    a9da:	f7 3f       	jmp	$-16     	;abs 0xa9ca
    a9dc:	0c 45       	mov	r5,	r12	;
    a9de:	3d 40 0a 00 	mov	#10,	r13	;#0x000a
    a9e2:	0e 46       	mov	r6,	r14	;
    a9e4:	b0 12 80 86 	call	#34432		;#0x8680
    a9e8:	0c 93       	cmp	#0,	r12	;r3 As==00
    a9ea:	06 24       	jz	$+14     	;abs 0xa9f8
    a9ec:	1c 53       	inc	r12		;
    a9ee:	09 4c       	mov	r12,	r9	;
    a9f0:	09 85       	sub	r5,	r9	;
    a9f2:	91 43 04 00 	mov	#1,	4(r1)	;r3 As==01
    a9f6:	c0 3f       	jmp	$-126    	;abs 0xa978
    a9f8:	09 46       	mov	r6,	r9	;
    a9fa:	19 53       	inc	r9		;
    a9fc:	91 43 04 00 	mov	#1,	4(r1)	;r3 As==01
    aa00:	bb 3f       	jmp	$-136    	;abs 0xa978
    aa02:	0b 9f       	cmp	r15,	r11	;
    aa04:	0c 38       	jl	$+26     	;abs 0xaa1e
    aa06:	0c 44       	mov	r4,	r12	;
    aa08:	1d 4a 12 00 	mov	18(r10),r13	;0x00012
    aa0c:	0e 45       	mov	r5,	r14	;
    aa0e:	18 4a 16 00 	mov	22(r10),r8	;0x00016
    aa12:	88 12       	call	r8		;
    aa14:	08 4c       	mov	r12,	r8	;
    aa16:	0c 43       	clr	r12		;
    aa18:	0c 98       	cmp	r8,	r12	;
    aa1a:	c9 3b       	jl	$-108    	;abs 0xa9ae
    aa1c:	16 3c       	jmp	$+46     	;abs 0xaa4a
    aa1e:	0d 45       	mov	r5,	r13	;
    aa20:	0e 4b       	mov	r11,	r14	;
    aa22:	81 4b 00 00 	mov	r11,	0(r1)	;
    aa26:	b0 12 aa aa 	call	#43690		;#0xaaaa
    aa2a:	2b 41       	mov	@r1,	r11	;
    aa2c:	8a 8b 04 00 	sub	r11,	4(r10)	;
    aa30:	8a 5b 00 00 	add	r11,	0(r10)	;
    aa34:	08 4b       	mov	r11,	r8	;
    aa36:	bb 3f       	jmp	$-136    	;abs 0xa9ae
    aa38:	0c 44       	mov	r4,	r12	;
    aa3a:	0d 4a       	mov	r10,	r13	;
    aa3c:	b0 12 7e 81 	call	#33150		;#0x817e
    aa40:	0c 93       	cmp	#0,	r12	;r3 As==00
    aa42:	03 20       	jnz	$+8      	;abs 0xaa4a
    aa44:	81 49 04 00 	mov	r9,	4(r1)	;
    aa48:	b5 3f       	jmp	$-148    	;abs 0xa9b4
    aa4a:	ba d0 40 00 	bis	#64,	6(r10)	;#0x0040
    aa4e:	06 00 
    aa50:	3c 43       	mov	#-1,	r12	;r3 As==11
    aa52:	31 50 06 00 	add	#6,	r1	;
    aa56:	64 17       	popm	#7,	r10	;16-bit words
    aa58:	30 41       	ret			

0000aa5a <_isatty_r>:
    aa5a:	0a 15       	pushm	#1,	r10	;16-bit words
    aa5c:	0a 4c       	mov	r12,	r10	;
    aa5e:	82 43 c0 1d 	mov	#0,	&0x1dc0	;r3 As==00
    aa62:	0c 4d       	mov	r13,	r12	;
    aa64:	b0 12 fa cc 	call	#52474		;#0xccfa
    aa68:	3c 93       	cmp	#-1,	r12	;r3 As==11
    aa6a:	06 20       	jnz	$+14     	;abs 0xaa78
    aa6c:	1d 42 c0 1d 	mov	&0x1dc0,r13	;0x1dc0
    aa70:	0d 93       	cmp	#0,	r13	;r3 As==00
    aa72:	02 24       	jz	$+6      	;abs 0xaa78
    aa74:	8a 4d 00 00 	mov	r13,	0(r10)	;
    aa78:	0a 17       	popm	#1,	r10	;16-bit words
    aa7a:	30 41       	ret			

0000aa7c <_lseek_r>:
    aa7c:	0a 15       	pushm	#1,	r10	;16-bit words
    aa7e:	0a 4c       	mov	r12,	r10	;
    aa80:	82 43 c0 1d 	mov	#0,	&0x1dc0	;r3 As==00
    aa84:	0c 4d       	mov	r13,	r12	;
    aa86:	0d 4e       	mov	r14,	r13	;
    aa88:	0e 4f       	mov	r15,	r14	;
    aa8a:	1f 41 04 00 	mov	4(r1),	r15	;
    aa8e:	b0 12 de cc 	call	#52446		;#0xccde
    aa92:	3c 93       	cmp	#-1,	r12	;r3 As==11
    aa94:	08 20       	jnz	$+18     	;abs 0xaaa6
    aa96:	3d 93       	cmp	#-1,	r13	;r3 As==11
    aa98:	06 20       	jnz	$+14     	;abs 0xaaa6
    aa9a:	1e 42 c0 1d 	mov	&0x1dc0,r14	;0x1dc0
    aa9e:	0e 93       	cmp	#0,	r14	;r3 As==00
    aaa0:	02 24       	jz	$+6      	;abs 0xaaa6
    aaa2:	8a 4e 00 00 	mov	r14,	0(r10)	;
    aaa6:	0a 17       	popm	#1,	r10	;16-bit words
    aaa8:	30 41       	ret			

0000aaaa <memmove>:
    aaaa:	0a 15       	pushm	#1,	r10	;16-bit words
    aaac:	0d 9c       	cmp	r12,	r13	;
    aaae:	10 2c       	jc	$+34     	;abs 0xaad0
    aab0:	0b 4d       	mov	r13,	r11	;
    aab2:	0b 5e       	add	r14,	r11	;
    aab4:	0c 9b       	cmp	r11,	r12	;
    aab6:	0c 2c       	jc	$+26     	;abs 0xaad0
    aab8:	0d 4e       	mov	r14,	r13	;
    aaba:	3d 53       	add	#-1,	r13	;r3 As==11
    aabc:	3d 93       	cmp	#-1,	r13	;r3 As==11
    aabe:	13 24       	jz	$+40     	;abs 0xaae6
    aac0:	0f 4d       	mov	r13,	r15	;
    aac2:	0f 8e       	sub	r14,	r15	;
    aac4:	0f 5b       	add	r11,	r15	;
    aac6:	0a 4c       	mov	r12,	r10	;
    aac8:	0a 5d       	add	r13,	r10	;
    aaca:	ea 4f 00 00 	mov.b	@r15,	0(r10)	;
    aace:	f5 3f       	jmp	$-20     	;abs 0xaaba
    aad0:	0f 43       	clr	r15		;
    aad2:	0f 9e       	cmp	r14,	r15	;
    aad4:	08 24       	jz	$+18     	;abs 0xaae6
    aad6:	0a 4d       	mov	r13,	r10	;
    aad8:	0a 5f       	add	r15,	r10	;
    aada:	0b 4c       	mov	r12,	r11	;
    aadc:	0b 5f       	add	r15,	r11	;
    aade:	eb 4a 00 00 	mov.b	@r10,	0(r11)	;
    aae2:	1f 53       	inc	r15		;
    aae4:	f6 3f       	jmp	$-18     	;abs 0xaad2
    aae6:	0a 17       	popm	#1,	r10	;16-bit words
    aae8:	30 41       	ret			

0000aaea <_realloc_r>:
    aaea:	3a 15       	pushm	#4,	r10	;16-bit words
    aaec:	07 4c       	mov	r12,	r7	;
    aaee:	08 4d       	mov	r13,	r8	;
    aaf0:	09 4e       	mov	r14,	r9	;
    aaf2:	0d 93       	cmp	#0,	r13	;r3 As==00
    aaf4:	04 20       	jnz	$+10     	;abs 0xaafe
    aaf6:	0d 4e       	mov	r14,	r13	;
    aaf8:	b0 12 70 97 	call	#38768		;#0x9770
    aafc:	1c 3c       	jmp	$+58     	;abs 0xab36
    aafe:	0e 93       	cmp	#0,	r14	;r3 As==00
    ab00:	04 20       	jnz	$+10     	;abs 0xab0a
    ab02:	b0 12 86 96 	call	#38534		;#0x9686
    ab06:	0c 49       	mov	r9,	r12	;
    ab08:	16 3c       	jmp	$+46     	;abs 0xab36
    ab0a:	b0 12 48 ae 	call	#44616		;#0xae48
    ab0e:	0c 99       	cmp	r9,	r12	;
    ab10:	11 2c       	jc	$+36     	;abs 0xab34
    ab12:	0c 47       	mov	r7,	r12	;
    ab14:	0d 49       	mov	r9,	r13	;
    ab16:	b0 12 70 97 	call	#38768		;#0x9770
    ab1a:	0a 4c       	mov	r12,	r10	;
    ab1c:	0c 93       	cmp	#0,	r12	;r3 As==00
    ab1e:	0b 24       	jz	$+24     	;abs 0xab36
    ab20:	0d 48       	mov	r8,	r13	;
    ab22:	0e 49       	mov	r9,	r14	;
    ab24:	b0 12 98 86 	call	#34456		;#0x8698
    ab28:	0c 47       	mov	r7,	r12	;
    ab2a:	0d 48       	mov	r8,	r13	;
    ab2c:	b0 12 86 96 	call	#38534		;#0x9686
    ab30:	0c 4a       	mov	r10,	r12	;
    ab32:	01 3c       	jmp	$+4      	;abs 0xab36
    ab34:	0c 48       	mov	r8,	r12	;
    ab36:	37 17       	popm	#4,	r10	;16-bit words
    ab38:	30 41       	ret			

0000ab3a <_read_r>:
    ab3a:	0a 15       	pushm	#1,	r10	;16-bit words
    ab3c:	0a 4c       	mov	r12,	r10	;
    ab3e:	82 43 c0 1d 	mov	#0,	&0x1dc0	;r3 As==00
    ab42:	0c 4d       	mov	r13,	r12	;
    ab44:	0d 4e       	mov	r14,	r13	;
    ab46:	0e 4f       	mov	r15,	r14	;
    ab48:	b0 12 c2 cc 	call	#52418		;#0xccc2
    ab4c:	3c 93       	cmp	#-1,	r12	;r3 As==11
    ab4e:	06 20       	jnz	$+14     	;abs 0xab5c
    ab50:	1d 42 c0 1d 	mov	&0x1dc0,r13	;0x1dc0
    ab54:	0d 93       	cmp	#0,	r13	;r3 As==00
    ab56:	02 24       	jz	$+6      	;abs 0xab5c
    ab58:	8a 4d 00 00 	mov	r13,	0(r10)	;
    ab5c:	0a 17       	popm	#1,	r10	;16-bit words
    ab5e:	30 41       	ret			

0000ab60 <cleanup_glue>:
    ab60:	1a 15       	pushm	#2,	r10	;16-bit words
    ab62:	09 4c       	mov	r12,	r9	;
    ab64:	0a 4d       	mov	r13,	r10	;
    ab66:	2d 4d       	mov	@r13,	r13	;
    ab68:	0d 93       	cmp	#0,	r13	;r3 As==00
    ab6a:	02 24       	jz	$+6      	;abs 0xab70
    ab6c:	b0 12 60 ab 	call	#43872		;#0xab60
    ab70:	0c 49       	mov	r9,	r12	;
    ab72:	0d 4a       	mov	r10,	r13	;
    ab74:	b0 12 86 96 	call	#38534		;#0x9686
    ab78:	19 17       	popm	#2,	r10	;16-bit words
    ab7a:	30 41       	ret			

0000ab7c <_reclaim_reent>:
    ab7c:	3a 15       	pushm	#4,	r10	;16-bit words
    ab7e:	1c 92 04 1c 	cmp	&0x1c04,r12	;0x1c04
    ab82:	7c 24       	jz	$+250    	;abs 0xac7c
    ab84:	0a 4c       	mov	r12,	r10	;
    ab86:	1c 4c 12 00 	mov	18(r12),r12	;0x00012
    ab8a:	0c 93       	cmp	#0,	r12	;r3 As==00
    ab8c:	26 24       	jz	$+78     	;abs 0xabda
    ab8e:	8c 93 06 00 	cmp	#0,	6(r12)	;r3 As==00
    ab92:	1b 24       	jz	$+56     	;abs 0xabca
    ab94:	09 43       	clr	r9		;
    ab96:	38 40 86 96 	mov	#38534,	r8	;#0x9686
    ab9a:	1c 4a 12 00 	mov	18(r10),r12	;0x00012
    ab9e:	1c 4c 06 00 	mov	6(r12),	r12	;
    aba2:	0c 59       	add	r9,	r12	;
    aba4:	2d 4c       	mov	@r12,	r13	;
    aba6:	0d 93       	cmp	#0,	r13	;r3 As==00
    aba8:	05 24       	jz	$+12     	;abs 0xabb4
    abaa:	27 4d       	mov	@r13,	r7	;
    abac:	0c 4a       	mov	r10,	r12	;
    abae:	88 12       	call	r8		;
    abb0:	0d 47       	mov	r7,	r13	;
    abb2:	f9 3f       	jmp	$-12     	;abs 0xaba6
    abb4:	29 53       	incd	r9		;
    abb6:	39 90 20 00 	cmp	#32,	r9	;#0x0020
    abba:	ef 23       	jnz	$-32     	;abs 0xab9a
    abbc:	1d 4a 12 00 	mov	18(r10),r13	;0x00012
    abc0:	0c 4a       	mov	r10,	r12	;
    abc2:	1d 4d 06 00 	mov	6(r13),	r13	;
    abc6:	b0 12 86 96 	call	#38534		;#0x9686
    abca:	1c 4a 12 00 	mov	18(r10),r12	;0x00012
    abce:	2d 4c       	mov	@r12,	r13	;
    abd0:	0d 93       	cmp	#0,	r13	;r3 As==00
    abd2:	03 24       	jz	$+8      	;abs 0xabda
    abd4:	0c 4a       	mov	r10,	r12	;
    abd6:	b0 12 86 96 	call	#38534		;#0x9686
    abda:	1d 4a 0a 00 	mov	10(r10),r13	;0x0000a
    abde:	0d 93       	cmp	#0,	r13	;r3 As==00
    abe0:	03 24       	jz	$+8      	;abs 0xabe8
    abe2:	0c 4a       	mov	r10,	r12	;
    abe4:	b0 12 86 96 	call	#38534		;#0x9686
    abe8:	1d 4a 12 00 	mov	18(r10),r13	;0x00012
    abec:	0d 93       	cmp	#0,	r13	;r3 As==00
    abee:	03 24       	jz	$+8      	;abs 0xabf6
    abf0:	0c 4a       	mov	r10,	r12	;
    abf2:	b0 12 86 96 	call	#38534		;#0x9686
    abf6:	1d 4a 1c 00 	mov	28(r10),r13	;0x0001c
    abfa:	0d 93       	cmp	#0,	r13	;r3 As==00
    abfc:	03 24       	jz	$+8      	;abs 0xac04
    abfe:	0c 4a       	mov	r10,	r12	;
    ac00:	b0 12 86 96 	call	#38534		;#0x9686
    ac04:	1d 4a 1e 00 	mov	30(r10),r13	;0x0001e
    ac08:	0d 93       	cmp	#0,	r13	;r3 As==00
    ac0a:	03 24       	jz	$+8      	;abs 0xac12
    ac0c:	0c 4a       	mov	r10,	r12	;
    ac0e:	b0 12 86 96 	call	#38534		;#0x9686
    ac12:	1d 4a 20 00 	mov	32(r10),r13	;0x00020
    ac16:	0d 93       	cmp	#0,	r13	;r3 As==00
    ac18:	03 24       	jz	$+8      	;abs 0xac20
    ac1a:	0c 4a       	mov	r10,	r12	;
    ac1c:	b0 12 86 96 	call	#38534		;#0x9686
    ac20:	1d 4a 76 00 	mov	118(r10),r13	;0x00076
    ac24:	0d 93       	cmp	#0,	r13	;r3 As==00
    ac26:	03 24       	jz	$+8      	;abs 0xac2e
    ac28:	0c 4a       	mov	r10,	r12	;
    ac2a:	b0 12 86 96 	call	#38534		;#0x9686
    ac2e:	1d 4a 74 00 	mov	116(r10),r13	;0x00074
    ac32:	0d 93       	cmp	#0,	r13	;r3 As==00
    ac34:	03 24       	jz	$+8      	;abs 0xac3c
    ac36:	0c 4a       	mov	r10,	r12	;
    ac38:	b0 12 86 96 	call	#38534		;#0x9686
    ac3c:	1c 4a 24 00 	mov	36(r10),r12	;0x00024
    ac40:	0c 93       	cmp	#0,	r12	;r3 As==00
    ac42:	07 24       	jz	$+16     	;abs 0xac52
    ac44:	1d 4c 44 00 	mov	68(r12),r13	;0x00044
    ac48:	0d 93       	cmp	#0,	r13	;r3 As==00
    ac4a:	03 24       	jz	$+8      	;abs 0xac52
    ac4c:	0c 4a       	mov	r10,	r12	;
    ac4e:	b0 12 86 96 	call	#38534		;#0x9686
    ac52:	1d 4a 1a 00 	mov	26(r10),r13	;0x0001a
    ac56:	0d 93       	cmp	#0,	r13	;r3 As==00
    ac58:	03 24       	jz	$+8      	;abs 0xac60
    ac5a:	0c 4a       	mov	r10,	r12	;
    ac5c:	b0 12 86 96 	call	#38534		;#0x9686
    ac60:	8a 93 0c 00 	cmp	#0,	12(r10)	;r3 As==00, 0x000c
    ac64:	0b 24       	jz	$+24     	;abs 0xac7c
    ac66:	0c 4a       	mov	r10,	r12	;
    ac68:	1d 4a 14 00 	mov	20(r10),r13	;0x00014
    ac6c:	8d 12       	call	r13		;
    ac6e:	1d 4a 6c 00 	mov	108(r10),r13	;0x0006c
    ac72:	0d 93       	cmp	#0,	r13	;r3 As==00
    ac74:	03 24       	jz	$+8      	;abs 0xac7c
    ac76:	0c 4a       	mov	r10,	r12	;
    ac78:	b0 12 60 ab 	call	#43872		;#0xab60
    ac7c:	37 17       	popm	#4,	r10	;16-bit words
    ac7e:	30 41       	ret			

0000ac80 <__swbuf_r>:
    ac80:	2a 15       	pushm	#3,	r10	;16-bit words
    ac82:	08 4c       	mov	r12,	r8	;
    ac84:	09 4d       	mov	r13,	r9	;
    ac86:	0a 4e       	mov	r14,	r10	;
    ac88:	0c 93       	cmp	#0,	r12	;r3 As==00
    ac8a:	05 24       	jz	$+12     	;abs 0xac96
    ac8c:	8c 93 0c 00 	cmp	#0,	12(r12)	;r3 As==00, 0x000c
    ac90:	02 20       	jnz	$+6      	;abs 0xac96
    ac92:	b0 12 56 82 	call	#33366		;#0x8256
    ac96:	3a 90 8e 44 	cmp	#17550,	r10	;#0x448e
    ac9a:	03 20       	jnz	$+8      	;abs 0xaca2
    ac9c:	1a 48 02 00 	mov	2(r8),	r10	;
    aca0:	0b 3c       	jmp	$+24     	;abs 0xacb8
    aca2:	3a 90 7c 44 	cmp	#17532,	r10	;#0x447c
    aca6:	03 20       	jnz	$+8      	;abs 0xacae
    aca8:	1a 48 04 00 	mov	4(r8),	r10	;
    acac:	05 3c       	jmp	$+12     	;abs 0xacb8
    acae:	3a 90 6a 44 	cmp	#17514,	r10	;#0x446a
    acb2:	02 20       	jnz	$+6      	;abs 0xacb8
    acb4:	1a 48 06 00 	mov	6(r8),	r10	;
    acb8:	9a 4a 0e 00 	mov	14(r10),4(r10)	;0x0000e
    acbc:	04 00 
    acbe:	fa b2 06 00 	bit.b	#8,	6(r10)	;r2 As==11
    acc2:	12 24       	jz	$+38     	;abs 0xace8
    acc4:	8a 93 0a 00 	cmp	#0,	10(r10)	;r3 As==00, 0x000a
    acc8:	0f 24       	jz	$+32     	;abs 0xace8
    acca:	39 f0 ff 00 	and	#255,	r9	;#0x00ff
    acce:	1c 4a 06 00 	mov	6(r10),	r12	;
    acd2:	3c b0 00 20 	bit	#8192,	r12	;#0x2000
    acd6:	10 20       	jnz	$+34     	;abs 0xacf8
    acd8:	3c d0 00 20 	bis	#8192,	r12	;#0x2000
    acdc:	8a 4c 06 00 	mov	r12,	6(r10)	;
    ace0:	ba f0 ff df 	and	#57343,	58(r10)	;#0xdfff, 0x003a
    ace4:	3a 00 
    ace6:	08 3c       	jmp	$+18     	;abs 0xacf8
    ace8:	0c 48       	mov	r8,	r12	;
    acea:	0d 4a       	mov	r10,	r13	;
    acec:	b0 12 b4 69 	call	#27060		;#0x69b4
    acf0:	0c 93       	cmp	#0,	r12	;r3 As==00
    acf2:	eb 27       	jz	$-40     	;abs 0xacca
    acf4:	3c 43       	mov	#-1,	r12	;r3 As==11
    acf6:	26 3c       	jmp	$+78     	;abs 0xad44
    acf8:	2c 4a       	mov	@r10,	r12	;
    acfa:	1c 8a 0a 00 	sub	10(r10),r12	;0x0000a
    acfe:	1c 9a 0c 00 	cmp	12(r10),r12	;0x0000c
    ad02:	06 38       	jl	$+14     	;abs 0xad10
    ad04:	0c 48       	mov	r8,	r12	;
    ad06:	0d 4a       	mov	r10,	r13	;
    ad08:	b0 12 7e 81 	call	#33150		;#0x817e
    ad0c:	0c 93       	cmp	#0,	r12	;r3 As==00
    ad0e:	f2 23       	jnz	$-26     	;abs 0xacf4
    ad10:	ba 53 04 00 	add	#-1,	4(r10)	;r3 As==11
    ad14:	2d 4a       	mov	@r10,	r13	;
    ad16:	0e 4d       	mov	r13,	r14	;
    ad18:	1e 53       	inc	r14		;
    ad1a:	8a 4e 00 00 	mov	r14,	0(r10)	;
    ad1e:	cd 49 00 00 	mov.b	r9,	0(r13)	;
    ad22:	1c 53       	inc	r12		;
    ad24:	1c 9a 0c 00 	cmp	12(r10),r12	;0x0000c
    ad28:	06 24       	jz	$+14     	;abs 0xad36
    ad2a:	da b3 06 00 	bit.b	#1,	6(r10)	;r3 As==01
    ad2e:	09 24       	jz	$+20     	;abs 0xad42
    ad30:	39 90 0a 00 	cmp	#10,	r9	;#0x000a
    ad34:	06 20       	jnz	$+14     	;abs 0xad42
    ad36:	0c 48       	mov	r8,	r12	;
    ad38:	0d 4a       	mov	r10,	r13	;
    ad3a:	b0 12 7e 81 	call	#33150		;#0x817e
    ad3e:	0c 93       	cmp	#0,	r12	;r3 As==00
    ad40:	d9 23       	jnz	$-76     	;abs 0xacf4
    ad42:	0c 49       	mov	r9,	r12	;
    ad44:	28 17       	popm	#3,	r10	;16-bit words
    ad46:	30 41       	ret			

0000ad48 <__swbuf>:
    ad48:	0f 4c       	mov	r12,	r15	;
    ad4a:	0e 4d       	mov	r13,	r14	;
    ad4c:	1c 42 04 1c 	mov	&0x1c04,r12	;0x1c04
    ad50:	0d 4f       	mov	r15,	r13	;
    ad52:	b0 12 80 ac 	call	#44160		;#0xac80
    ad56:	30 41       	ret			

0000ad58 <_wcrtomb_r>:
    ad58:	2a 15       	pushm	#3,	r10	;16-bit words
    ad5a:	31 80 14 00 	sub	#20,	r1	;#0x0014
    ad5e:	0a 4c       	mov	r12,	r10	;
    ad60:	19 41 1c 00 	mov	28(r1),	r9	;0x0001c
    ad64:	18 42 e2 1c 	mov	&0x1ce2,r8	;0x1ce2
    ad68:	3c 40 38 85 	mov	#34104,	r12	;#0x8538
    ad6c:	0d 93       	cmp	#0,	r13	;r3 As==00
    ad6e:	0d 20       	jnz	$+28     	;abs 0xad8a
    ad70:	8c 12       	call	r12		;
    ad72:	81 4c 00 00 	mov	r12,	0(r1)	;
    ad76:	81 49 02 00 	mov	r9,	2(r1)	;
    ad7a:	0c 4a       	mov	r10,	r12	;
    ad7c:	0d 41       	mov	r1,	r13	;
    ad7e:	3d 50 0a 00 	add	#10,	r13	;#0x000a
    ad82:	0e 43       	clr	r14		;
    ad84:	0f 43       	clr	r15		;
    ad86:	88 12       	call	r8		;
    ad88:	13 3c       	jmp	$+40     	;abs 0xadb0
    ad8a:	81 4d 08 00 	mov	r13,	8(r1)	;
    ad8e:	81 4e 06 00 	mov	r14,	6(r1)	;
    ad92:	81 4f 04 00 	mov	r15,	4(r1)	;
    ad96:	8c 12       	call	r12		;
    ad98:	81 4c 00 00 	mov	r12,	0(r1)	;
    ad9c:	81 49 02 00 	mov	r9,	2(r1)	;
    ada0:	0c 4a       	mov	r10,	r12	;
    ada2:	1d 41 08 00 	mov	8(r1),	r13	;
    ada6:	1e 41 06 00 	mov	6(r1),	r14	;
    adaa:	1f 41 04 00 	mov	4(r1),	r15	;
    adae:	88 12       	call	r8		;
    adb0:	3c 93       	cmp	#-1,	r12	;r3 As==11
    adb2:	05 20       	jnz	$+12     	;abs 0xadbe
    adb4:	89 43 00 00 	mov	#0,	0(r9)	;r3 As==00
    adb8:	ba 40 8a 00 	mov	#138,	0(r10)	;#0x008a
    adbc:	00 00 
    adbe:	31 50 14 00 	add	#20,	r1	;#0x0014
    adc2:	28 17       	popm	#3,	r10	;16-bit words
    adc4:	30 41       	ret			

0000adc6 <wcrtomb>:
    adc6:	1a 15       	pushm	#2,	r10	;16-bit words
    adc8:	21 83       	decd	r1		;
    adca:	09 4c       	mov	r12,	r9	;
    adcc:	0a 4d       	mov	r13,	r10	;
    adce:	0b 4e       	mov	r14,	r11	;
    add0:	81 4f 00 00 	mov	r15,	0(r1)	;
    add4:	1c 42 04 1c 	mov	&0x1c04,r12	;0x1c04
    add8:	0d 49       	mov	r9,	r13	;
    adda:	0e 4a       	mov	r10,	r14	;
    addc:	0f 4b       	mov	r11,	r15	;
    adde:	b0 12 58 ad 	call	#44376		;#0xad58
    ade2:	21 53       	incd	r1		;
    ade4:	19 17       	popm	#2,	r10	;16-bit words
    ade6:	30 41       	ret			

0000ade8 <__ascii_wctomb>:
    ade8:	0d 93       	cmp	#0,	r13	;r3 As==00
    adea:	0d 24       	jz	$+28     	;abs 0xae06
    adec:	3f 40 ff 00 	mov	#255,	r15	;#0x00ff
    adf0:	0f 9e       	cmp	r14,	r15	;
    adf2:	05 2c       	jc	$+12     	;abs 0xadfe
    adf4:	bc 40 8a 00 	mov	#138,	0(r12)	;#0x008a
    adf8:	00 00 
    adfa:	3c 43       	mov	#-1,	r12	;r3 As==11
    adfc:	05 3c       	jmp	$+12     	;abs 0xae08
    adfe:	cd 4e 00 00 	mov.b	r14,	0(r13)	;
    ae02:	1c 43       	mov	#1,	r12	;r3 As==01
    ae04:	01 3c       	jmp	$+4      	;abs 0xae08
    ae06:	0c 4d       	mov	r13,	r12	;
    ae08:	30 41       	ret			

0000ae0a <_wctomb_r>:
    ae0a:	1a 15       	pushm	#2,	r10	;16-bit words
    ae0c:	31 80 0a 00 	sub	#10,	r1	;#0x000a
    ae10:	09 4c       	mov	r12,	r9	;
    ae12:	1a 42 e2 1c 	mov	&0x1ce2,r10	;0x1ce2
    ae16:	81 4d 08 00 	mov	r13,	8(r1)	;
    ae1a:	81 4e 06 00 	mov	r14,	6(r1)	;
    ae1e:	81 4f 04 00 	mov	r15,	4(r1)	;
    ae22:	b0 12 38 85 	call	#34104		;#0x8538
    ae26:	81 4c 00 00 	mov	r12,	0(r1)	;
    ae2a:	91 41 10 00 	mov	16(r1),	2(r1)	;0x00010
    ae2e:	02 00 
    ae30:	0c 49       	mov	r9,	r12	;
    ae32:	1d 41 08 00 	mov	8(r1),	r13	;
    ae36:	1e 41 06 00 	mov	6(r1),	r14	;
    ae3a:	1f 41 04 00 	mov	4(r1),	r15	;
    ae3e:	8a 12       	call	r10		;
    ae40:	31 50 0a 00 	add	#10,	r1	;#0x000a
    ae44:	19 17       	popm	#2,	r10	;16-bit words
    ae46:	30 41       	ret			

0000ae48 <_malloc_usable_size_r>:
    ae48:	1c 4d fc ff 	mov	-4(r13),r12	;
    ae4c:	0c 93       	cmp	#0,	r12	;r3 As==00
    ae4e:	06 34       	jge	$+14     	;abs 0xae5c
    ae50:	0d 5c       	add	r12,	r13	;
    ae52:	1c 5d fc ff 	add	-4(r13),r12	;
    ae56:	3c 50 fc ff 	add	#65532,	r12	;#0xfffc
    ae5a:	02 3c       	jmp	$+6      	;abs 0xae60
    ae5c:	3c 50 fc ff 	add	#65532,	r12	;#0xfffc
    ae60:	30 41       	ret			

0000ae62 <_fpadd_parts>:
    ae62:	6a 15       	pushm	#7,	r10	;16-bit words
    ae64:	31 80 18 00 	sub	#24,	r1	;#0x0018
    ae68:	2f 4c       	mov	@r12,	r15	;
    ae6a:	16 43       	mov	#1,	r6	;r3 As==01
    ae6c:	06 9f       	cmp	r15,	r6	;
    ae6e:	02 28       	jnc	$+6      	;abs 0xae74
    ae70:	80 00 24 b4 	mova	#46116,	r0	;0x0b424
    ae74:	29 4d       	mov	@r13,	r9	;
    ae76:	06 99       	cmp	r9,	r6	;
    ae78:	02 28       	jnc	$+6      	;abs 0xae7e
    ae7a:	80 00 16 b4 	mova	#46102,	r0	;0x0b416
    ae7e:	2f 92       	cmp	#4,	r15	;r2 As==10
    ae80:	0e 20       	jnz	$+30     	;abs 0xae9e
    ae82:	29 92       	cmp	#4,	r9	;r2 As==10
    ae84:	02 24       	jz	$+6      	;abs 0xae8a
    ae86:	80 00 24 b4 	mova	#46116,	r0	;0x0b424
    ae8a:	9c 9d 02 00 	cmp	2(r13),	2(r12)	;
    ae8e:	02 00 
    ae90:	02 20       	jnz	$+6      	;abs 0xae96
    ae92:	80 00 24 b4 	mova	#46116,	r0	;0x0b424
    ae96:	3c 40 10 46 	mov	#17936,	r12	;#0x4610
    ae9a:	30 40 24 b4 	br	#0xb424		;
    ae9e:	29 92       	cmp	#4,	r9	;r2 As==10
    aea0:	02 20       	jnz	$+6      	;abs 0xaea6
    aea2:	80 00 16 b4 	mova	#46102,	r0	;0x0b416
    aea6:	0a 4e       	mov	r14,	r10	;
    aea8:	81 4d 0a 00 	mov	r13,	10(r1)	; 0x000a
    aeac:	81 4c 06 00 	mov	r12,	6(r1)	;
    aeb0:	29 93       	cmp	#2,	r9	;r3 As==10
    aeb2:	17 20       	jnz	$+48     	;abs 0xaee2
    aeb4:	2f 93       	cmp	#2,	r15	;r3 As==10
    aeb6:	02 24       	jz	$+6      	;abs 0xaebc
    aeb8:	80 00 1a b4 	mova	#46106,	r0	;0x0b41a
    aebc:	0c 4e       	mov	r14,	r12	;
    aebe:	1d 41 06 00 	mov	6(r1),	r13	;
    aec2:	3e 40 0e 00 	mov	#14,	r14	;#0x000e
    aec6:	b0 12 98 86 	call	#34456		;#0x8698
    aeca:	17 41 0a 00 	mov	10(r1),	r7	;0x0000a
    aece:	19 47 02 00 	mov	2(r7),	r9	;
    aed2:	17 41 06 00 	mov	6(r1),	r7	;
    aed6:	19 f7 02 00 	and	2(r7),	r9	;
    aeda:	8a 49 02 00 	mov	r9,	2(r10)	;
    aede:	30 40 12 b4 	br	#0xb412		;
    aee2:	2f 93       	cmp	#2,	r15	;r3 As==10
    aee4:	02 20       	jnz	$+6      	;abs 0xaeea
    aee6:	80 00 20 b4 	mova	#46112,	r0	;0x0b420
    aeea:	16 41 06 00 	mov	6(r1),	r6	;
    aeee:	91 46 04 00 	mov	4(r6),	8(r1)	;
    aef2:	08 00 
    aef4:	17 41 0a 00 	mov	10(r1),	r7	;0x0000a
    aef8:	1d 47 04 00 	mov	4(r7),	r13	;
    aefc:	18 46 06 00 	mov	6(r6),	r8	;
    af00:	91 46 08 00 	mov	8(r6),	2(r1)	;
    af04:	02 00 
    af06:	91 46 0a 00 	mov	10(r6),	4(r1)	;0x0000a
    af0a:	04 00 
    af0c:	91 46 0c 00 	mov	12(r6),	12(r1)	;0x0000c, 0x000c
    af10:	0c 00 
    af12:	19 47 06 00 	mov	6(r7),	r9	;
    af16:	15 47 08 00 	mov	8(r7),	r5	;
    af1a:	14 47 0a 00 	mov	10(r7),	r4	;0x0000a
    af1e:	91 47 0c 00 	mov	12(r7),	14(r1)	;0x0000c, 0x000e
    af22:	0e 00 
    af24:	1c 41 08 00 	mov	8(r1),	r12	;
    af28:	0c 8d       	sub	r13,	r12	;
    af2a:	07 4c       	mov	r12,	r7	;
    af2c:	0c 93       	cmp	#0,	r12	;r3 As==00
    af2e:	02 34       	jge	$+6      	;abs 0xaf34
    af30:	07 43       	clr	r7		;
    af32:	07 8c       	sub	r12,	r7	;
    af34:	3e 40 3f 00 	mov	#63,	r14	;#0x003f
    af38:	0e 97       	cmp	r7,	r14	;
    af3a:	07 39       	jl	$+528    	;abs 0xb14a
    af3c:	0f 43       	clr	r15		;
    af3e:	0f 9c       	cmp	r12,	r15	;
    af40:	76 34       	jge	$+238    	;abs 0xb02e
    af42:	81 47 00 00 	mov	r7,	0(r1)	;
    af46:	0c 49       	mov	r9,	r12	;
    af48:	0d 45       	mov	r5,	r13	;
    af4a:	0e 44       	mov	r4,	r14	;
    af4c:	1f 41 0e 00 	mov	14(r1),	r15	;0x0000e
    af50:	b0 12 2e c6 	call	#50734		;#0xc62e
    af54:	81 4c 10 00 	mov	r12,	16(r1)	; 0x0010
    af58:	81 4d 12 00 	mov	r13,	18(r1)	; 0x0012
    af5c:	81 4e 14 00 	mov	r14,	20(r1)	; 0x0014
    af60:	81 4f 16 00 	mov	r15,	22(r1)	; 0x0016
    af64:	1c 43       	mov	#1,	r12	;r3 As==01
    af66:	0d 43       	clr	r13		;
    af68:	0e 4d       	mov	r13,	r14	;
    af6a:	0f 4d       	mov	r13,	r15	;
    af6c:	b0 12 a6 c6 	call	#50854		;#0xc6a6
    af70:	06 4c       	mov	r12,	r6	;
    af72:	36 53       	add	#-1,	r6	;r3 As==11
    af74:	1b 43       	mov	#1,	r11	;r3 As==01
    af76:	0c 93       	cmp	#0,	r12	;r3 As==00
    af78:	01 20       	jnz	$+4      	;abs 0xaf7c
    af7a:	0b 43       	clr	r11		;
    af7c:	0c 4d       	mov	r13,	r12	;
    af7e:	3c 53       	add	#-1,	r12	;r3 As==11
    af80:	17 43       	mov	#1,	r7	;r3 As==01
    af82:	0c 9d       	cmp	r13,	r12	;
    af84:	01 28       	jnc	$+4      	;abs 0xaf88
    af86:	07 43       	clr	r7		;
    af88:	0b 5c       	add	r12,	r11	;
    af8a:	1d 43       	mov	#1,	r13	;r3 As==01
    af8c:	0b 9c       	cmp	r12,	r11	;
    af8e:	01 28       	jnc	$+4      	;abs 0xaf92
    af90:	0d 43       	clr	r13		;
    af92:	07 dd       	bis	r13,	r7	;
    af94:	0d 4e       	mov	r14,	r13	;
    af96:	3d 53       	add	#-1,	r13	;r3 As==11
    af98:	1c 43       	mov	#1,	r12	;r3 As==01
    af9a:	0d 9e       	cmp	r14,	r13	;
    af9c:	01 28       	jnc	$+4      	;abs 0xafa0
    af9e:	0c 43       	clr	r12		;
    afa0:	07 5d       	add	r13,	r7	;
    afa2:	1e 43       	mov	#1,	r14	;r3 As==01
    afa4:	07 9d       	cmp	r13,	r7	;
    afa6:	01 28       	jnc	$+4      	;abs 0xafaa
    afa8:	0e 43       	clr	r14		;
    afaa:	0c de       	bis	r14,	r12	;
    afac:	3f 53       	add	#-1,	r15	;r3 As==11
    afae:	0f 5c       	add	r12,	r15	;
    afb0:	09 f6       	and	r6,	r9	;
    afb2:	05 fb       	and	r11,	r5	;
    afb4:	07 f4       	and	r4,	r7	;
    afb6:	1f f1 0e 00 	and	14(r1),	r15	;0x0000e
    afba:	0c 43       	clr	r12		;
    afbc:	0c 89       	sub	r9,	r12	;
    afbe:	14 43       	mov	#1,	r4	;r3 As==01
    afc0:	0c 93       	cmp	#0,	r12	;r3 As==00
    afc2:	01 20       	jnz	$+4      	;abs 0xafc6
    afc4:	04 4c       	mov	r12,	r4	;
    afc6:	0e 43       	clr	r14		;
    afc8:	0e 85       	sub	r5,	r14	;
    afca:	16 43       	mov	#1,	r6	;r3 As==01
    afcc:	0e 93       	cmp	#0,	r14	;r3 As==00
    afce:	01 20       	jnz	$+4      	;abs 0xafd2
    afd0:	06 4e       	mov	r14,	r6	;
    afd2:	0d 4e       	mov	r14,	r13	;
    afd4:	0d 84       	sub	r4,	r13	;
    afd6:	14 43       	mov	#1,	r4	;r3 As==01
    afd8:	0e 9d       	cmp	r13,	r14	;
    afda:	01 28       	jnc	$+4      	;abs 0xafde
    afdc:	04 43       	clr	r4		;
    afde:	06 d4       	bis	r4,	r6	;
    afe0:	0b 43       	clr	r11		;
    afe2:	0b 87       	sub	r7,	r11	;
    afe4:	14 43       	mov	#1,	r4	;r3 As==01
    afe6:	0b 93       	cmp	#0,	r11	;r3 As==00
    afe8:	01 20       	jnz	$+4      	;abs 0xafec
    afea:	04 4b       	mov	r11,	r4	;
    afec:	0e 4b       	mov	r11,	r14	;
    afee:	0e 86       	sub	r6,	r14	;
    aff0:	16 43       	mov	#1,	r6	;r3 As==01
    aff2:	0b 9e       	cmp	r14,	r11	;
    aff4:	01 28       	jnc	$+4      	;abs 0xaff8
    aff6:	06 43       	clr	r6		;
    aff8:	04 d6       	bis	r6,	r4	;
    affa:	0b 43       	clr	r11		;
    affc:	0b 8f       	sub	r15,	r11	;
    affe:	0b 84       	sub	r4,	r11	;
    b000:	b1 40 3f 00 	mov	#63,	0(r1)	;#0x003f
    b004:	00 00 
    b006:	0c d9       	bis	r9,	r12	;
    b008:	0d d5       	bis	r5,	r13	;
    b00a:	0e d7       	bis	r7,	r14	;
    b00c:	0f db       	bis	r11,	r15	;
    b00e:	b0 12 2e c6 	call	#50734		;#0xc62e
    b012:	19 41 10 00 	mov	16(r1),	r9	;0x00010
    b016:	09 dc       	bis	r12,	r9	;
    b018:	15 41 12 00 	mov	18(r1),	r5	;0x00012
    b01c:	05 dd       	bis	r13,	r5	;
    b01e:	14 41 14 00 	mov	20(r1),	r4	;0x00014
    b022:	04 de       	bis	r14,	r4	;
    b024:	1f d1 16 00 	bis	22(r1),	r15	;0x00016
    b028:	81 4f 0e 00 	mov	r15,	14(r1)	; 0x000e
    b02c:	a0 3c       	jmp	$+322    	;abs 0xb16e
    b02e:	0c 93       	cmp	#0,	r12	;r3 As==00
    b030:	9e 24       	jz	$+318    	;abs 0xb16e
    b032:	81 57 08 00 	add	r7,	8(r1)	;
    b036:	81 47 00 00 	mov	r7,	0(r1)	;
    b03a:	0c 48       	mov	r8,	r12	;
    b03c:	1d 41 02 00 	mov	2(r1),	r13	;
    b040:	1e 41 04 00 	mov	4(r1),	r14	;
    b044:	1f 41 0c 00 	mov	12(r1),	r15	;0x0000c
    b048:	b0 12 2e c6 	call	#50734		;#0xc62e
    b04c:	81 4c 10 00 	mov	r12,	16(r1)	; 0x0010
    b050:	81 4d 12 00 	mov	r13,	18(r1)	; 0x0012
    b054:	81 4e 14 00 	mov	r14,	20(r1)	; 0x0014
    b058:	81 4f 16 00 	mov	r15,	22(r1)	; 0x0016
    b05c:	1c 43       	mov	#1,	r12	;r3 As==01
    b05e:	0d 43       	clr	r13		;
    b060:	0e 4d       	mov	r13,	r14	;
    b062:	0f 4d       	mov	r13,	r15	;
    b064:	b0 12 a6 c6 	call	#50854		;#0xc6a6
    b068:	07 4d       	mov	r13,	r7	;
    b06a:	0b 4c       	mov	r12,	r11	;
    b06c:	3b 53       	add	#-1,	r11	;r3 As==11
    b06e:	1d 43       	mov	#1,	r13	;r3 As==01
    b070:	0c 93       	cmp	#0,	r12	;r3 As==00
    b072:	01 20       	jnz	$+4      	;abs 0xb076
    b074:	0d 43       	clr	r13		;
    b076:	06 47       	mov	r7,	r6	;
    b078:	36 53       	add	#-1,	r6	;r3 As==11
    b07a:	1c 43       	mov	#1,	r12	;r3 As==01
    b07c:	06 97       	cmp	r7,	r6	;
    b07e:	01 28       	jnc	$+4      	;abs 0xb082
    b080:	0c 43       	clr	r12		;
    b082:	0d 56       	add	r6,	r13	;
    b084:	17 43       	mov	#1,	r7	;r3 As==01
    b086:	0d 96       	cmp	r6,	r13	;
    b088:	01 28       	jnc	$+4      	;abs 0xb08c
    b08a:	07 43       	clr	r7		;
    b08c:	0c d7       	bis	r7,	r12	;
    b08e:	06 4e       	mov	r14,	r6	;
    b090:	36 53       	add	#-1,	r6	;r3 As==11
    b092:	17 43       	mov	#1,	r7	;r3 As==01
    b094:	06 9e       	cmp	r14,	r6	;
    b096:	01 28       	jnc	$+4      	;abs 0xb09a
    b098:	07 43       	clr	r7		;
    b09a:	0e 4c       	mov	r12,	r14	;
    b09c:	0e 56       	add	r6,	r14	;
    b09e:	1c 43       	mov	#1,	r12	;r3 As==01
    b0a0:	0e 96       	cmp	r6,	r14	;
    b0a2:	01 28       	jnc	$+4      	;abs 0xb0a6
    b0a4:	0c 43       	clr	r12		;
    b0a6:	07 dc       	bis	r12,	r7	;
    b0a8:	3f 53       	add	#-1,	r15	;r3 As==11
    b0aa:	0f 57       	add	r7,	r15	;
    b0ac:	0b f8       	and	r8,	r11	;
    b0ae:	1d f1 02 00 	and	2(r1),	r13	;
    b0b2:	1e f1 04 00 	and	4(r1),	r14	;
    b0b6:	1f f1 0c 00 	and	12(r1),	r15	;0x0000c
    b0ba:	81 4f 0c 00 	mov	r15,	12(r1)	; 0x000c
    b0be:	0c 43       	clr	r12		;
    b0c0:	0c 8b       	sub	r11,	r12	;
    b0c2:	1f 43       	mov	#1,	r15	;r3 As==01
    b0c4:	0c 93       	cmp	#0,	r12	;r3 As==00
    b0c6:	01 20       	jnz	$+4      	;abs 0xb0ca
    b0c8:	0f 4c       	mov	r12,	r15	;
    b0ca:	08 43       	clr	r8		;
    b0cc:	08 8d       	sub	r13,	r8	;
    b0ce:	16 43       	mov	#1,	r6	;r3 As==01
    b0d0:	08 93       	cmp	#0,	r8	;r3 As==00
    b0d2:	01 20       	jnz	$+4      	;abs 0xb0d6
    b0d4:	06 48       	mov	r8,	r6	;
    b0d6:	07 48       	mov	r8,	r7	;
    b0d8:	07 8f       	sub	r15,	r7	;
    b0da:	81 47 02 00 	mov	r7,	2(r1)	;
    b0de:	17 43       	mov	#1,	r7	;r3 As==01
    b0e0:	18 91 02 00 	cmp	2(r1),	r8	;
    b0e4:	01 28       	jnc	$+4      	;abs 0xb0e8
    b0e6:	07 43       	clr	r7		;
    b0e8:	06 d7       	bis	r7,	r6	;
    b0ea:	07 43       	clr	r7		;
    b0ec:	07 8e       	sub	r14,	r7	;
    b0ee:	18 43       	mov	#1,	r8	;r3 As==01
    b0f0:	07 93       	cmp	#0,	r7	;r3 As==00
    b0f2:	01 20       	jnz	$+4      	;abs 0xb0f6
    b0f4:	08 47       	mov	r7,	r8	;
    b0f6:	0f 47       	mov	r7,	r15	;
    b0f8:	0f 86       	sub	r6,	r15	;
    b0fa:	81 4f 04 00 	mov	r15,	4(r1)	;
    b0fe:	16 43       	mov	#1,	r6	;r3 As==01
    b100:	07 9f       	cmp	r15,	r7	;
    b102:	01 28       	jnc	$+4      	;abs 0xb106
    b104:	06 43       	clr	r6		;
    b106:	08 d6       	bis	r6,	r8	;
    b108:	07 43       	clr	r7		;
    b10a:	17 81 0c 00 	sub	12(r1),	r7	;0x0000c
    b10e:	07 88       	sub	r8,	r7	;
    b110:	b1 40 3f 00 	mov	#63,	0(r1)	;#0x003f
    b114:	00 00 
    b116:	0c db       	bis	r11,	r12	;
    b118:	1d d1 02 00 	bis	2(r1),	r13	;
    b11c:	1e d1 04 00 	bis	4(r1),	r14	;
    b120:	1f 41 0c 00 	mov	12(r1),	r15	;0x0000c
    b124:	0f d7       	bis	r7,	r15	;
    b126:	b0 12 2e c6 	call	#50734		;#0xc62e
    b12a:	18 41 10 00 	mov	16(r1),	r8	;0x00010
    b12e:	08 dc       	bis	r12,	r8	;
    b130:	1d d1 12 00 	bis	18(r1),	r13	;0x00012
    b134:	81 4d 02 00 	mov	r13,	2(r1)	;
    b138:	1e d1 14 00 	bis	20(r1),	r14	;0x00014
    b13c:	81 4e 04 00 	mov	r14,	4(r1)	;
    b140:	1f d1 16 00 	bis	22(r1),	r15	;0x00016
    b144:	81 4f 0c 00 	mov	r15,	12(r1)	; 0x000c
    b148:	12 3c       	jmp	$+38     	;abs 0xb16e
    b14a:	1d 91 08 00 	cmp	8(r1),	r13	;
    b14e:	0a 38       	jl	$+22     	;abs 0xb164
    b150:	81 4d 08 00 	mov	r13,	8(r1)	;
    b154:	08 43       	clr	r8		;
    b156:	81 48 02 00 	mov	r8,	2(r1)	;
    b15a:	81 48 04 00 	mov	r8,	4(r1)	;
    b15e:	81 48 0c 00 	mov	r8,	12(r1)	; 0x000c
    b162:	05 3c       	jmp	$+12     	;abs 0xb16e
    b164:	09 43       	clr	r9		;
    b166:	05 49       	mov	r9,	r5	;
    b168:	04 49       	mov	r9,	r4	;
    b16a:	81 49 0e 00 	mov	r9,	14(r1)	; 0x000e
    b16e:	16 41 06 00 	mov	6(r1),	r6	;
    b172:	1c 46 02 00 	mov	2(r6),	r12	;
    b176:	17 41 0a 00 	mov	10(r1),	r7	;0x0000a
    b17a:	1c 97 02 00 	cmp	2(r7),	r12	;
    b17e:	f6 24       	jz	$+494    	;abs 0xb36c
    b180:	0c 93       	cmp	#0,	r12	;r3 As==00
    b182:	27 24       	jz	$+80     	;abs 0xb1d2
    b184:	07 49       	mov	r9,	r7	;
    b186:	07 88       	sub	r8,	r7	;
    b188:	1d 43       	mov	#1,	r13	;r3 As==01
    b18a:	09 97       	cmp	r7,	r9	;
    b18c:	01 28       	jnc	$+4      	;abs 0xb190
    b18e:	0d 43       	clr	r13		;
    b190:	0c 45       	mov	r5,	r12	;
    b192:	1c 81 02 00 	sub	2(r1),	r12	;
    b196:	1f 43       	mov	#1,	r15	;r3 As==01
    b198:	05 9c       	cmp	r12,	r5	;
    b19a:	01 28       	jnc	$+4      	;abs 0xb19e
    b19c:	0f 43       	clr	r15		;
    b19e:	0e 4c       	mov	r12,	r14	;
    b1a0:	0e 8d       	sub	r13,	r14	;
    b1a2:	1d 43       	mov	#1,	r13	;r3 As==01
    b1a4:	0c 9e       	cmp	r14,	r12	;
    b1a6:	01 28       	jnc	$+4      	;abs 0xb1aa
    b1a8:	0d 43       	clr	r13		;
    b1aa:	0f dd       	bis	r13,	r15	;
    b1ac:	09 44       	mov	r4,	r9	;
    b1ae:	19 81 04 00 	sub	4(r1),	r9	;
    b1b2:	1d 43       	mov	#1,	r13	;r3 As==01
    b1b4:	04 99       	cmp	r9,	r4	;
    b1b6:	01 28       	jnc	$+4      	;abs 0xb1ba
    b1b8:	0d 43       	clr	r13		;
    b1ba:	0c 49       	mov	r9,	r12	;
    b1bc:	0c 8f       	sub	r15,	r12	;
    b1be:	1f 43       	mov	#1,	r15	;r3 As==01
    b1c0:	09 9c       	cmp	r12,	r9	;
    b1c2:	01 28       	jnc	$+4      	;abs 0xb1c6
    b1c4:	0f 43       	clr	r15		;
    b1c6:	0d df       	bis	r15,	r13	;
    b1c8:	1f 41 0e 00 	mov	14(r1),	r15	;0x0000e
    b1cc:	1f 81 0c 00 	sub	12(r1),	r15	;0x0000c
    b1d0:	28 3c       	jmp	$+82     	;abs 0xb222
    b1d2:	07 48       	mov	r8,	r7	;
    b1d4:	07 89       	sub	r9,	r7	;
    b1d6:	1d 43       	mov	#1,	r13	;r3 As==01
    b1d8:	08 97       	cmp	r7,	r8	;
    b1da:	01 28       	jnc	$+4      	;abs 0xb1de
    b1dc:	0d 4c       	mov	r12,	r13	;
    b1de:	1c 41 02 00 	mov	2(r1),	r12	;
    b1e2:	0c 85       	sub	r5,	r12	;
    b1e4:	1f 43       	mov	#1,	r15	;r3 As==01
    b1e6:	81 9c 02 00 	cmp	r12,	2(r1)	;
    b1ea:	01 28       	jnc	$+4      	;abs 0xb1ee
    b1ec:	0f 43       	clr	r15		;
    b1ee:	0e 4c       	mov	r12,	r14	;
    b1f0:	0e 8d       	sub	r13,	r14	;
    b1f2:	1d 43       	mov	#1,	r13	;r3 As==01
    b1f4:	0c 9e       	cmp	r14,	r12	;
    b1f6:	01 28       	jnc	$+4      	;abs 0xb1fa
    b1f8:	0d 43       	clr	r13		;
    b1fa:	0f dd       	bis	r13,	r15	;
    b1fc:	19 41 04 00 	mov	4(r1),	r9	;
    b200:	09 84       	sub	r4,	r9	;
    b202:	1d 43       	mov	#1,	r13	;r3 As==01
    b204:	81 99 04 00 	cmp	r9,	4(r1)	;
    b208:	01 28       	jnc	$+4      	;abs 0xb20c
    b20a:	0d 43       	clr	r13		;
    b20c:	0c 49       	mov	r9,	r12	;
    b20e:	0c 8f       	sub	r15,	r12	;
    b210:	1f 43       	mov	#1,	r15	;r3 As==01
    b212:	09 9c       	cmp	r12,	r9	;
    b214:	01 28       	jnc	$+4      	;abs 0xb218
    b216:	0f 43       	clr	r15		;
    b218:	0d df       	bis	r15,	r13	;
    b21a:	1f 41 0c 00 	mov	12(r1),	r15	;0x0000c
    b21e:	1f 81 0e 00 	sub	14(r1),	r15	;0x0000e
    b222:	0f 8d       	sub	r13,	r15	;
    b224:	0f 93       	cmp	#0,	r15	;r3 As==00
    b226:	0e 38       	jl	$+30     	;abs 0xb244
    b228:	8a 43 02 00 	mov	#0,	2(r10)	;r3 As==00
    b22c:	9a 41 08 00 	mov	8(r1),	4(r10)	;
    b230:	04 00 
    b232:	8a 47 06 00 	mov	r7,	6(r10)	;
    b236:	8a 4e 08 00 	mov	r14,	8(r10)	;
    b23a:	8a 4c 0a 00 	mov	r12,	10(r10)	; 0x000a
    b23e:	8a 4f 0c 00 	mov	r15,	12(r10)	; 0x000c
    b242:	7c 3c       	jmp	$+250    	;abs 0xb33c
    b244:	9a 43 02 00 	mov	#1,	2(r10)	;r3 As==01
    b248:	9a 41 08 00 	mov	8(r1),	4(r10)	;
    b24c:	04 00 
    b24e:	09 43       	clr	r9		;
    b250:	09 87       	sub	r7,	r9	;
    b252:	18 43       	mov	#1,	r8	;r3 As==01
    b254:	09 93       	cmp	#0,	r9	;r3 As==00
    b256:	01 20       	jnz	$+4      	;abs 0xb25a
    b258:	08 49       	mov	r9,	r8	;
    b25a:	0d 43       	clr	r13		;
    b25c:	0d 8e       	sub	r14,	r13	;
    b25e:	1e 43       	mov	#1,	r14	;r3 As==01
    b260:	0d 93       	cmp	#0,	r13	;r3 As==00
    b262:	01 20       	jnz	$+4      	;abs 0xb266
    b264:	0e 4d       	mov	r13,	r14	;
    b266:	07 4d       	mov	r13,	r7	;
    b268:	07 88       	sub	r8,	r7	;
    b26a:	18 43       	mov	#1,	r8	;r3 As==01
    b26c:	0d 97       	cmp	r7,	r13	;
    b26e:	01 28       	jnc	$+4      	;abs 0xb272
    b270:	08 43       	clr	r8		;
    b272:	0e d8       	bis	r8,	r14	;
    b274:	0d 43       	clr	r13		;
    b276:	0d 8c       	sub	r12,	r13	;
    b278:	1c 43       	mov	#1,	r12	;r3 As==01
    b27a:	0d 93       	cmp	#0,	r13	;r3 As==00
    b27c:	01 20       	jnz	$+4      	;abs 0xb280
    b27e:	0c 4d       	mov	r13,	r12	;
    b280:	08 4d       	mov	r13,	r8	;
    b282:	08 8e       	sub	r14,	r8	;
    b284:	1e 43       	mov	#1,	r14	;r3 As==01
    b286:	0d 98       	cmp	r8,	r13	;
    b288:	01 28       	jnc	$+4      	;abs 0xb28c
    b28a:	0e 43       	clr	r14		;
    b28c:	0c de       	bis	r14,	r12	;
    b28e:	0d 43       	clr	r13		;
    b290:	0d 8f       	sub	r15,	r13	;
    b292:	8a 49 06 00 	mov	r9,	6(r10)	;
    b296:	8a 47 08 00 	mov	r7,	8(r10)	;
    b29a:	8a 48 0a 00 	mov	r8,	10(r10)	; 0x000a
    b29e:	0d 8c       	sub	r12,	r13	;
    b2a0:	8a 4d 0c 00 	mov	r13,	12(r10)	; 0x000c
    b2a4:	4b 3c       	jmp	$+152    	;abs 0xb33c
    b2a6:	0c 4f       	mov	r15,	r12	;
    b2a8:	3c 53       	add	#-1,	r12	;r3 As==11
    b2aa:	1d 43       	mov	#1,	r13	;r3 As==01
    b2ac:	0c 9f       	cmp	r15,	r12	;
    b2ae:	01 28       	jnc	$+4      	;abs 0xb2b2
    b2b0:	0d 43       	clr	r13		;
    b2b2:	07 5c       	add	r12,	r7	;
    b2b4:	16 43       	mov	#1,	r6	;r3 As==01
    b2b6:	07 9c       	cmp	r12,	r7	;
    b2b8:	01 28       	jnc	$+4      	;abs 0xb2bc
    b2ba:	06 43       	clr	r6		;
    b2bc:	0d d6       	bis	r6,	r13	;
    b2be:	0c 49       	mov	r9,	r12	;
    b2c0:	3c 53       	add	#-1,	r12	;r3 As==11
    b2c2:	16 43       	mov	#1,	r6	;r3 As==01
    b2c4:	0c 99       	cmp	r9,	r12	;
    b2c6:	01 28       	jnc	$+4      	;abs 0xb2ca
    b2c8:	06 43       	clr	r6		;
    b2ca:	0d 5c       	add	r12,	r13	;
    b2cc:	14 43       	mov	#1,	r4	;r3 As==01
    b2ce:	0d 9c       	cmp	r12,	r13	;
    b2d0:	01 28       	jnc	$+4      	;abs 0xb2d4
    b2d2:	04 43       	clr	r4		;
    b2d4:	06 d4       	bis	r4,	r6	;
    b2d6:	0c 48       	mov	r8,	r12	;
    b2d8:	3c 53       	add	#-1,	r12	;r3 As==11
    b2da:	0c 56       	add	r6,	r12	;
    b2dc:	36 40 ff 0f 	mov	#4095,	r6	;#0x0fff
    b2e0:	06 9c       	cmp	r12,	r6	;
    b2e2:	77 28       	jnc	$+240    	;abs 0xb3d2
    b2e4:	0c 96       	cmp	r6,	r12	;
    b2e6:	39 24       	jz	$+116    	;abs 0xb35a
    b2e8:	07 4e       	mov	r14,	r7	;
    b2ea:	07 5e       	add	r14,	r7	;
    b2ec:	1d 43       	mov	#1,	r13	;r3 As==01
    b2ee:	07 9e       	cmp	r14,	r7	;
    b2f0:	01 28       	jnc	$+4      	;abs 0xb2f4
    b2f2:	0d 43       	clr	r13		;
    b2f4:	0e 4f       	mov	r15,	r14	;
    b2f6:	0e 5f       	add	r15,	r14	;
    b2f8:	1c 43       	mov	#1,	r12	;r3 As==01
    b2fa:	0e 9f       	cmp	r15,	r14	;
    b2fc:	01 28       	jnc	$+4      	;abs 0xb300
    b2fe:	0c 43       	clr	r12		;
    b300:	0d 5e       	add	r14,	r13	;
    b302:	1f 43       	mov	#1,	r15	;r3 As==01
    b304:	0d 9e       	cmp	r14,	r13	;
    b306:	01 28       	jnc	$+4      	;abs 0xb30a
    b308:	0f 43       	clr	r15		;
    b30a:	0c df       	bis	r15,	r12	;
    b30c:	0f 49       	mov	r9,	r15	;
    b30e:	0f 59       	add	r9,	r15	;
    b310:	1e 43       	mov	#1,	r14	;r3 As==01
    b312:	0f 99       	cmp	r9,	r15	;
    b314:	01 28       	jnc	$+4      	;abs 0xb318
    b316:	0e 43       	clr	r14		;
    b318:	0c 5f       	add	r15,	r12	;
    b31a:	19 43       	mov	#1,	r9	;r3 As==01
    b31c:	0c 9f       	cmp	r15,	r12	;
    b31e:	01 28       	jnc	$+4      	;abs 0xb322
    b320:	09 43       	clr	r9		;
    b322:	0e d9       	bis	r9,	r14	;
    b324:	08 58       	rla	r8		;
    b326:	8a 47 06 00 	mov	r7,	6(r10)	;
    b32a:	8a 4d 08 00 	mov	r13,	8(r10)	;
    b32e:	8a 4c 0a 00 	mov	r12,	10(r10)	; 0x000a
    b332:	0e 58       	add	r8,	r14	;
    b334:	8a 4e 0c 00 	mov	r14,	12(r10)	; 0x000c
    b338:	ba 53 04 00 	add	#-1,	4(r10)	;r3 As==11
    b33c:	1e 4a 06 00 	mov	6(r10),	r14	;
    b340:	1f 4a 08 00 	mov	8(r10),	r15	;
    b344:	19 4a 0a 00 	mov	10(r10),r9	;0x0000a
    b348:	18 4a 0c 00 	mov	12(r10),r8	;0x0000c
    b34c:	05 4e       	mov	r14,	r5	;
    b34e:	35 53       	add	#-1,	r5	;r3 As==11
    b350:	17 43       	mov	#1,	r7	;r3 As==01
    b352:	05 9e       	cmp	r14,	r5	;
    b354:	a8 2b       	jnc	$-174    	;abs 0xb2a6
    b356:	07 43       	clr	r7		;
    b358:	a6 3f       	jmp	$-178    	;abs 0xb2a6
    b35a:	3d 93       	cmp	#-1,	r13	;r3 As==11
    b35c:	c5 23       	jnz	$-116    	;abs 0xb2e8
    b35e:	37 93       	cmp	#-1,	r7	;r3 As==11
    b360:	c3 23       	jnz	$-120    	;abs 0xb2e8
    b362:	37 40 fe ff 	mov	#65534,	r7	;#0xfffe
    b366:	07 95       	cmp	r5,	r7	;
    b368:	bf 2f       	jc	$-128    	;abs 0xb2e8
    b36a:	33 3c       	jmp	$+104    	;abs 0xb3d2
    b36c:	8a 4c 02 00 	mov	r12,	2(r10)	;
    b370:	9a 41 08 00 	mov	8(r1),	4(r10)	;
    b374:	04 00 
    b376:	0b 49       	mov	r9,	r11	;
    b378:	0b 58       	add	r8,	r11	;
    b37a:	1e 43       	mov	#1,	r14	;r3 As==01
    b37c:	0b 99       	cmp	r9,	r11	;
    b37e:	01 28       	jnc	$+4      	;abs 0xb382
    b380:	0e 43       	clr	r14		;
    b382:	1d 41 02 00 	mov	2(r1),	r13	;
    b386:	0d 55       	add	r5,	r13	;
    b388:	1c 43       	mov	#1,	r12	;r3 As==01
    b38a:	0d 95       	cmp	r5,	r13	;
    b38c:	01 28       	jnc	$+4      	;abs 0xb390
    b38e:	0c 43       	clr	r12		;
    b390:	09 4e       	mov	r14,	r9	;
    b392:	09 5d       	add	r13,	r9	;
    b394:	1e 43       	mov	#1,	r14	;r3 As==01
    b396:	09 9d       	cmp	r13,	r9	;
    b398:	01 28       	jnc	$+4      	;abs 0xb39c
    b39a:	0e 43       	clr	r14		;
    b39c:	0c de       	bis	r14,	r12	;
    b39e:	1e 41 04 00 	mov	4(r1),	r14	;
    b3a2:	0e 54       	add	r4,	r14	;
    b3a4:	1d 43       	mov	#1,	r13	;r3 As==01
    b3a6:	0e 94       	cmp	r4,	r14	;
    b3a8:	01 28       	jnc	$+4      	;abs 0xb3ac
    b3aa:	0d 43       	clr	r13		;
    b3ac:	0c 5e       	add	r14,	r12	;
    b3ae:	1f 43       	mov	#1,	r15	;r3 As==01
    b3b0:	0c 9e       	cmp	r14,	r12	;
    b3b2:	01 28       	jnc	$+4      	;abs 0xb3b6
    b3b4:	0f 43       	clr	r15		;
    b3b6:	0d df       	bis	r15,	r13	;
    b3b8:	1f 41 0e 00 	mov	14(r1),	r15	;0x0000e
    b3bc:	1f 51 0c 00 	add	12(r1),	r15	;0x0000c
    b3c0:	8a 4b 06 00 	mov	r11,	6(r10)	;
    b3c4:	8a 49 08 00 	mov	r9,	8(r10)	;
    b3c8:	8a 4c 0a 00 	mov	r12,	10(r10)	; 0x000a
    b3cc:	0d 5f       	add	r15,	r13	;
    b3ce:	8a 4d 0c 00 	mov	r13,	12(r10)	; 0x000c
    b3d2:	ba 40 03 00 	mov	#3,	0(r10)	;
    b3d6:	00 00 
    b3d8:	1c 4a 06 00 	mov	6(r10),	r12	;
    b3dc:	1d 4a 08 00 	mov	8(r10),	r13	;
    b3e0:	1e 4a 0a 00 	mov	10(r10),r14	;0x0000a
    b3e4:	1f 4a 0c 00 	mov	12(r10),r15	;0x0000c
    b3e8:	39 40 ff 1f 	mov	#8191,	r9	;#0x1fff
    b3ec:	09 9f       	cmp	r15,	r9	;
    b3ee:	11 2c       	jc	$+36     	;abs 0xb412
    b3f0:	09 4c       	mov	r12,	r9	;
    b3f2:	19 f3       	and	#1,	r9	;r3 As==01
    b3f4:	91 43 00 00 	mov	#1,	0(r1)	;r3 As==01
    b3f8:	b0 12 2e c6 	call	#50734		;#0xc62e
    b3fc:	09 dc       	bis	r12,	r9	;
    b3fe:	8a 49 06 00 	mov	r9,	6(r10)	;
    b402:	8a 4d 08 00 	mov	r13,	8(r10)	;
    b406:	8a 4e 0a 00 	mov	r14,	10(r10)	; 0x000a
    b40a:	8a 4f 0c 00 	mov	r15,	12(r10)	; 0x000c
    b40e:	9a 53 04 00 	inc	4(r10)		;
    b412:	0c 4a       	mov	r10,	r12	;
    b414:	07 3c       	jmp	$+16     	;abs 0xb424
    b416:	0c 4d       	mov	r13,	r12	;
    b418:	05 3c       	jmp	$+12     	;abs 0xb424
    b41a:	1c 41 06 00 	mov	6(r1),	r12	;
    b41e:	02 3c       	jmp	$+6      	;abs 0xb424
    b420:	1c 41 0a 00 	mov	10(r1),	r12	;0x0000a
    b424:	31 50 18 00 	add	#24,	r1	;#0x0018
    b428:	64 17       	popm	#7,	r10	;16-bit words
    b42a:	30 41       	ret			

0000b42c <__mspabi_addd>:
    b42c:	2a 15       	pushm	#3,	r10	;16-bit words
    b42e:	31 80 3a 00 	sub	#58,	r1	;#0x003a
    b432:	81 48 00 00 	mov	r8,	0(r1)	;
    b436:	81 49 02 00 	mov	r9,	2(r1)	;
    b43a:	81 4a 04 00 	mov	r10,	4(r1)	;
    b43e:	81 4b 06 00 	mov	r11,	6(r1)	;
    b442:	81 4c 08 00 	mov	r12,	8(r1)	;
    b446:	81 4d 0a 00 	mov	r13,	10(r1)	; 0x000a
    b44a:	81 4e 0c 00 	mov	r14,	12(r1)	; 0x000c
    b44e:	81 4f 0e 00 	mov	r15,	14(r1)	; 0x000e
    b452:	3a 40 d8 c9 	mov	#51672,	r10	;#0xc9d8
    b456:	0c 41       	mov	r1,	r12	;
    b458:	0d 41       	mov	r1,	r13	;
    b45a:	3d 50 10 00 	add	#16,	r13	;#0x0010
    b45e:	8a 12       	call	r10		;
    b460:	0c 41       	mov	r1,	r12	;
    b462:	3c 52       	add	#8,	r12	;r2 As==11
    b464:	0d 41       	mov	r1,	r13	;
    b466:	3d 50 1e 00 	add	#30,	r13	;#0x001e
    b46a:	8a 12       	call	r10		;
    b46c:	0c 41       	mov	r1,	r12	;
    b46e:	3c 50 10 00 	add	#16,	r12	;#0x0010
    b472:	0d 41       	mov	r1,	r13	;
    b474:	3d 50 1e 00 	add	#30,	r13	;#0x001e
    b478:	0e 41       	mov	r1,	r14	;
    b47a:	3e 50 2c 00 	add	#44,	r14	;#0x002c
    b47e:	b0 12 62 ae 	call	#44642		;#0xae62
    b482:	b0 12 5e c7 	call	#51038		;#0xc75e
    b486:	31 50 3a 00 	add	#58,	r1	;#0x003a
    b48a:	28 17       	popm	#3,	r10	;16-bit words
    b48c:	30 41       	ret			

0000b48e <__mspabi_subd>:
    b48e:	2a 15       	pushm	#3,	r10	;16-bit words
    b490:	31 80 3a 00 	sub	#58,	r1	;#0x003a
    b494:	81 48 00 00 	mov	r8,	0(r1)	;
    b498:	81 49 02 00 	mov	r9,	2(r1)	;
    b49c:	81 4a 04 00 	mov	r10,	4(r1)	;
    b4a0:	81 4b 06 00 	mov	r11,	6(r1)	;
    b4a4:	81 4c 08 00 	mov	r12,	8(r1)	;
    b4a8:	81 4d 0a 00 	mov	r13,	10(r1)	; 0x000a
    b4ac:	81 4e 0c 00 	mov	r14,	12(r1)	; 0x000c
    b4b0:	81 4f 0e 00 	mov	r15,	14(r1)	; 0x000e
    b4b4:	3a 40 d8 c9 	mov	#51672,	r10	;#0xc9d8
    b4b8:	0c 41       	mov	r1,	r12	;
    b4ba:	0d 41       	mov	r1,	r13	;
    b4bc:	3d 50 10 00 	add	#16,	r13	;#0x0010
    b4c0:	8a 12       	call	r10		;
    b4c2:	0c 41       	mov	r1,	r12	;
    b4c4:	3c 52       	add	#8,	r12	;r2 As==11
    b4c6:	0d 41       	mov	r1,	r13	;
    b4c8:	3d 50 1e 00 	add	#30,	r13	;#0x001e
    b4cc:	8a 12       	call	r10		;
    b4ce:	91 e3 20 00 	xor	#1,	32(r1)	;r3 As==01, 0x0020
    b4d2:	0c 41       	mov	r1,	r12	;
    b4d4:	3c 50 10 00 	add	#16,	r12	;#0x0010
    b4d8:	0d 41       	mov	r1,	r13	;
    b4da:	3d 50 1e 00 	add	#30,	r13	;#0x001e
    b4de:	0e 41       	mov	r1,	r14	;
    b4e0:	3e 50 2c 00 	add	#44,	r14	;#0x002c
    b4e4:	b0 12 62 ae 	call	#44642		;#0xae62
    b4e8:	b0 12 5e c7 	call	#51038		;#0xc75e
    b4ec:	31 50 3a 00 	add	#58,	r1	;#0x003a
    b4f0:	28 17       	popm	#3,	r10	;16-bit words
    b4f2:	30 41       	ret			

0000b4f4 <__mspabi_mpyd>:
    b4f4:	6a 15       	pushm	#7,	r10	;16-bit words
    b4f6:	31 80 58 00 	sub	#88,	r1	;#0x0058
    b4fa:	81 48 1e 00 	mov	r8,	30(r1)	; 0x001e
    b4fe:	81 49 20 00 	mov	r9,	32(r1)	; 0x0020
    b502:	81 4a 22 00 	mov	r10,	34(r1)	; 0x0022
    b506:	81 4b 24 00 	mov	r11,	36(r1)	; 0x0024
    b50a:	81 4c 26 00 	mov	r12,	38(r1)	; 0x0026
    b50e:	81 4d 28 00 	mov	r13,	40(r1)	; 0x0028
    b512:	81 4e 2a 00 	mov	r14,	42(r1)	; 0x002a
    b516:	81 4f 2c 00 	mov	r15,	44(r1)	; 0x002c
    b51a:	3a 40 d8 c9 	mov	#51672,	r10	;#0xc9d8
    b51e:	0c 41       	mov	r1,	r12	;
    b520:	3c 50 1e 00 	add	#30,	r12	;#0x001e
    b524:	0d 41       	mov	r1,	r13	;
    b526:	3d 50 2e 00 	add	#46,	r13	;#0x002e
    b52a:	8a 12       	call	r10		;
    b52c:	0c 41       	mov	r1,	r12	;
    b52e:	3c 50 26 00 	add	#38,	r12	;#0x0026
    b532:	0d 41       	mov	r1,	r13	;
    b534:	3d 50 3c 00 	add	#60,	r13	;#0x003c
    b538:	8a 12       	call	r10		;
    b53a:	1d 41 2e 00 	mov	46(r1),	r13	;0x0002e
    b53e:	1c 43       	mov	#1,	r12	;r3 As==01
    b540:	0c 9d       	cmp	r13,	r12	;
    b542:	11 28       	jnc	$+36     	;abs 0xb566
    b544:	1c 41 30 00 	mov	48(r1),	r12	;0x00030
    b548:	1c e1 3e 00 	xor	62(r1),	r12	;0x0003e
    b54c:	0d 43       	clr	r13		;
    b54e:	0d 8c       	sub	r12,	r13	;
    b550:	0c dd       	bis	r13,	r12	;
    b552:	5c 03       	rrum	#1,	r12	;
    b554:	4d 18 0c 11 	rpt #14 { rrax.w	r12		;
    b558:	81 4c 30 00 	mov	r12,	48(r1)	; 0x0030
    b55c:	0c 41       	mov	r1,	r12	;
    b55e:	3c 50 2e 00 	add	#46,	r12	;#0x002e
    b562:	30 40 ba b9 	br	#0xb9ba		;
    b566:	1c 41 3c 00 	mov	60(r1),	r12	;0x0003c
    b56a:	1e 43       	mov	#1,	r14	;r3 As==01
    b56c:	0e 9c       	cmp	r12,	r14	;
    b56e:	11 28       	jnc	$+36     	;abs 0xb592
    b570:	1c 41 30 00 	mov	48(r1),	r12	;0x00030
    b574:	1c e1 3e 00 	xor	62(r1),	r12	;0x0003e
    b578:	0d 43       	clr	r13		;
    b57a:	0d 8c       	sub	r12,	r13	;
    b57c:	0c dd       	bis	r13,	r12	;
    b57e:	5c 03       	rrum	#1,	r12	;
    b580:	4d 18 0c 11 	rpt #14 { rrax.w	r12		;
    b584:	81 4c 3e 00 	mov	r12,	62(r1)	; 0x003e
    b588:	0c 41       	mov	r1,	r12	;
    b58a:	3c 50 3c 00 	add	#60,	r12	;#0x003c
    b58e:	30 40 ba b9 	br	#0xb9ba		;
    b592:	2d 92       	cmp	#4,	r13	;r2 As==10
    b594:	05 20       	jnz	$+12     	;abs 0xb5a0
    b596:	2c 93       	cmp	#2,	r12	;r3 As==10
    b598:	02 20       	jnz	$+6      	;abs 0xb59e
    b59a:	80 00 b6 b9 	mova	#47542,	r0	;0x0b9b6
    b59e:	d2 3f       	jmp	$-90     	;abs 0xb544
    b5a0:	2c 92       	cmp	#4,	r12	;r2 As==10
    b5a2:	05 20       	jnz	$+12     	;abs 0xb5ae
    b5a4:	2d 93       	cmp	#2,	r13	;r3 As==10
    b5a6:	02 20       	jnz	$+6      	;abs 0xb5ac
    b5a8:	80 00 b6 b9 	mova	#47542,	r0	;0x0b9b6
    b5ac:	e1 3f       	jmp	$-60     	;abs 0xb570
    b5ae:	2d 93       	cmp	#2,	r13	;r3 As==10
    b5b0:	c9 27       	jz	$-108    	;abs 0xb544
    b5b2:	2c 93       	cmp	#2,	r12	;r3 As==10
    b5b4:	dd 27       	jz	$-68     	;abs 0xb570
    b5b6:	16 41 34 00 	mov	52(r1),	r6	;0x00034
    b5ba:	91 41 36 00 	mov	54(r1),	4(r1)	;0x00036
    b5be:	04 00 
    b5c0:	91 41 38 00 	mov	56(r1),	22(r1)	;0x00038, 0x0016
    b5c4:	16 00 
    b5c6:	91 41 3a 00 	mov	58(r1),	24(r1)	;0x0003a, 0x0018
    b5ca:	18 00 
    b5cc:	91 41 42 00 	mov	66(r1),	6(r1)	;0x00042
    b5d0:	06 00 
    b5d2:	91 41 44 00 	mov	68(r1),	12(r1)	;0x00044, 0x000c
    b5d6:	0c 00 
    b5d8:	14 41 46 00 	mov	70(r1),	r4	;0x00046
    b5dc:	15 41 48 00 	mov	72(r1),	r5	;0x00048
    b5e0:	37 40 d8 c4 	mov	#50392,	r7	;#0xc4d8
    b5e4:	08 46       	mov	r6,	r8	;
    b5e6:	19 41 04 00 	mov	4(r1),	r9	;
    b5ea:	0a 43       	clr	r10		;
    b5ec:	0b 4a       	mov	r10,	r11	;
    b5ee:	1c 41 06 00 	mov	6(r1),	r12	;
    b5f2:	1d 41 0c 00 	mov	12(r1),	r13	;0x0000c
    b5f6:	0e 4a       	mov	r10,	r14	;
    b5f8:	0f 4a       	mov	r10,	r15	;
    b5fa:	87 12       	call	r7		;
    b5fc:	81 4c 1a 00 	mov	r12,	26(r1)	; 0x001a
    b600:	81 4d 0e 00 	mov	r13,	14(r1)	; 0x000e
    b604:	81 4e 10 00 	mov	r14,	16(r1)	; 0x0010
    b608:	81 4f 12 00 	mov	r15,	18(r1)	; 0x0012
    b60c:	b1 40 20 00 	mov	#32,	0(r1)	;#0x0020
    b610:	00 00 
    b612:	1c 41 06 00 	mov	6(r1),	r12	;
    b616:	1d 41 0c 00 	mov	12(r1),	r13	;0x0000c
    b61a:	0e 44       	mov	r4,	r14	;
    b61c:	0f 45       	mov	r5,	r15	;
    b61e:	b0 12 2e c6 	call	#50734		;#0xc62e
    b622:	81 4c 08 00 	mov	r12,	8(r1)	;
    b626:	81 4d 0a 00 	mov	r13,	10(r1)	; 0x000a
    b62a:	08 4c       	mov	r12,	r8	;
    b62c:	09 4d       	mov	r13,	r9	;
    b62e:	0b 4a       	mov	r10,	r11	;
    b630:	0c 46       	mov	r6,	r12	;
    b632:	1d 41 04 00 	mov	4(r1),	r13	;
    b636:	0e 4a       	mov	r10,	r14	;
    b638:	0f 4a       	mov	r10,	r15	;
    b63a:	87 12       	call	r7		;
    b63c:	81 4c 1c 00 	mov	r12,	28(r1)	; 0x001c
    b640:	05 4d       	mov	r13,	r5	;
    b642:	04 4e       	mov	r14,	r4	;
    b644:	81 4f 14 00 	mov	r15,	20(r1)	; 0x0014
    b648:	0c 46       	mov	r6,	r12	;
    b64a:	1d 41 04 00 	mov	4(r1),	r13	;
    b64e:	1e 41 16 00 	mov	22(r1),	r14	;0x00016
    b652:	1f 41 18 00 	mov	24(r1),	r15	;0x00018
    b656:	b0 12 2e c6 	call	#50734		;#0xc62e
    b65a:	08 4c       	mov	r12,	r8	;
    b65c:	09 4d       	mov	r13,	r9	;
    b65e:	0b 4a       	mov	r10,	r11	;
    b660:	1c 41 08 00 	mov	8(r1),	r12	;
    b664:	1d 41 0a 00 	mov	10(r1),	r13	;0x0000a
    b668:	0e 4a       	mov	r10,	r14	;
    b66a:	0f 4a       	mov	r10,	r15	;
    b66c:	87 12       	call	r7		;
    b66e:	81 4c 08 00 	mov	r12,	8(r1)	;
    b672:	81 4d 0a 00 	mov	r13,	10(r1)	; 0x000a
    b676:	81 4e 16 00 	mov	r14,	22(r1)	; 0x0016
    b67a:	81 4f 18 00 	mov	r15,	24(r1)	; 0x0018
    b67e:	0b 4a       	mov	r10,	r11	;
    b680:	1c 41 06 00 	mov	6(r1),	r12	;
    b684:	1d 41 0c 00 	mov	12(r1),	r13	;0x0000c
    b688:	0e 4a       	mov	r10,	r14	;
    b68a:	0f 4a       	mov	r10,	r15	;
    b68c:	87 12       	call	r7		;
    b68e:	17 41 1c 00 	mov	28(r1),	r7	;0x0001c
    b692:	07 5c       	add	r12,	r7	;
    b694:	19 43       	mov	#1,	r9	;r3 As==01
    b696:	07 9c       	cmp	r12,	r7	;
    b698:	01 28       	jnc	$+4      	;abs 0xb69c
    b69a:	09 4a       	mov	r10,	r9	;
    b69c:	0c 4d       	mov	r13,	r12	;
    b69e:	0c 55       	add	r5,	r12	;
    b6a0:	18 43       	mov	#1,	r8	;r3 As==01
    b6a2:	0c 9d       	cmp	r13,	r12	;
    b6a4:	01 28       	jnc	$+4      	;abs 0xb6a8
    b6a6:	08 43       	clr	r8		;
    b6a8:	0a 49       	mov	r9,	r10	;
    b6aa:	0a 5c       	add	r12,	r10	;
    b6ac:	1d 43       	mov	#1,	r13	;r3 As==01
    b6ae:	0a 9c       	cmp	r12,	r10	;
    b6b0:	01 28       	jnc	$+4      	;abs 0xb6b4
    b6b2:	0d 43       	clr	r13		;
    b6b4:	08 dd       	bis	r13,	r8	;
    b6b6:	0d 4e       	mov	r14,	r13	;
    b6b8:	0d 54       	add	r4,	r13	;
    b6ba:	1c 43       	mov	#1,	r12	;r3 As==01
    b6bc:	0d 9e       	cmp	r14,	r13	;
    b6be:	01 28       	jnc	$+4      	;abs 0xb6c2
    b6c0:	0c 43       	clr	r12		;
    b6c2:	08 5d       	add	r13,	r8	;
    b6c4:	1e 43       	mov	#1,	r14	;r3 As==01
    b6c6:	08 9d       	cmp	r13,	r8	;
    b6c8:	01 28       	jnc	$+4      	;abs 0xb6cc
    b6ca:	0e 43       	clr	r14		;
    b6cc:	0c de       	bis	r14,	r12	;
    b6ce:	1f 51 14 00 	add	20(r1),	r15	;0x00014
    b6d2:	0b 4c       	mov	r12,	r11	;
    b6d4:	0b 5f       	add	r15,	r11	;
    b6d6:	1b 91 14 00 	cmp	20(r1),	r11	;0x00014
    b6da:	0e 28       	jnc	$+30     	;abs 0xb6f8
    b6dc:	81 9b 14 00 	cmp	r11,	20(r1)	; 0x0014
    b6e0:	0f 20       	jnz	$+32     	;abs 0xb700
    b6e2:	08 94       	cmp	r4,	r8	;
    b6e4:	09 28       	jnc	$+20     	;abs 0xb6f8
    b6e6:	04 98       	cmp	r8,	r4	;
    b6e8:	0b 20       	jnz	$+24     	;abs 0xb700
    b6ea:	0a 95       	cmp	r5,	r10	;
    b6ec:	05 28       	jnc	$+12     	;abs 0xb6f8
    b6ee:	05 9a       	cmp	r10,	r5	;
    b6f0:	07 20       	jnz	$+16     	;abs 0xb700
    b6f2:	17 91 1c 00 	cmp	28(r1),	r7	;0x0001c
    b6f6:	04 2c       	jc	$+10     	;abs 0xb700
    b6f8:	05 43       	clr	r5		;
    b6fa:	91 43 06 00 	mov	#1,	6(r1)	;r3 As==01
    b6fe:	03 3c       	jmp	$+8      	;abs 0xb706
    b700:	05 43       	clr	r5		;
    b702:	81 45 06 00 	mov	r5,	6(r1)	;
    b706:	b1 40 20 00 	mov	#32,	0(r1)	;#0x0020
    b70a:	00 00 
    b70c:	0c 47       	mov	r7,	r12	;
    b70e:	0d 4a       	mov	r10,	r13	;
    b710:	0e 43       	clr	r14		;
    b712:	0f 4e       	mov	r14,	r15	;
    b714:	81 4b 02 00 	mov	r11,	2(r1)	;
    b718:	b0 12 a6 c6 	call	#50854		;#0xc6a6
    b71c:	14 41 1a 00 	mov	26(r1),	r4	;0x0001a
    b720:	04 5c       	add	r12,	r4	;
    b722:	19 43       	mov	#1,	r9	;r3 As==01
    b724:	1b 41 02 00 	mov	2(r1),	r11	;
    b728:	04 9c       	cmp	r12,	r4	;
    b72a:	01 28       	jnc	$+4      	;abs 0xb72e
    b72c:	09 43       	clr	r9		;
    b72e:	1c 41 0e 00 	mov	14(r1),	r12	;0x0000e
    b732:	0c 5d       	add	r13,	r12	;
    b734:	16 43       	mov	#1,	r6	;r3 As==01
    b736:	0c 9d       	cmp	r13,	r12	;
    b738:	01 28       	jnc	$+4      	;abs 0xb73c
    b73a:	06 43       	clr	r6		;
    b73c:	09 5c       	add	r12,	r9	;
    b73e:	1d 43       	mov	#1,	r13	;r3 As==01
    b740:	09 9c       	cmp	r12,	r9	;
    b742:	01 28       	jnc	$+4      	;abs 0xb746
    b744:	0d 43       	clr	r13		;
    b746:	06 dd       	bis	r13,	r6	;
    b748:	1d 41 10 00 	mov	16(r1),	r13	;0x00010
    b74c:	0d 5e       	add	r14,	r13	;
    b74e:	1c 43       	mov	#1,	r12	;r3 As==01
    b750:	0d 9e       	cmp	r14,	r13	;
    b752:	01 28       	jnc	$+4      	;abs 0xb756
    b754:	0c 43       	clr	r12		;
    b756:	06 5d       	add	r13,	r6	;
    b758:	1e 43       	mov	#1,	r14	;r3 As==01
    b75a:	06 9d       	cmp	r13,	r6	;
    b75c:	01 28       	jnc	$+4      	;abs 0xb760
    b75e:	0e 43       	clr	r14		;
    b760:	0c de       	bis	r14,	r12	;
    b762:	1f 51 12 00 	add	18(r1),	r15	;0x00012
    b766:	81 44 04 00 	mov	r4,	4(r1)	;
    b76a:	04 4c       	mov	r12,	r4	;
    b76c:	04 5f       	add	r15,	r4	;
    b76e:	14 91 12 00 	cmp	18(r1),	r4	;0x00012
    b772:	13 28       	jnc	$+40     	;abs 0xb79a
    b774:	81 94 12 00 	cmp	r4,	18(r1)	; 0x0012
    b778:	11 20       	jnz	$+36     	;abs 0xb79c
    b77a:	16 91 10 00 	cmp	16(r1),	r6	;0x00010
    b77e:	0d 28       	jnc	$+28     	;abs 0xb79a
    b780:	81 96 10 00 	cmp	r6,	16(r1)	; 0x0010
    b784:	0b 20       	jnz	$+24     	;abs 0xb79c
    b786:	19 91 0e 00 	cmp	14(r1),	r9	;0x0000e
    b78a:	07 28       	jnc	$+16     	;abs 0xb79a
    b78c:	81 99 0e 00 	cmp	r9,	14(r1)	; 0x000e
    b790:	05 20       	jnz	$+12     	;abs 0xb79c
    b792:	91 91 1a 00 	cmp	26(r1),	4(r1)	;0x0001a
    b796:	04 00 
    b798:	01 2c       	jc	$+4      	;abs 0xb79c
    b79a:	15 43       	mov	#1,	r5	;r3 As==01
    b79c:	b1 40 20 00 	mov	#32,	0(r1)	;#0x0020
    b7a0:	00 00 
    b7a2:	0c 47       	mov	r7,	r12	;
    b7a4:	0d 4a       	mov	r10,	r13	;
    b7a6:	0e 48       	mov	r8,	r14	;
    b7a8:	0f 4b       	mov	r11,	r15	;
    b7aa:	b0 12 2e c6 	call	#50734		;#0xc62e
    b7ae:	17 41 08 00 	mov	8(r1),	r7	;
    b7b2:	07 5c       	add	r12,	r7	;
    b7b4:	18 43       	mov	#1,	r8	;r3 As==01
    b7b6:	07 9c       	cmp	r12,	r7	;
    b7b8:	01 28       	jnc	$+4      	;abs 0xb7bc
    b7ba:	08 43       	clr	r8		;
    b7bc:	1a 41 0a 00 	mov	10(r1),	r10	;0x0000a
    b7c0:	0a 5d       	add	r13,	r10	;
    b7c2:	1c 43       	mov	#1,	r12	;r3 As==01
    b7c4:	0a 9d       	cmp	r13,	r10	;
    b7c6:	01 28       	jnc	$+4      	;abs 0xb7ca
    b7c8:	0c 43       	clr	r12		;
    b7ca:	0d 48       	mov	r8,	r13	;
    b7cc:	0d 5a       	add	r10,	r13	;
    b7ce:	18 43       	mov	#1,	r8	;r3 As==01
    b7d0:	0d 9a       	cmp	r10,	r13	;
    b7d2:	01 28       	jnc	$+4      	;abs 0xb7d6
    b7d4:	08 43       	clr	r8		;
    b7d6:	0c d8       	bis	r8,	r12	;
    b7d8:	1a 41 16 00 	mov	22(r1),	r10	;0x00016
    b7dc:	0a 5e       	add	r14,	r10	;
    b7de:	18 43       	mov	#1,	r8	;r3 As==01
    b7e0:	0a 9e       	cmp	r14,	r10	;
    b7e2:	01 28       	jnc	$+4      	;abs 0xb7e6
    b7e4:	08 43       	clr	r8		;
    b7e6:	0c 5a       	add	r10,	r12	;
    b7e8:	1e 43       	mov	#1,	r14	;r3 As==01
    b7ea:	0c 9a       	cmp	r10,	r12	;
    b7ec:	01 28       	jnc	$+4      	;abs 0xb7f0
    b7ee:	0e 43       	clr	r14		;
    b7f0:	08 de       	bis	r14,	r8	;
    b7f2:	1f 51 18 00 	add	24(r1),	r15	;0x00018
    b7f6:	0f 58       	add	r8,	r15	;
    b7f8:	0e 47       	mov	r7,	r14	;
    b7fa:	0e 55       	add	r5,	r14	;
    b7fc:	1b 43       	mov	#1,	r11	;r3 As==01
    b7fe:	0e 97       	cmp	r7,	r14	;
    b800:	01 28       	jnc	$+4      	;abs 0xb804
    b802:	0b 43       	clr	r11		;
    b804:	08 4d       	mov	r13,	r8	;
    b806:	07 43       	clr	r7		;
    b808:	0b 5d       	add	r13,	r11	;
    b80a:	1d 43       	mov	#1,	r13	;r3 As==01
    b80c:	0b 98       	cmp	r8,	r11	;
    b80e:	01 28       	jnc	$+4      	;abs 0xb812
    b810:	0d 47       	mov	r7,	r13	;
    b812:	07 dd       	bis	r13,	r7	;
    b814:	1d 41 06 00 	mov	6(r1),	r13	;
    b818:	0d 5c       	add	r12,	r13	;
    b81a:	1a 43       	mov	#1,	r10	;r3 As==01
    b81c:	0d 9c       	cmp	r12,	r13	;
    b81e:	01 28       	jnc	$+4      	;abs 0xb822
    b820:	0a 43       	clr	r10		;
    b822:	07 5d       	add	r13,	r7	;
    b824:	1c 43       	mov	#1,	r12	;r3 As==01
    b826:	07 9d       	cmp	r13,	r7	;
    b828:	01 28       	jnc	$+4      	;abs 0xb82c
    b82a:	0c 43       	clr	r12		;
    b82c:	0a dc       	bis	r12,	r10	;
    b82e:	08 4e       	mov	r14,	r8	;
    b830:	0a 5f       	add	r15,	r10	;
    b832:	15 41 32 00 	mov	50(r1),	r5	;0x00032
    b836:	15 51 40 00 	add	64(r1),	r5	;0x00040
    b83a:	1c 41 30 00 	mov	48(r1),	r12	;0x00030
    b83e:	1c e1 3e 00 	xor	62(r1),	r12	;0x0003e
    b842:	0d 43       	clr	r13		;
    b844:	0d 8c       	sub	r12,	r13	;
    b846:	0c dd       	bis	r13,	r12	;
    b848:	5c 03       	rrum	#1,	r12	;
    b84a:	4d 18 0c 11 	rpt #14 { rrax.w	r12		;
    b84e:	81 4c 4c 00 	mov	r12,	76(r1)	; 0x004c
    b852:	25 52       	add	#4,	r5	;r2 As==10
    b854:	3c 40 ff 1f 	mov	#8191,	r12	;#0x1fff
    b858:	0c 9a       	cmp	r10,	r12	;
    b85a:	73 2c       	jc	$+232    	;abs 0xb942
    b85c:	18 b3       	bit	#1,	r8	;r3 As==01
    b85e:	14 24       	jz	$+42     	;abs 0xb888
    b860:	91 43 00 00 	mov	#1,	0(r1)	;r3 As==01
    b864:	1c 41 04 00 	mov	4(r1),	r12	;
    b868:	0d 49       	mov	r9,	r13	;
    b86a:	0e 46       	mov	r6,	r14	;
    b86c:	0f 44       	mov	r4,	r15	;
    b86e:	81 4b 02 00 	mov	r11,	2(r1)	;
    b872:	b0 12 2e c6 	call	#50734		;#0xc62e
    b876:	81 4c 04 00 	mov	r12,	4(r1)	;
    b87a:	09 4d       	mov	r13,	r9	;
    b87c:	06 4e       	mov	r14,	r6	;
    b87e:	04 4f       	mov	r15,	r4	;
    b880:	34 d0 00 80 	bis	#32768,	r4	;#0x8000
    b884:	1b 41 02 00 	mov	2(r1),	r11	;
    b888:	91 43 00 00 	mov	#1,	0(r1)	;r3 As==01
    b88c:	0c 48       	mov	r8,	r12	;
    b88e:	0d 4b       	mov	r11,	r13	;
    b890:	0e 47       	mov	r7,	r14	;
    b892:	0f 4a       	mov	r10,	r15	;
    b894:	b0 12 2e c6 	call	#50734		;#0xc62e
    b898:	08 4c       	mov	r12,	r8	;
    b89a:	0b 4d       	mov	r13,	r11	;
    b89c:	07 4e       	mov	r14,	r7	;
    b89e:	0a 4f       	mov	r15,	r10	;
    b8a0:	15 53       	inc	r5		;
    b8a2:	d8 3f       	jmp	$-78     	;abs 0xb854
    b8a4:	0e 48       	mov	r8,	r14	;
    b8a6:	0e 58       	add	r8,	r14	;
    b8a8:	1d 43       	mov	#1,	r13	;r3 As==01
    b8aa:	0e 98       	cmp	r8,	r14	;
    b8ac:	01 28       	jnc	$+4      	;abs 0xb8b0
    b8ae:	0d 43       	clr	r13		;
    b8b0:	0f 4b       	mov	r11,	r15	;
    b8b2:	0f 5b       	add	r11,	r15	;
    b8b4:	1c 43       	mov	#1,	r12	;r3 As==01
    b8b6:	0f 9b       	cmp	r11,	r15	;
    b8b8:	01 28       	jnc	$+4      	;abs 0xb8bc
    b8ba:	0c 43       	clr	r12		;
    b8bc:	0b 4d       	mov	r13,	r11	;
    b8be:	0b 5f       	add	r15,	r11	;
    b8c0:	1d 43       	mov	#1,	r13	;r3 As==01
    b8c2:	0b 9f       	cmp	r15,	r11	;
    b8c4:	01 28       	jnc	$+4      	;abs 0xb8c8
    b8c6:	0d 43       	clr	r13		;
    b8c8:	0c dd       	bis	r13,	r12	;
    b8ca:	0f 47       	mov	r7,	r15	;
    b8cc:	0f 57       	add	r7,	r15	;
    b8ce:	1d 43       	mov	#1,	r13	;r3 As==01
    b8d0:	0f 97       	cmp	r7,	r15	;
    b8d2:	01 28       	jnc	$+4      	;abs 0xb8d6
    b8d4:	0d 43       	clr	r13		;
    b8d6:	07 4c       	mov	r12,	r7	;
    b8d8:	07 5f       	add	r15,	r7	;
    b8da:	1c 43       	mov	#1,	r12	;r3 As==01
    b8dc:	07 9f       	cmp	r15,	r7	;
    b8de:	01 28       	jnc	$+4      	;abs 0xb8e2
    b8e0:	0c 43       	clr	r12		;
    b8e2:	0d dc       	bis	r12,	r13	;
    b8e4:	0a 5a       	rla	r10		;
    b8e6:	08 4e       	mov	r14,	r8	;
    b8e8:	0a 5d       	add	r13,	r10	;
    b8ea:	04 93       	cmp	#0,	r4	;r3 As==00
    b8ec:	01 34       	jge	$+4      	;abs 0xb8f0
    b8ee:	18 d3       	bis	#1,	r8	;r3 As==01
    b8f0:	1e 41 04 00 	mov	4(r1),	r14	;
    b8f4:	0e 5e       	rla	r14		;
    b8f6:	1f 43       	mov	#1,	r15	;r3 As==01
    b8f8:	1e 91 04 00 	cmp	4(r1),	r14	;
    b8fc:	01 28       	jnc	$+4      	;abs 0xb900
    b8fe:	0f 43       	clr	r15		;
    b900:	0d 49       	mov	r9,	r13	;
    b902:	0d 59       	add	r9,	r13	;
    b904:	1c 43       	mov	#1,	r12	;r3 As==01
    b906:	0d 99       	cmp	r9,	r13	;
    b908:	01 28       	jnc	$+4      	;abs 0xb90c
    b90a:	0c 43       	clr	r12		;
    b90c:	09 4f       	mov	r15,	r9	;
    b90e:	09 5d       	add	r13,	r9	;
    b910:	1f 43       	mov	#1,	r15	;r3 As==01
    b912:	09 9d       	cmp	r13,	r9	;
    b914:	01 28       	jnc	$+4      	;abs 0xb918
    b916:	0f 43       	clr	r15		;
    b918:	0c df       	bis	r15,	r12	;
    b91a:	0f 46       	mov	r6,	r15	;
    b91c:	0f 56       	add	r6,	r15	;
    b91e:	1d 43       	mov	#1,	r13	;r3 As==01
    b920:	0f 96       	cmp	r6,	r15	;
    b922:	01 28       	jnc	$+4      	;abs 0xb926
    b924:	0d 43       	clr	r13		;
    b926:	06 4c       	mov	r12,	r6	;
    b928:	06 5f       	add	r15,	r6	;
    b92a:	1c 43       	mov	#1,	r12	;r3 As==01
    b92c:	06 9f       	cmp	r15,	r6	;
    b92e:	01 28       	jnc	$+4      	;abs 0xb932
    b930:	0c 43       	clr	r12		;
    b932:	0d dc       	bis	r12,	r13	;
    b934:	0f 44       	mov	r4,	r15	;
    b936:	0f 54       	add	r4,	r15	;
    b938:	81 4e 04 00 	mov	r14,	4(r1)	;
    b93c:	04 4d       	mov	r13,	r4	;
    b93e:	04 5f       	add	r15,	r4	;
    b940:	35 53       	add	#-1,	r5	;r3 As==11
    b942:	3e 40 ff 0f 	mov	#4095,	r14	;#0x0fff
    b946:	0e 9a       	cmp	r10,	r14	;
    b948:	ad 2f       	jc	$-164    	;abs 0xb8a4
    b94a:	81 45 4e 00 	mov	r5,	78(r1)	; 0x004e
    b94e:	78 90 80 ff 	cmp.b	#65408,	r8	;#0xff80
    b952:	22 20       	jnz	$+70     	;abs 0xb998
    b954:	0c 48       	mov	r8,	r12	;
    b956:	3c f0 00 01 	and	#256,	r12	;#0x0100
    b95a:	0c 93       	cmp	#0,	r12	;r3 As==00
    b95c:	1d 20       	jnz	$+60     	;abs 0xb998
    b95e:	19 d1 04 00 	bis	4(r1),	r9	;
    b962:	09 d6       	bis	r6,	r9	;
    b964:	09 d4       	bis	r4,	r9	;
    b966:	09 93       	cmp	#0,	r9	;r3 As==00
    b968:	17 24       	jz	$+48     	;abs 0xb998
    b96a:	0f 48       	mov	r8,	r15	;
    b96c:	3f 50 80 00 	add	#128,	r15	;#0x0080
    b970:	1d 43       	mov	#1,	r13	;r3 As==01
    b972:	0f 98       	cmp	r8,	r15	;
    b974:	01 28       	jnc	$+4      	;abs 0xb978
    b976:	0d 4c       	mov	r12,	r13	;
    b978:	0d 5b       	add	r11,	r13	;
    b97a:	1c 43       	mov	#1,	r12	;r3 As==01
    b97c:	0d 9b       	cmp	r11,	r13	;
    b97e:	01 28       	jnc	$+4      	;abs 0xb982
    b980:	0c 43       	clr	r12		;
    b982:	0c 57       	add	r7,	r12	;
    b984:	1e 43       	mov	#1,	r14	;r3 As==01
    b986:	0c 97       	cmp	r7,	r12	;
    b988:	01 28       	jnc	$+4      	;abs 0xb98c
    b98a:	0e 43       	clr	r14		;
    b98c:	08 4f       	mov	r15,	r8	;
    b98e:	38 f0 00 ff 	and	#65280,	r8	;#0xff00
    b992:	0b 4d       	mov	r13,	r11	;
    b994:	07 4c       	mov	r12,	r7	;
    b996:	0a 5e       	add	r14,	r10	;
    b998:	81 48 50 00 	mov	r8,	80(r1)	; 0x0050
    b99c:	81 4b 52 00 	mov	r11,	82(r1)	; 0x0052
    b9a0:	81 47 54 00 	mov	r7,	84(r1)	; 0x0054
    b9a4:	81 4a 56 00 	mov	r10,	86(r1)	; 0x0056
    b9a8:	b1 40 03 00 	mov	#3,	74(r1)	; 0x004a
    b9ac:	4a 00 
    b9ae:	0c 41       	mov	r1,	r12	;
    b9b0:	3c 50 4a 00 	add	#74,	r12	;#0x004a
    b9b4:	02 3c       	jmp	$+6      	;abs 0xb9ba
    b9b6:	3c 40 10 46 	mov	#17936,	r12	;#0x4610
    b9ba:	b0 12 5e c7 	call	#51038		;#0xc75e
    b9be:	31 50 58 00 	add	#88,	r1	;#0x0058
    b9c2:	64 17       	popm	#7,	r10	;16-bit words
    b9c4:	30 41       	ret			

0000b9c6 <__mspabi_divd>:
    b9c6:	6a 15       	pushm	#7,	r10	;16-bit words
    b9c8:	31 80 40 00 	sub	#64,	r1	;#0x0040
    b9cc:	81 48 14 00 	mov	r8,	20(r1)	; 0x0014
    b9d0:	81 49 16 00 	mov	r9,	22(r1)	; 0x0016
    b9d4:	81 4a 18 00 	mov	r10,	24(r1)	; 0x0018
    b9d8:	81 4b 1a 00 	mov	r11,	26(r1)	; 0x001a
    b9dc:	81 4c 1c 00 	mov	r12,	28(r1)	; 0x001c
    b9e0:	81 4d 1e 00 	mov	r13,	30(r1)	; 0x001e
    b9e4:	81 4e 20 00 	mov	r14,	32(r1)	; 0x0020
    b9e8:	81 4f 22 00 	mov	r15,	34(r1)	; 0x0022
    b9ec:	3a 40 d8 c9 	mov	#51672,	r10	;#0xc9d8
    b9f0:	0c 41       	mov	r1,	r12	;
    b9f2:	3c 50 14 00 	add	#20,	r12	;#0x0014
    b9f6:	0d 41       	mov	r1,	r13	;
    b9f8:	3d 50 24 00 	add	#36,	r13	;#0x0024
    b9fc:	8a 12       	call	r10		;
    b9fe:	0c 41       	mov	r1,	r12	;
    ba00:	3c 50 1c 00 	add	#28,	r12	;#0x001c
    ba04:	0d 41       	mov	r1,	r13	;
    ba06:	3d 50 32 00 	add	#50,	r13	;#0x0032
    ba0a:	8a 12       	call	r10		;
    ba0c:	1d 41 24 00 	mov	36(r1),	r13	;0x00024
    ba10:	17 43       	mov	#1,	r7	;r3 As==01
    ba12:	07 9d       	cmp	r13,	r7	;
    ba14:	30 2d       	jc	$+610    	;abs 0xbc76
    ba16:	1c 41 32 00 	mov	50(r1),	r12	;0x00032
    ba1a:	1e 43       	mov	#1,	r14	;r3 As==01
    ba1c:	0e 9c       	cmp	r12,	r14	;
    ba1e:	2f 2d       	jc	$+608    	;abs 0xbc7e
    ba20:	91 e1 34 00 	xor	52(r1),	38(r1)	;0x00034, 0x0026
    ba24:	26 00 
    ba26:	2d 92       	cmp	#4,	r13	;r2 As==10
    ba28:	02 24       	jz	$+6      	;abs 0xba2e
    ba2a:	2d 93       	cmp	#2,	r13	;r3 As==10
    ba2c:	03 20       	jnz	$+8      	;abs 0xba34
    ba2e:	0d 9c       	cmp	r12,	r13	;
    ba30:	22 21       	jnz	$+582    	;abs 0xbc76
    ba32:	29 3d       	jmp	$+596    	;abs 0xbc86
    ba34:	2c 92       	cmp	#4,	r12	;r2 As==10
    ba36:	0b 20       	jnz	$+24     	;abs 0xba4e
    ba38:	81 43 2a 00 	mov	#0,	42(r1)	;r3 As==00, 0x002a
    ba3c:	81 43 2c 00 	mov	#0,	44(r1)	;r3 As==00, 0x002c
    ba40:	81 43 2e 00 	mov	#0,	46(r1)	;r3 As==00, 0x002e
    ba44:	81 43 30 00 	mov	#0,	48(r1)	;r3 As==00, 0x0030
    ba48:	81 43 28 00 	mov	#0,	40(r1)	;r3 As==00, 0x0028
    ba4c:	14 3d       	jmp	$+554    	;abs 0xbc76
    ba4e:	2c 93       	cmp	#2,	r12	;r3 As==10
    ba50:	03 20       	jnz	$+8      	;abs 0xba58
    ba52:	a1 42 24 00 	mov	#4,	36(r1)	;r2 As==10, 0x0024
    ba56:	0f 3d       	jmp	$+544    	;abs 0xbc76
    ba58:	1e 41 28 00 	mov	40(r1),	r14	;0x00028
    ba5c:	1e 81 36 00 	sub	54(r1),	r14	;0x00036
    ba60:	81 4e 28 00 	mov	r14,	40(r1)	; 0x0028
    ba64:	17 41 2a 00 	mov	42(r1),	r7	;0x0002a
    ba68:	18 41 2c 00 	mov	44(r1),	r8	;0x0002c
    ba6c:	19 41 2e 00 	mov	46(r1),	r9	;0x0002e
    ba70:	1a 41 30 00 	mov	48(r1),	r10	;0x00030
    ba74:	91 41 38 00 	mov	56(r1),	16(r1)	;0x00038, 0x0010
    ba78:	10 00 
    ba7a:	91 41 3a 00 	mov	58(r1),	2(r1)	;0x0003a
    ba7e:	02 00 
    ba80:	91 41 3c 00 	mov	60(r1),	4(r1)	;0x0003c
    ba84:	04 00 
    ba86:	91 41 3e 00 	mov	62(r1),	6(r1)	;0x0003e
    ba8a:	06 00 
    ba8c:	1a 91 06 00 	cmp	6(r1),	r10	;
    ba90:	12 28       	jnc	$+38     	;abs 0xbab6
    ba92:	81 9a 06 00 	cmp	r10,	6(r1)	;
    ba96:	35 20       	jnz	$+108    	;abs 0xbb02
    ba98:	19 91 04 00 	cmp	4(r1),	r9	;
    ba9c:	0c 28       	jnc	$+26     	;abs 0xbab6
    ba9e:	81 99 04 00 	cmp	r9,	4(r1)	;
    baa2:	2f 20       	jnz	$+96     	;abs 0xbb02
    baa4:	18 91 02 00 	cmp	2(r1),	r8	;
    baa8:	06 28       	jnc	$+14     	;abs 0xbab6
    baaa:	81 98 02 00 	cmp	r8,	2(r1)	;
    baae:	29 20       	jnz	$+84     	;abs 0xbb02
    bab0:	17 91 10 00 	cmp	16(r1),	r7	;0x00010
    bab4:	26 2c       	jc	$+78     	;abs 0xbb02
    bab6:	0f 47       	mov	r7,	r15	;
    bab8:	0f 57       	add	r7,	r15	;
    baba:	16 43       	mov	#1,	r6	;r3 As==01
    babc:	0f 97       	cmp	r7,	r15	;
    babe:	01 28       	jnc	$+4      	;abs 0xbac2
    bac0:	06 43       	clr	r6		;
    bac2:	0d 48       	mov	r8,	r13	;
    bac4:	0d 58       	add	r8,	r13	;
    bac6:	1c 43       	mov	#1,	r12	;r3 As==01
    bac8:	0d 98       	cmp	r8,	r13	;
    baca:	01 28       	jnc	$+4      	;abs 0xbace
    bacc:	0c 43       	clr	r12		;
    bace:	08 46       	mov	r6,	r8	;
    bad0:	08 5d       	add	r13,	r8	;
    bad2:	17 43       	mov	#1,	r7	;r3 As==01
    bad4:	08 9d       	cmp	r13,	r8	;
    bad6:	01 28       	jnc	$+4      	;abs 0xbada
    bad8:	07 43       	clr	r7		;
    bada:	0c d7       	bis	r7,	r12	;
    badc:	07 49       	mov	r9,	r7	;
    bade:	07 59       	add	r9,	r7	;
    bae0:	1d 43       	mov	#1,	r13	;r3 As==01
    bae2:	07 99       	cmp	r9,	r7	;
    bae4:	01 28       	jnc	$+4      	;abs 0xbae8
    bae6:	0d 43       	clr	r13		;
    bae8:	09 4c       	mov	r12,	r9	;
    baea:	09 57       	add	r7,	r9	;
    baec:	1c 43       	mov	#1,	r12	;r3 As==01
    baee:	09 97       	cmp	r7,	r9	;
    baf0:	01 28       	jnc	$+4      	;abs 0xbaf4
    baf2:	0c 43       	clr	r12		;
    baf4:	0d dc       	bis	r12,	r13	;
    baf6:	0a 5a       	rla	r10		;
    baf8:	07 4f       	mov	r15,	r7	;
    bafa:	0a 5d       	add	r13,	r10	;
    bafc:	3e 53       	add	#-1,	r14	;r3 As==11
    bafe:	81 4e 28 00 	mov	r14,	40(r1)	; 0x0028
    bb02:	b1 40 3d 00 	mov	#61,	12(r1)	;#0x003d, 0x000c
    bb06:	0c 00 
    bb08:	0c 43       	clr	r12		;
    bb0a:	0d 4c       	mov	r12,	r13	;
    bb0c:	81 4c 12 00 	mov	r12,	18(r1)	; 0x0012
    bb10:	3f 40 00 10 	mov	#4096,	r15	;#0x1000
    bb14:	06 4c       	mov	r12,	r6	;
    bb16:	81 4c 08 00 	mov	r12,	8(r1)	;
    bb1a:	81 4c 0a 00 	mov	r12,	10(r1)	; 0x000a
    bb1e:	81 4c 0e 00 	mov	r12,	14(r1)	; 0x000e
    bb22:	1a 91 06 00 	cmp	6(r1),	r10	;
    bb26:	43 28       	jnc	$+136    	;abs 0xbbae
    bb28:	81 9a 06 00 	cmp	r10,	6(r1)	;
    bb2c:	0f 20       	jnz	$+32     	;abs 0xbb4c
    bb2e:	19 91 04 00 	cmp	4(r1),	r9	;
    bb32:	3d 28       	jnc	$+124    	;abs 0xbbae
    bb34:	81 99 04 00 	cmp	r9,	4(r1)	;
    bb38:	09 20       	jnz	$+20     	;abs 0xbb4c
    bb3a:	18 91 02 00 	cmp	2(r1),	r8	;
    bb3e:	37 28       	jnc	$+112    	;abs 0xbbae
    bb40:	81 98 02 00 	cmp	r8,	2(r1)	;
    bb44:	03 20       	jnz	$+8      	;abs 0xbb4c
    bb46:	17 91 10 00 	cmp	16(r1),	r7	;0x00010
    bb4a:	31 28       	jnc	$+100    	;abs 0xbbae
    bb4c:	06 dc       	bis	r12,	r6	;
    bb4e:	81 dd 08 00 	bis	r13,	8(r1)	;
    bb52:	91 d1 12 00 	bis	18(r1),	10(r1)	;0x00012, 0x000a
    bb56:	0a 00 
    bb58:	81 df 0e 00 	bis	r15,	14(r1)	; 0x000e
    bb5c:	05 47       	mov	r7,	r5	;
    bb5e:	15 81 10 00 	sub	16(r1),	r5	;0x00010
    bb62:	1e 43       	mov	#1,	r14	;r3 As==01
    bb64:	07 95       	cmp	r5,	r7	;
    bb66:	01 28       	jnc	$+4      	;abs 0xbb6a
    bb68:	0e 43       	clr	r14		;
    bb6a:	07 48       	mov	r8,	r7	;
    bb6c:	17 81 02 00 	sub	2(r1),	r7	;
    bb70:	04 47       	mov	r7,	r4	;
    bb72:	17 43       	mov	#1,	r7	;r3 As==01
    bb74:	08 94       	cmp	r4,	r8	;
    bb76:	01 28       	jnc	$+4      	;abs 0xbb7a
    bb78:	07 43       	clr	r7		;
    bb7a:	08 44       	mov	r4,	r8	;
    bb7c:	08 8e       	sub	r14,	r8	;
    bb7e:	1e 43       	mov	#1,	r14	;r3 As==01
    bb80:	04 98       	cmp	r8,	r4	;
    bb82:	01 28       	jnc	$+4      	;abs 0xbb86
    bb84:	0e 43       	clr	r14		;
    bb86:	07 de       	bis	r14,	r7	;
    bb88:	0e 49       	mov	r9,	r14	;
    bb8a:	1e 81 04 00 	sub	4(r1),	r14	;
    bb8e:	04 4e       	mov	r14,	r4	;
    bb90:	1e 43       	mov	#1,	r14	;r3 As==01
    bb92:	09 94       	cmp	r4,	r9	;
    bb94:	01 28       	jnc	$+4      	;abs 0xbb98
    bb96:	0e 43       	clr	r14		;
    bb98:	09 44       	mov	r4,	r9	;
    bb9a:	09 87       	sub	r7,	r9	;
    bb9c:	17 43       	mov	#1,	r7	;r3 As==01
    bb9e:	04 99       	cmp	r9,	r4	;
    bba0:	01 28       	jnc	$+4      	;abs 0xbba4
    bba2:	07 43       	clr	r7		;
    bba4:	0e d7       	bis	r7,	r14	;
    bba6:	1a 81 06 00 	sub	6(r1),	r10	;
    bbaa:	07 45       	mov	r5,	r7	;
    bbac:	0a 8e       	sub	r14,	r10	;
    bbae:	91 43 00 00 	mov	#1,	0(r1)	;r3 As==01
    bbb2:	1e 41 12 00 	mov	18(r1),	r14	;0x00012
    bbb6:	b0 12 2e c6 	call	#50734		;#0xc62e
    bbba:	81 4e 12 00 	mov	r14,	18(r1)	; 0x0012
    bbbe:	05 47       	mov	r7,	r5	;
    bbc0:	05 57       	add	r7,	r5	;
    bbc2:	1e 43       	mov	#1,	r14	;r3 As==01
    bbc4:	05 97       	cmp	r7,	r5	;
    bbc6:	01 28       	jnc	$+4      	;abs 0xbbca
    bbc8:	0e 43       	clr	r14		;
    bbca:	04 48       	mov	r8,	r4	;
    bbcc:	04 58       	add	r8,	r4	;
    bbce:	17 43       	mov	#1,	r7	;r3 As==01
    bbd0:	04 98       	cmp	r8,	r4	;
    bbd2:	01 28       	jnc	$+4      	;abs 0xbbd6
    bbd4:	07 43       	clr	r7		;
    bbd6:	0e 54       	add	r4,	r14	;
    bbd8:	18 43       	mov	#1,	r8	;r3 As==01
    bbda:	0e 94       	cmp	r4,	r14	;
    bbdc:	01 28       	jnc	$+4      	;abs 0xbbe0
    bbde:	08 43       	clr	r8		;
    bbe0:	07 d8       	bis	r8,	r7	;
    bbe2:	08 49       	mov	r9,	r8	;
    bbe4:	08 59       	add	r9,	r8	;
    bbe6:	1b 43       	mov	#1,	r11	;r3 As==01
    bbe8:	08 99       	cmp	r9,	r8	;
    bbea:	01 28       	jnc	$+4      	;abs 0xbbee
    bbec:	0b 43       	clr	r11		;
    bbee:	04 47       	mov	r7,	r4	;
    bbf0:	04 58       	add	r8,	r4	;
    bbf2:	19 43       	mov	#1,	r9	;r3 As==01
    bbf4:	04 98       	cmp	r8,	r4	;
    bbf6:	01 28       	jnc	$+4      	;abs 0xbbfa
    bbf8:	09 43       	clr	r9		;
    bbfa:	0b d9       	bis	r9,	r11	;
    bbfc:	0a 5a       	rla	r10		;
    bbfe:	07 45       	mov	r5,	r7	;
    bc00:	08 4e       	mov	r14,	r8	;
    bc02:	09 44       	mov	r4,	r9	;
    bc04:	0a 5b       	add	r11,	r10	;
    bc06:	b1 53 0c 00 	add	#-1,	12(r1)	;r3 As==11, 0x000c
    bc0a:	81 93 0c 00 	cmp	#0,	12(r1)	;r3 As==00, 0x000c
    bc0e:	89 23       	jnz	$-236    	;abs 0xbb22
    bc10:	09 46       	mov	r6,	r9	;
    bc12:	1d 41 08 00 	mov	8(r1),	r13	;
    bc16:	1c 41 0a 00 	mov	10(r1),	r12	;0x0000a
    bc1a:	1f 41 0e 00 	mov	14(r1),	r15	;0x0000e
    bc1e:	76 90 80 ff 	cmp.b	#65408,	r6	;#0xff80
    bc22:	21 20       	jnz	$+68     	;abs 0xbc66
    bc24:	36 b0 00 01 	bit	#256,	r6	;#0x0100
    bc28:	1e 20       	jnz	$+62     	;abs 0xbc66
    bc2a:	0e d5       	bis	r5,	r14	;
    bc2c:	0e d4       	bis	r4,	r14	;
    bc2e:	0e da       	bis	r10,	r14	;
    bc30:	0e 93       	cmp	#0,	r14	;r3 As==00
    bc32:	19 24       	jz	$+52     	;abs 0xbc66
    bc34:	39 50 80 00 	add	#128,	r9	;#0x0080
    bc38:	1d 43       	mov	#1,	r13	;r3 As==01
    bc3a:	09 96       	cmp	r6,	r9	;
    bc3c:	02 28       	jnc	$+6      	;abs 0xbc42
    bc3e:	1d 41 0c 00 	mov	12(r1),	r13	;0x0000c
    bc42:	1d 51 08 00 	add	8(r1),	r13	;
    bc46:	1c 43       	mov	#1,	r12	;r3 As==01
    bc48:	1d 91 08 00 	cmp	8(r1),	r13	;
    bc4c:	01 28       	jnc	$+4      	;abs 0xbc50
    bc4e:	0c 43       	clr	r12		;
    bc50:	1c 51 0a 00 	add	10(r1),	r12	;0x0000a
    bc54:	1f 43       	mov	#1,	r15	;r3 As==01
    bc56:	1c 91 0a 00 	cmp	10(r1),	r12	;0x0000a
    bc5a:	01 28       	jnc	$+4      	;abs 0xbc5e
    bc5c:	0f 43       	clr	r15		;
    bc5e:	39 f0 00 ff 	and	#65280,	r9	;#0xff00
    bc62:	1f 51 0e 00 	add	14(r1),	r15	;0x0000e
    bc66:	81 49 2a 00 	mov	r9,	42(r1)	; 0x002a
    bc6a:	81 4d 2c 00 	mov	r13,	44(r1)	; 0x002c
    bc6e:	81 4c 2e 00 	mov	r12,	46(r1)	; 0x002e
    bc72:	81 4f 30 00 	mov	r15,	48(r1)	; 0x0030
    bc76:	0c 41       	mov	r1,	r12	;
    bc78:	3c 50 24 00 	add	#36,	r12	;#0x0024
    bc7c:	06 3c       	jmp	$+14     	;abs 0xbc8a
    bc7e:	0c 41       	mov	r1,	r12	;
    bc80:	3c 50 32 00 	add	#50,	r12	;#0x0032
    bc84:	02 3c       	jmp	$+6      	;abs 0xbc8a
    bc86:	3c 40 10 46 	mov	#17936,	r12	;#0x4610
    bc8a:	b0 12 5e c7 	call	#51038		;#0xc75e
    bc8e:	31 50 40 00 	add	#64,	r1	;#0x0040
    bc92:	64 17       	popm	#7,	r10	;16-bit words
    bc94:	30 41       	ret			

0000bc96 <__eqdf2>:
    bc96:	0a 15       	pushm	#1,	r10	;16-bit words
    bc98:	31 80 2c 00 	sub	#44,	r1	;#0x002c
    bc9c:	81 4c 00 00 	mov	r12,	0(r1)	;
    bca0:	81 4d 02 00 	mov	r13,	2(r1)	;
    bca4:	81 4e 04 00 	mov	r14,	4(r1)	;
    bca8:	81 4f 06 00 	mov	r15,	6(r1)	;
    bcac:	91 41 30 00 	mov	48(r1),	8(r1)	;0x00030
    bcb0:	08 00 
    bcb2:	91 41 32 00 	mov	50(r1),	10(r1)	;0x00032, 0x000a
    bcb6:	0a 00 
    bcb8:	91 41 34 00 	mov	52(r1),	12(r1)	;0x00034, 0x000c
    bcbc:	0c 00 
    bcbe:	91 41 36 00 	mov	54(r1),	14(r1)	;0x00036, 0x000e
    bcc2:	0e 00 
    bcc4:	3a 40 d8 c9 	mov	#51672,	r10	;#0xc9d8
    bcc8:	0c 41       	mov	r1,	r12	;
    bcca:	0d 41       	mov	r1,	r13	;
    bccc:	3d 50 10 00 	add	#16,	r13	;#0x0010
    bcd0:	8a 12       	call	r10		;
    bcd2:	0c 41       	mov	r1,	r12	;
    bcd4:	3c 52       	add	#8,	r12	;r2 As==11
    bcd6:	0d 41       	mov	r1,	r13	;
    bcd8:	3d 50 1e 00 	add	#30,	r13	;#0x001e
    bcdc:	8a 12       	call	r10		;
    bcde:	1c 43       	mov	#1,	r12	;r3 As==01
    bce0:	1c 91 10 00 	cmp	16(r1),	r12	;0x00010
    bce4:	0c 2c       	jc	$+26     	;abs 0xbcfe
    bce6:	1c 91 1e 00 	cmp	30(r1),	r12	;0x0001e
    bcea:	09 2c       	jc	$+20     	;abs 0xbcfe
    bcec:	0c 41       	mov	r1,	r12	;
    bcee:	3c 50 10 00 	add	#16,	r12	;#0x0010
    bcf2:	0d 41       	mov	r1,	r13	;
    bcf4:	3d 50 1e 00 	add	#30,	r13	;#0x001e
    bcf8:	b0 12 32 cb 	call	#52018		;#0xcb32
    bcfc:	01 3c       	jmp	$+4      	;abs 0xbd00
    bcfe:	1c 43       	mov	#1,	r12	;r3 As==01
    bd00:	31 50 2c 00 	add	#44,	r1	;#0x002c
    bd04:	0a 17       	popm	#1,	r10	;16-bit words
    bd06:	30 41       	ret			

0000bd08 <__nedf2>:
    bd08:	0a 15       	pushm	#1,	r10	;16-bit words
    bd0a:	31 80 2c 00 	sub	#44,	r1	;#0x002c
    bd0e:	81 4c 00 00 	mov	r12,	0(r1)	;
    bd12:	81 4d 02 00 	mov	r13,	2(r1)	;
    bd16:	81 4e 04 00 	mov	r14,	4(r1)	;
    bd1a:	81 4f 06 00 	mov	r15,	6(r1)	;
    bd1e:	91 41 30 00 	mov	48(r1),	8(r1)	;0x00030
    bd22:	08 00 
    bd24:	91 41 32 00 	mov	50(r1),	10(r1)	;0x00032, 0x000a
    bd28:	0a 00 
    bd2a:	91 41 34 00 	mov	52(r1),	12(r1)	;0x00034, 0x000c
    bd2e:	0c 00 
    bd30:	91 41 36 00 	mov	54(r1),	14(r1)	;0x00036, 0x000e
    bd34:	0e 00 
    bd36:	3a 40 d8 c9 	mov	#51672,	r10	;#0xc9d8
    bd3a:	0c 41       	mov	r1,	r12	;
    bd3c:	0d 41       	mov	r1,	r13	;
    bd3e:	3d 50 10 00 	add	#16,	r13	;#0x0010
    bd42:	8a 12       	call	r10		;
    bd44:	0c 41       	mov	r1,	r12	;
    bd46:	3c 52       	add	#8,	r12	;r2 As==11
    bd48:	0d 41       	mov	r1,	r13	;
    bd4a:	3d 50 1e 00 	add	#30,	r13	;#0x001e
    bd4e:	8a 12       	call	r10		;
    bd50:	1c 43       	mov	#1,	r12	;r3 As==01
    bd52:	1c 91 10 00 	cmp	16(r1),	r12	;0x00010
    bd56:	0c 2c       	jc	$+26     	;abs 0xbd70
    bd58:	1c 91 1e 00 	cmp	30(r1),	r12	;0x0001e
    bd5c:	09 2c       	jc	$+20     	;abs 0xbd70
    bd5e:	0c 41       	mov	r1,	r12	;
    bd60:	3c 50 10 00 	add	#16,	r12	;#0x0010
    bd64:	0d 41       	mov	r1,	r13	;
    bd66:	3d 50 1e 00 	add	#30,	r13	;#0x001e
    bd6a:	b0 12 32 cb 	call	#52018		;#0xcb32
    bd6e:	01 3c       	jmp	$+4      	;abs 0xbd72
    bd70:	1c 43       	mov	#1,	r12	;r3 As==01
    bd72:	31 50 2c 00 	add	#44,	r1	;#0x002c
    bd76:	0a 17       	popm	#1,	r10	;16-bit words
    bd78:	30 41       	ret			

0000bd7a <__gtdf2>:
    bd7a:	0a 15       	pushm	#1,	r10	;16-bit words
    bd7c:	31 80 2c 00 	sub	#44,	r1	;#0x002c
    bd80:	81 4c 00 00 	mov	r12,	0(r1)	;
    bd84:	81 4d 02 00 	mov	r13,	2(r1)	;
    bd88:	81 4e 04 00 	mov	r14,	4(r1)	;
    bd8c:	81 4f 06 00 	mov	r15,	6(r1)	;
    bd90:	91 41 30 00 	mov	48(r1),	8(r1)	;0x00030
    bd94:	08 00 
    bd96:	91 41 32 00 	mov	50(r1),	10(r1)	;0x00032, 0x000a
    bd9a:	0a 00 
    bd9c:	91 41 34 00 	mov	52(r1),	12(r1)	;0x00034, 0x000c
    bda0:	0c 00 
    bda2:	91 41 36 00 	mov	54(r1),	14(r1)	;0x00036, 0x000e
    bda6:	0e 00 
    bda8:	3a 40 d8 c9 	mov	#51672,	r10	;#0xc9d8
    bdac:	0c 41       	mov	r1,	r12	;
    bdae:	0d 41       	mov	r1,	r13	;
    bdb0:	3d 50 10 00 	add	#16,	r13	;#0x0010
    bdb4:	8a 12       	call	r10		;
    bdb6:	0c 41       	mov	r1,	r12	;
    bdb8:	3c 52       	add	#8,	r12	;r2 As==11
    bdba:	0d 41       	mov	r1,	r13	;
    bdbc:	3d 50 1e 00 	add	#30,	r13	;#0x001e
    bdc0:	8a 12       	call	r10		;
    bdc2:	1c 43       	mov	#1,	r12	;r3 As==01
    bdc4:	1c 91 10 00 	cmp	16(r1),	r12	;0x00010
    bdc8:	0c 2c       	jc	$+26     	;abs 0xbde2
    bdca:	1c 91 1e 00 	cmp	30(r1),	r12	;0x0001e
    bdce:	09 2c       	jc	$+20     	;abs 0xbde2
    bdd0:	0c 41       	mov	r1,	r12	;
    bdd2:	3c 50 10 00 	add	#16,	r12	;#0x0010
    bdd6:	0d 41       	mov	r1,	r13	;
    bdd8:	3d 50 1e 00 	add	#30,	r13	;#0x001e
    bddc:	b0 12 32 cb 	call	#52018		;#0xcb32
    bde0:	01 3c       	jmp	$+4      	;abs 0xbde4
    bde2:	3c 43       	mov	#-1,	r12	;r3 As==11
    bde4:	31 50 2c 00 	add	#44,	r1	;#0x002c
    bde8:	0a 17       	popm	#1,	r10	;16-bit words
    bdea:	30 41       	ret			

0000bdec <__gedf2>:
    bdec:	0a 15       	pushm	#1,	r10	;16-bit words
    bdee:	31 80 2c 00 	sub	#44,	r1	;#0x002c
    bdf2:	81 4c 00 00 	mov	r12,	0(r1)	;
    bdf6:	81 4d 02 00 	mov	r13,	2(r1)	;
    bdfa:	81 4e 04 00 	mov	r14,	4(r1)	;
    bdfe:	81 4f 06 00 	mov	r15,	6(r1)	;
    be02:	91 41 30 00 	mov	48(r1),	8(r1)	;0x00030
    be06:	08 00 
    be08:	91 41 32 00 	mov	50(r1),	10(r1)	;0x00032, 0x000a
    be0c:	0a 00 
    be0e:	91 41 34 00 	mov	52(r1),	12(r1)	;0x00034, 0x000c
    be12:	0c 00 
    be14:	91 41 36 00 	mov	54(r1),	14(r1)	;0x00036, 0x000e
    be18:	0e 00 
    be1a:	3a 40 d8 c9 	mov	#51672,	r10	;#0xc9d8
    be1e:	0c 41       	mov	r1,	r12	;
    be20:	0d 41       	mov	r1,	r13	;
    be22:	3d 50 10 00 	add	#16,	r13	;#0x0010
    be26:	8a 12       	call	r10		;
    be28:	0c 41       	mov	r1,	r12	;
    be2a:	3c 52       	add	#8,	r12	;r2 As==11
    be2c:	0d 41       	mov	r1,	r13	;
    be2e:	3d 50 1e 00 	add	#30,	r13	;#0x001e
    be32:	8a 12       	call	r10		;
    be34:	1c 43       	mov	#1,	r12	;r3 As==01
    be36:	1c 91 10 00 	cmp	16(r1),	r12	;0x00010
    be3a:	0c 2c       	jc	$+26     	;abs 0xbe54
    be3c:	1c 91 1e 00 	cmp	30(r1),	r12	;0x0001e
    be40:	09 2c       	jc	$+20     	;abs 0xbe54
    be42:	0c 41       	mov	r1,	r12	;
    be44:	3c 50 10 00 	add	#16,	r12	;#0x0010
    be48:	0d 41       	mov	r1,	r13	;
    be4a:	3d 50 1e 00 	add	#30,	r13	;#0x001e
    be4e:	b0 12 32 cb 	call	#52018		;#0xcb32
    be52:	01 3c       	jmp	$+4      	;abs 0xbe56
    be54:	3c 43       	mov	#-1,	r12	;r3 As==11
    be56:	31 50 2c 00 	add	#44,	r1	;#0x002c
    be5a:	0a 17       	popm	#1,	r10	;16-bit words
    be5c:	30 41       	ret			

0000be5e <__ltdf2>:
    be5e:	0a 15       	pushm	#1,	r10	;16-bit words
    be60:	31 80 2c 00 	sub	#44,	r1	;#0x002c
    be64:	81 4c 00 00 	mov	r12,	0(r1)	;
    be68:	81 4d 02 00 	mov	r13,	2(r1)	;
    be6c:	81 4e 04 00 	mov	r14,	4(r1)	;
    be70:	81 4f 06 00 	mov	r15,	6(r1)	;
    be74:	91 41 30 00 	mov	48(r1),	8(r1)	;0x00030
    be78:	08 00 
    be7a:	91 41 32 00 	mov	50(r1),	10(r1)	;0x00032, 0x000a
    be7e:	0a 00 
    be80:	91 41 34 00 	mov	52(r1),	12(r1)	;0x00034, 0x000c
    be84:	0c 00 
    be86:	91 41 36 00 	mov	54(r1),	14(r1)	;0x00036, 0x000e
    be8a:	0e 00 
    be8c:	3a 40 d8 c9 	mov	#51672,	r10	;#0xc9d8
    be90:	0c 41       	mov	r1,	r12	;
    be92:	0d 41       	mov	r1,	r13	;
    be94:	3d 50 10 00 	add	#16,	r13	;#0x0010
    be98:	8a 12       	call	r10		;
    be9a:	0c 41       	mov	r1,	r12	;
    be9c:	3c 52       	add	#8,	r12	;r2 As==11
    be9e:	0d 41       	mov	r1,	r13	;
    bea0:	3d 50 1e 00 	add	#30,	r13	;#0x001e
    bea4:	8a 12       	call	r10		;
    bea6:	1c 43       	mov	#1,	r12	;r3 As==01
    bea8:	1c 91 10 00 	cmp	16(r1),	r12	;0x00010
    beac:	0c 2c       	jc	$+26     	;abs 0xbec6
    beae:	1c 91 1e 00 	cmp	30(r1),	r12	;0x0001e
    beb2:	09 2c       	jc	$+20     	;abs 0xbec6
    beb4:	0c 41       	mov	r1,	r12	;
    beb6:	3c 50 10 00 	add	#16,	r12	;#0x0010
    beba:	0d 41       	mov	r1,	r13	;
    bebc:	3d 50 1e 00 	add	#30,	r13	;#0x001e
    bec0:	b0 12 32 cb 	call	#52018		;#0xcb32
    bec4:	01 3c       	jmp	$+4      	;abs 0xbec8
    bec6:	1c 43       	mov	#1,	r12	;r3 As==01
    bec8:	31 50 2c 00 	add	#44,	r1	;#0x002c
    becc:	0a 17       	popm	#1,	r10	;16-bit words
    bece:	30 41       	ret			

0000bed0 <__mspabi_fltlid>:
    bed0:	2a 15       	pushm	#3,	r10	;16-bit words
    bed2:	31 80 10 00 	sub	#16,	r1	;#0x0010
    bed6:	0e 4c       	mov	r12,	r14	;
    bed8:	0f 4d       	mov	r13,	r15	;
    beda:	b1 40 03 00 	mov	#3,	2(r1)	;
    bede:	02 00 
    bee0:	0a 4d       	mov	r13,	r10	;
    bee2:	5a 03       	rrum	#1,	r10	;
    bee4:	4d 18 0a 11 	rpt #14 { rrax.w	r10		;
    bee8:	81 4a 04 00 	mov	r10,	4(r1)	;
    beec:	0c df       	bis	r15,	r12	;
    beee:	0c 93       	cmp	#0,	r12	;r3 As==00
    bef0:	03 20       	jnz	$+8      	;abs 0xbef8
    bef2:	a1 43 02 00 	mov	#2,	2(r1)	;r3 As==10
    bef6:	2a 3c       	jmp	$+86     	;abs 0xbf4c
    bef8:	0a 93       	cmp	#0,	r10	;r3 As==00
    befa:	0a 24       	jz	$+22     	;abs 0xbf10
    befc:	0e 93       	cmp	#0,	r14	;r3 As==00
    befe:	03 20       	jnz	$+8      	;abs 0xbf06
    bf00:	3d 90 00 80 	cmp	#32768,	r13	;#0x8000
    bf04:	28 24       	jz	$+82     	;abs 0xbf56
    bf06:	08 43       	clr	r8		;
    bf08:	09 43       	clr	r9		;
    bf0a:	08 8e       	sub	r14,	r8	;
    bf0c:	09 7f       	subc	r15,	r9	;
    bf0e:	02 3c       	jmp	$+6      	;abs 0xbf14
    bf10:	08 4e       	mov	r14,	r8	;
    bf12:	09 4f       	mov	r15,	r9	;
    bf14:	0c 48       	mov	r8,	r12	;
    bf16:	0d 49       	mov	r9,	r13	;
    bf18:	b0 12 1c c7 	call	#50972		;#0xc71c
    bf1c:	0a 4c       	mov	r12,	r10	;
    bf1e:	3a 50 1d 00 	add	#29,	r10	;#0x001d
    bf22:	0d 49       	mov	r9,	r13	;
    bf24:	81 4a 00 00 	mov	r10,	0(r1)	;
    bf28:	0c 48       	mov	r8,	r12	;
    bf2a:	0e 43       	clr	r14		;
    bf2c:	0f 4e       	mov	r14,	r15	;
    bf2e:	b0 12 a6 c6 	call	#50854		;#0xc6a6
    bf32:	81 4c 08 00 	mov	r12,	8(r1)	;
    bf36:	81 4d 0a 00 	mov	r13,	10(r1)	; 0x000a
    bf3a:	81 4e 0c 00 	mov	r14,	12(r1)	; 0x000c
    bf3e:	81 4f 0e 00 	mov	r15,	14(r1)	; 0x000e
    bf42:	3c 40 3c 00 	mov	#60,	r12	;#0x003c
    bf46:	0c 8a       	sub	r10,	r12	;
    bf48:	81 4c 06 00 	mov	r12,	6(r1)	;
    bf4c:	0c 41       	mov	r1,	r12	;
    bf4e:	2c 53       	incd	r12		;
    bf50:	b0 12 5e c7 	call	#51038		;#0xc75e
    bf54:	04 3c       	jmp	$+10     	;abs 0xbf5e
    bf56:	0c 4e       	mov	r14,	r12	;
    bf58:	0d 4e       	mov	r14,	r13	;
    bf5a:	3f 40 e0 c1 	mov	#49632,	r15	;#0xc1e0
    bf5e:	31 50 10 00 	add	#16,	r1	;#0x0010
    bf62:	28 17       	popm	#3,	r10	;16-bit words
    bf64:	30 41       	ret			

0000bf66 <__mspabi_fixdli>:
    bf66:	0a 15       	pushm	#1,	r10	;16-bit words
    bf68:	31 80 18 00 	sub	#24,	r1	;#0x0018
    bf6c:	81 4c 02 00 	mov	r12,	2(r1)	;
    bf70:	81 4d 04 00 	mov	r13,	4(r1)	;
    bf74:	81 4e 06 00 	mov	r14,	6(r1)	;
    bf78:	81 4f 08 00 	mov	r15,	8(r1)	;
    bf7c:	0c 41       	mov	r1,	r12	;
    bf7e:	2c 53       	incd	r12		;
    bf80:	0d 41       	mov	r1,	r13	;
    bf82:	3d 50 0a 00 	add	#10,	r13	;#0x000a
    bf86:	b0 12 d8 c9 	call	#51672		;#0xc9d8
    bf8a:	1c 41 0a 00 	mov	10(r1),	r12	;0x0000a
    bf8e:	2d 43       	mov	#2,	r13	;r3 As==10
    bf90:	0d 9c       	cmp	r12,	r13	;
    bf92:	2f 2c       	jc	$+96     	;abs 0xbff2
    bf94:	2c 92       	cmp	#4,	r12	;r2 As==10
    bf96:	0a 20       	jnz	$+22     	;abs 0xbfac
    bf98:	0c 43       	clr	r12		;
    bf9a:	3d 40 00 80 	mov	#32768,	r13	;#0x8000
    bf9e:	81 93 0c 00 	cmp	#0,	12(r1)	;r3 As==00, 0x000c
    bfa2:	29 20       	jnz	$+84     	;abs 0xbff6
    bfa4:	3c 43       	mov	#-1,	r12	;r3 As==11
    bfa6:	3d 40 ff 7f 	mov	#32767,	r13	;#0x7fff
    bfaa:	25 3c       	jmp	$+76     	;abs 0xbff6
    bfac:	1c 41 0e 00 	mov	14(r1),	r12	;0x0000e
    bfb0:	0c 93       	cmp	#0,	r12	;r3 As==00
    bfb2:	1f 38       	jl	$+64     	;abs 0xbff2
    bfb4:	3d 40 1e 00 	mov	#30,	r13	;#0x001e
    bfb8:	0d 9c       	cmp	r12,	r13	;
    bfba:	ee 3b       	jl	$-34     	;abs 0xbf98
    bfbc:	3d 40 3c 00 	mov	#60,	r13	;#0x003c
    bfc0:	0d 8c       	sub	r12,	r13	;
    bfc2:	81 4d 00 00 	mov	r13,	0(r1)	;
    bfc6:	1c 41 10 00 	mov	16(r1),	r12	;0x00010
    bfca:	1d 41 12 00 	mov	18(r1),	r13	;0x00012
    bfce:	1e 41 14 00 	mov	20(r1),	r14	;0x00014
    bfd2:	1f 41 16 00 	mov	22(r1),	r15	;0x00016
    bfd6:	b0 12 2e c6 	call	#50734		;#0xc62e
    bfda:	0a 4c       	mov	r12,	r10	;
    bfdc:	0b 4d       	mov	r13,	r11	;
    bfde:	81 93 0c 00 	cmp	#0,	12(r1)	;r3 As==00, 0x000c
    bfe2:	09 24       	jz	$+20     	;abs 0xbff6
    bfe4:	0e 43       	clr	r14		;
    bfe6:	0f 43       	clr	r15		;
    bfe8:	0c 4e       	mov	r14,	r12	;
    bfea:	0d 4f       	mov	r15,	r13	;
    bfec:	0c 8a       	sub	r10,	r12	;
    bfee:	0d 7b       	subc	r11,	r13	;
    bff0:	02 3c       	jmp	$+6      	;abs 0xbff6
    bff2:	0c 43       	clr	r12		;
    bff4:	0d 43       	clr	r13		;
    bff6:	31 50 18 00 	add	#24,	r1	;#0x0018
    bffa:	0a 17       	popm	#1,	r10	;16-bit words
    bffc:	30 41       	ret			

0000bffe <__mspabi_fltuld>:
    bffe:	2a 15       	pushm	#3,	r10	;16-bit words
    c000:	31 80 10 00 	sub	#16,	r1	;#0x0010
    c004:	08 4c       	mov	r12,	r8	;
    c006:	09 4d       	mov	r13,	r9	;
    c008:	81 43 04 00 	mov	#0,	4(r1)	;r3 As==00
    c00c:	0e 4c       	mov	r12,	r14	;
    c00e:	0e dd       	bis	r13,	r14	;
    c010:	0e 93       	cmp	#0,	r14	;r3 As==00
    c012:	03 20       	jnz	$+8      	;abs 0xc01a
    c014:	a1 43 02 00 	mov	#2,	2(r1)	;r3 As==10
    c018:	1d 3c       	jmp	$+60     	;abs 0xc054
    c01a:	b1 40 03 00 	mov	#3,	2(r1)	;
    c01e:	02 00 
    c020:	b0 12 1c c7 	call	#50972		;#0xc71c
    c024:	0a 4c       	mov	r12,	r10	;
    c026:	3a 50 1d 00 	add	#29,	r10	;#0x001d
    c02a:	0c 48       	mov	r8,	r12	;
    c02c:	81 4a 00 00 	mov	r10,	0(r1)	;
    c030:	0d 49       	mov	r9,	r13	;
    c032:	0e 43       	clr	r14		;
    c034:	0f 4e       	mov	r14,	r15	;
    c036:	b0 12 a6 c6 	call	#50854		;#0xc6a6
    c03a:	81 4c 08 00 	mov	r12,	8(r1)	;
    c03e:	81 4d 0a 00 	mov	r13,	10(r1)	; 0x000a
    c042:	81 4e 0c 00 	mov	r14,	12(r1)	; 0x000c
    c046:	81 4f 0e 00 	mov	r15,	14(r1)	; 0x000e
    c04a:	3c 40 3c 00 	mov	#60,	r12	;#0x003c
    c04e:	0c 8a       	sub	r10,	r12	;
    c050:	81 4c 06 00 	mov	r12,	6(r1)	;
    c054:	0c 41       	mov	r1,	r12	;
    c056:	2c 53       	incd	r12		;
    c058:	b0 12 5e c7 	call	#51038		;#0xc75e
    c05c:	31 50 10 00 	add	#16,	r1	;#0x0010
    c060:	28 17       	popm	#3,	r10	;16-bit words
    c062:	30 41       	ret			

0000c064 <udivmodhi4>:
    c064:	3b 40 11 00 	mov	#17,	r11	;#0x0011
    c068:	1f 43       	mov	#1,	r15	;r3 As==01
    c06a:	0d 9c       	cmp	r12,	r13	;
    c06c:	09 2c       	jc	$+20     	;abs 0xc080
    c06e:	3b 53       	add	#-1,	r11	;r3 As==11
    c070:	0b 93       	cmp	#0,	r11	;r3 As==00
    c072:	05 24       	jz	$+12     	;abs 0xc07e
    c074:	0d 93       	cmp	#0,	r13	;r3 As==00
    c076:	04 38       	jl	$+10     	;abs 0xc080
    c078:	0d 5d       	rla	r13		;
    c07a:	0f 5f       	rla	r15		;
    c07c:	f6 3f       	jmp	$-18     	;abs 0xc06a
    c07e:	0f 4b       	mov	r11,	r15	;
    c080:	0b 43       	clr	r11		;
    c082:	0f 93       	cmp	#0,	r15	;r3 As==00
    c084:	09 24       	jz	$+20     	;abs 0xc098
    c086:	0c 9d       	cmp	r13,	r12	;
    c088:	02 28       	jnc	$+6      	;abs 0xc08e
    c08a:	0c 8d       	sub	r13,	r12	;
    c08c:	0b df       	bis	r15,	r11	;
    c08e:	12 c3       	clrc			
    c090:	0f 10       	rrc	r15		;
    c092:	12 c3       	clrc			
    c094:	0d 10       	rrc	r13		;
    c096:	f5 3f       	jmp	$-20     	;abs 0xc082
    c098:	0e 93       	cmp	#0,	r14	;r3 As==00
    c09a:	01 20       	jnz	$+4      	;abs 0xc09e
    c09c:	0c 4b       	mov	r11,	r12	;
    c09e:	30 41       	ret			

0000c0a0 <__mspabi_divi>:
    c0a0:	0a 15       	pushm	#1,	r10	;16-bit words
    c0a2:	0e 4c       	mov	r12,	r14	;
    c0a4:	0f 4d       	mov	r13,	r15	;
    c0a6:	3b 40 64 c0 	mov	#49252,	r11	;#0xc064
    c0aa:	0c 93       	cmp	#0,	r12	;r3 As==00
    c0ac:	07 34       	jge	$+16     	;abs 0xc0bc
    c0ae:	0c 43       	clr	r12		;
    c0b0:	0c 8e       	sub	r14,	r12	;
    c0b2:	0e 4c       	mov	r12,	r14	;
    c0b4:	0d 93       	cmp	#0,	r13	;r3 As==00
    c0b6:	10 34       	jge	$+34     	;abs 0xc0d8
    c0b8:	1a 43       	mov	#1,	r10	;r3 As==01
    c0ba:	03 3c       	jmp	$+8      	;abs 0xc0c2
    c0bc:	0d 93       	cmp	#0,	r13	;r3 As==00
    c0be:	0f 34       	jge	$+32     	;abs 0xc0de
    c0c0:	0a 43       	clr	r10		;
    c0c2:	0d 43       	clr	r13		;
    c0c4:	0d 8f       	sub	r15,	r13	;
    c0c6:	0c 4e       	mov	r14,	r12	;
    c0c8:	0e 43       	clr	r14		;
    c0ca:	8b 12       	call	r11		;
    c0cc:	1a 93       	cmp	#1,	r10	;r3 As==01
    c0ce:	09 24       	jz	$+20     	;abs 0xc0e2
    c0d0:	0d 43       	clr	r13		;
    c0d2:	0d 8c       	sub	r12,	r13	;
    c0d4:	0c 4d       	mov	r13,	r12	;
    c0d6:	05 3c       	jmp	$+12     	;abs 0xc0e2
    c0d8:	0e 43       	clr	r14		;
    c0da:	8b 12       	call	r11		;
    c0dc:	f9 3f       	jmp	$-12     	;abs 0xc0d0
    c0de:	0e 43       	clr	r14		;
    c0e0:	8b 12       	call	r11		;
    c0e2:	0a 17       	popm	#1,	r10	;16-bit words
    c0e4:	30 41       	ret			

0000c0e6 <__mspabi_remi>:
    c0e6:	0a 15       	pushm	#1,	r10	;16-bit words
    c0e8:	0c 93       	cmp	#0,	r12	;r3 As==00
    c0ea:	05 34       	jge	$+12     	;abs 0xc0f6
    c0ec:	0e 43       	clr	r14		;
    c0ee:	0e 8c       	sub	r12,	r14	;
    c0f0:	0c 4e       	mov	r14,	r12	;
    c0f2:	1a 43       	mov	#1,	r10	;r3 As==01
    c0f4:	01 3c       	jmp	$+4      	;abs 0xc0f8
    c0f6:	0a 43       	clr	r10		;
    c0f8:	0d 93       	cmp	#0,	r13	;r3 As==00
    c0fa:	03 34       	jge	$+8      	;abs 0xc102
    c0fc:	0e 43       	clr	r14		;
    c0fe:	0e 8d       	sub	r13,	r14	;
    c100:	0d 4e       	mov	r14,	r13	;
    c102:	1e 43       	mov	#1,	r14	;r3 As==01
    c104:	b0 12 64 c0 	call	#49252		;#0xc064
    c108:	0a 93       	cmp	#0,	r10	;r3 As==00
    c10a:	03 24       	jz	$+8      	;abs 0xc112
    c10c:	0d 43       	clr	r13		;
    c10e:	0d 8c       	sub	r12,	r13	;
    c110:	0c 4d       	mov	r13,	r12	;
    c112:	0a 17       	popm	#1,	r10	;16-bit words
    c114:	30 41       	ret			

0000c116 <__mspabi_divu>:
    c116:	0e 43       	clr	r14		;
    c118:	b0 12 64 c0 	call	#49252		;#0xc064
    c11c:	30 41       	ret			

0000c11e <__mspabi_remu>:
    c11e:	1e 43       	mov	#1,	r14	;r3 As==01
    c120:	b0 12 64 c0 	call	#49252		;#0xc064
    c124:	30 41       	ret			

0000c126 <udivmodsi4>:
    c126:	4a 15       	pushm	#5,	r10	;16-bit words
    c128:	0a 4c       	mov	r12,	r10	;
    c12a:	0b 4d       	mov	r13,	r11	;
    c12c:	3c 40 21 00 	mov	#33,	r12	;#0x0021
    c130:	18 43       	mov	#1,	r8	;r3 As==01
    c132:	09 43       	clr	r9		;
    c134:	0f 9b       	cmp	r11,	r15	;
    c136:	04 28       	jnc	$+10     	;abs 0xc140
    c138:	0d 9f       	cmp	r15,	r13	;
    c13a:	16 20       	jnz	$+46     	;abs 0xc168
    c13c:	0e 9a       	cmp	r10,	r14	;
    c13e:	14 2c       	jc	$+42     	;abs 0xc168
    c140:	3c 53       	add	#-1,	r12	;r3 As==11
    c142:	0c 93       	cmp	#0,	r12	;r3 As==00
    c144:	0f 24       	jz	$+32     	;abs 0xc164
    c146:	0f 93       	cmp	#0,	r15	;r3 As==00
    c148:	0f 38       	jl	$+32     	;abs 0xc168
    c14a:	06 4e       	mov	r14,	r6	;
    c14c:	07 4f       	mov	r15,	r7	;
    c14e:	06 5e       	add	r14,	r6	;
    c150:	07 6f       	addc	r15,	r7	;
    c152:	0e 46       	mov	r6,	r14	;
    c154:	0f 47       	mov	r7,	r15	;
    c156:	06 48       	mov	r8,	r6	;
    c158:	07 49       	mov	r9,	r7	;
    c15a:	06 58       	add	r8,	r6	;
    c15c:	07 69       	addc	r9,	r7	;
    c15e:	08 46       	mov	r6,	r8	;
    c160:	09 47       	mov	r7,	r9	;
    c162:	e8 3f       	jmp	$-46     	;abs 0xc134
    c164:	08 43       	clr	r8		;
    c166:	09 43       	clr	r9		;
    c168:	0c 43       	clr	r12		;
    c16a:	0d 4c       	mov	r12,	r13	;
    c16c:	07 48       	mov	r8,	r7	;
    c16e:	07 d9       	bis	r9,	r7	;
    c170:	07 93       	cmp	#0,	r7	;r3 As==00
    c172:	11 24       	jz	$+36     	;abs 0xc196
    c174:	0b 9f       	cmp	r15,	r11	;
    c176:	08 28       	jnc	$+18     	;abs 0xc188
    c178:	0f 9b       	cmp	r11,	r15	;
    c17a:	02 20       	jnz	$+6      	;abs 0xc180
    c17c:	0a 9e       	cmp	r14,	r10	;
    c17e:	04 28       	jnc	$+10     	;abs 0xc188
    c180:	0a 8e       	sub	r14,	r10	;
    c182:	0b 7f       	subc	r15,	r11	;
    c184:	0c d8       	bis	r8,	r12	;
    c186:	0d d9       	bis	r9,	r13	;
    c188:	12 c3       	clrc			
    c18a:	09 10       	rrc	r9		;
    c18c:	08 10       	rrc	r8		;
    c18e:	12 c3       	clrc			
    c190:	0f 10       	rrc	r15		;
    c192:	0e 10       	rrc	r14		;
    c194:	eb 3f       	jmp	$-40     	;abs 0xc16c
    c196:	81 93 0c 00 	cmp	#0,	12(r1)	;r3 As==00, 0x000c
    c19a:	02 24       	jz	$+6      	;abs 0xc1a0
    c19c:	0c 4a       	mov	r10,	r12	;
    c19e:	0d 4b       	mov	r11,	r13	;
    c1a0:	46 17       	popm	#5,	r10	;16-bit words
    c1a2:	30 41       	ret			

0000c1a4 <__mspabi_divli>:
    c1a4:	5a 15       	pushm	#6,	r10	;16-bit words
    c1a6:	21 83       	decd	r1		;
    c1a8:	0a 4c       	mov	r12,	r10	;
    c1aa:	0b 4d       	mov	r13,	r11	;
    c1ac:	08 4e       	mov	r14,	r8	;
    c1ae:	09 4f       	mov	r15,	r9	;
    c1b0:	37 40 26 c1 	mov	#49446,	r7	;#0xc126
    c1b4:	0d 93       	cmp	#0,	r13	;r3 As==00
    c1b6:	0c 34       	jge	$+26     	;abs 0xc1d0
    c1b8:	0c 43       	clr	r12		;
    c1ba:	0d 43       	clr	r13		;
    c1bc:	05 4c       	mov	r12,	r5	;
    c1be:	06 4d       	mov	r13,	r6	;
    c1c0:	05 8a       	sub	r10,	r5	;
    c1c2:	06 7b       	subc	r11,	r6	;
    c1c4:	0a 45       	mov	r5,	r10	;
    c1c6:	0b 46       	mov	r6,	r11	;
    c1c8:	0f 93       	cmp	#0,	r15	;r3 As==00
    c1ca:	1a 34       	jge	$+54     	;abs 0xc200
    c1cc:	16 43       	mov	#1,	r6	;r3 As==01
    c1ce:	04 3c       	jmp	$+10     	;abs 0xc1d8
    c1d0:	06 4f       	mov	r15,	r6	;
    c1d2:	0f 93       	cmp	#0,	r15	;r3 As==00
    c1d4:	1b 34       	jge	$+56     	;abs 0xc20c
    c1d6:	06 43       	clr	r6		;
    c1d8:	0e 43       	clr	r14		;
    c1da:	0f 43       	clr	r15		;
    c1dc:	0e 88       	sub	r8,	r14	;
    c1de:	0f 79       	subc	r9,	r15	;
    c1e0:	81 43 00 00 	mov	#0,	0(r1)	;r3 As==00
    c1e4:	0c 4a       	mov	r10,	r12	;
    c1e6:	0d 4b       	mov	r11,	r13	;
    c1e8:	87 12       	call	r7		;
    c1ea:	16 93       	cmp	#1,	r6	;r3 As==01
    c1ec:	12 24       	jz	$+38     	;abs 0xc212
    c1ee:	0e 43       	clr	r14		;
    c1f0:	0f 43       	clr	r15		;
    c1f2:	0a 4e       	mov	r14,	r10	;
    c1f4:	0b 4f       	mov	r15,	r11	;
    c1f6:	0a 8c       	sub	r12,	r10	;
    c1f8:	0b 7d       	subc	r13,	r11	;
    c1fa:	0c 4a       	mov	r10,	r12	;
    c1fc:	0d 4b       	mov	r11,	r13	;
    c1fe:	09 3c       	jmp	$+20     	;abs 0xc212
    c200:	81 43 00 00 	mov	#0,	0(r1)	;r3 As==00
    c204:	0c 45       	mov	r5,	r12	;
    c206:	0d 46       	mov	r6,	r13	;
    c208:	87 12       	call	r7		;
    c20a:	f1 3f       	jmp	$-28     	;abs 0xc1ee
    c20c:	81 43 00 00 	mov	#0,	0(r1)	;r3 As==00
    c210:	87 12       	call	r7		;
    c212:	21 53       	incd	r1		;
    c214:	55 17       	popm	#6,	r10	;16-bit words
    c216:	30 41       	ret			

0000c218 <__mspabi_remli>:
    c218:	4a 15       	pushm	#5,	r10	;16-bit words
    c21a:	21 83       	decd	r1		;
    c21c:	0d 93       	cmp	#0,	r13	;r3 As==00
    c21e:	0a 34       	jge	$+22     	;abs 0xc234
    c220:	0a 43       	clr	r10		;
    c222:	0b 43       	clr	r11		;
    c224:	06 4a       	mov	r10,	r6	;
    c226:	07 4b       	mov	r11,	r7	;
    c228:	06 8c       	sub	r12,	r6	;
    c22a:	07 7d       	subc	r13,	r7	;
    c22c:	0c 46       	mov	r6,	r12	;
    c22e:	0d 47       	mov	r7,	r13	;
    c230:	1a 43       	mov	#1,	r10	;r3 As==01
    c232:	01 3c       	jmp	$+4      	;abs 0xc236
    c234:	0a 43       	clr	r10		;
    c236:	09 4f       	mov	r15,	r9	;
    c238:	0f 93       	cmp	#0,	r15	;r3 As==00
    c23a:	08 34       	jge	$+18     	;abs 0xc24c
    c23c:	08 43       	clr	r8		;
    c23e:	09 43       	clr	r9		;
    c240:	06 48       	mov	r8,	r6	;
    c242:	07 49       	mov	r9,	r7	;
    c244:	06 8e       	sub	r14,	r6	;
    c246:	07 7f       	subc	r15,	r7	;
    c248:	0e 46       	mov	r6,	r14	;
    c24a:	0f 47       	mov	r7,	r15	;
    c24c:	91 43 00 00 	mov	#1,	0(r1)	;r3 As==01
    c250:	b0 12 26 c1 	call	#49446		;#0xc126
    c254:	0a 93       	cmp	#0,	r10	;r3 As==00
    c256:	08 24       	jz	$+18     	;abs 0xc268
    c258:	0e 43       	clr	r14		;
    c25a:	0f 43       	clr	r15		;
    c25c:	07 4e       	mov	r14,	r7	;
    c25e:	08 4f       	mov	r15,	r8	;
    c260:	07 8c       	sub	r12,	r7	;
    c262:	08 7d       	subc	r13,	r8	;
    c264:	0c 47       	mov	r7,	r12	;
    c266:	0d 48       	mov	r8,	r13	;
    c268:	21 53       	incd	r1		;
    c26a:	46 17       	popm	#5,	r10	;16-bit words
    c26c:	30 41       	ret			

0000c26e <__mspabi_divlu>:
    c26e:	21 83       	decd	r1		;
    c270:	81 43 00 00 	mov	#0,	0(r1)	;r3 As==00
    c274:	b0 12 26 c1 	call	#49446		;#0xc126
    c278:	21 53       	incd	r1		;
    c27a:	30 41       	ret			

0000c27c <__mspabi_remul>:
    c27c:	21 83       	decd	r1		;
    c27e:	91 43 00 00 	mov	#1,	0(r1)	;r3 As==01
    c282:	b0 12 26 c1 	call	#49446		;#0xc126
    c286:	21 53       	incd	r1		;
    c288:	30 41       	ret			

0000c28a <__mspabi_srli_15>:
    c28a:	12 c3       	clrc			
    c28c:	0c 10       	rrc	r12		;

0000c28e <__mspabi_srli_14>:
    c28e:	12 c3       	clrc			
    c290:	0c 10       	rrc	r12		;

0000c292 <__mspabi_srli_13>:
    c292:	12 c3       	clrc			
    c294:	0c 10       	rrc	r12		;

0000c296 <__mspabi_srli_12>:
    c296:	12 c3       	clrc			
    c298:	0c 10       	rrc	r12		;

0000c29a <__mspabi_srli_11>:
    c29a:	12 c3       	clrc			
    c29c:	0c 10       	rrc	r12		;

0000c29e <__mspabi_srli_10>:
    c29e:	12 c3       	clrc			
    c2a0:	0c 10       	rrc	r12		;

0000c2a2 <__mspabi_srli_9>:
    c2a2:	12 c3       	clrc			
    c2a4:	0c 10       	rrc	r12		;

0000c2a6 <__mspabi_srli_8>:
    c2a6:	12 c3       	clrc			
    c2a8:	0c 10       	rrc	r12		;

0000c2aa <__mspabi_srli_7>:
    c2aa:	12 c3       	clrc			
    c2ac:	0c 10       	rrc	r12		;

0000c2ae <__mspabi_srli_6>:
    c2ae:	12 c3       	clrc			
    c2b0:	0c 10       	rrc	r12		;

0000c2b2 <__mspabi_srli_5>:
    c2b2:	12 c3       	clrc			
    c2b4:	0c 10       	rrc	r12		;

0000c2b6 <__mspabi_srli_4>:
    c2b6:	12 c3       	clrc			
    c2b8:	0c 10       	rrc	r12		;

0000c2ba <__mspabi_srli_3>:
    c2ba:	12 c3       	clrc			
    c2bc:	0c 10       	rrc	r12		;

0000c2be <__mspabi_srli_2>:
    c2be:	12 c3       	clrc			
    c2c0:	0c 10       	rrc	r12		;

0000c2c2 <__mspabi_srli_1>:
    c2c2:	12 c3       	clrc			
    c2c4:	0c 10       	rrc	r12		;
    c2c6:	30 41       	ret			
    c2c8:	3d 53       	add	#-1,	r13	;r3 As==11
    c2ca:	12 c3       	clrc			
    c2cc:	0c 10       	rrc	r12		;

0000c2ce <__mspabi_srli>:
    c2ce:	0d 93       	cmp	#0,	r13	;r3 As==00
    c2d0:	fb 23       	jnz	$-8      	;abs 0xc2c8
    c2d2:	30 41       	ret			

0000c2d4 <__mspabi_srll_15>:
    c2d4:	12 c3       	clrc			
    c2d6:	0d 10       	rrc	r13		;
    c2d8:	0c 10       	rrc	r12		;

0000c2da <__mspabi_srll_14>:
    c2da:	12 c3       	clrc			
    c2dc:	0d 10       	rrc	r13		;
    c2de:	0c 10       	rrc	r12		;

0000c2e0 <__mspabi_srll_13>:
    c2e0:	12 c3       	clrc			
    c2e2:	0d 10       	rrc	r13		;
    c2e4:	0c 10       	rrc	r12		;

0000c2e6 <__mspabi_srll_12>:
    c2e6:	12 c3       	clrc			
    c2e8:	0d 10       	rrc	r13		;
    c2ea:	0c 10       	rrc	r12		;

0000c2ec <__mspabi_srll_11>:
    c2ec:	12 c3       	clrc			
    c2ee:	0d 10       	rrc	r13		;
    c2f0:	0c 10       	rrc	r12		;

0000c2f2 <__mspabi_srll_10>:
    c2f2:	12 c3       	clrc			
    c2f4:	0d 10       	rrc	r13		;
    c2f6:	0c 10       	rrc	r12		;

0000c2f8 <__mspabi_srll_9>:
    c2f8:	12 c3       	clrc			
    c2fa:	0d 10       	rrc	r13		;
    c2fc:	0c 10       	rrc	r12		;

0000c2fe <__mspabi_srll_8>:
    c2fe:	12 c3       	clrc			
    c300:	0d 10       	rrc	r13		;
    c302:	0c 10       	rrc	r12		;

0000c304 <__mspabi_srll_7>:
    c304:	12 c3       	clrc			
    c306:	0d 10       	rrc	r13		;
    c308:	0c 10       	rrc	r12		;

0000c30a <__mspabi_srll_6>:
    c30a:	12 c3       	clrc			
    c30c:	0d 10       	rrc	r13		;
    c30e:	0c 10       	rrc	r12		;

0000c310 <__mspabi_srll_5>:
    c310:	12 c3       	clrc			
    c312:	0d 10       	rrc	r13		;
    c314:	0c 10       	rrc	r12		;

0000c316 <__mspabi_srll_4>:
    c316:	12 c3       	clrc			
    c318:	0d 10       	rrc	r13		;
    c31a:	0c 10       	rrc	r12		;

0000c31c <__mspabi_srll_3>:
    c31c:	12 c3       	clrc			
    c31e:	0d 10       	rrc	r13		;
    c320:	0c 10       	rrc	r12		;

0000c322 <__mspabi_srll_2>:
    c322:	12 c3       	clrc			
    c324:	0d 10       	rrc	r13		;
    c326:	0c 10       	rrc	r12		;

0000c328 <__mspabi_srll_1>:
    c328:	12 c3       	clrc			
    c32a:	0d 10       	rrc	r13		;
    c32c:	0c 10       	rrc	r12		;
    c32e:	30 41       	ret			
    c330:	3e 53       	add	#-1,	r14	;r3 As==11
    c332:	12 c3       	clrc			
    c334:	0d 10       	rrc	r13		;
    c336:	0c 10       	rrc	r12		;

0000c338 <__mspabi_srll>:
    c338:	0e 93       	cmp	#0,	r14	;r3 As==00
    c33a:	fa 23       	jnz	$-10     	;abs 0xc330
    c33c:	30 41       	ret			
	...

0000c340 <__mulhi2>:
    c340:	02 12       	push	r2		;
    c342:	32 c2       	dint			
    c344:	03 43       	nop			
    c346:	82 4c 30 01 	mov	r12,	&0x0130	;
    c34a:	82 4d 38 01 	mov	r13,	&0x0138	;
    c34e:	1c 42 3a 01 	mov	&0x013a,r12	;0x013a
    c352:	00 13       	reti			

0000c354 <__mulsihi2>:
    c354:	02 12       	push	r2		;
    c356:	32 c2       	dint			
    c358:	03 43       	nop			
    c35a:	82 4c 32 01 	mov	r12,	&0x0132	;
    c35e:	82 4d 38 01 	mov	r13,	&0x0138	;
    c362:	1c 42 3a 01 	mov	&0x013a,r12	;0x013a
    c366:	1d 42 3c 01 	mov	&0x013c,r13	;0x013c
    c36a:	00 13       	reti			

0000c36c <__umulsihi2>:
    c36c:	02 12       	push	r2		;
    c36e:	32 c2       	dint			
    c370:	03 43       	nop			
    c372:	82 4c 30 01 	mov	r12,	&0x0130	;
    c376:	82 4d 38 01 	mov	r13,	&0x0138	;
    c37a:	1c 42 3a 01 	mov	&0x013a,r12	;0x013a
    c37e:	1d 42 3c 01 	mov	&0x013c,r13	;0x013c
    c382:	00 13       	reti			

0000c384 <__mulsi2>:
    c384:	02 12       	push	r2		;
    c386:	32 c2       	dint			
    c388:	03 43       	nop			
    c38a:	82 4c 30 01 	mov	r12,	&0x0130	;
    c38e:	82 4e 38 01 	mov	r14,	&0x0138	;
    c392:	82 4c 34 01 	mov	r12,	&0x0134	;
    c396:	1c 42 3a 01 	mov	&0x013a,r12	;0x013a
    c39a:	92 42 3c 01 	mov	&0x013c,&0x013a	;0x013c
    c39e:	3a 01 
    c3a0:	82 4f 38 01 	mov	r15,	&0x0138	;
    c3a4:	82 4d 34 01 	mov	r13,	&0x0134	;
    c3a8:	82 4e 38 01 	mov	r14,	&0x0138	;
    c3ac:	1d 42 3a 01 	mov	&0x013a,r13	;0x013a
    c3b0:	00 13       	reti			
	...

0000c3b4 <__mulsi2_hw32>:
    c3b4:	02 12       	push	r2		;
    c3b6:	32 c2       	dint			
    c3b8:	03 43       	nop			
    c3ba:	82 4c 40 01 	mov	r12,	&0x0140	;
    c3be:	82 4d 42 01 	mov	r13,	&0x0142	;
    c3c2:	82 4e 50 01 	mov	r14,	&0x0150	;
    c3c6:	82 4f 52 01 	mov	r15,	&0x0152	;
    c3ca:	1c 42 54 01 	mov	&0x0154,r12	;0x0154
    c3ce:	1d 42 56 01 	mov	&0x0156,r13	;0x0156
    c3d2:	00 13       	reti			

0000c3d4 <__muldisi2_hw32>:
    c3d4:	02 12       	push	r2		;
    c3d6:	32 c2       	dint			
    c3d8:	03 43       	nop			
    c3da:	82 4c 44 01 	mov	r12,	&0x0144	;
    c3de:	82 4d 46 01 	mov	r13,	&0x0146	;
    c3e2:	82 4e 50 01 	mov	r14,	&0x0150	;
    c3e6:	82 4f 52 01 	mov	r15,	&0x0152	;
    c3ea:	1c 42 54 01 	mov	&0x0154,r12	;0x0154
    c3ee:	1d 42 56 01 	mov	&0x0156,r13	;0x0156
    c3f2:	1e 42 58 01 	mov	&0x0158,r14	;0x0158
    c3f6:	1f 42 5a 01 	mov	&0x015a,r15	;0x015a
    c3fa:	00 13       	reti			

0000c3fc <__umuldisi2_hw32>:
    c3fc:	02 12       	push	r2		;
    c3fe:	32 c2       	dint			
    c400:	03 43       	nop			
    c402:	82 4c 40 01 	mov	r12,	&0x0140	;
    c406:	82 4d 42 01 	mov	r13,	&0x0142	;
    c40a:	82 4e 50 01 	mov	r14,	&0x0150	;
    c40e:	82 4f 52 01 	mov	r15,	&0x0152	;
    c412:	1c 42 54 01 	mov	&0x0154,r12	;0x0154
    c416:	1d 42 56 01 	mov	&0x0156,r13	;0x0156
    c41a:	1e 42 58 01 	mov	&0x0158,r14	;0x0158
    c41e:	1f 42 5a 01 	mov	&0x015a,r15	;0x015a
    c422:	00 13       	reti			

0000c424 <__mulhi2_f5>:
    c424:	02 12       	push	r2		;
    c426:	32 c2       	dint			
    c428:	03 43       	nop			
    c42a:	82 4c c0 04 	mov	r12,	&0x04c0	;
    c42e:	82 4d c8 04 	mov	r13,	&0x04c8	;
    c432:	1c 42 ca 04 	mov	&0x04ca,r12	;0x04ca
    c436:	00 13       	reti			

0000c438 <__mulsihi2_f5>:
    c438:	02 12       	push	r2		;
    c43a:	32 c2       	dint			
    c43c:	03 43       	nop			
    c43e:	82 4c c2 04 	mov	r12,	&0x04c2	;
    c442:	82 4d c8 04 	mov	r13,	&0x04c8	;
    c446:	1c 42 ca 04 	mov	&0x04ca,r12	;0x04ca
    c44a:	1d 42 cc 04 	mov	&0x04cc,r13	;0x04cc
    c44e:	00 13       	reti			

0000c450 <__umulsihi2_f5>:
    c450:	02 12       	push	r2		;
    c452:	32 c2       	dint			
    c454:	03 43       	nop			
    c456:	82 4c c0 04 	mov	r12,	&0x04c0	;
    c45a:	82 4d c8 04 	mov	r13,	&0x04c8	;
    c45e:	1c 42 ca 04 	mov	&0x04ca,r12	;0x04ca
    c462:	1d 42 cc 04 	mov	&0x04cc,r13	;0x04cc
    c466:	00 13       	reti			

0000c468 <__mulsi2_f5>:
    c468:	02 12       	push	r2		;
    c46a:	32 c2       	dint			
    c46c:	03 43       	nop			
    c46e:	82 4c d0 04 	mov	r12,	&0x04d0	;
    c472:	82 4d d2 04 	mov	r13,	&0x04d2	;
    c476:	82 4e e0 04 	mov	r14,	&0x04e0	;
    c47a:	82 4f e2 04 	mov	r15,	&0x04e2	;
    c47e:	1c 42 e4 04 	mov	&0x04e4,r12	;0x04e4
    c482:	1d 42 e6 04 	mov	&0x04e6,r13	;0x04e6
    c486:	00 13       	reti			

0000c488 <__muldisi2_f5>:
    c488:	02 12       	push	r2		;
    c48a:	32 c2       	dint			
    c48c:	03 43       	nop			
    c48e:	82 4c d4 04 	mov	r12,	&0x04d4	;
    c492:	82 4d d6 04 	mov	r13,	&0x04d6	;
    c496:	82 4e e0 04 	mov	r14,	&0x04e0	;
    c49a:	82 4f e2 04 	mov	r15,	&0x04e2	;
    c49e:	1c 42 e4 04 	mov	&0x04e4,r12	;0x04e4
    c4a2:	1d 42 e6 04 	mov	&0x04e6,r13	;0x04e6
    c4a6:	1e 42 e8 04 	mov	&0x04e8,r14	;0x04e8
    c4aa:	1f 42 ea 04 	mov	&0x04ea,r15	;0x04ea
    c4ae:	00 13       	reti			

0000c4b0 <__umuldisi2_f5>:
    c4b0:	02 12       	push	r2		;
    c4b2:	32 c2       	dint			
    c4b4:	03 43       	nop			
    c4b6:	82 4c d0 04 	mov	r12,	&0x04d0	;
    c4ba:	82 4d d2 04 	mov	r13,	&0x04d2	;
    c4be:	82 4e e0 04 	mov	r14,	&0x04e0	;
    c4c2:	82 4f e2 04 	mov	r15,	&0x04e2	;
    c4c6:	1c 42 e4 04 	mov	&0x04e4,r12	;0x04e4
    c4ca:	1d 42 e6 04 	mov	&0x04e6,r13	;0x04e6
    c4ce:	1e 42 e8 04 	mov	&0x04e8,r14	;0x04e8
    c4d2:	1f 42 ea 04 	mov	&0x04ea,r15	;0x04ea
    c4d6:	00 13       	reti			

0000c4d8 <__mspabi_mpyll>:
    c4d8:	6a 15       	pushm	#7,	r10	;16-bit words
    c4da:	31 80 1e 00 	sub	#30,	r1	;#0x001e
    c4de:	81 49 0e 00 	mov	r9,	14(r1)	; 0x000e
    c4e2:	81 4a 16 00 	mov	r10,	22(r1)	; 0x0016
    c4e6:	81 4b 18 00 	mov	r11,	24(r1)	; 0x0018
    c4ea:	07 4c       	mov	r12,	r7	;
    c4ec:	06 4d       	mov	r13,	r6	;
    c4ee:	81 4e 1a 00 	mov	r14,	26(r1)	; 0x001a
    c4f2:	81 4f 1c 00 	mov	r15,	28(r1)	; 0x001c
    c4f6:	09 48       	mov	r8,	r9	;
    c4f8:	81 48 10 00 	mov	r8,	16(r1)	; 0x0010
    c4fc:	0c 48       	mov	r8,	r12	;
    c4fe:	1d 41 0e 00 	mov	14(r1),	r13	;0x0000e
    c502:	3e 40 10 00 	mov	#16,	r14	;#0x0010
    c506:	b0 12 38 c3 	call	#49976		;#0xc338
    c50a:	81 4c 02 00 	mov	r12,	2(r1)	;
    c50e:	81 4d 04 00 	mov	r13,	4(r1)	;
    c512:	81 47 12 00 	mov	r7,	18(r1)	; 0x0012
    c516:	0c 47       	mov	r7,	r12	;
    c518:	0d 46       	mov	r6,	r13	;
    c51a:	3e 40 10 00 	mov	#16,	r14	;#0x0010
    c51e:	b0 12 38 c3 	call	#49976		;#0xc338
    c522:	81 4c 06 00 	mov	r12,	6(r1)	;
    c526:	81 4d 08 00 	mov	r13,	8(r1)	;
    c52a:	38 40 5c cc 	mov	#52316,	r8	;#0xcc5c
    c52e:	0c 47       	mov	r7,	r12	;
    c530:	0d 43       	clr	r13		;
    c532:	0e 49       	mov	r9,	r14	;
    c534:	0f 4d       	mov	r13,	r15	;
    c536:	88 12       	call	r8		;
    c538:	04 4c       	mov	r12,	r4	;
    c53a:	81 4c 14 00 	mov	r12,	20(r1)	; 0x0014
    c53e:	05 4d       	mov	r13,	r5	;
    c540:	0c 47       	mov	r7,	r12	;
    c542:	0d 43       	clr	r13		;
    c544:	1e 41 02 00 	mov	2(r1),	r14	;
    c548:	1f 41 04 00 	mov	4(r1),	r15	;
    c54c:	88 12       	call	r8		;
    c54e:	07 4c       	mov	r12,	r7	;
    c550:	0a 4d       	mov	r13,	r10	;
    c552:	1c 41 06 00 	mov	6(r1),	r12	;
    c556:	1d 41 08 00 	mov	8(r1),	r13	;
    c55a:	1e 41 02 00 	mov	2(r1),	r14	;
    c55e:	1f 41 04 00 	mov	4(r1),	r15	;
    c562:	88 12       	call	r8		;
    c564:	81 4c 02 00 	mov	r12,	2(r1)	;
    c568:	81 4d 04 00 	mov	r13,	4(r1)	;
    c56c:	1c 41 06 00 	mov	6(r1),	r12	;
    c570:	1d 41 08 00 	mov	8(r1),	r13	;
    c574:	0e 49       	mov	r9,	r14	;
    c576:	0f 43       	clr	r15		;
    c578:	88 12       	call	r8		;
    c57a:	09 47       	mov	r7,	r9	;
    c57c:	09 5c       	add	r12,	r9	;
    c57e:	08 4a       	mov	r10,	r8	;
    c580:	08 6d       	addc	r13,	r8	;
    c582:	0c 44       	mov	r4,	r12	;
    c584:	0d 45       	mov	r5,	r13	;
    c586:	3e 40 10 00 	mov	#16,	r14	;#0x0010
    c58a:	b0 12 38 c3 	call	#49976		;#0xc338
    c58e:	09 5c       	add	r12,	r9	;
    c590:	0d 68       	addc	r8,	r13	;
    c592:	0d 9a       	cmp	r10,	r13	;
    c594:	04 28       	jnc	$+10     	;abs 0xc59e
    c596:	0a 9d       	cmp	r13,	r10	;
    c598:	06 20       	jnz	$+14     	;abs 0xc5a6
    c59a:	09 97       	cmp	r7,	r9	;
    c59c:	04 2c       	jc	$+10     	;abs 0xc5a6
    c59e:	81 53 02 00 	add	#0,	2(r1)	;r3 As==00
    c5a2:	91 63 04 00 	addc	#1,	4(r1)	;r3 As==01
    c5a6:	0c 49       	mov	r9,	r12	;
    c5a8:	3e 40 10 00 	mov	#16,	r14	;#0x0010
    c5ac:	b0 12 38 c3 	call	#49976		;#0xc338
    c5b0:	15 41 02 00 	mov	2(r1),	r5	;
    c5b4:	05 5c       	add	r12,	r5	;
    c5b6:	1d 61 04 00 	addc	4(r1),	r13	;
    c5ba:	07 4d       	mov	r13,	r7	;
    c5bc:	0c 49       	mov	r9,	r12	;
    c5be:	0d 43       	clr	r13		;
    c5c0:	3e 40 10 00 	mov	#16,	r14	;#0x0010
    c5c4:	b0 12 90 52 	call	#21136		;#0x5290
    c5c8:	0f 43       	clr	r15		;
    c5ca:	0e 4f       	mov	r15,	r14	;
    c5cc:	1f 41 14 00 	mov	20(r1),	r15	;0x00014
    c5d0:	0c 5f       	add	r15,	r12	;
    c5d2:	0d 6e       	addc	r14,	r13	;
    c5d4:	08 4c       	mov	r12,	r8	;
    c5d6:	09 4d       	mov	r13,	r9	;
    c5d8:	0a 45       	mov	r5,	r10	;
    c5da:	34 40 5c cc 	mov	#52316,	r4	;#0xcc5c
    c5de:	1c 41 10 00 	mov	16(r1),	r12	;0x00010
    c5e2:	1d 41 0e 00 	mov	14(r1),	r13	;0x0000e
    c5e6:	1e 41 1a 00 	mov	26(r1),	r14	;0x0001a
    c5ea:	1f 41 1c 00 	mov	28(r1),	r15	;0x0001c
    c5ee:	81 47 00 00 	mov	r7,	0(r1)	;
    c5f2:	84 12       	call	r4		;
    c5f4:	07 4c       	mov	r12,	r7	;
    c5f6:	05 4d       	mov	r13,	r5	;
    c5f8:	1c 41 12 00 	mov	18(r1),	r12	;0x00012
    c5fc:	0d 46       	mov	r6,	r13	;
    c5fe:	1e 41 16 00 	mov	22(r1),	r14	;0x00016
    c602:	1f 41 18 00 	mov	24(r1),	r15	;0x00018
    c606:	84 12       	call	r4		;
    c608:	07 5c       	add	r12,	r7	;
    c60a:	81 47 0a 00 	mov	r7,	10(r1)	; 0x000a
    c60e:	05 6d       	addc	r13,	r5	;
    c610:	81 45 0c 00 	mov	r5,	12(r1)	; 0x000c
    c614:	2b 41       	mov	@r1,	r11	;
    c616:	1a 51 0a 00 	add	10(r1),	r10	;0x0000a
    c61a:	1b 61 0c 00 	addc	12(r1),	r11	;0x0000c
    c61e:	0c 48       	mov	r8,	r12	;
    c620:	0d 49       	mov	r9,	r13	;
    c622:	0e 4a       	mov	r10,	r14	;
    c624:	0f 4b       	mov	r11,	r15	;
    c626:	31 50 1e 00 	add	#30,	r1	;#0x001e
    c62a:	64 17       	popm	#7,	r10	;16-bit words
    c62c:	30 41       	ret			

0000c62e <__lshrdi3>:
    c62e:	6a 15       	pushm	#7,	r10	;16-bit words
    c630:	21 82       	sub	#4,	r1	;r2 As==10
    c632:	16 41 14 00 	mov	20(r1),	r6	;0x00014
    c636:	06 93       	cmp	#0,	r6	;r3 As==00
    c638:	33 24       	jz	$+104    	;abs 0xc6a0
    c63a:	81 4d 02 00 	mov	r13,	2(r1)	;
    c63e:	81 4c 00 00 	mov	r12,	0(r1)	;
    c642:	39 40 20 00 	mov	#32,	r9	;#0x0020
    c646:	09 86       	sub	r6,	r9	;
    c648:	0c 43       	clr	r12		;
    c64a:	0c 99       	cmp	r9,	r12	;
    c64c:	0b 38       	jl	$+24     	;abs 0xc664
    c64e:	08 4c       	mov	r12,	r8	;
    c650:	05 4c       	mov	r12,	r5	;
    c652:	0a 43       	clr	r10		;
    c654:	0a 89       	sub	r9,	r10	;
    c656:	0c 4e       	mov	r14,	r12	;
    c658:	0d 4f       	mov	r15,	r13	;
    c65a:	0e 4a       	mov	r10,	r14	;
    c65c:	0f 43       	clr	r15		;
    c65e:	b0 12 38 c3 	call	#49976		;#0xc338
    c662:	1c 3c       	jmp	$+58     	;abs 0xc69c
    c664:	0a 4e       	mov	r14,	r10	;
    c666:	04 4f       	mov	r15,	r4	;
    c668:	07 43       	clr	r7		;
    c66a:	0c 4e       	mov	r14,	r12	;
    c66c:	0d 4f       	mov	r15,	r13	;
    c66e:	0e 46       	mov	r6,	r14	;
    c670:	b0 12 38 c3 	call	#49976		;#0xc338
    c674:	08 4c       	mov	r12,	r8	;
    c676:	05 4d       	mov	r13,	r5	;
    c678:	0c 4a       	mov	r10,	r12	;
    c67a:	0d 44       	mov	r4,	r13	;
    c67c:	0e 49       	mov	r9,	r14	;
    c67e:	0f 43       	clr	r15		;
    c680:	b0 12 90 52 	call	#21136		;#0x5290
    c684:	04 4c       	mov	r12,	r4	;
    c686:	09 4d       	mov	r13,	r9	;
    c688:	2c 41       	mov	@r1,	r12	;
    c68a:	1d 41 02 00 	mov	2(r1),	r13	;
    c68e:	0e 46       	mov	r6,	r14	;
    c690:	b0 12 38 c3 	call	#49976		;#0xc338
    c694:	0d d9       	bis	r9,	r13	;
    c696:	0a 44       	mov	r4,	r10	;
    c698:	0a dc       	bis	r12,	r10	;
    c69a:	0c 4a       	mov	r10,	r12	;
    c69c:	0e 48       	mov	r8,	r14	;
    c69e:	0f 45       	mov	r5,	r15	;
    c6a0:	21 52       	add	#4,	r1	;r2 As==10
    c6a2:	64 17       	popm	#7,	r10	;16-bit words
    c6a4:	30 41       	ret			

0000c6a6 <__ashldi3>:
    c6a6:	6a 15       	pushm	#7,	r10	;16-bit words
    c6a8:	21 82       	sub	#4,	r1	;r2 As==10
    c6aa:	16 41 14 00 	mov	20(r1),	r6	;0x00014
    c6ae:	06 93       	cmp	#0,	r6	;r3 As==00
    c6b0:	32 24       	jz	$+102    	;abs 0xc716
    c6b2:	81 4f 02 00 	mov	r15,	2(r1)	;
    c6b6:	81 4e 00 00 	mov	r14,	0(r1)	;
    c6ba:	07 4c       	mov	r12,	r7	;
    c6bc:	39 40 20 00 	mov	#32,	r9	;#0x0020
    c6c0:	09 86       	sub	r6,	r9	;
    c6c2:	0c 43       	clr	r12		;
    c6c4:	0c 99       	cmp	r9,	r12	;
    c6c6:	0a 38       	jl	$+22     	;abs 0xc6dc
    c6c8:	08 4c       	mov	r12,	r8	;
    c6ca:	05 4c       	mov	r12,	r5	;
    c6cc:	0e 43       	clr	r14		;
    c6ce:	0e 89       	sub	r9,	r14	;
    c6d0:	0c 47       	mov	r7,	r12	;
    c6d2:	0f 43       	clr	r15		;
    c6d4:	b0 12 90 52 	call	#21136		;#0x5290
    c6d8:	0e 4c       	mov	r12,	r14	;
    c6da:	1a 3c       	jmp	$+54     	;abs 0xc710
    c6dc:	0a 47       	mov	r7,	r10	;
    c6de:	04 4d       	mov	r13,	r4	;
    c6e0:	07 43       	clr	r7		;
    c6e2:	0c 4a       	mov	r10,	r12	;
    c6e4:	0e 46       	mov	r6,	r14	;
    c6e6:	b0 12 90 52 	call	#21136		;#0x5290
    c6ea:	08 4c       	mov	r12,	r8	;
    c6ec:	05 4d       	mov	r13,	r5	;
    c6ee:	0c 4a       	mov	r10,	r12	;
    c6f0:	0d 44       	mov	r4,	r13	;
    c6f2:	0e 49       	mov	r9,	r14	;
    c6f4:	0f 43       	clr	r15		;
    c6f6:	b0 12 38 c3 	call	#49976		;#0xc338
    c6fa:	04 4c       	mov	r12,	r4	;
    c6fc:	09 4d       	mov	r13,	r9	;
    c6fe:	2c 41       	mov	@r1,	r12	;
    c700:	1d 41 02 00 	mov	2(r1),	r13	;
    c704:	0e 46       	mov	r6,	r14	;
    c706:	b0 12 90 52 	call	#21136		;#0x5290
    c70a:	0d d9       	bis	r9,	r13	;
    c70c:	0e 44       	mov	r4,	r14	;
    c70e:	0e dc       	bis	r12,	r14	;
    c710:	0f 4d       	mov	r13,	r15	;
    c712:	0c 48       	mov	r8,	r12	;
    c714:	0d 45       	mov	r5,	r13	;
    c716:	21 52       	add	#4,	r1	;r2 As==10
    c718:	64 17       	popm	#7,	r10	;16-bit words
    c71a:	30 41       	ret			

0000c71c <__clzsi2>:
    c71c:	19 15       	pushm	#2,	r9	;16-bit words
    c71e:	3e 40 ff 00 	mov	#255,	r14	;#0x00ff
    c722:	0d 93       	cmp	#0,	r13	;r3 As==00
    c724:	04 20       	jnz	$+10     	;abs 0xc72e
    c726:	0e 9c       	cmp	r12,	r14	;
    c728:	0a 2c       	jc	$+22     	;abs 0xc73e
    c72a:	3e 42       	mov	#8,	r14	;r2 As==11
    c72c:	09 3c       	jmp	$+20     	;abs 0xc740
    c72e:	0e 9d       	cmp	r13,	r14	;
    c730:	03 28       	jnc	$+8      	;abs 0xc738
    c732:	3e 40 10 00 	mov	#16,	r14	;#0x0010
    c736:	04 3c       	jmp	$+10     	;abs 0xc740
    c738:	3e 40 18 00 	mov	#24,	r14	;#0x0018
    c73c:	01 3c       	jmp	$+4      	;abs 0xc740
    c73e:	0e 43       	clr	r14		;
    c740:	0f 43       	clr	r15		;
    c742:	38 40 20 00 	mov	#32,	r8	;#0x0020
    c746:	09 43       	clr	r9		;
    c748:	08 8e       	sub	r14,	r8	;
    c74a:	09 7f       	subc	r15,	r9	;
    c74c:	b0 12 38 c3 	call	#49976		;#0xc338
    c750:	5c 4c 1e 46 	mov.b	17950(r12),r12	;0x0461e
    c754:	0d 48       	mov	r8,	r13	;
    c756:	0d 8c       	sub	r12,	r13	;
    c758:	0c 4d       	mov	r13,	r12	;
    c75a:	18 17       	popm	#2,	r9	;16-bit words
    c75c:	30 41       	ret			

0000c75e <__pack_d>:
    c75e:	6a 15       	pushm	#7,	r10	;16-bit words
    c760:	31 80 0a 00 	sub	#10,	r1	;#0x000a
    c764:	1a 4c 06 00 	mov	6(r12),	r10	;
    c768:	17 4c 08 00 	mov	8(r12),	r7	;
    c76c:	18 4c 0a 00 	mov	10(r12),r8	;0x0000a
    c770:	19 4c 0c 00 	mov	12(r12),r9	;0x0000c
    c774:	91 4c 02 00 	mov	2(r12),	2(r1)	;
    c778:	02 00 
    c77a:	2d 4c       	mov	@r12,	r13	;
    c77c:	1e 43       	mov	#1,	r14	;r3 As==01
    c77e:	0e 9d       	cmp	r13,	r14	;
    c780:	12 28       	jnc	$+38     	;abs 0xc7a6
    c782:	b1 42 00 00 	mov	#8,	0(r1)	;r2 As==11
    c786:	0c 4a       	mov	r10,	r12	;
    c788:	0d 47       	mov	r7,	r13	;
    c78a:	0e 48       	mov	r8,	r14	;
    c78c:	0f 49       	mov	r9,	r15	;
    c78e:	b0 12 2e c6 	call	#50734		;#0xc62e
    c792:	3f f0 07 00 	and	#7,	r15	;
    c796:	0a 4c       	mov	r12,	r10	;
    c798:	07 4d       	mov	r13,	r7	;
    c79a:	08 4e       	mov	r14,	r8	;
    c79c:	09 4f       	mov	r15,	r9	;
    c79e:	39 d2       	bis	#8,	r9	;r2 As==11
    c7a0:	35 40 ff 07 	mov	#2047,	r5	;#0x07ff
    c7a4:	06 3d       	jmp	$+526    	;abs 0xc9b2
    c7a6:	2d 92       	cmp	#4,	r13	;r2 As==10
    c7a8:	fe 24       	jz	$+510    	;abs 0xc9a6
    c7aa:	2d 93       	cmp	#2,	r13	;r3 As==10
    c7ac:	f6 24       	jz	$+494    	;abs 0xc99a
    c7ae:	05 4a       	mov	r10,	r5	;
    c7b0:	05 d7       	bis	r7,	r5	;
    c7b2:	05 d8       	bis	r8,	r5	;
    c7b4:	05 d9       	bis	r9,	r5	;
    c7b6:	05 93       	cmp	#0,	r5	;r3 As==00
    c7b8:	fc 24       	jz	$+506    	;abs 0xc9b2
    c7ba:	16 4c 04 00 	mov	4(r12),	r6	;
    c7be:	36 90 02 fc 	cmp	#64514,	r6	;#0xfc02
    c7c2:	a4 34       	jge	$+330    	;abs 0xc90c
    c7c4:	35 40 02 fc 	mov	#64514,	r5	;#0xfc02
    c7c8:	05 86       	sub	r6,	r5	;
    c7ca:	3c 40 38 00 	mov	#56,	r12	;#0x0038
    c7ce:	0c 95       	cmp	r5,	r12	;
    c7d0:	71 38       	jl	$+228    	;abs 0xc8b4
    c7d2:	81 45 00 00 	mov	r5,	0(r1)	;
    c7d6:	0c 4a       	mov	r10,	r12	;
    c7d8:	0d 47       	mov	r7,	r13	;
    c7da:	0e 48       	mov	r8,	r14	;
    c7dc:	0f 49       	mov	r9,	r15	;
    c7de:	b0 12 2e c6 	call	#50734		;#0xc62e
    c7e2:	06 4c       	mov	r12,	r6	;
    c7e4:	81 4d 04 00 	mov	r13,	4(r1)	;
    c7e8:	81 4e 06 00 	mov	r14,	6(r1)	;
    c7ec:	81 4f 08 00 	mov	r15,	8(r1)	;
    c7f0:	1c 43       	mov	#1,	r12	;r3 As==01
    c7f2:	0d 43       	clr	r13		;
    c7f4:	0e 4d       	mov	r13,	r14	;
    c7f6:	0f 4d       	mov	r13,	r15	;
    c7f8:	b0 12 a6 c6 	call	#50854		;#0xc6a6
    c7fc:	04 4c       	mov	r12,	r4	;
    c7fe:	34 53       	add	#-1,	r4	;r3 As==11
    c800:	15 43       	mov	#1,	r5	;r3 As==01
    c802:	0c 93       	cmp	#0,	r12	;r3 As==00
    c804:	01 20       	jnz	$+4      	;abs 0xc808
    c806:	05 43       	clr	r5		;
    c808:	0c 4d       	mov	r13,	r12	;
    c80a:	3c 53       	add	#-1,	r12	;r3 As==11
    c80c:	1b 43       	mov	#1,	r11	;r3 As==01
    c80e:	0c 9d       	cmp	r13,	r12	;
    c810:	01 28       	jnc	$+4      	;abs 0xc814
    c812:	0b 43       	clr	r11		;
    c814:	05 5c       	add	r12,	r5	;
    c816:	1d 43       	mov	#1,	r13	;r3 As==01
    c818:	05 9c       	cmp	r12,	r5	;
    c81a:	01 28       	jnc	$+4      	;abs 0xc81e
    c81c:	0d 43       	clr	r13		;
    c81e:	0b dd       	bis	r13,	r11	;
    c820:	0d 4e       	mov	r14,	r13	;
    c822:	3d 53       	add	#-1,	r13	;r3 As==11
    c824:	1c 43       	mov	#1,	r12	;r3 As==01
    c826:	0d 9e       	cmp	r14,	r13	;
    c828:	01 28       	jnc	$+4      	;abs 0xc82c
    c82a:	0c 43       	clr	r12		;
    c82c:	0b 5d       	add	r13,	r11	;
    c82e:	1e 43       	mov	#1,	r14	;r3 As==01
    c830:	0b 9d       	cmp	r13,	r11	;
    c832:	01 28       	jnc	$+4      	;abs 0xc836
    c834:	0e 43       	clr	r14		;
    c836:	0c de       	bis	r14,	r12	;
    c838:	3f 53       	add	#-1,	r15	;r3 As==11
    c83a:	0f 5c       	add	r12,	r15	;
    c83c:	0c 44       	mov	r4,	r12	;
    c83e:	0c fa       	and	r10,	r12	;
    c840:	05 f7       	and	r7,	r5	;
    c842:	0b f8       	and	r8,	r11	;
    c844:	0f f9       	and	r9,	r15	;
    c846:	09 43       	clr	r9		;
    c848:	09 8c       	sub	r12,	r9	;
    c84a:	1a 43       	mov	#1,	r10	;r3 As==01
    c84c:	09 93       	cmp	#0,	r9	;r3 As==00
    c84e:	01 20       	jnz	$+4      	;abs 0xc852
    c850:	0a 49       	mov	r9,	r10	;
    c852:	0e 43       	clr	r14		;
    c854:	0e 85       	sub	r5,	r14	;
    c856:	18 43       	mov	#1,	r8	;r3 As==01
    c858:	0e 93       	cmp	#0,	r14	;r3 As==00
    c85a:	01 20       	jnz	$+4      	;abs 0xc85e
    c85c:	08 4e       	mov	r14,	r8	;
    c85e:	0d 4e       	mov	r14,	r13	;
    c860:	0d 8a       	sub	r10,	r13	;
    c862:	1a 43       	mov	#1,	r10	;r3 As==01
    c864:	0e 9d       	cmp	r13,	r14	;
    c866:	01 28       	jnc	$+4      	;abs 0xc86a
    c868:	0a 43       	clr	r10		;
    c86a:	08 da       	bis	r10,	r8	;
    c86c:	0a 43       	clr	r10		;
    c86e:	0a 8b       	sub	r11,	r10	;
    c870:	14 43       	mov	#1,	r4	;r3 As==01
    c872:	0a 93       	cmp	#0,	r10	;r3 As==00
    c874:	01 20       	jnz	$+4      	;abs 0xc878
    c876:	04 4a       	mov	r10,	r4	;
    c878:	0e 4a       	mov	r10,	r14	;
    c87a:	0e 88       	sub	r8,	r14	;
    c87c:	18 43       	mov	#1,	r8	;r3 As==01
    c87e:	0a 9e       	cmp	r14,	r10	;
    c880:	01 28       	jnc	$+4      	;abs 0xc884
    c882:	08 43       	clr	r8		;
    c884:	04 d8       	bis	r8,	r4	;
    c886:	0a 43       	clr	r10		;
    c888:	0a 8f       	sub	r15,	r10	;
    c88a:	0a 84       	sub	r4,	r10	;
    c88c:	b1 40 3f 00 	mov	#63,	0(r1)	;#0x003f
    c890:	00 00 
    c892:	0c d9       	bis	r9,	r12	;
    c894:	0d d5       	bis	r5,	r13	;
    c896:	0e db       	bis	r11,	r14	;
    c898:	0f da       	bis	r10,	r15	;
    c89a:	b0 12 2e c6 	call	#50734		;#0xc62e
    c89e:	0c d6       	bis	r6,	r12	;
    c8a0:	1d d1 04 00 	bis	4(r1),	r13	;
    c8a4:	1e d1 06 00 	bis	6(r1),	r14	;
    c8a8:	1f d1 08 00 	bis	8(r1),	r15	;
    c8ac:	7c 90 80 ff 	cmp.b	#65408,	r12	;#0xff80
    c8b0:	0d 20       	jnz	$+28     	;abs 0xc8cc
    c8b2:	05 3c       	jmp	$+12     	;abs 0xc8be
    c8b4:	0c 43       	clr	r12		;
    c8b6:	0d 4c       	mov	r12,	r13	;
    c8b8:	0e 4c       	mov	r12,	r14	;
    c8ba:	0f 4c       	mov	r12,	r15	;
    c8bc:	07 3c       	jmp	$+16     	;abs 0xc8cc
    c8be:	3c b0 00 01 	bit	#256,	r12	;#0x0100
    c8c2:	19 24       	jz	$+52     	;abs 0xc8f6
    c8c4:	07 4c       	mov	r12,	r7	;
    c8c6:	37 50 80 00 	add	#128,	r7	;#0x0080
    c8ca:	03 3c       	jmp	$+8      	;abs 0xc8d2
    c8cc:	07 4c       	mov	r12,	r7	;
    c8ce:	37 50 7f 00 	add	#127,	r7	;#0x007f
    c8d2:	19 43       	mov	#1,	r9	;r3 As==01
    c8d4:	07 9c       	cmp	r12,	r7	;
    c8d6:	01 28       	jnc	$+4      	;abs 0xc8da
    c8d8:	09 43       	clr	r9		;
    c8da:	09 5d       	add	r13,	r9	;
    c8dc:	1a 43       	mov	#1,	r10	;r3 As==01
    c8de:	09 9d       	cmp	r13,	r9	;
    c8e0:	01 28       	jnc	$+4      	;abs 0xc8e4
    c8e2:	0a 43       	clr	r10		;
    c8e4:	0a 5e       	add	r14,	r10	;
    c8e6:	18 43       	mov	#1,	r8	;r3 As==01
    c8e8:	0a 9e       	cmp	r14,	r10	;
    c8ea:	01 28       	jnc	$+4      	;abs 0xc8ee
    c8ec:	08 43       	clr	r8		;
    c8ee:	0c 47       	mov	r7,	r12	;
    c8f0:	0d 49       	mov	r9,	r13	;
    c8f2:	0e 4a       	mov	r10,	r14	;
    c8f4:	0f 58       	add	r8,	r15	;
    c8f6:	15 43       	mov	#1,	r5	;r3 As==01
    c8f8:	3a 40 ff 0f 	mov	#4095,	r10	;#0x0fff
    c8fc:	0a 9f       	cmp	r15,	r10	;
    c8fe:	01 28       	jnc	$+4      	;abs 0xc902
    c900:	05 43       	clr	r5		;
    c902:	b1 42 00 00 	mov	#8,	0(r1)	;r2 As==11
    c906:	b0 12 2e c6 	call	#50734		;#0xc62e
    c90a:	42 3c       	jmp	$+134    	;abs 0xc990
    c90c:	3c 40 ff 03 	mov	#1023,	r12	;#0x03ff
    c910:	0c 96       	cmp	r6,	r12	;
    c912:	49 38       	jl	$+148    	;abs 0xc9a6
    c914:	7a 90 80 ff 	cmp.b	#65408,	r10	;#0xff80
    c918:	07 20       	jnz	$+16     	;abs 0xc928
    c91a:	3a b0 00 01 	bit	#256,	r10	;#0x0100
    c91e:	19 24       	jz	$+52     	;abs 0xc952
    c920:	0f 4a       	mov	r10,	r15	;
    c922:	3f 50 80 00 	add	#128,	r15	;#0x0080
    c926:	03 3c       	jmp	$+8      	;abs 0xc92e
    c928:	0f 4a       	mov	r10,	r15	;
    c92a:	3f 50 7f 00 	add	#127,	r15	;#0x007f
    c92e:	1d 43       	mov	#1,	r13	;r3 As==01
    c930:	0f 9a       	cmp	r10,	r15	;
    c932:	01 28       	jnc	$+4      	;abs 0xc936
    c934:	0d 43       	clr	r13		;
    c936:	0d 57       	add	r7,	r13	;
    c938:	1c 43       	mov	#1,	r12	;r3 As==01
    c93a:	0d 97       	cmp	r7,	r13	;
    c93c:	01 28       	jnc	$+4      	;abs 0xc940
    c93e:	0c 43       	clr	r12		;
    c940:	0c 58       	add	r8,	r12	;
    c942:	1e 43       	mov	#1,	r14	;r3 As==01
    c944:	0c 98       	cmp	r8,	r12	;
    c946:	01 28       	jnc	$+4      	;abs 0xc94a
    c948:	0e 43       	clr	r14		;
    c94a:	0a 4f       	mov	r15,	r10	;
    c94c:	07 4d       	mov	r13,	r7	;
    c94e:	08 4c       	mov	r12,	r8	;
    c950:	09 5e       	add	r14,	r9	;
    c952:	34 40 2e c6 	mov	#50734,	r4	;#0xc62e
    c956:	3e 40 ff 1f 	mov	#8191,	r14	;#0x1fff
    c95a:	0e 99       	cmp	r9,	r14	;
    c95c:	04 28       	jnc	$+10     	;abs 0xc966
    c95e:	05 46       	mov	r6,	r5	;
    c960:	35 50 ff 03 	add	#1023,	r5	;#0x03ff
    c964:	0e 3c       	jmp	$+30     	;abs 0xc982
    c966:	91 43 00 00 	mov	#1,	0(r1)	;r3 As==01
    c96a:	0c 4a       	mov	r10,	r12	;
    c96c:	0d 47       	mov	r7,	r13	;
    c96e:	0e 48       	mov	r8,	r14	;
    c970:	0f 49       	mov	r9,	r15	;
    c972:	84 12       	call	r4		;
    c974:	0a 4c       	mov	r12,	r10	;
    c976:	07 4d       	mov	r13,	r7	;
    c978:	08 4e       	mov	r14,	r8	;
    c97a:	09 4f       	mov	r15,	r9	;
    c97c:	05 46       	mov	r6,	r5	;
    c97e:	35 50 00 04 	add	#1024,	r5	;#0x0400
    c982:	b1 42 00 00 	mov	#8,	0(r1)	;r2 As==11
    c986:	0c 4a       	mov	r10,	r12	;
    c988:	0d 47       	mov	r7,	r13	;
    c98a:	0e 48       	mov	r8,	r14	;
    c98c:	0f 49       	mov	r9,	r15	;
    c98e:	84 12       	call	r4		;
    c990:	0a 4c       	mov	r12,	r10	;
    c992:	07 4d       	mov	r13,	r7	;
    c994:	08 4e       	mov	r14,	r8	;
    c996:	09 4f       	mov	r15,	r9	;
    c998:	0c 3c       	jmp	$+26     	;abs 0xc9b2
    c99a:	05 43       	clr	r5		;
    c99c:	0a 45       	mov	r5,	r10	;
    c99e:	07 45       	mov	r5,	r7	;
    c9a0:	08 45       	mov	r5,	r8	;
    c9a2:	09 45       	mov	r5,	r9	;
    c9a4:	06 3c       	jmp	$+14     	;abs 0xc9b2
    c9a6:	35 40 ff 07 	mov	#2047,	r5	;#0x07ff
    c9aa:	0a 43       	clr	r10		;
    c9ac:	07 4a       	mov	r10,	r7	;
    c9ae:	08 4a       	mov	r10,	r8	;
    c9b0:	09 4a       	mov	r10,	r9	;
    c9b2:	35 f0 ff 07 	and	#2047,	r5	;#0x07ff
    c9b6:	43 18 05 55 	rpt #4 { rlax.w	r5		;
    c9ba:	39 f0 0f 00 	and	#15,	r9	;#0x000f
    c9be:	1f 41 02 00 	mov	2(r1),	r15	;
    c9c2:	4e 18 0f 5f 	rpt #15 { rlax.w	r15		;
    c9c6:	09 d5       	bis	r5,	r9	;
    c9c8:	0c 4a       	mov	r10,	r12	;
    c9ca:	0d 47       	mov	r7,	r13	;
    c9cc:	0e 48       	mov	r8,	r14	;
    c9ce:	0f d9       	bis	r9,	r15	;
    c9d0:	31 50 0a 00 	add	#10,	r1	;#0x000a
    c9d4:	64 17       	popm	#7,	r10	;16-bit words
    c9d6:	30 41       	ret			

0000c9d8 <__unpack_d>:
    c9d8:	5a 15       	pushm	#6,	r10	;16-bit words
    c9da:	31 82       	sub	#8,	r1	;r2 As==11
    c9dc:	09 4c       	mov	r12,	r9	;
    c9de:	0a 4d       	mov	r13,	r10	;
    c9e0:	28 4c       	mov	@r12,	r8	;
    c9e2:	1d 4c 02 00 	mov	2(r12),	r13	;
    c9e6:	1e 4c 04 00 	mov	4(r12),	r14	;
    c9ea:	57 4c 06 00 	mov.b	6(r12),	r7	;
    c9ee:	0f 47       	mov	r7,	r15	;
    c9f0:	3f f0 0f 00 	and	#15,	r15	;#0x000f
    c9f4:	1c 4c 06 00 	mov	6(r12),	r12	;
    c9f8:	81 4d 06 00 	mov	r13,	6(r1)	;
    c9fc:	81 4e 04 00 	mov	r14,	4(r1)	;
    ca00:	81 4f 02 00 	mov	r15,	2(r1)	;
    ca04:	b0 12 b6 c2 	call	#49846		;#0xc2b6
    ca08:	3c f0 ff 07 	and	#2047,	r12	;#0x07ff
    ca0c:	59 49 07 00 	mov.b	7(r9),	r9	;
    ca10:	59 0f       	rrum	#4,	r9	;
    ca12:	59 0b       	rrum	#3,	r9	;
    ca14:	19 f3       	and	#1,	r9	;r3 As==01
    ca16:	8a 49 02 00 	mov	r9,	2(r10)	;
    ca1a:	1d 41 06 00 	mov	6(r1),	r13	;
    ca1e:	1e 41 04 00 	mov	4(r1),	r14	;
    ca22:	1f 41 02 00 	mov	2(r1),	r15	;
    ca26:	0c 93       	cmp	#0,	r12	;r3 As==00
    ca28:	49 20       	jnz	$+148    	;abs 0xcabc
    ca2a:	0c 48       	mov	r8,	r12	;
    ca2c:	0c dd       	bis	r13,	r12	;
    ca2e:	0c de       	bis	r14,	r12	;
    ca30:	0c df       	bis	r15,	r12	;
    ca32:	0c 93       	cmp	#0,	r12	;r3 As==00
    ca34:	03 20       	jnz	$+8      	;abs 0xca3c
    ca36:	aa 43 00 00 	mov	#2,	0(r10)	;r3 As==10
    ca3a:	78 3c       	jmp	$+242    	;abs 0xcb2c
    ca3c:	ba 40 02 fc 	mov	#64514,	4(r10)	;#0xfc02
    ca40:	04 00 
    ca42:	b1 42 00 00 	mov	#8,	0(r1)	;r2 As==11
    ca46:	0c 48       	mov	r8,	r12	;
    ca48:	b0 12 a6 c6 	call	#50854		;#0xc6a6
    ca4c:	ba 40 03 00 	mov	#3,	0(r10)	;
    ca50:	00 00 
    ca52:	36 40 01 fc 	mov	#64513,	r6	;#0xfc01
    ca56:	0b 4c       	mov	r12,	r11	;
    ca58:	0b 5c       	add	r12,	r11	;
    ca5a:	18 43       	mov	#1,	r8	;r3 As==01
    ca5c:	0b 9c       	cmp	r12,	r11	;
    ca5e:	01 28       	jnc	$+4      	;abs 0xca62
    ca60:	08 43       	clr	r8		;
    ca62:	09 4d       	mov	r13,	r9	;
    ca64:	09 5d       	add	r13,	r9	;
    ca66:	1c 43       	mov	#1,	r12	;r3 As==01
    ca68:	09 9d       	cmp	r13,	r9	;
    ca6a:	01 28       	jnc	$+4      	;abs 0xca6e
    ca6c:	0c 43       	clr	r12		;
    ca6e:	08 59       	add	r9,	r8	;
    ca70:	1d 43       	mov	#1,	r13	;r3 As==01
    ca72:	08 99       	cmp	r9,	r8	;
    ca74:	01 28       	jnc	$+4      	;abs 0xca78
    ca76:	0d 43       	clr	r13		;
    ca78:	0c dd       	bis	r13,	r12	;
    ca7a:	0d 4e       	mov	r14,	r13	;
    ca7c:	0d 5e       	add	r14,	r13	;
    ca7e:	17 43       	mov	#1,	r7	;r3 As==01
    ca80:	0d 9e       	cmp	r14,	r13	;
    ca82:	01 28       	jnc	$+4      	;abs 0xca86
    ca84:	07 43       	clr	r7		;
    ca86:	09 4c       	mov	r12,	r9	;
    ca88:	09 5d       	add	r13,	r9	;
    ca8a:	1c 43       	mov	#1,	r12	;r3 As==01
    ca8c:	09 9d       	cmp	r13,	r9	;
    ca8e:	01 28       	jnc	$+4      	;abs 0xca92
    ca90:	0c 43       	clr	r12		;
    ca92:	07 dc       	bis	r12,	r7	;
    ca94:	0f 5f       	rla	r15		;
    ca96:	0c 4b       	mov	r11,	r12	;
    ca98:	0d 48       	mov	r8,	r13	;
    ca9a:	0e 49       	mov	r9,	r14	;
    ca9c:	0f 57       	add	r7,	r15	;
    ca9e:	07 46       	mov	r6,	r7	;
    caa0:	36 53       	add	#-1,	r6	;r3 As==11
    caa2:	35 40 ff 0f 	mov	#4095,	r5	;#0x0fff
    caa6:	05 9f       	cmp	r15,	r5	;
    caa8:	d6 2f       	jc	$-82     	;abs 0xca56
    caaa:	8a 47 04 00 	mov	r7,	4(r10)	;
    caae:	8a 4b 06 00 	mov	r11,	6(r10)	;
    cab2:	8a 48 08 00 	mov	r8,	8(r10)	;
    cab6:	8a 49 0a 00 	mov	r9,	10(r10)	; 0x000a
    caba:	36 3c       	jmp	$+110    	;abs 0xcb28
    cabc:	3c 90 ff 07 	cmp	#2047,	r12	;#0x07ff
    cac0:	1f 20       	jnz	$+64     	;abs 0xcb00
    cac2:	0c 48       	mov	r8,	r12	;
    cac4:	0c dd       	bis	r13,	r12	;
    cac6:	0c de       	bis	r14,	r12	;
    cac8:	0c df       	bis	r15,	r12	;
    caca:	0c 93       	cmp	#0,	r12	;r3 As==00
    cacc:	03 20       	jnz	$+8      	;abs 0xcad4
    cace:	aa 42 00 00 	mov	#4,	0(r10)	;r2 As==10
    cad2:	2c 3c       	jmp	$+90     	;abs 0xcb2c
    cad4:	37 f2       	and	#8,	r7	;r2 As==11
    cad6:	07 93       	cmp	#0,	r7	;r3 As==00
    cad8:	03 24       	jz	$+8      	;abs 0xcae0
    cada:	9a 43 00 00 	mov	#1,	0(r10)	;r3 As==01
    cade:	02 3c       	jmp	$+6      	;abs 0xcae4
    cae0:	8a 47 00 00 	mov	r7,	0(r10)	;
    cae4:	b1 42 00 00 	mov	#8,	0(r1)	;r2 As==11
    cae8:	0c 48       	mov	r8,	r12	;
    caea:	3f f0 07 00 	and	#7,	r15	;
    caee:	b0 12 a6 c6 	call	#50854		;#0xc6a6
    caf2:	8a 4c 06 00 	mov	r12,	6(r10)	;
    caf6:	8a 4d 08 00 	mov	r13,	8(r10)	;
    cafa:	8a 4e 0a 00 	mov	r14,	10(r10)	; 0x000a
    cafe:	14 3c       	jmp	$+42     	;abs 0xcb28
    cb00:	3c 50 01 fc 	add	#64513,	r12	;#0xfc01
    cb04:	8a 4c 04 00 	mov	r12,	4(r10)	;
    cb08:	ba 40 03 00 	mov	#3,	0(r10)	;
    cb0c:	00 00 
    cb0e:	b1 42 00 00 	mov	#8,	0(r1)	;r2 As==11
    cb12:	0c 48       	mov	r8,	r12	;
    cb14:	b0 12 a6 c6 	call	#50854		;#0xc6a6
    cb18:	8a 4c 06 00 	mov	r12,	6(r10)	;
    cb1c:	8a 4d 08 00 	mov	r13,	8(r10)	;
    cb20:	8a 4e 0a 00 	mov	r14,	10(r10)	; 0x000a
    cb24:	3f d0 00 10 	bis	#4096,	r15	;#0x1000
    cb28:	8a 4f 0c 00 	mov	r15,	12(r10)	; 0x000c
    cb2c:	31 52       	add	#8,	r1	;r2 As==11
    cb2e:	55 17       	popm	#6,	r10	;16-bit words
    cb30:	30 41       	ret			

0000cb32 <__fpcmp_parts_d>:
    cb32:	3a 15       	pushm	#4,	r10	;16-bit words
    cb34:	2f 4c       	mov	@r12,	r15	;
    cb36:	1a 43       	mov	#1,	r10	;r3 As==01
    cb38:	0a 9f       	cmp	r15,	r10	;
    cb3a:	5c 2c       	jc	$+186    	;abs 0xcbf4
    cb3c:	2e 4d       	mov	@r13,	r14	;
    cb3e:	0a 9e       	cmp	r14,	r10	;
    cb40:	59 2c       	jc	$+180    	;abs 0xcbf4
    cb42:	2f 92       	cmp	#4,	r15	;r2 As==10
    cb44:	07 20       	jnz	$+16     	;abs 0xcb54
    cb46:	2e 92       	cmp	#4,	r14	;r2 As==10
    cb48:	0b 20       	jnz	$+24     	;abs 0xcb60
    cb4a:	1e 4d 02 00 	mov	2(r13),	r14	;
    cb4e:	1e 8c 02 00 	sub	2(r12),	r14	;
    cb52:	55 3c       	jmp	$+172    	;abs 0xcbfe
    cb54:	2e 92       	cmp	#4,	r14	;r2 As==10
    cb56:	0b 24       	jz	$+24     	;abs 0xcb6e
    cb58:	2f 93       	cmp	#2,	r15	;r3 As==10
    cb5a:	07 24       	jz	$+16     	;abs 0xcb6a
    cb5c:	2e 93       	cmp	#2,	r14	;r3 As==10
    cb5e:	0c 20       	jnz	$+26     	;abs 0xcb78
    cb60:	1e 43       	mov	#1,	r14	;r3 As==01
    cb62:	8c 93 02 00 	cmp	#0,	2(r12)	;r3 As==00
    cb66:	4b 24       	jz	$+152    	;abs 0xcbfe
    cb68:	49 3c       	jmp	$+148    	;abs 0xcbfc
    cb6a:	2e 93       	cmp	#2,	r14	;r3 As==10
    cb6c:	45 24       	jz	$+140    	;abs 0xcbf8
    cb6e:	3e 43       	mov	#-1,	r14	;r3 As==11
    cb70:	8d 93 02 00 	cmp	#0,	2(r13)	;r3 As==00
    cb74:	44 24       	jz	$+138    	;abs 0xcbfe
    cb76:	3e 3c       	jmp	$+126    	;abs 0xcbf4
    cb78:	1e 4c 02 00 	mov	2(r12),	r14	;
    cb7c:	1e 9d 02 00 	cmp	2(r13),	r14	;
    cb80:	26 20       	jnz	$+78     	;abs 0xcbce
    cb82:	1a 4c 04 00 	mov	4(r12),	r10	;
    cb86:	1f 4d 04 00 	mov	4(r13),	r15	;
    cb8a:	0f 9a       	cmp	r10,	r15	;
    cb8c:	20 38       	jl	$+66     	;abs 0xcbce
    cb8e:	0a 9f       	cmp	r15,	r10	;
    cb90:	2f 38       	jl	$+96     	;abs 0xcbf0
    cb92:	18 4c 06 00 	mov	6(r12),	r8	;
    cb96:	1f 4c 08 00 	mov	8(r12),	r15	;
    cb9a:	1b 4c 0a 00 	mov	10(r12),r11	;0x0000a
    cb9e:	19 4c 0c 00 	mov	12(r12),r9	;0x0000c
    cba2:	17 4d 06 00 	mov	6(r13),	r7	;
    cba6:	1c 4d 08 00 	mov	8(r13),	r12	;
    cbaa:	1a 4d 0a 00 	mov	10(r13),r10	;0x0000a
    cbae:	1d 4d 0c 00 	mov	12(r13),r13	;0x0000c
    cbb2:	0d 99       	cmp	r9,	r13	;
    cbb4:	0c 28       	jnc	$+26     	;abs 0xcbce
    cbb6:	09 9d       	cmp	r13,	r9	;
    cbb8:	0d 20       	jnz	$+28     	;abs 0xcbd4
    cbba:	0a 9b       	cmp	r11,	r10	;
    cbbc:	08 28       	jnc	$+18     	;abs 0xcbce
    cbbe:	0b 9a       	cmp	r10,	r11	;
    cbc0:	09 20       	jnz	$+20     	;abs 0xcbd4
    cbc2:	0c 9f       	cmp	r15,	r12	;
    cbc4:	04 28       	jnc	$+10     	;abs 0xcbce
    cbc6:	0f 9c       	cmp	r12,	r15	;
    cbc8:	05 20       	jnz	$+12     	;abs 0xcbd4
    cbca:	07 98       	cmp	r8,	r7	;
    cbcc:	03 2c       	jc	$+8      	;abs 0xcbd4
    cbce:	0e 93       	cmp	#0,	r14	;r3 As==00
    cbd0:	11 24       	jz	$+36     	;abs 0xcbf4
    cbd2:	14 3c       	jmp	$+42     	;abs 0xcbfc
    cbd4:	09 9d       	cmp	r13,	r9	;
    cbd6:	0c 28       	jnc	$+26     	;abs 0xcbf0
    cbd8:	0d 99       	cmp	r9,	r13	;
    cbda:	0e 20       	jnz	$+30     	;abs 0xcbf8
    cbdc:	0b 9a       	cmp	r10,	r11	;
    cbde:	08 28       	jnc	$+18     	;abs 0xcbf0
    cbe0:	0a 9b       	cmp	r11,	r10	;
    cbe2:	0a 20       	jnz	$+22     	;abs 0xcbf8
    cbe4:	0f 9c       	cmp	r12,	r15	;
    cbe6:	04 28       	jnc	$+10     	;abs 0xcbf0
    cbe8:	0c 9f       	cmp	r15,	r12	;
    cbea:	06 20       	jnz	$+14     	;abs 0xcbf8
    cbec:	08 97       	cmp	r7,	r8	;
    cbee:	04 2c       	jc	$+10     	;abs 0xcbf8
    cbf0:	0e 93       	cmp	#0,	r14	;r3 As==00
    cbf2:	04 24       	jz	$+10     	;abs 0xcbfc
    cbf4:	1e 43       	mov	#1,	r14	;r3 As==01
    cbf6:	03 3c       	jmp	$+8      	;abs 0xcbfe
    cbf8:	0e 43       	clr	r14		;
    cbfa:	01 3c       	jmp	$+4      	;abs 0xcbfe
    cbfc:	3e 43       	mov	#-1,	r14	;r3 As==11
    cbfe:	0c 4e       	mov	r14,	r12	;
    cc00:	37 17       	popm	#4,	r10	;16-bit words
    cc02:	30 41       	ret			

0000cc04 <__mspabi_mpyi>:
    cc04:	0f 4c       	mov	r12,	r15	;
    cc06:	3e 40 11 00 	mov	#17,	r14	;#0x0011
    cc0a:	0c 43       	clr	r12		;
    cc0c:	0d 93       	cmp	#0,	r13	;r3 As==00
    cc0e:	0c 24       	jz	$+26     	;abs 0xcc28
    cc10:	7e 53       	add.b	#-1,	r14	;r3 As==11
    cc12:	3e f0 ff 00 	and	#255,	r14	;#0x00ff
    cc16:	0e 93       	cmp	#0,	r14	;r3 As==00
    cc18:	07 24       	jz	$+16     	;abs 0xcc28
    cc1a:	1d b3       	bit	#1,	r13	;r3 As==01
    cc1c:	01 24       	jz	$+4      	;abs 0xcc20
    cc1e:	0c 5f       	add	r15,	r12	;
    cc20:	0f 5f       	rla	r15		;
    cc22:	12 c3       	clrc			
    cc24:	0d 10       	rrc	r13		;
    cc26:	f2 3f       	jmp	$-26     	;abs 0xcc0c
    cc28:	30 41       	ret			

0000cc2a <__mulqi3>:
    cc2a:	4e 4c       	mov.b	r12,	r14	;
    cc2c:	3d f0 ff 00 	and	#255,	r13	;#0x00ff
    cc30:	3f 40 09 00 	mov	#9,	r15	;
    cc34:	0c 43       	clr	r12		;
    cc36:	0d 93       	cmp	#0,	r13	;r3 As==00
    cc38:	10 24       	jz	$+34     	;abs 0xcc5a
    cc3a:	7f 53       	add.b	#-1,	r15	;r3 As==11
    cc3c:	3f f0 ff 00 	and	#255,	r15	;#0x00ff
    cc40:	0f 93       	cmp	#0,	r15	;r3 As==00
    cc42:	0b 24       	jz	$+24     	;abs 0xcc5a
    cc44:	1d b3       	bit	#1,	r13	;r3 As==01
    cc46:	03 24       	jz	$+8      	;abs 0xcc4e
    cc48:	4c 5e       	add.b	r14,	r12	;
    cc4a:	3c f0 ff 00 	and	#255,	r12	;#0x00ff
    cc4e:	4e 5e       	rla.b	r14		;
    cc50:	3e f0 ff 00 	and	#255,	r14	;#0x00ff
    cc54:	12 c3       	clrc			
    cc56:	0d 10       	rrc	r13		;
    cc58:	ee 3f       	jmp	$-34     	;abs 0xcc36
    cc5a:	30 41       	ret			

0000cc5c <__mspabi_mpyl>:
    cc5c:	4a 15       	pushm	#5,	r10	;16-bit words
    cc5e:	0a 4c       	mov	r12,	r10	;
    cc60:	0b 4d       	mov	r13,	r11	;
    cc62:	3d 40 21 00 	mov	#33,	r13	;#0x0021
    cc66:	08 43       	clr	r8		;
    cc68:	09 43       	clr	r9		;
    cc6a:	0c 4e       	mov	r14,	r12	;
    cc6c:	0c df       	bis	r15,	r12	;
    cc6e:	0c 93       	cmp	#0,	r12	;r3 As==00
    cc70:	15 24       	jz	$+44     	;abs 0xcc9c
    cc72:	7d 53       	add.b	#-1,	r13	;r3 As==11
    cc74:	3d f0 ff 00 	and	#255,	r13	;#0x00ff
    cc78:	0d 93       	cmp	#0,	r13	;r3 As==00
    cc7a:	10 24       	jz	$+34     	;abs 0xcc9c
    cc7c:	0c 4e       	mov	r14,	r12	;
    cc7e:	1c f3       	and	#1,	r12	;r3 As==01
    cc80:	0c 93       	cmp	#0,	r12	;r3 As==00
    cc82:	02 24       	jz	$+6      	;abs 0xcc88
    cc84:	08 5a       	add	r10,	r8	;
    cc86:	09 6b       	addc	r11,	r9	;
    cc88:	06 4a       	mov	r10,	r6	;
    cc8a:	07 4b       	mov	r11,	r7	;
    cc8c:	06 5a       	add	r10,	r6	;
    cc8e:	07 6b       	addc	r11,	r7	;
    cc90:	0a 46       	mov	r6,	r10	;
    cc92:	0b 47       	mov	r7,	r11	;
    cc94:	12 c3       	clrc			
    cc96:	0f 10       	rrc	r15		;
    cc98:	0e 10       	rrc	r14		;
    cc9a:	e7 3f       	jmp	$-48     	;abs 0xcc6a
    cc9c:	0c 48       	mov	r8,	r12	;
    cc9e:	0d 49       	mov	r9,	r13	;
    cca0:	46 17       	popm	#5,	r10	;16-bit words
    cca2:	30 41       	ret			

0000cca4 <_exit>:
    cca4:	ff 3f       	jmp	$+0      	;abs 0xcca4

0000cca6 <open>:
    cca6:	b0 12 b8 cd 	call	#52664		;#0xcdb8
    ccaa:	bc 40 58 00 	mov	#88,	0(r12)	;#0x0058
    ccae:	00 00 
    ccb0:	3c 43       	mov	#-1,	r12	;r3 As==11
    ccb2:	30 41       	ret			

0000ccb4 <close>:
    ccb4:	b0 12 b8 cd 	call	#52664		;#0xcdb8
    ccb8:	bc 40 58 00 	mov	#88,	0(r12)	;#0x0058
    ccbc:	00 00 
    ccbe:	3c 43       	mov	#-1,	r12	;r3 As==11
    ccc0:	30 41       	ret			

0000ccc2 <read>:
    ccc2:	b0 12 b8 cd 	call	#52664		;#0xcdb8
    ccc6:	bc 40 58 00 	mov	#88,	0(r12)	;#0x0058
    ccca:	00 00 
    cccc:	3c 43       	mov	#-1,	r12	;r3 As==11
    ccce:	30 41       	ret			

0000ccd0 <fstat>:
    ccd0:	b0 12 b8 cd 	call	#52664		;#0xcdb8
    ccd4:	bc 40 58 00 	mov	#88,	0(r12)	;#0x0058
    ccd8:	00 00 
    ccda:	3c 43       	mov	#-1,	r12	;r3 As==11
    ccdc:	30 41       	ret			

0000ccde <lseek>:
    ccde:	b0 12 b8 cd 	call	#52664		;#0xcdb8
    cce2:	bc 40 58 00 	mov	#88,	0(r12)	;#0x0058
    cce6:	00 00 
    cce8:	3c 43       	mov	#-1,	r12	;r3 As==11
    ccea:	30 41       	ret			

0000ccec <kill>:
    ccec:	b0 12 b8 cd 	call	#52664		;#0xcdb8
    ccf0:	bc 40 58 00 	mov	#88,	0(r12)	;#0x0058
    ccf4:	00 00 
    ccf6:	3c 43       	mov	#-1,	r12	;r3 As==11
    ccf8:	30 41       	ret			

0000ccfa <_isatty>:
    ccfa:	1c 43       	mov	#1,	r12	;r3 As==01
    ccfc:	30 41       	ret			

0000ccfe <getpid>:
    ccfe:	3c 40 2a 00 	mov	#42,	r12	;#0x002a
    cd02:	30 41       	ret			

0000cd04 <write>:
    cd04:	6a 15       	pushm	#7,	r10	;16-bit words
    cd06:	08 4d       	mov	r13,	r8	;
    cd08:	09 4e       	mov	r14,	r9	;
    cd0a:	0d 43       	clr	r13		;
    cd0c:	0d 9e       	cmp	r14,	r13	;
    cd0e:	30 34       	jge	$+98     	;abs 0xcd70
    cd10:	44 4c       	mov.b	r12,	r4	;
    cd12:	07 4c       	mov	r12,	r7	;
    cd14:	57 0f       	rrum	#4,	r7	;
    cd16:	57 0f       	rrum	#4,	r7	;
    cd18:	35 40 98 86 	mov	#34456,	r5	;#0x8698
    cd1c:	36 40 a6 cd 	mov	#52646,	r6	;#0xcda6
    cd20:	0a 49       	mov	r9,	r10	;
    cd22:	3c 40 40 00 	mov	#64,	r12	;#0x0040
    cd26:	0c 99       	cmp	r9,	r12	;
    cd28:	01 34       	jge	$+4      	;abs 0xcd2c
    cd2a:	0a 4c       	mov	r12,	r10	;
    cd2c:	4c 4a       	mov.b	r10,	r12	;
    cd2e:	c2 4c e6 1c 	mov.b	r12,	&0x1ce6	;
    cd32:	c2 43 e7 1c 	mov.b	#0,	&0x1ce7	;r3 As==00
    cd36:	f2 40 f3 ff 	mov.b	#65523,	&0x1ce8	;#0xfff3
    cd3a:	e8 1c 
    cd3c:	c2 44 e9 1c 	mov.b	r4,	&0x1ce9	;
    cd40:	c2 47 ea 1c 	mov.b	r7,	&0x1cea	;
    cd44:	c2 4c eb 1c 	mov.b	r12,	&0x1ceb	;
    cd48:	c2 43 ec 1c 	mov.b	#0,	&0x1cec	;r3 As==00
    cd4c:	3c 40 f1 1c 	mov	#7409,	r12	;#0x1cf1
    cd50:	0d 48       	mov	r8,	r13	;
    cd52:	0e 4a       	mov	r10,	r14	;
    cd54:	85 12       	call	r5		;
    cd56:	86 12       	call	r6		;
    cd58:	5f 42 e8 1c 	mov.b	&0x1ce8,r15	;0x1ce8
    cd5c:	5d 42 e9 1c 	mov.b	&0x1ce9,r13	;0x1ce9
    cd60:	09 8a       	sub	r10,	r9	;
    cd62:	08 5a       	add	r10,	r8	;
    cd64:	0c 43       	clr	r12		;
    cd66:	0c 99       	cmp	r9,	r12	;
    cd68:	db 3b       	jl	$-72     	;abs 0xcd20
    cd6a:	47 18 0d 5d 	rpt #8 { rlax.w	r13		;
    cd6e:	0f 5d       	add	r13,	r15	;
    cd70:	0c 4f       	mov	r15,	r12	;
    cd72:	64 17       	popm	#7,	r10	;16-bit words
    cd74:	30 41       	ret			

0000cd76 <_sbrk>:
    cd76:	21 83       	decd	r1		;
    cd78:	1d 42 e4 1c 	mov	&0x1ce4,r13	;0x1ce4
    cd7c:	0e 43       	clr	r14		;
    cd7e:	0e 51       	add	r1,	r14	;
    cd80:	81 4e 00 00 	mov	r14,	0(r1)	;
    cd84:	0c 5d       	add	r13,	r12	;
    cd86:	01 9c       	cmp	r12,	r1	;
    cd88:	05 28       	jnc	$+12     	;abs 0xcd94
    cd8a:	82 4c e4 1c 	mov	r12,	&0x1ce4	;
    cd8e:	0c 4d       	mov	r13,	r12	;
    cd90:	21 53       	incd	r1		;
    cd92:	30 41       	ret			
    cd94:	1c 43       	mov	#1,	r12	;r3 As==01
    cd96:	3d 40 1e 47 	mov	#18206,	r13	;#0x471e
    cd9a:	3e 40 1a 00 	mov	#26,	r14	;#0x001a
    cd9e:	b0 12 04 cd 	call	#52484		;#0xcd04
    cda2:	b0 12 aa cd 	call	#52650		;#0xcdaa

0000cda6 <C$$IO$$>:
    cda6:	03 43       	nop			
    cda8:	30 41       	ret			

0000cdaa <abort>:
    cdaa:	3c 40 06 00 	mov	#6,	r12	;
    cdae:	b0 12 ee ce 	call	#52974		;#0xceee
    cdb2:	1c 43       	mov	#1,	r12	;r3 As==01
    cdb4:	b0 12 a4 cc 	call	#52388		;#0xcca4

0000cdb8 <__errno>:
    cdb8:	1c 42 04 1c 	mov	&0x1c04,r12	;0x1c04
    cdbc:	30 41       	ret			

0000cdbe <_init_signal_r>:
    cdbe:	0a 15       	pushm	#1,	r10	;16-bit words
    cdc0:	0a 4c       	mov	r12,	r10	;
    cdc2:	8c 93 22 00 	cmp	#0,	34(r12)	;r3 As==00, 0x0022
    cdc6:	02 24       	jz	$+6      	;abs 0xcdcc
    cdc8:	0c 43       	clr	r12		;
    cdca:	14 3c       	jmp	$+42     	;abs 0xcdf4
    cdcc:	3d 40 40 00 	mov	#64,	r13	;#0x0040
    cdd0:	b0 12 70 97 	call	#38768		;#0x9770
    cdd4:	8a 4c 22 00 	mov	r12,	34(r10)	; 0x0022
    cdd8:	0c 93       	cmp	#0,	r12	;r3 As==00
    cdda:	0b 24       	jz	$+24     	;abs 0xcdf2
    cddc:	0c 43       	clr	r12		;
    cdde:	1d 4a 22 00 	mov	34(r10),r13	;0x00022
    cde2:	0d 5c       	add	r12,	r13	;
    cde4:	8d 43 00 00 	mov	#0,	0(r13)	;r3 As==00
    cde8:	2c 53       	incd	r12		;
    cdea:	3c 90 40 00 	cmp	#64,	r12	;#0x0040
    cdee:	f7 23       	jnz	$-16     	;abs 0xcdde
    cdf0:	eb 3f       	jmp	$-40     	;abs 0xcdc8
    cdf2:	3c 43       	mov	#-1,	r12	;r3 As==11
    cdf4:	0a 17       	popm	#1,	r10	;16-bit words
    cdf6:	30 41       	ret			

0000cdf8 <_signal_r>:
    cdf8:	2a 15       	pushm	#3,	r10	;16-bit words
    cdfa:	3a 40 1f 00 	mov	#31,	r10	;#0x001f
    cdfe:	0a 9d       	cmp	r13,	r10	;
    ce00:	05 2c       	jc	$+12     	;abs 0xce0c
    ce02:	bc 40 16 00 	mov	#22,	0(r12)	;#0x0016
    ce06:	00 00 
    ce08:	3c 43       	mov	#-1,	r12	;r3 As==11
    ce0a:	13 3c       	jmp	$+40     	;abs 0xce32
    ce0c:	09 4e       	mov	r14,	r9	;
    ce0e:	0a 4d       	mov	r13,	r10	;
    ce10:	08 4c       	mov	r12,	r8	;
    ce12:	8c 93 22 00 	cmp	#0,	34(r12)	;r3 As==00, 0x0022
    ce16:	08 24       	jz	$+18     	;abs 0xce28
    ce18:	0d 4a       	mov	r10,	r13	;
    ce1a:	0d 5a       	add	r10,	r13	;
    ce1c:	1d 58 22 00 	add	34(r8),	r13	;0x00022
    ce20:	2c 4d       	mov	@r13,	r12	;
    ce22:	8d 49 00 00 	mov	r9,	0(r13)	;
    ce26:	05 3c       	jmp	$+12     	;abs 0xce32
    ce28:	b0 12 be cd 	call	#52670		;#0xcdbe
    ce2c:	0c 93       	cmp	#0,	r12	;r3 As==00
    ce2e:	f4 27       	jz	$-22     	;abs 0xce18
    ce30:	3c 43       	mov	#-1,	r12	;r3 As==11
    ce32:	28 17       	popm	#3,	r10	;16-bit words
    ce34:	30 41       	ret			

0000ce36 <_raise_r>:
    ce36:	1a 15       	pushm	#2,	r10	;16-bit words
    ce38:	3e 40 1f 00 	mov	#31,	r14	;#0x001f
    ce3c:	0e 9d       	cmp	r13,	r14	;
    ce3e:	05 2c       	jc	$+12     	;abs 0xce4a
    ce40:	bc 40 16 00 	mov	#22,	0(r12)	;#0x0016
    ce44:	00 00 
    ce46:	3c 43       	mov	#-1,	r12	;r3 As==11
    ce48:	25 3c       	jmp	$+76     	;abs 0xce94
    ce4a:	0a 4d       	mov	r13,	r10	;
    ce4c:	09 4c       	mov	r12,	r9	;
    ce4e:	1d 4c 22 00 	mov	34(r12),r13	;0x00022
    ce52:	0d 93       	cmp	#0,	r13	;r3 As==00
    ce54:	06 24       	jz	$+14     	;abs 0xce62
    ce56:	0c 4a       	mov	r10,	r12	;
    ce58:	0c 5a       	add	r10,	r12	;
    ce5a:	0c 5d       	add	r13,	r12	;
    ce5c:	2d 4c       	mov	@r12,	r13	;
    ce5e:	0d 93       	cmp	#0,	r13	;r3 As==00
    ce60:	09 20       	jnz	$+20     	;abs 0xce74
    ce62:	0c 49       	mov	r9,	r12	;
    ce64:	b0 12 44 cf 	call	#53060		;#0xcf44
    ce68:	0d 4c       	mov	r12,	r13	;
    ce6a:	0c 49       	mov	r9,	r12	;
    ce6c:	0e 4a       	mov	r10,	r14	;
    ce6e:	b0 12 20 cf 	call	#53024		;#0xcf20
    ce72:	10 3c       	jmp	$+34     	;abs 0xce94
    ce74:	1d 93       	cmp	#1,	r13	;r3 As==01
    ce76:	0d 24       	jz	$+28     	;abs 0xce92
    ce78:	3d 93       	cmp	#-1,	r13	;r3 As==11
    ce7a:	05 20       	jnz	$+12     	;abs 0xce86
    ce7c:	b9 40 16 00 	mov	#22,	0(r9)	;#0x0016
    ce80:	00 00 
    ce82:	1c 43       	mov	#1,	r12	;r3 As==01
    ce84:	07 3c       	jmp	$+16     	;abs 0xce94
    ce86:	8c 43 00 00 	mov	#0,	0(r12)	;r3 As==00
    ce8a:	0c 4a       	mov	r10,	r12	;
    ce8c:	8d 12       	call	r13		;
    ce8e:	0c 43       	clr	r12		;
    ce90:	01 3c       	jmp	$+4      	;abs 0xce94
    ce92:	0c 43       	clr	r12		;
    ce94:	19 17       	popm	#2,	r10	;16-bit words
    ce96:	30 41       	ret			

0000ce98 <__sigtramp_r>:
    ce98:	1a 15       	pushm	#2,	r10	;16-bit words
    ce9a:	09 4c       	mov	r12,	r9	;
    ce9c:	3e 40 1f 00 	mov	#31,	r14	;#0x001f
    cea0:	0e 9d       	cmp	r13,	r14	;
    cea2:	02 2c       	jc	$+6      	;abs 0xcea8
    cea4:	3c 43       	mov	#-1,	r12	;r3 As==11
    cea6:	21 3c       	jmp	$+68     	;abs 0xceea
    cea8:	0a 4d       	mov	r13,	r10	;
    ceaa:	8c 93 22 00 	cmp	#0,	34(r12)	;r3 As==00, 0x0022
    ceae:	08 24       	jz	$+18     	;abs 0xcec0
    ceb0:	0c 4a       	mov	r10,	r12	;
    ceb2:	0c 5a       	add	r10,	r12	;
    ceb4:	1c 59 22 00 	add	34(r9),	r12	;0x00022
    ceb8:	2d 4c       	mov	@r12,	r13	;
    ceba:	0d 93       	cmp	#0,	r13	;r3 As==00
    cebc:	06 20       	jnz	$+14     	;abs 0xceca
    cebe:	0f 3c       	jmp	$+32     	;abs 0xcede
    cec0:	b0 12 be cd 	call	#52670		;#0xcdbe
    cec4:	0c 93       	cmp	#0,	r12	;r3 As==00
    cec6:	f4 27       	jz	$-22     	;abs 0xceb0
    cec8:	ed 3f       	jmp	$-36     	;abs 0xcea4
    ceca:	3d 93       	cmp	#-1,	r13	;r3 As==11
    cecc:	0a 24       	jz	$+22     	;abs 0xcee2
    cece:	1d 93       	cmp	#1,	r13	;r3 As==01
    ced0:	0a 24       	jz	$+22     	;abs 0xcee6
    ced2:	8c 43 00 00 	mov	#0,	0(r12)	;r3 As==00
    ced6:	0c 4a       	mov	r10,	r12	;
    ced8:	8d 12       	call	r13		;
    ceda:	0c 43       	clr	r12		;
    cedc:	06 3c       	jmp	$+14     	;abs 0xceea
    cede:	1c 43       	mov	#1,	r12	;r3 As==01
    cee0:	04 3c       	jmp	$+10     	;abs 0xceea
    cee2:	2c 43       	mov	#2,	r12	;r3 As==10
    cee4:	02 3c       	jmp	$+6      	;abs 0xceea
    cee6:	3c 40 03 00 	mov	#3,	r12	;
    ceea:	19 17       	popm	#2,	r10	;16-bit words
    ceec:	30 41       	ret			

0000ceee <raise>:
    ceee:	0d 4c       	mov	r12,	r13	;
    cef0:	1c 42 04 1c 	mov	&0x1c04,r12	;0x1c04
    cef4:	b0 12 36 ce 	call	#52790		;#0xce36
    cef8:	30 41       	ret			

0000cefa <signal>:
    cefa:	0f 4c       	mov	r12,	r15	;
    cefc:	0e 4d       	mov	r13,	r14	;
    cefe:	1c 42 04 1c 	mov	&0x1c04,r12	;0x1c04
    cf02:	0d 4f       	mov	r15,	r13	;
    cf04:	b0 12 f8 cd 	call	#52728		;#0xcdf8
    cf08:	30 41       	ret			

0000cf0a <_init_signal>:
    cf0a:	1c 42 04 1c 	mov	&0x1c04,r12	;0x1c04
    cf0e:	b0 12 be cd 	call	#52670		;#0xcdbe
    cf12:	30 41       	ret			

0000cf14 <__sigtramp>:
    cf14:	0d 4c       	mov	r12,	r13	;
    cf16:	1c 42 04 1c 	mov	&0x1c04,r12	;0x1c04
    cf1a:	b0 12 98 ce 	call	#52888		;#0xce98
    cf1e:	30 41       	ret			

0000cf20 <_kill_r>:
    cf20:	0a 15       	pushm	#1,	r10	;16-bit words
    cf22:	0a 4c       	mov	r12,	r10	;
    cf24:	82 43 c0 1d 	mov	#0,	&0x1dc0	;r3 As==00
    cf28:	0c 4d       	mov	r13,	r12	;
    cf2a:	0d 4e       	mov	r14,	r13	;
    cf2c:	b0 12 ec cc 	call	#52460		;#0xccec
    cf30:	3c 93       	cmp	#-1,	r12	;r3 As==11
    cf32:	06 20       	jnz	$+14     	;abs 0xcf40
    cf34:	1d 42 c0 1d 	mov	&0x1dc0,r13	;0x1dc0
    cf38:	0d 93       	cmp	#0,	r13	;r3 As==00
    cf3a:	02 24       	jz	$+6      	;abs 0xcf40
    cf3c:	8a 4d 00 00 	mov	r13,	0(r10)	;
    cf40:	0a 17       	popm	#1,	r10	;16-bit words
    cf42:	30 41       	ret			

0000cf44 <_getpid_r>:
    cf44:	b0 12 fe cc 	call	#52478		;#0xccfe
    cf48:	30 41       	ret			

0000cf4a <__do_global_ctors_aux>:
    cf4a:	0a 15       	pushm	#1,	r10	;16-bit words
    cf4c:	1c 42 40 47 	mov	&0x4740,r12	;0x4740
    cf50:	3c 93       	cmp	#-1,	r12	;r3 As==11
    cf52:	08 24       	jz	$+18     	;abs 0xcf64
    cf54:	3a 40 40 47 	mov	#18240,	r10	;#0x4740
    cf58:	8c 12       	call	r12		;
    cf5a:	3a 50 fe ff 	add	#65534,	r10	;#0xfffe
    cf5e:	2c 4a       	mov	@r10,	r12	;
    cf60:	3c 93       	cmp	#-1,	r12	;r3 As==11
    cf62:	fa 23       	jnz	$-10     	;abs 0xcf58
    cf64:	0a 17       	popm	#1,	r10	;16-bit words
    cf66:	30 41       	ret			

0000cf68 <call___do_global_ctors_aux>:
    cf68:	30 41       	ret			

0000cf6a <__msp430_init>:
    cf6a:	b0 12 7c 49 	call	#18812		;#0x497c
    cf6e:	b0 12 4a cf 	call	#53066		;#0xcf4a
    cf72:	b0 12 bc 48 	call	#18620		;#0x48bc
    cf76:	b0 12 b0 48 	call	#18608		;#0x48b0
    cf7a:	30 41       	ret			

0000cf7c <__msp430_fini>:
    cf7c:	b0 12 c8 48 	call	#18632		;#0x48c8
    cf80:	b0 12 2e 49 	call	#18734		;#0x492e
    cf84:	30 41       	ret			

templog.out:     file format elf32-msp430


Disassembly of section __interrupt_vector_40:

0000ffde <__interrupt_vector_40>:
    ffde:	c4 49 77 f7 	Address 0x0000ffe0 is out of bounds.
mov.b	r9,	-1(r4)	; 0xffff

Disassembly of section __interrupt_vector_49:

0000fff0 <__interrupt_vector_49>:
    fff0:	c0 50       	interrupt service routine at 0x50c0

Disassembly of section .text:

00004458 <__crt0_start>:
    4458:	31 40 00 24 	mov	#9216,	r1	;#0x2400

0000445c <__crt0_init_bss>:
    445c:	3c 40 04 1c 	mov	#7172,	r12	;#0x1c04
    4460:	0d 43       	clr	r13		;
    4462:	3e 40 ba 00 	mov	#186,	r14	;#0x00ba
    4466:	b0 12 6c 52 	call	#21100		;#0x526c

0000446a <__crt0_movedata>:
    446a:	3c 40 00 1c 	mov	#7168,	r12	;#0x1c00
    446e:	3d 40 52 44 	mov	#17490,	r13	;#0x4452
    4472:	0d 9c       	cmp	r12,	r13	;
    4474:	04 24       	jz	$+10     	;abs 0x447e
    4476:	3e 40 04 00 	mov	#4,	r14	;
    447a:	b0 12 2c 52 	call	#21036		;#0x522c

0000447e <__crt0_call_init_then_main>:
    447e:	b0 12 9e 52 	call	#21150		;#0x529e
    4482:	0c 43       	clr	r12		;
    4484:	b0 12 84 45 	call	#17796		;#0x4584

00004488 <_msp430_run_init_array>:
    4488:	34 40 44 44 	mov	#17476,	r4	;#0x4444
    448c:	35 40 44 44 	mov	#17476,	r5	;#0x4444
    4490:	26 43       	mov	#2,	r6	;r3 As==10
    4492:	0d 3c       	jmp	$+28     	;abs 0x44ae

00004494 <_msp430_run_preinit_array>:
    4494:	34 40 44 44 	mov	#17476,	r4	;#0x4444
    4498:	35 40 44 44 	mov	#17476,	r5	;#0x4444
    449c:	26 43       	mov	#2,	r6	;r3 As==10
    449e:	07 3c       	jmp	$+16     	;abs 0x44ae

000044a0 <_msp430_run_fini_array>:
    44a0:	34 40 44 44 	mov	#17476,	r4	;#0x4444
    44a4:	35 40 44 44 	mov	#17476,	r5	;#0x4444
    44a8:	36 40 fe ff 	mov	#65534,	r6	;#0xfffe
    44ac:	00 3c       	jmp	$+2      	;abs 0x44ae

000044ae <_msp430_run_array>:
    44ae:	05 94       	cmp	r4,	r5	;
    44b0:	05 24       	jz	$+12     	;abs 0x44bc
    44b2:	27 44       	mov	@r4,	r7	;
    44b4:	04 56       	add	r6,	r4	;
    44b6:	a7 12       	call	@r7		;
    44b8:	10 40 f4 ff 	br	0xfff4		;PC rel. 0x44ae

000044bc <_msp430_run_done>:
    44bc:	30 41       	ret			

000044be <deregister_tm_clones>:
    44be:	3c 40 ba 52 	mov	#21178,	r12	;#0x52ba
    44c2:	3c 80 b9 52 	sub	#21177,	r12	;#0x52b9
    44c6:	2d 43       	mov	#2,	r13	;r3 As==10
    44c8:	0d 9c       	cmp	r12,	r13	;
    44ca:	07 2c       	jc	$+16     	;abs 0x44da
    44cc:	3d 40 00 00 	mov	#0,	r13	;
    44d0:	0d 93       	cmp	#0,	r13	;r3 As==00
    44d2:	03 24       	jz	$+8      	;abs 0x44da
    44d4:	3c 40 ba 52 	mov	#21178,	r12	;#0x52ba
    44d8:	8d 12       	call	r13		;
    44da:	30 41       	ret			

000044dc <register_tm_clones>:
    44dc:	3d 40 ba 52 	mov	#21178,	r13	;#0x52ba
    44e0:	3d 80 ba 52 	sub	#21178,	r13	;#0x52ba
    44e4:	0d 11       	rra	r13		;
    44e6:	0c 4d       	mov	r13,	r12	;
    44e8:	5c 03       	rrum	#1,	r12	;
    44ea:	4d 18 0c 11 	rpt #14 { rrax.w	r12		;
    44ee:	0d 5c       	add	r12,	r13	;
    44f0:	0d 11       	rra	r13		;
    44f2:	0d 93       	cmp	#0,	r13	;r3 As==00
    44f4:	07 24       	jz	$+16     	;abs 0x4504
    44f6:	3e 40 00 00 	mov	#0,	r14	;
    44fa:	0e 93       	cmp	#0,	r14	;r3 As==00
    44fc:	03 24       	jz	$+8      	;abs 0x4504
    44fe:	3c 40 ba 52 	mov	#21178,	r12	;#0x52ba
    4502:	8e 12       	call	r14		;
    4504:	30 41       	ret			

00004506 <__do_global_dtors_aux>:
    4506:	0a 15       	pushm	#1,	r10	;16-bit words
    4508:	c2 93 04 1c 	cmp.b	#0,	&0x1c04	;r3 As==00
    450c:	20 20       	jnz	$+66     	;abs 0x454e
    450e:	1c 42 06 1c 	mov	&0x1c06,r12	;0x1c06
    4512:	3a 40 4e 44 	mov	#17486,	r10	;#0x444e
    4516:	3a 80 4c 44 	sub	#17484,	r10	;#0x444c
    451a:	0a 11       	rra	r10		;
    451c:	3a 53       	add	#-1,	r10	;r3 As==11
    451e:	0c 9a       	cmp	r10,	r12	;
    4520:	0b 2c       	jc	$+24     	;abs 0x4538
    4522:	1c 53       	inc	r12		;
    4524:	82 4c 06 1c 	mov	r12,	&0x1c06	;
    4528:	0c 5c       	rla	r12		;
    452a:	1c 4c 4c 44 	mov	17484(r12),r12	;0x0444c
    452e:	8c 12       	call	r12		;
    4530:	1c 42 06 1c 	mov	&0x1c06,r12	;0x1c06
    4534:	0c 9a       	cmp	r10,	r12	;
    4536:	f5 2b       	jnc	$-20     	;abs 0x4522
    4538:	b0 12 be 44 	call	#17598		;#0x44be
    453c:	3d 40 00 00 	mov	#0,	r13	;
    4540:	0d 93       	cmp	#0,	r13	;r3 As==00
    4542:	03 24       	jz	$+8      	;abs 0x454a
    4544:	3c 40 40 44 	mov	#17472,	r12	;#0x4440
    4548:	8d 12       	call	r13		;
    454a:	d2 43 04 1c 	mov.b	#1,	&0x1c04	;r3 As==01
    454e:	0a 17       	popm	#1,	r10	;16-bit words
    4550:	30 41       	ret			

00004552 <call___do_global_dtors_aux>:
    4552:	30 41       	ret			

00004554 <frame_dummy>:
    4554:	3e 40 00 00 	mov	#0,	r14	;
    4558:	0e 93       	cmp	#0,	r14	;r3 As==00
    455a:	05 24       	jz	$+12     	;abs 0x4566
    455c:	3c 40 40 44 	mov	#17472,	r12	;#0x4440
    4560:	3d 40 08 1c 	mov	#7176,	r13	;#0x1c08
    4564:	8e 12       	call	r14		;
    4566:	3c 40 00 1c 	mov	#7168,	r12	;#0x1c00
    456a:	8c 93 00 00 	cmp	#0,	0(r12)	;r3 As==00
    456e:	03 20       	jnz	$+8      	;abs 0x4576
    4570:	b0 12 dc 44 	call	#17628		;#0x44dc
    4574:	30 41       	ret			
    4576:	3d 40 00 00 	mov	#0,	r13	;
    457a:	0d 93       	cmp	#0,	r13	;r3 As==00
    457c:	f9 27       	jz	$-12     	;abs 0x4570
    457e:	8d 12       	call	r13		;
    4580:	f7 3f       	jmp	$-16     	;abs 0x4570

00004582 <call_frame_dummy>:
    4582:	30 41       	ret			

00004584 <main>:
    msp_gpio_unlock();
    msp_clock_setup();
}

void main()
{
    4584:	2a 15       	pushm	#3,	r10	;16-bit words
    4586:	21 83       	decd	r1		;
#ifdef CONFIG_LIBEDB_PRINTF
#include <libedb/edb.h>
#endif
static void init_hw()
{
    msp_watchdog_disable();
    4588:	b0 12 ca 45 	call	#17866		;#0x45ca
    msp_gpio_unlock();
    458c:	92 c3 30 01 	bic	#1,	&0x0130	;r3 As==01
    msp_clock_setup();
    4590:	b0 12 e0 45 	call	#17888		;#0x45e0
{
//	WISP_init();
    	init_hw();
#ifdef CONFIG_EDB
	//debug_setup();
	edb_init();
    4594:	b0 12 98 49 	call	#18840		;#0x4998
#endif
	INIT_CONSOLE();
	__enable_interrupt();
    4598:	32 d2       	eint			
    459a:	03 43       	nop			
	while(1){
		WATCHPOINT(1);
		PRINTF("test\r\n");
    459c:	38 40 50 49 	mov	#18768,	r8	;#0x4950
    45a0:	39 40 92 46 	mov	#18066,	r9	;#0x4692
    45a4:	3a 40 6c 49 	mov	#18796,	r10	;#0x496c
    45a8:	88 12       	call	r8		;
    45aa:	b1 40 00 44 	mov	#17408,	0(r1)	;#0x4400
    45ae:	00 00 
    45b0:	89 12       	call	r9		;
    45b2:	8a 12       	call	r10		;
	}
    45b4:	f9 3f       	jmp	$-12     	;abs 0x45a8

000045b6 <msp_watchdog_enable>:
#include "watchdog.h"

static uint8_t watchdog_bits;

void msp_watchdog_enable(uint8_t bits)
{
    45b6:	3c f0 ff 00 	and	#255,	r12	;#0x00ff
    WDTCTL = WDTPW | WDTCNTCL | bits;
    45ba:	0d 4c       	mov	r12,	r13	;
    45bc:	3d d0 08 5a 	bis	#23048,	r13	;#0x5a08
    45c0:	82 4d 5c 01 	mov	r13,	&0x015c	;
    watchdog_bits = bits;
    45c4:	c2 4c 16 1c 	mov.b	r12,	&0x1c16	;
}
    45c8:	30 41       	ret			

000045ca <msp_watchdog_disable>:

void msp_watchdog_disable()
{
     WDTCTL = WDTPW + WDTHOLD;
    45ca:	b2 40 80 5a 	mov	#23168,	&0x015c	;#0x5a80
    45ce:	5c 01 
}
    45d0:	30 41       	ret			

000045d2 <msp_watchdog_kick>:

void msp_watchdog_kick()
{
    WDTCTL = WDTPW | WDTCNTCL | watchdog_bits;
    45d2:	5c 42 16 1c 	mov.b	&0x1c16,r12	;0x1c16
    45d6:	3c d0 08 5a 	bis	#23048,	r12	;#0x5a08
    45da:	82 4c 5c 01 	mov	r12,	&0x015c	;
}
    45de:	30 41       	ret			

000045e0 <msp_clock_setup>:
#define s(x) #x
#define ss(x) s(x)

#pragma message "bits" ss(CONFIG_DCOFSEL_BITS)

    CSCTL0_H = CSKEY_H;
    45e0:	f2 40 a5 ff 	mov.b	#65445,	&0x0161	;#0xffa5
    45e4:	61 01 
//CSCTL1 = CONFIG_DCOFSEL_BITS;
    CSCTL1 = DCORSEL + DCOFSEL_3;
    45e6:	b2 40 46 00 	mov	#70,	&0x0162	;#0x0046
    45ea:	62 01 

    CSCTL2 = SELA_0 | SELS_3 | SELM_3;
    45ec:	b2 40 33 00 	mov	#51,	&0x0164	;#0x0033
    45f0:	64 01 
    CSCTL3 = DIVA_0 | DIVS_0 | DIVM_0;
    45f2:	82 43 66 01 	mov	#0,	&0x0166	;r3 As==00

#else // __MSP430*__
#error Device not supported by libmsp/clock.c
#endif // __MSP430*__
}
    45f6:	30 41       	ret			

000045f8 <xtoa>:
            10,     // +8
             1,     // +9
};

static void xtoa(unsigned long x, const unsigned long *dp)
{
    45f8:	6a 15       	pushm	#7,	r10	;16-bit words
    45fa:	08 4c       	mov	r12,	r8	;
    45fc:	09 4d       	mov	r13,	r9	;
    char c;
    unsigned long d;
    if(x) {
    45fe:	0c dd       	bis	r13,	r12	;
    4600:	0c 93       	cmp	#0,	r12	;r3 As==00
    4602:	36 24       	jz	$+110    	;abs 0x4670
        while(x < *dp) ++dp;
    4604:	1d 9e 02 00 	cmp	2(r14),	r13	;
    4608:	05 28       	jnc	$+12     	;abs 0x4614
    460a:	8e 9d 02 00 	cmp	r13,	2(r14)	;
    460e:	0d 20       	jnz	$+28     	;abs 0x462a
    4610:	28 9e       	cmp	@r14,	r8	;
    4612:	0b 2c       	jc	$+24     	;abs 0x462a
    4614:	0c 49       	mov	r9,	r12	;
    4616:	0d 48       	mov	r8,	r13	;
    4618:	2e 52       	add	#4,	r14	;r2 As==10
    461a:	1c 9e 02 00 	cmp	2(r14),	r12	;
    461e:	fc 2b       	jnc	$-6      	;abs 0x4618
    4620:	8e 99 02 00 	cmp	r9,	2(r14)	;
    4624:	02 20       	jnz	$+6      	;abs 0x462a
    4626:	2d 9e       	cmp	@r14,	r13	;
    4628:	f7 2b       	jnc	$-16     	;abs 0x4618
    462a:	0a 4e       	mov	r14,	r10	;
        do {
            d = *dp++;
            c = '0';
    462c:	34 40 30 00 	mov	#48,	r4	;#0x0030
            while(x >= d) ++c, x -= d;
            PUTC(c);
    4630:	35 40 5e 4e 	mov	#20062,	r5	;#0x4e5e
    char c;
    unsigned long d;
    if(x) {
        while(x < *dp) ++dp;
        do {
            d = *dp++;
    4634:	26 4a       	mov	@r10,	r6	;
    4636:	17 4a 02 00 	mov	2(r10),	r7	;
            c = '0';
            while(x >= d) ++c, x -= d;
    463a:	09 97       	cmp	r7,	r9	;
    463c:	12 28       	jnc	$+38     	;abs 0x4662
    463e:	07 99       	cmp	r9,	r7	;
    4640:	02 20       	jnz	$+6      	;abs 0x4646
    4642:	08 96       	cmp	r6,	r8	;
    4644:	0e 28       	jnc	$+30     	;abs 0x4662
    4646:	0c 44       	mov	r4,	r12	;
    4648:	0e 47       	mov	r7,	r14	;
    464a:	5c 53       	inc.b	r12		;
    464c:	3c f0 ff 00 	and	#255,	r12	;#0x00ff
    4650:	08 86       	sub	r6,	r8	;
    4652:	09 77       	subc	r7,	r9	;
    4654:	09 97       	cmp	r7,	r9	;
    4656:	06 28       	jnc	$+14     	;abs 0x4664
    4658:	0e 99       	cmp	r9,	r14	;
    465a:	f7 23       	jnz	$-16     	;abs 0x464a
    465c:	08 96       	cmp	r6,	r8	;
    465e:	f5 2f       	jc	$-20     	;abs 0x464a
    4660:	01 3c       	jmp	$+4      	;abs 0x4664
    unsigned long d;
    if(x) {
        while(x < *dp) ++dp;
        do {
            d = *dp++;
            c = '0';
    4662:	0c 44       	mov	r4,	r12	;
            while(x >= d) ++c, x -= d;
            PUTC(c);
    4664:	85 12       	call	r5		;
    4666:	2a 52       	add	#4,	r10	;r2 As==10
        } while(!(d & 1));
    4668:	16 f3       	and	#1,	r6	;r3 As==01
    466a:	06 93       	cmp	#0,	r6	;r3 As==00
    466c:	e3 27       	jz	$-56     	;abs 0x4634
    466e:	08 3c       	jmp	$+18     	;abs 0x4680
    } else {
	    PUTC('1');
    4670:	3a 40 5e 4e 	mov	#20062,	r10	;#0x4e5e
    4674:	3c 40 31 00 	mov	#49,	r12	;#0x0031
    4678:	8a 12       	call	r10		;
	    char cc = '0';
	    PUTC(cc);
    467a:	3c 40 30 00 	mov	#48,	r12	;#0x0030
    467e:	8a 12       	call	r10		;
      //  PUTC('0');
    }
}
    4680:	64 17       	popm	#7,	r10	;16-bit words
    4682:	30 41       	ret			

00004684 <puth>:

static void puth(unsigned n)
{
    static const char hex[16] = { '0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F'};
    char c = hex[n & 15];
    PUTC(hex[n & 15]);
    4684:	3c f0 0f 00 	and	#15,	r12	;#0x000f
    4688:	5c 4c 08 44 	mov.b	17416(r12),r12	;0x04408
    468c:	b0 12 5e 4e 	call	#20062		;#0x4e5e
}
    4690:	30 41       	ret			

00004692 <printf>:
 
int printf(const char *format, ...)
{
    4692:	6a 15       	pushm	#7,	r10	;16-bit words
    4694:	1a 41 10 00 	mov	16(r1),	r10	;0x00010
    long n;
    int fill_zeros;
    unsigned d;

    va_list a;
    va_start(a, format);
    4698:	08 41       	mov	r1,	r8	;
    469a:	38 50 12 00 	add	#18,	r8	;#0x0012
                    goto parse_fmt_char;
                case 0: return 0;
                default: goto bad_fmt;
            }
        } else
bad_fmt:    PUTC(c);
    469e:	35 40 5e 4e 	mov	#20062,	r5	;#0x4e5e
                    break;
                case 'i':                       // 16 bit Integer
                case 'u':                       // 16 bit Unsigned
                    i = va_arg(a, int);
                    if(c == 'i' && i < 0) i = -i, PUTC('-');
                    xtoa((unsigned)i, dv + 5);
    46a2:	34 40 2c 44 	mov	#17452,	r4	;#0x442c
    int fill_zeros;
    unsigned d;

    va_list a;
    va_start(a, format);
    while((c = *format++)) {
    46a6:	a7 3c       	jmp	$+336    	;abs 0x47f6
        if(c == '%') {
    46a8:	3c 90 25 00 	cmp	#37,	r12	;#0x0025
    46ac:	a2 20       	jnz	$+326    	;abs 0x47f2
    46ae:	0d 4a       	mov	r10,	r13	;
    46b0:	2d 53       	incd	r13		;
    46b2:	07 43       	clr	r7		;
            fill_zeros = 0;
parse_fmt_char:
            switch(c = *format++) {
    46b4:	7e 40 6c 00 	mov.b	#108,	r14	;#0x006c
    46b8:	0a 4d       	mov	r13,	r10	;
    46ba:	6c 49       	mov.b	@r9,	r12	;
    46bc:	3c 90 6c 00 	cmp	#108,	r12	;#0x006c
    46c0:	4b 24       	jz	$+152    	;abs 0x4758
    46c2:	4e 9c       	cmp.b	r12,	r14	;
    46c4:	11 28       	jnc	$+36     	;abs 0x46e8
    46c6:	3c 90 30 00 	cmp	#48,	r12	;#0x0030
    46ca:	8c 24       	jz	$+282    	;abs 0x47e4
    46cc:	7d 40 30 00 	mov.b	#48,	r13	;#0x0030
    46d0:	4d 9c       	cmp.b	r12,	r13	;
    46d2:	03 28       	jnc	$+8      	;abs 0x46da
    46d4:	0c 93       	cmp	#0,	r12	;r3 As==00
    46d6:	94 24       	jz	$+298    	;abs 0x4800
    46d8:	8b 3c       	jmp	$+280    	;abs 0x47f0
    46da:	3c 90 63 00 	cmp	#99,	r12	;#0x0063
    46de:	1d 24       	jz	$+60     	;abs 0x471a
    46e0:	3c 90 69 00 	cmp	#105,	r12	;#0x0069
    46e4:	22 24       	jz	$+70     	;abs 0x472a
    46e6:	84 3c       	jmp	$+266    	;abs 0x47f0
    46e8:	3c 90 73 00 	cmp	#115,	r12	;#0x0073
    46ec:	0f 24       	jz	$+32     	;abs 0x470c
    46ee:	7d 40 73 00 	mov.b	#115,	r13	;#0x0073
    46f2:	4d 9c       	cmp.b	r12,	r13	;
    46f4:	04 28       	jnc	$+10     	;abs 0x46fe
    46f6:	3c 90 6e 00 	cmp	#110,	r12	;#0x006e
    46fa:	2e 24       	jz	$+94     	;abs 0x4758
    46fc:	79 3c       	jmp	$+244    	;abs 0x47f0
    46fe:	3c 90 75 00 	cmp	#117,	r12	;#0x0075
    4702:	13 24       	jz	$+40     	;abs 0x472a
    4704:	3c 90 78 00 	cmp	#120,	r12	;#0x0078
    4708:	44 24       	jz	$+138    	;abs 0x4792
    470a:	72 3c       	jmp	$+230    	;abs 0x47f0
                case 's':                       // String
                    io_puts_no_newline(va_arg(a, char*));
    470c:	09 48       	mov	r8,	r9	;
    470e:	29 53       	incd	r9		;
    4710:	2c 48       	mov	@r8,	r12	;
    4712:	b0 12 a8 4e 	call	#20136		;#0x4ea8
    4716:	08 49       	mov	r9,	r8	;
                    break;
    4718:	6e 3c       	jmp	$+222    	;abs 0x47f6
                case 'c':                       // Char
                    PUTC(va_arg(a, int)); // TODO: 'char' generated a warning
    471a:	18 53       	inc	r8		;
    471c:	0c 48       	mov	r8,	r12	;
    471e:	1c c3       	bic	#1,	r12	;r3 As==01
    4720:	08 4c       	mov	r12,	r8	;
    4722:	28 53       	incd	r8		;
    4724:	2c 4c       	mov	@r12,	r12	;
    4726:	85 12       	call	r5		;
                    break;
    4728:	66 3c       	jmp	$+206    	;abs 0x47f6
                case 'i':                       // 16 bit Integer
                case 'u':                       // 16 bit Unsigned
                    i = va_arg(a, int);
    472a:	18 53       	inc	r8		;
    472c:	0d 48       	mov	r8,	r13	;
    472e:	1d c3       	bic	#1,	r13	;r3 As==01
    4730:	08 4d       	mov	r13,	r8	;
    4732:	28 53       	incd	r8		;
    4734:	29 4d       	mov	@r13,	r9	;
                    if(c == 'i' && i < 0) i = -i, PUTC('-');
    4736:	3c 90 69 00 	cmp	#105,	r12	;#0x0069
    473a:	08 20       	jnz	$+18     	;abs 0x474c
    473c:	09 93       	cmp	#0,	r9	;r3 As==00
    473e:	06 34       	jge	$+14     	;abs 0x474c
    4740:	0c 43       	clr	r12		;
    4742:	0c 89       	sub	r9,	r12	;
    4744:	09 4c       	mov	r12,	r9	;
    4746:	3c 40 2d 00 	mov	#45,	r12	;#0x002d
    474a:	85 12       	call	r5		;
                    xtoa((unsigned)i, dv + 5);
    474c:	0c 49       	mov	r9,	r12	;
    474e:	0d 43       	clr	r13		;
    4750:	0e 44       	mov	r4,	r14	;
    4752:	b0 12 f8 45 	call	#17912		;#0x45f8
                    break;
    4756:	4f 3c       	jmp	$+160    	;abs 0x47f6
                case 'l':                       // 32 bit Long
                case 'n':                       // 32 bit uNsigned loNg
                    n = va_arg(a, long);
    4758:	18 53       	inc	r8		;
    475a:	0d 48       	mov	r8,	r13	;
    475c:	1d c3       	bic	#1,	r13	;r3 As==01
    475e:	08 4d       	mov	r13,	r8	;
    4760:	28 52       	add	#4,	r8	;r2 As==10
    4762:	26 4d       	mov	@r13,	r6	;
    4764:	17 4d 02 00 	mov	2(r13),	r7	;
                    if(c == 'l' &&  n < 0) n = -n, PUTC('-');
    4768:	3c 90 6c 00 	cmp	#108,	r12	;#0x006c
    476c:	0b 20       	jnz	$+24     	;abs 0x4784
    476e:	07 93       	cmp	#0,	r7	;r3 As==00
    4770:	09 34       	jge	$+20     	;abs 0x4784
    4772:	0c 43       	clr	r12		;
    4774:	0d 43       	clr	r13		;
    4776:	0c 86       	sub	r6,	r12	;
    4778:	0d 77       	subc	r7,	r13	;
    477a:	06 4c       	mov	r12,	r6	;
    477c:	07 4d       	mov	r13,	r7	;
    477e:	3c 40 2d 00 	mov	#45,	r12	;#0x002d
    4782:	85 12       	call	r5		;
                    xtoa((unsigned long)n, dv);
    4784:	0c 46       	mov	r6,	r12	;
    4786:	0d 47       	mov	r7,	r13	;
    4788:	3e 40 18 44 	mov	#17432,	r14	;#0x4418
    478c:	b0 12 f8 45 	call	#17912		;#0x45f8
                    break;
    4790:	32 3c       	jmp	$+102    	;abs 0x47f6
                case 'x':                       // 16 bit heXadecimal
                    i = va_arg(a, int);
    4792:	18 53       	inc	r8		;
    4794:	0c 48       	mov	r8,	r12	;
    4796:	1c c3       	bic	#1,	r12	;r3 As==01
    4798:	08 4c       	mov	r12,	r8	;
    479a:	28 53       	incd	r8		;
    479c:	29 4c       	mov	@r12,	r9	;
                    d = i >> 12;
    479e:	0c 49       	mov	r9,	r12	;
    47a0:	4b 18 0c 11 	rpt #12 { rrax.w	r12		;
                    if (d > 0 || fill_zeros >= 4)
    47a4:	0c 93       	cmp	#0,	r12	;r3 As==00
    47a6:	04 20       	jnz	$+10     	;abs 0x47b0
    47a8:	3d 40 03 00 	mov	#3,	r13	;
    47ac:	0d 97       	cmp	r7,	r13	;
    47ae:	02 34       	jge	$+6      	;abs 0x47b4
                        puth(d);
    47b0:	b0 12 84 46 	call	#18052		;#0x4684
                    d = i >> 8;
    47b4:	0c 49       	mov	r9,	r12	;
    47b6:	47 18 0c 11 	rpt #8 { rrax.w	r12		;
                    if (d > 0 || fill_zeros >= 3)
    47ba:	0c 93       	cmp	#0,	r12	;r3 As==00
    47bc:	03 20       	jnz	$+8      	;abs 0x47c4
    47be:	2d 43       	mov	#2,	r13	;r3 As==10
    47c0:	0d 97       	cmp	r7,	r13	;
    47c2:	02 34       	jge	$+6      	;abs 0x47c8
                        puth(d);
    47c4:	b0 12 84 46 	call	#18052		;#0x4684
                    d = i >> 4;
    47c8:	0c 49       	mov	r9,	r12	;
    47ca:	43 18 0c 11 	rpt #4 { rrax.w	r12		;
                    if (d > 0 || fill_zeros >= 2)
    47ce:	0c 93       	cmp	#0,	r12	;r3 As==00
    47d0:	03 20       	jnz	$+8      	;abs 0x47d8
    47d2:	1d 43       	mov	#1,	r13	;r3 As==01
    47d4:	0d 97       	cmp	r7,	r13	;
    47d6:	02 34       	jge	$+6      	;abs 0x47dc
                        puth(d);
    47d8:	b0 12 84 46 	call	#18052		;#0x4684
                    puth(i);
    47dc:	0c 49       	mov	r9,	r12	;
    47de:	b0 12 84 46 	call	#18052		;#0x4684
                    break;
    47e2:	09 3c       	jmp	$+20     	;abs 0x47f6
    47e4:	29 53       	incd	r9		;
                case '0':
                    c = *format++;
                    fill_zeros = c - '0';
    47e6:	67 4d       	mov.b	@r13,	r7	;
    47e8:	37 50 d0 ff 	add	#65488,	r7	;#0xffd0
    47ec:	2d 53       	incd	r13		;
                    goto parse_fmt_char;
    47ee:	64 3f       	jmp	$-310    	;abs 0x46b8
    va_start(a, format);
    while((c = *format++)) {
        if(c == '%') {
            fill_zeros = 0;
parse_fmt_char:
            switch(c = *format++) {
    47f0:	09 4a       	mov	r10,	r9	;
                    goto parse_fmt_char;
                case 0: return 0;
                default: goto bad_fmt;
            }
        } else
bad_fmt:    PUTC(c);
    47f2:	85 12       	call	r5		;
    47f4:	0a 49       	mov	r9,	r10	;
    int fill_zeros;
    unsigned d;

    va_list a;
    va_start(a, format);
    while((c = *format++)) {
    47f6:	09 4a       	mov	r10,	r9	;
    47f8:	19 53       	inc	r9		;
    47fa:	6c 4a       	mov.b	@r10,	r12	;
    47fc:	0c 93       	cmp	#0,	r12	;r3 As==00
    47fe:	54 23       	jnz	$-342    	;abs 0x46a8
        } else
bad_fmt:    PUTC(c);
    }
    va_end(a);
    return 0; // TODO: return number of chars printed
}
    4800:	0c 43       	clr	r12		;
    4802:	64 17       	popm	#7,	r10	;16-bit words
    4804:	30 41       	ret			

00004806 <signal_debugger>:
static void signal_debugger()
{
    // pulse the signal line

    // target signal line starts in high imedence state
    GPIO(PORT_SIG, OUT) |= BIT(PIN_SIG);        // output high
    4806:	f2 d0 10 00 	bis.b	#16,	&0x0202	;#0x0010
    480a:	02 02 
    GPIO(PORT_SIG, DIR) |= BIT(PIN_SIG);        // output enable
    480c:	f2 d0 10 00 	bis.b	#16,	&0x0204	;#0x0010
    4810:	04 02 
    GPIO(PORT_SIG, OUT) &= ~BIT(PIN_SIG);    // output low
    4812:	f2 f0 ef ff 	and.b	#65519,	&0x0202	;#0xffef
    4816:	02 02 
    GPIO(PORT_SIG, DIR) &= ~BIT(PIN_SIG);    // back to high impedence state
    4818:	f2 f0 ef ff 	and.b	#65519,	&0x0204	;#0xffef
    481c:	04 02 
    GPIO(PORT_SIG, IFG) &= ~BIT(PIN_SIG); // clear interrupt flag (might have been set by the above)
    481e:	f2 f0 ef ff 	and.b	#65519,	&0x021c	;#0xffef
    4822:	1c 02 
}
    4824:	30 41       	ret			

00004826 <unmask_debugger_signal>:


static void unmask_debugger_signal()
{
    //sig_active = true;
    GPIO(PORT_SIG, IES) &= ~BIT(PIN_SIG); // rising edge
    4826:	f2 f0 ef ff 	and.b	#65519,	&0x0218	;#0xffef
    482a:	18 02 
    GPIO(PORT_SIG, IFG) &= ~BIT(PIN_SIG); // clear the flag that might have been set by IES write
    482c:	f2 f0 ef ff 	and.b	#65519,	&0x021c	;#0xffef
    4830:	1c 02 
    GPIO(PORT_SIG, IE) |= BIT(PIN_SIG); // enable interrupt
    4832:	f2 d0 10 00 	bis.b	#16,	&0x021a	;#0x0010
    4836:	1a 02 
}
    4838:	30 41       	ret			

0000483a <mask_debugger_signal>:

static void mask_debugger_signal()
{
    GPIO(PORT_SIG, IE) &= ~BIT(PIN_SIG); // disable interrupt
    483a:	f2 f0 ef ff 	and.b	#65519,	&0x021a	;#0xffef
    483e:	1a 02 
    //sig_active = false;
}
    4840:	30 41       	ret			

00004842 <signal_debugger_with_data>:
    GPIO(PORT_SIG, IFG) &= ~BIT(PIN_SIG); // clear interrupt flag (might have been set by the above)
}

#ifdef CONFIG_ENABLE_TARGET_SIDE_DEBUG_MODE
static void signal_debugger_with_data(uint8_t data)
{
    4842:	2a 15       	pushm	#3,	r10	;16-bit words
    4844:	21 82       	sub	#4,	r1	;r2 As==10
    4846:	48 4c       	mov.b	r12,	r8	;
    uint8_t bit;
    uint8_t port_bits[SIG_SERIAL_NUM_BITS];

    // Precompute all port values in order to keep the bit duration constant,
    // i.e. so that it does not vary with the bit index and bit value.
    for (i = 0; i < SIG_SERIAL_NUM_BITS; ++i) {
    4848:	0a 43       	clr	r10		;
    484a:	19 43       	mov	#1,	r9	;r3 As==01
    484c:	09 51       	add	r1,	r9	;
    484e:	09 5a       	add	r10,	r9	;
        bit = (data >> i) & 0x1;
    4850:	0c 48       	mov	r8,	r12	;
    4852:	0d 4a       	mov	r10,	r13	;
    4854:	b0 12 dc 51 	call	#20956		;#0x51dc
    4858:	5c f3       	and.b	#1,	r12	;r3 As==01
        port_bits[i] = bit << PIN_SIG;
    485a:	0d 4c       	mov	r12,	r13	;
    485c:	43 18 0d 5d 	rpt #4 { rlax.w	r13		;
    4860:	c9 4d 00 00 	mov.b	r13,	0(r9)	;
    uint8_t bit;
    uint8_t port_bits[SIG_SERIAL_NUM_BITS];

    // Precompute all port values in order to keep the bit duration constant,
    // i.e. so that it does not vary with the bit index and bit value.
    for (i = 0; i < SIG_SERIAL_NUM_BITS; ++i) {
    4864:	1a 53       	inc	r10		;
    4866:	3a 90 03 00 	cmp	#3,	r10	;
    486a:	ef 23       	jnz	$-32     	;abs 0x484a
        bit = (data >> i) & 0x1;
        port_bits[i] = bit << PIN_SIG;
    }

    __disable_interrupt();
    486c:	32 c2       	dint			

    // target signal line starts in high imedence state

    // starting pulse
    GPIO(PORT_SIG, OUT) |= BIT(PIN_SIG);        // output high
    486e:	f2 d0 10 00 	bis.b	#16,	&0x0202	;#0x0010
    4872:	02 02 
    GPIO(PORT_SIG, DIR) |= BIT(PIN_SIG);        // output enable
    4874:	f2 d0 10 00 	bis.b	#16,	&0x0204	;#0x0010
    4878:	04 02 
    GPIO(PORT_SIG, OUT) &= ~BIT(PIN_SIG);    // output low
    487a:	f2 f0 ef ff 	and.b	#65519,	&0x0202	;#0xffef
    487e:	02 02 

#if SIG_SERIAL_NUM_BITS > 3
    PULSE_BIT(3);
#endif
#if SIG_SERIAL_NUM_BITS > 2
    PULSE_BIT(2);
    4880:	0d 14       	pushm.a	#1,	r13	;20-bit words
    4882:	3d 40 27 00 	mov	#39,	r13	;#0x0027
    4886:	1d 83       	dec	r13		;
    4888:	fe 23       	jnz	$-2      	;abs 0x4886
    488a:	0d 16       	popm.a	#1,	r13	;20-bit words
    488c:	03 43       	nop			
    488e:	d2 d1 03 00 	bis.b	3(r1),	&0x0202	;
    4892:	02 02 
    4894:	f2 f0 ef ff 	and.b	#65519,	&0x0202	;#0xffef
    4898:	02 02 
#endif
#if SIG_SERIAL_NUM_BITS > 1
    PULSE_BIT(1);
    489a:	0d 14       	pushm.a	#1,	r13	;20-bit words
    489c:	3d 40 27 00 	mov	#39,	r13	;#0x0027
    48a0:	1d 83       	dec	r13		;
    48a2:	fe 23       	jnz	$-2      	;abs 0x48a0
    48a4:	0d 16       	popm.a	#1,	r13	;20-bit words
    48a6:	03 43       	nop			
    48a8:	d2 d1 02 00 	bis.b	2(r1),	&0x0202	;
    48ac:	02 02 
    48ae:	f2 f0 ef ff 	and.b	#65519,	&0x0202	;#0xffef
    48b2:	02 02 
#endif
#if SIG_SERIAL_NUM_BITS > 0
    PULSE_BIT(0);
    48b4:	0d 14       	pushm.a	#1,	r13	;20-bit words
    48b6:	3d 40 27 00 	mov	#39,	r13	;#0x0027
    48ba:	1d 83       	dec	r13		;
    48bc:	fe 23       	jnz	$-2      	;abs 0x48ba
    48be:	0d 16       	popm.a	#1,	r13	;20-bit words
    48c0:	03 43       	nop			
    48c2:	d2 d1 01 00 	bis.b	1(r1),	&0x0202	;
    48c6:	02 02 
    48c8:	f2 f0 ef ff 	and.b	#65519,	&0x0202	;#0xffef
    48cc:	02 02 
#endif

    // terminating pulse: must happen after the interval for the last bit elapses
    __delay_cycles(SIG_SERIAL_BIT_DURATION_ON_TARGET); // ignore the few compute instructions
    48ce:	0d 14       	pushm.a	#1,	r13	;20-bit words
    48d0:	3d 40 27 00 	mov	#39,	r13	;#0x0027
    48d4:	1d 83       	dec	r13		;
    48d6:	fe 23       	jnz	$-2      	;abs 0x48d4
    48d8:	0d 16       	popm.a	#1,	r13	;20-bit words
    48da:	03 43       	nop			
    GPIO(PORT_SIG, OUT) |= BIT(PIN_SIG);        // output high
    48dc:	f2 d0 10 00 	bis.b	#16,	&0x0202	;#0x0010
    48e0:	02 02 
    GPIO(PORT_SIG, OUT) &= ~BIT(PIN_SIG);    // output low
    48e2:	f2 f0 ef ff 	and.b	#65519,	&0x0202	;#0xffef
    48e6:	02 02 

    GPIO(PORT_SIG, DIR) &= ~BIT(PIN_SIG);    // back to high impedence state
    48e8:	f2 f0 ef ff 	and.b	#65519,	&0x0204	;#0xffef
    48ec:	04 02 
    GPIO(PORT_SIG, IFG) &= ~BIT(PIN_SIG); // clear interrupt flag (might have been set by the above)
    48ee:	f2 f0 ef ff 	and.b	#65519,	&0x021c	;#0xffef
    48f2:	1c 02 

    __enable_interrupt();
    48f4:	32 d2       	eint			
    48f6:	03 43       	nop			
}
    48f8:	21 52       	add	#4,	r1	;r2 As==10
    48fa:	28 17       	popm	#3,	r10	;16-bit words
    48fc:	30 41       	ret			

000048fe <exit_debug_mode>:
    set_state(STATE_DEBUG);
}

void exit_debug_mode()
{
    if (interrupt_context.features & DEBUG_MODE_WITH_UART)
    48fe:	e2 b3 34 1c 	bit.b	#2,	&0x1c34	;r3 As==10
    4902:	02 24       	jz	$+6      	;abs 0x4908
        UART_teardown();
    4904:	b0 12 48 4f 	call	#20296		;#0x4f48
    //sig_active = false;
}

static void clear_interrupt_context()
{
    interrupt_context.type = INTERRUPT_TYPE_NONE;
    4908:	3c 40 30 1c 	mov	#7216,	r12	;#0x1c30
    490c:	8c 43 00 00 	mov	#0,	0(r12)	;r3 As==00
    interrupt_context.id = 0;
    4910:	8c 43 02 00 	mov	#0,	2(r12)	;r3 As==00
    interrupt_context.features = 0;
    4914:	cc 43 04 00 	mov.b	#0,	4(r12)	;r3 As==00
{
    if (interrupt_context.features & DEBUG_MODE_WITH_UART)
        UART_teardown();

    clear_interrupt_context();
}
    4918:	30 41       	ret			

0000491a <request_debug_mode>:
    // we are asleep (at end of this function) before ISR runs. Otherwise,
    // the race completely derails the sequence to enter-exit debug mode.
    // Furthermore, to prevent a signal from the debugger arriving while
    // we are trying to request debug mode, disable interrupts at the
    // very beginning of this function.
    __disable_interrupt();
    491a:	32 c2       	dint			

    debug_flags |= DEBUG_REQUESTED_BY_TARGET;
    491c:	a2 d3 36 1c 	bis	#2,	&0x1c36	;r3 As==10
    interrupt_context.type = int_type;
    4920:	3f 40 30 1c 	mov	#7216,	r15	;#0x1c30
    4924:	8f 4c 00 00 	mov	r12,	0(r15)	;
    interrupt_context.id = int_id;
    4928:	8f 4d 02 00 	mov	r13,	2(r15)	;
    interrupt_context.features = features;
    492c:	cf 4e 04 00 	mov.b	r14,	4(r15)	;

    mask_debugger_signal();
    4930:	b0 12 3a 48 	call	#18490		;#0x483a

    switch (state) {
    4934:	92 93 38 1c 	cmp	#1,	&0x1c38	;r3 As==01
    4938:	04 20       	jnz	$+10     	;abs 0x4942
        case STATE_DEBUG: // an assert/breakpoint nested in an energy guard
            signal_debugger_with_data(SIG_CMD_INTERRUPT);
    493a:	5c 43       	mov.b	#1,	r12	;r3 As==01
    493c:	b0 12 42 48 	call	#18498		;#0x4842
            break;
    4940:	02 3c       	jmp	$+6      	;abs 0x4946
        default: // hot path (hit an assert/bkpt), we want the debugger to take action asap
            signal_debugger();
    4942:	b0 12 06 48 	call	#18438		;#0x4806
    }

    unmask_debugger_signal();
    4946:	b0 12 26 48 	call	#18470		;#0x4826

    // go to sleep, enable interrupts, and wait for signal from debugger
    __bis_SR_register(DEBUG_MODE_REQUEST_WAIT_STATE_BITS | GIE);
    494a:	32 d0 18 00 	bis	#24,	r2	;#0x0018
}
    494e:	30 41       	ret			

00004950 <request_non_interactive_debug_mode>:
// calling convention from GCC. And, we have to compile libedb with GCC,
// because Clang compilation of it doesn't function correctly (probably
// because of delay variations, etc.).
void request_non_interactive_debug_mode()
{
    request_debug_mode(INTERRUPT_TYPE_ENERGY_GUARD, 0, DEBUG_MODE_WITH_UART);
    4950:	3c 40 05 00 	mov	#5,	r12	;
    4954:	0d 43       	clr	r13		;
    4956:	2e 43       	mov	#2,	r14	;r3 As==10
    4958:	b0 12 1a 49 	call	#18714		;#0x491a
}
    495c:	30 41       	ret			

0000495e <request_energy_guard_debug_mode>:

// Same comment applies as above
void request_energy_guard_debug_mode()
{
    request_debug_mode(INTERRUPT_TYPE_ENERGY_GUARD, 0, DEBUG_MODE_WITH_UART);
    495e:	3c 40 05 00 	mov	#5,	r12	;
    4962:	0d 43       	clr	r13		;
    4964:	2e 43       	mov	#2,	r14	;r3 As==10
    4966:	b0 12 1a 49 	call	#18714		;#0x491a
}
    496a:	30 41       	ret			

0000496c <resume_application>:
#endif // CONFIG_ENABLE_TARGET_SIDE_DEBUG_MODE

#ifdef CONFIG_ENABLE_TARGET_SIDE_DEBUG_MODE // resume_application used only for energy guards
void resume_application()
{
    exit_debug_mode();
    496c:	b0 12 fe 48 	call	#18686		;#0x48fe
{
#ifdef CONFIG_STATE_PINS
    uint8_t port_value;
#endif

    state = new_state;
    4970:	a2 43 38 1c 	mov	#2,	&0x1c38	;r3 As==10
{
    exit_debug_mode();

    set_state(STATE_SUSPENDED); // sleep and wait for debugger to restore energy

    mask_debugger_signal();
    4974:	b0 12 3a 48 	call	#18490		;#0x483a
    // we are asleep (at end of this function) before ISR runs. Otherwise,
    // the race completely derails the sequence to enter-exit debug mode.
    // Furthermore, to prevent a signal from the debugger arriving while
    // we are trying to request debug mode, disable interrupts at the
    // very beginning of this function.
    __disable_interrupt();
    4978:	32 c2       	dint			

    // debugger is in DEBUG state, so our signal needs to contain
    // the information about whether we are exiting the debug mode
    // (as we are here) or whether we are requesting a nested debug
    // mode due to an assert/bkpt.
    signal_debugger_with_data(SIG_CMD_EXIT); // tell debugger we have shutdown UART
    497a:	6c 43       	mov.b	#2,	r12	;r3 As==10
    497c:	b0 12 42 48 	call	#18498		;#0x4842

    unmask_debugger_signal();
    4980:	b0 12 26 48 	call	#18470		;#0x4826

    // go to sleep, enable interrupts, and wait for signal from debugger
    __bis_SR_register(DEBUG_MODE_REQUEST_WAIT_STATE_BITS | GIE);
    4984:	32 d0 18 00 	bis	#24,	r2	;#0x0018
}
    4988:	30 41       	ret			

0000498a <mem_addr_from_bytes>:
#endif

uintptr_t mem_addr_from_bytes(uint8_t *buf)
{
    return (uintptr_t)
    498a:	5d 4c 01 00 	mov.b	1(r12),	r13	;
    498e:	47 18 0d 5d 	rpt #8 { rlax.w	r13		;
    4992:	6c 4c       	mov.b	@r12,	r12	;
        (((uint32_t)buf[3] << 24) |
        ((uint32_t)buf[2] << 16) |
        ((uint32_t)buf[1] << 8) |
        ((uint32_t)buf[0] << 0));
}
    4994:	0c dd       	bis	r13,	r12	;
    4996:	30 41       	ret			

00004998 <edb_init>:
#ifdef CONFIG_STATE_PINS
    GPIO(PORT_STATE, OUT) &= ~(BIT(PIN_STATE_0) | BIT(PIN_STATE_1)); // output low
    GPIO(PORT_STATE, DIR) |= BIT(PIN_STATE_0) | BIT(PIN_STATE_1); // output
#endif

    GPIO(PORT_SIG, DIR) &= ~BIT(PIN_SIG); // input
    4998:	f2 f0 ef ff 	and.b	#65519,	&0x0204	;#0xffef
    499c:	04 02 
    GPIO(PORT_SIG, IFG) &= ~BIT(PIN_SIG); // clear interrupt flag (might have been set by the above)
    499e:	f2 f0 ef ff 	and.b	#65519,	&0x021c	;#0xffef
    49a2:	1c 02 
#ifdef LED_IN_DEBUG_STATE
    GPIO(PORT_DEBUG_MODE_LED, OUT) &= ~(BIT(PIN_DEBUG_MODE_LED));
    GPIO(PORT_DEBUG_MODE_LED, DIR) |= BIT(PIN_DEBUG_MODE_LED);
#endif

    unmask_debugger_signal();
    49a4:	b0 12 26 48 	call	#18470		;#0x4826
{
#ifdef CONFIG_STATE_PINS
    uint8_t port_value;
#endif

    state = new_state;
    49a8:	82 43 38 1c 	mov	#0,	&0x1c38	;r3 As==00

    unmask_debugger_signal();

    set_state(STATE_IDLE);

    __enable_interrupt();
    49ac:	32 d2       	eint			
    49ae:	03 43       	nop			

    // Codepoint pin config must be after the boot breakpoint since may change dir

#if defined(CONFIG_ENABLE_PASSIVE_BREAKPOINTS) || defined(CONFIG_ENABLE_WATCHPOINTS)
    // codepoint pins are outputs
    GPIO(PORT_CODEPOINT, OUT) &= ~BITS_CODEPOINT;
    49b0:	f2 f0 cf ff 	and.b	#65487,	&0x0222	;#0xffcf
    49b4:	22 02 
    GPIO(PORT_CODEPOINT, DIR) |= BITS_CODEPOINT;
    49b6:	f2 d0 30 00 	bis.b	#48,	&0x0224	;#0x0030
    49ba:	24 02 
    GPIO(PORT_CODEPOINT, DIR) &= ~BITS_CODEPOINT;
#endif

    // For measuring boot latency
    // GPIO(PORT_STATE, OUT) |= BIT(PIN_STATE_0);
}
    49bc:	30 41       	ret			

000049be <edb_set_app_output_cb>:

void edb_set_app_output_cb(app_output_cb_t *cb)
{
    app_output_cb = cb;
    49be:	82 4c 3a 1c 	mov	r12,	&0x1c3a	;
}
    49c2:	30 41       	ret			

000049c4 <PORT1_ISR>:

__attribute__ ((interrupt(GPIO_VECTOR(PORT_SIG))))
void GPIO_ISR(PORT_SIG)(void)
{
    49c4:	bf 15       	pushm	#12,	r15	;16-bit words
    49c6:	21 83       	decd	r1		;
	switch(__even_in_range(INTVEC(PORT_SIG), INTVEC_RANGE(PORT_SIG)))
    49c8:	1c 42 0e 02 	mov	&0x020e,r12	;0x020e
    49cc:	3c 90 0a 00 	cmp	#10,	r12	;#0x000a
    49d0:	02 24       	jz	$+6      	;abs 0x49d6
    49d2:	80 00 c4 4d 	mova	#19908,	r0	;0x04dc4

            // Clear the int flag, because during active debug mode, we are
            // in the interrupt context (we return from interrupt on exit
            // from the debug node) and we re-use the signal pin before exit.
#ifndef UNMASK_DEBUGGER_SIGNAL_WORKAROUND
            GPIO(PORT_SIG, IFG) &= ~PIN_SIG;
    49d6:	e2 c2 1c 02 	bic.b	#4,	&0x021c	;r2 As==10
#endif

            // First time the ISR runs, save application stack pointer
            if (state == STATE_IDLE) {
    49da:	1a 42 38 1c 	mov	&0x1c38,r10	;0x1c38
    49de:	0a 93       	cmp	#0,	r10	;r3 As==00
    49e0:	07 20       	jnz	$+16     	;abs 0x49f0
#if defined(__TI_COMPILER_VERSION__) || defined(__IAR_SYSTEMS_ICC__)
                uint16_t *sp = (uint16_t *) __get_SP_register();
#elif defined(__GNUC__)
                uint16_t *sp;
                __asm__ (
    49e2:	0c 41       	mov	r1,	r12	;
                    : /* no clobbers */
                );

                /* layout: LOWADDR >>> HIGHADDR (see disasm of  this ISR)
                 * LOCALS [1x2] | SAVED REGS [12x2] | SR [1x2] | PC [1x2] */
                pc = *(sp + 1 + 12 + 1); // note: pointer arithmetic
    49e4:	92 4c 1c 00 	mov	28(r12),&0x1c2e	;0x0001c
    49e8:	2e 1c 
#else
#error Compiler not supported!
#endif
            }

            mask_debugger_signal();
    49ea:	b0 12 3a 48 	call	#18490		;#0x483a
    49ee:	08 3c       	jmp	$+18     	;abs 0x4a00
    49f0:	b0 12 3a 48 	call	#18490		;#0x483a
#endif
}

static inline void handle_debugger_signal()
{
    switch (state) {
    49f4:	1c 43       	mov	#1,	r12	;r3 As==01
    49f6:	0c 9a       	cmp	r10,	r12	;
    49f8:	03 2c       	jc	$+8      	;abs 0x4a00
    49fa:	2a 93       	cmp	#2,	r10	;r3 As==10
    49fc:	96 25       	jz	$+814    	;abs 0x4d2a
    49fe:	98 3d       	jmp	$+818    	;abs 0x4d30
        case STATE_IDLE: // debugger requested us to enter debug mode
        case STATE_DEBUG: // debugger requested to enter a *nested* debug mode

            // If entering debug mode on debugger's initiative (i.e. when we
            // didn't request it), then need to set the features.
            if (interrupt_context.type == INTERRUPT_TYPE_NONE) {
    4a00:	82 93 30 1c 	cmp	#0,	&0x1c30	;r3 As==00
    4a04:	07 20       	jnz	$+16     	;abs 0x4a14
                interrupt_context.type = INTERRUPT_TYPE_DEBUGGER_REQ;
    4a06:	3c 40 30 1c 	mov	#7216,	r12	;#0x1c30
    4a0a:	9c 43 00 00 	mov	#1,	0(r12)	;r3 As==01
                interrupt_context.features = DEBUG_MODE_FULL_FEATURES;
    4a0e:	fc 40 03 00 	mov.b	#3,	4(r12)	;
    4a12:	04 00 
    interrupt_context.features = 0;
}

static void enter_debug_mode()
{
    __enable_interrupt();
    4a14:	32 d2       	eint			
    4a16:	03 43       	nop			

    if (interrupt_context.features & DEBUG_MODE_WITH_UART)
    4a18:	e2 b3 34 1c 	bit.b	#2,	&0x1c34	;r3 As==10
    4a1c:	02 24       	jz	$+6      	;abs 0x4a22
        UART_init();
    4a1e:	b0 12 06 4f 	call	#20230		;#0x4f06
{
#ifdef CONFIG_STATE_PINS
    uint8_t port_value;
#endif

    state = new_state;
    4a22:	92 43 38 1c 	mov	#1,	&0x1c38	;r3 As==01

#ifdef CONFIG_ENABLE_TARGET_SIDE_DEBUG_MODE
            // If target initiated the debug mode request then, send the
            // features that the target wants as payload, otherwise don't need
            // to send any payload with the signal.
            if (interrupt_context.type != INTERRUPT_TYPE_DEBUGGER_REQ) {
    4a26:	92 93 30 1c 	cmp	#1,	&0x1c30	;r3 As==01
    4a2a:	05 24       	jz	$+12     	;abs 0x4a36
                signal_debugger_with_data(interrupt_context.features);
    4a2c:	5c 42 34 1c 	mov.b	&0x1c34,r12	;0x1c34
    4a30:	b0 12 42 48 	call	#18498		;#0x4842
    4a34:	02 3c       	jmp	$+6      	;abs 0x4a3a
            } else {
                signal_debugger();
    4a36:	b0 12 06 48 	call	#18438		;#0x4806
#else // !CONFIG_ENABLE_TARGET_SIDE_DEBUG_MODE
            signal_debugger();
#endif // !CONFIG_ENABLE_TARGET_SIDE_DEBUG_MODE

#ifndef UNMASK_DEBUGGER_SIGNAL_WORKAROUND
            unmask_debugger_signal();
    4a3a:	b0 12 26 48 	call	#18470		;#0x4826
#endif

            if (interrupt_context.features & DEBUG_MODE_INTERACTIVE) {
    4a3e:	d2 b3 34 1c 	bit.b	#1,	&0x1c34	;r3 As==01
    4a42:	76 25       	jz	$+750    	;abs 0x4d30
    4a44:	0a 43       	clr	r10		;
    4a46:	09 4a       	mov	r10,	r9	;
            len_field_offset = msg_len;
            tx_buf[msg_len++] = 0; // length: to be filled out shortly
            tx_buf[msg_len++] = 0; // padding

            if (app_output_cb != NULL)
                app_output_cb(tx_buf + msg_len, &len);
    4a48:	37 40 40 1c 	mov	#7232,	r7	;#0x1c40
    4a4c:	38 40 21 1c 	mov	#7201,	r8	;#0x1c21
#endif

    while(1) {

        // block until we receive a message
        UART_receive(uartRxBuf, CHUNK_BYTES);
    4a50:	3c 40 2c 1c 	mov	#7212,	r12	;#0x1c2c
    4a54:	1d 43       	mov	#1,	r13	;r3 As==01
    4a56:	b0 12 34 50 	call	#20532		;#0x5034
    static msgState_t msg_state = MSG_STATE_IDENTIFIER;
    static uint8_t data_len = 0;

    uint8_t i;
    for(i = 0; i < len; i++) {
        switch(msg_state)
    4a5a:	1c 42 1a 1c 	mov	&0x1c1a,r12	;0x1c1a
    4a5e:	2c 93       	cmp	#2,	r12	;r3 As==10
    4a60:	1d 24       	jz	$+60     	;abs 0x4a9c
    4a62:	2d 43       	mov	#2,	r13	;r3 As==10
    4a64:	0d 9c       	cmp	r12,	r13	;
    4a66:	05 28       	jnc	$+12     	;abs 0x4a72
    4a68:	0c 93       	cmp	#0,	r12	;r3 As==00
    4a6a:	09 24       	jz	$+20     	;abs 0x4a7e
    4a6c:	1c 93       	cmp	#1,	r12	;r3 As==01
    4a6e:	0e 24       	jz	$+30     	;abs 0x4a8c
    4a70:	50 3d       	jmp	$+674    	;abs 0x4d12
    4a72:	3c 90 03 00 	cmp	#3,	r12	;
    4a76:	19 24       	jz	$+52     	;abs 0x4aaa
    4a78:	2c 92       	cmp	#4,	r12	;r2 As==10
    4a7a:	20 24       	jz	$+66     	;abs 0x4abc
    4a7c:	4a 3d       	jmp	$+662    	;abs 0x4d12
        {
            case MSG_STATE_IDENTIFIER:
                {
                    uint8_t identifier = msg[i];
                    if(identifier == UART_IDENTIFIER_WISP) {
    4a7e:	f2 90 f1 ff 	cmp.b	#65521,	&0x1c2c	;#0xfff1
    4a82:	2c 1c 
    4a84:	46 21       	jnz	$+654    	;abs 0x4d12
                        // good identifier byte
                        msg_state = MSG_STATE_DESCRIPTOR;
    4a86:	92 43 1a 1c 	mov	#1,	&0x1c1a	;r3 As==01
    4a8a:	43 3d       	jmp	$+648    	;abs 0x4d12
                    // else we had a bad identifier byte, so don't change the state
                    break;
                }

            case MSG_STATE_DESCRIPTOR:
                data_len = 0;
    4a8c:	c2 43 18 1c 	mov.b	#0,	&0x1c18	;r3 As==00
                cmd->descriptor = msg[i];
    4a90:	59 42 2c 1c 	mov.b	&0x1c2c,r9	;0x1c2c
                cmd->len = 0;
                msg_state = MSG_STATE_DATALEN;
    4a94:	a2 43 1a 1c 	mov	#2,	&0x1c1a	;r3 As==10
                }

            case MSG_STATE_DESCRIPTOR:
                data_len = 0;
                cmd->descriptor = msg[i];
                cmd->len = 0;
    4a98:	0a 43       	clr	r10		;
    4a9a:	3b 3d       	jmp	$+632    	;abs 0x4d12
                msg_state = MSG_STATE_DATALEN;
                break;

            case MSG_STATE_DATALEN:
                data_len = msg[i]; // decremented as data bytes are parsed
    4a9c:	d2 42 2c 1c 	mov.b	&0x1c2c,&0x1c18	;0x1c2c
    4aa0:	18 1c 
                msg_state = MSG_STATE_PADDING;
    4aa2:	b2 40 03 00 	mov	#3,	&0x1c1a	;
    4aa6:	1a 1c 
    4aa8:	34 3d       	jmp	$+618    	;abs 0x4d12
                break;

            case MSG_STATE_PADDING:
                if (data_len) {
    4aaa:	c2 93 18 1c 	cmp.b	#0,	&0x1c18	;r3 As==00
    4aae:	03 24       	jz	$+8      	;abs 0x4ab6
                    msg_state = MSG_STATE_DATA;
    4ab0:	a2 42 1a 1c 	mov	#4,	&0x1c1a	;r2 As==10
    4ab4:	2e 3d       	jmp	$+606    	;abs 0x4d12
                } else { // done
                    msg_state = MSG_STATE_IDENTIFIER;
    4ab6:	82 43 1a 1c 	mov	#0,	&0x1c1a	;r3 As==00
    4aba:	6a 3d       	jmp	$+726    	;abs 0x4d90
                    return true;
                }
                break;

            case MSG_STATE_DATA:
                if (data_len)
    4abc:	5d 42 18 1c 	mov.b	&0x1c18,r13	;0x1c18
    4ac0:	0d 93       	cmp	#0,	r13	;r3 As==00
    4ac2:	63 25       	jz	$+712    	;abs 0x4d8a
                    cmd->data[cmd->len++] = msg[i];
    4ac4:	4e 4a       	mov.b	r10,	r14	;
    4ac6:	5e 53       	inc.b	r14		;
    4ac8:	3e f0 ff 00 	and	#255,	r14	;#0x00ff
    4acc:	da 42 2c 1c 	mov.b	&0x1c2c,7196(r10);0x1c2c, 0x1c1c
    4ad0:	1c 1c 
                if (--data_len == 0) {
    4ad2:	7d 53       	add.b	#-1,	r13	;r3 As==11
    4ad4:	c2 4d 18 1c 	mov.b	r13,	&0x1c18	;
                }
                break;

            case MSG_STATE_DATA:
                if (data_len)
                    cmd->data[cmd->len++] = msg[i];
    4ad8:	0a 4e       	mov	r14,	r10	;
                if (--data_len == 0) {
    4ada:	4d 93       	cmp.b	#0,	r13	;r3 As==00
    4adc:	1a 21       	jnz	$+566    	;abs 0x4d12
                    msg_state = MSG_STATE_IDENTIFIER;
    4ade:	82 43 1a 1c 	mov	#0,	&0x1c1a	;r3 As==00
    4ae2:	56 3d       	jmp	$+686    	;abs 0x4d90
    switch (cmd->descriptor)
    {
        case WISP_CMD_GET_PC:
        {
            msg_len = 0;
            tx_buf[msg_len++] = UART_IDENTIFIER_WISP;
    4ae4:	3c 40 3c 1c 	mov	#7228,	r12	;#0x1c3c
    4ae8:	fc 40 f1 ff 	mov.b	#65521,	0(r12)	;#0xfff1
    4aec:	00 00 
            tx_buf[msg_len++] = WISP_RSP_ADDRESS;
    4aee:	cc 43 01 00 	mov.b	#0,	1(r12)	;r3 As==00
            tx_buf[msg_len++] = sizeof(uint32_t);
    4af2:	ec 42 02 00 	mov.b	#4,	2(r12)	;r2 As==10
            tx_buf[msg_len++] = 0; // padding
    4af6:	cc 43 03 00 	mov.b	#0,	3(r12)	;r3 As==00
            tx_buf[msg_len++] = ((uintptr_t)pc >> 0) & 0xff;
    4afa:	1d 42 2e 1c 	mov	&0x1c2e,r13	;0x1c2e
    4afe:	cc 4d 04 00 	mov.b	r13,	4(r12)	;
            tx_buf[msg_len++] = ((uintptr_t)pc >> 8) & 0xff;
    4b02:	5d 0f       	rrum	#4,	r13	;
    4b04:	5d 0f       	rrum	#4,	r13	;
    4b06:	cc 4d 05 00 	mov.b	r13,	5(r12)	;
            tx_buf[msg_len++] = 0; // TODO: 20-bit ptr
    4b0a:	cc 43 06 00 	mov.b	#0,	6(r12)	;r3 As==00
            tx_buf[msg_len++] = 0;
    4b0e:	cc 43 07 00 	mov.b	#0,	7(r12)	;r3 As==00

            UART_send(tx_buf, msg_len);
    4b12:	3d 42       	mov	#8,	r13	;r2 As==11
    4b14:	b0 12 92 4f 	call	#20370		;#0x4f92
    4b18:	fc 3c       	jmp	$+506    	;abs 0x4d12
uintptr_t mem_addr_from_bytes(uint8_t *buf)
{
    return (uintptr_t)
        (((uint32_t)buf[3] << 24) |
        ((uint32_t)buf[2] << 16) |
        ((uint32_t)buf[1] << 8) |
    4b1a:	3d 40 1c 1c 	mov	#7196,	r13	;#0x1c1c
}
#endif

uintptr_t mem_addr_from_bytes(uint8_t *buf)
{
    return (uintptr_t)
    4b1e:	5e 4d 01 00 	mov.b	1(r13),	r14	;
    4b22:	47 18 0e 5e 	rpt #8 { rlax.w	r14		;
    4b26:	6c 4d       	mov.b	@r13,	r12	;
    4b28:	0c de       	bis	r14,	r12	;
    4b2a:	5d 4d 04 00 	mov.b	4(r13),	r13	;
    4b2e:	7e 40 38 00 	mov.b	#56,	r14	;#0x0038
    4b32:	4e 9d       	cmp.b	r13,	r14	;
    4b34:	01 2c       	jc	$+4      	;abs 0x4b38
    4b36:	4d 4e       	mov.b	r14,	r13	;

            if (len > max_len)
                len = max_len;

            msg_len = 0;
            tx_buf[msg_len++] = UART_IDENTIFIER_WISP;
    4b38:	3e 40 3c 1c 	mov	#7228,	r14	;#0x1c3c
    4b3c:	fe 40 f1 ff 	mov.b	#65521,	0(r14)	;#0xfff1
    4b40:	00 00 
            tx_buf[msg_len++] = WISP_RSP_MEMORY;
    4b42:	de 43 01 00 	mov.b	#1,	1(r14)	;r3 As==01
            tx_buf[msg_len++] = sizeof(uint32_t) + len;
    4b46:	4f 4d       	mov.b	r13,	r15	;
    4b48:	6f 52       	add.b	#4,	r15	;r2 As==10
    4b4a:	ce 4f 02 00 	mov.b	r15,	2(r14)	;
            tx_buf[msg_len++] = 0; // padding
    4b4e:	ce 43 03 00 	mov.b	#0,	3(r14)	;r3 As==00
            tx_buf[msg_len++] = ((uintptr_t)address >> 0) & 0xff;
    4b52:	ce 4c 04 00 	mov.b	r12,	4(r14)	;
            tx_buf[msg_len++] = ((uintptr_t)address >> 8) & 0xff;
    4b56:	0f 4c       	mov	r12,	r15	;
    4b58:	5f 0f       	rrum	#4,	r15	;
    4b5a:	5f 0f       	rrum	#4,	r15	;
    4b5c:	ce 4f 05 00 	mov.b	r15,	5(r14)	;
            tx_buf[msg_len++] = 0; // TODO: 20-bit ptr
    4b60:	ce 43 06 00 	mov.b	#0,	6(r14)	;r3 As==00
            tx_buf[msg_len++] = 0;
    4b64:	ce 43 07 00 	mov.b	#0,	7(r14)	;r3 As==00

            for (i = 0; i < len; ++i)
    4b68:	4d 93       	cmp.b	#0,	r13	;r3 As==00
    4b6a:	0d 24       	jz	$+28     	;abs 0x4b86
    4b6c:	7d 52       	add.b	#8,	r13	;r2 As==11
    4b6e:	3d f0 ff 00 	and	#255,	r13	;#0x00ff
    4b72:	3e 42       	mov	#8,	r14	;r2 As==11
                tx_buf[msg_len++] = *address++;
    4b74:	4f 4e       	mov.b	r14,	r15	;
    4b76:	5f 53       	inc.b	r15		;
    4b78:	ee 4c 3c 1c 	mov.b	@r12,	7228(r14); 0x1c3c
    4b7c:	1c 53       	inc	r12		;
    4b7e:	4e 4f       	mov.b	r15,	r14	;
            tx_buf[msg_len++] = ((uintptr_t)address >> 0) & 0xff;
            tx_buf[msg_len++] = ((uintptr_t)address >> 8) & 0xff;
            tx_buf[msg_len++] = 0; // TODO: 20-bit ptr
            tx_buf[msg_len++] = 0;

            for (i = 0; i < len; ++i)
    4b80:	4f 9d       	cmp.b	r13,	r15	;
    4b82:	f8 23       	jnz	$-14     	;abs 0x4b74
    4b84:	01 3c       	jmp	$+4      	;abs 0x4b88
            tx_buf[msg_len++] = sizeof(uint32_t) + len;
            tx_buf[msg_len++] = 0; // padding
            tx_buf[msg_len++] = ((uintptr_t)address >> 0) & 0xff;
            tx_buf[msg_len++] = ((uintptr_t)address >> 8) & 0xff;
            tx_buf[msg_len++] = 0; // TODO: 20-bit ptr
            tx_buf[msg_len++] = 0;
    4b86:	3d 42       	mov	#8,	r13	;r2 As==11

            for (i = 0; i < len; ++i)
                tx_buf[msg_len++] = *address++;

            UART_send(tx_buf, msg_len);
    4b88:	3c 40 3c 1c 	mov	#7228,	r12	;#0x1c3c
    4b8c:	b0 12 92 4f 	call	#20370		;#0x4f92
    4b90:	c0 3c       	jmp	$+386    	;abs 0x4d12
uintptr_t mem_addr_from_bytes(uint8_t *buf)
{
    return (uintptr_t)
        (((uint32_t)buf[3] << 24) |
        ((uint32_t)buf[2] << 16) |
        ((uint32_t)buf[1] << 8) |
    4b92:	3c 40 1c 1c 	mov	#7196,	r12	;#0x1c1c
}
#endif

uintptr_t mem_addr_from_bytes(uint8_t *buf)
{
    return (uintptr_t)
    4b96:	5b 4c 01 00 	mov.b	1(r12),	r11	;
    4b9a:	47 18 0b 5b 	rpt #8 { rlax.w	r11		;
    4b9e:	6d 4c       	mov.b	@r12,	r13	;
    4ba0:	0b dd       	bis	r13,	r11	;
        case WISP_CMD_WRITE_MEM:
        {
            // TODO: assert(msg->len >= 5)

            offset = 0;
            address = (uint8_t *)mem_addr_from_bytes(&cmd->data[offset]); // TODO: 20-bit ptr
    4ba2:	0d 4b       	mov	r11,	r13	;
            offset += sizeof(uint32_t);
            len = cmd->data[offset];
    4ba4:	5c 4c 04 00 	mov.b	4(r12),	r12	;
            offset += sizeof(uint8_t);
            uint8_t *value = &cmd->data[offset];

            for (i =  0; i < len; ++i) {
    4ba8:	0c 93       	cmp	#0,	r12	;r3 As==00
    4baa:	11 24       	jz	$+36     	;abs 0x4bce
    4bac:	0d 48       	mov	r8,	r13	;
    4bae:	4f 4c       	mov.b	r12,	r15	;
    4bb0:	7f 53       	add.b	#-1,	r15	;r3 As==11
    4bb2:	3f f0 ff 00 	and	#255,	r15	;#0x00ff
    4bb6:	1f 53       	inc	r15		;
    4bb8:	0e 4f       	mov	r15,	r14	;
    4bba:	0e 5b       	add	r11,	r14	;
    4bbc:	0c 4b       	mov	r11,	r12	;
                *address = *value++;
    4bbe:	ec 4d 00 00 	mov.b	@r13,	0(r12)	;
                address++;
    4bc2:	1c 53       	inc	r12		;
    4bc4:	1d 53       	inc	r13		;
            offset += sizeof(uint32_t);
            len = cmd->data[offset];
            offset += sizeof(uint8_t);
            uint8_t *value = &cmd->data[offset];

            for (i =  0; i < len; ++i) {
    4bc6:	0c 9e       	cmp	r14,	r12	;
    4bc8:	fa 23       	jnz	$-10     	;abs 0x4bbe
    4bca:	0d 4b       	mov	r11,	r13	;
    4bcc:	0d 5f       	add	r15,	r13	;
                *address = *value++;
                address++;
            }

            msg_len = 0;
            tx_buf[msg_len++] = UART_IDENTIFIER_WISP;
    4bce:	3c 40 3c 1c 	mov	#7228,	r12	;#0x1c3c
    4bd2:	fc 40 f1 ff 	mov.b	#65521,	0(r12)	;#0xfff1
    4bd6:	00 00 
            tx_buf[msg_len++] = WISP_RSP_MEMORY;
    4bd8:	dc 43 01 00 	mov.b	#1,	1(r12)	;r3 As==01
            tx_buf[msg_len++] = sizeof(uint32_t) + sizeof(uint8_t);
    4bdc:	fc 40 05 00 	mov.b	#5,	2(r12)	;
    4be0:	02 00 
            tx_buf[msg_len++] = 0; // padding
    4be2:	cc 43 03 00 	mov.b	#0,	3(r12)	;r3 As==00
            tx_buf[msg_len++] = ((uintptr_t)address >> 0) & 0xff;
    4be6:	cc 4d 04 00 	mov.b	r13,	4(r12)	;
            tx_buf[msg_len++] = ((uintptr_t)address >> 8) & 0xff;
    4bea:	0e 4d       	mov	r13,	r14	;
    4bec:	5e 0f       	rrum	#4,	r14	;
    4bee:	5e 0f       	rrum	#4,	r14	;
    4bf0:	cc 4e 05 00 	mov.b	r14,	5(r12)	;
            tx_buf[msg_len++] = 0; // TODO: 20-bit ptr
    4bf4:	cc 43 06 00 	mov.b	#0,	6(r12)	;r3 As==00
            tx_buf[msg_len++] = 0;
    4bf8:	cc 43 07 00 	mov.b	#0,	7(r12)	;r3 As==00
            tx_buf[msg_len++] = *address;
    4bfc:	ec 4d 08 00 	mov.b	@r13,	8(r12)	;

            UART_send(tx_buf, msg_len);
    4c00:	3d 40 09 00 	mov	#9,	r13	;
    4c04:	b0 12 92 4f 	call	#20370		;#0x4f92
    4c08:	84 3c       	jmp	$+266    	;abs 0x4d12
            break;
        }
        case WISP_CMD_BREAKPOINT:
        {
            uint8_t index = cmd->data[0];
    4c0a:	3c 40 1c 1c 	mov	#7196,	r12	;#0x1c1c
    4c0e:	6d 4c       	mov.b	@r12,	r13	;
            bool enable = cmd->data[1];

            if (enable)
    4c10:	cc 93 01 00 	cmp.b	#0,	1(r12)	;r3 As==00
    4c14:	09 24       	jz	$+20     	;abs 0x4c28
                _libedb_internal_breakpoints |= 1 << index;
    4c16:	16 42 50 44 	mov	&0x4450,r6	;0x4450
    4c1a:	1c 43       	mov	#1,	r12	;r3 As==01
    4c1c:	b0 12 68 51 	call	#20840		;#0x5168
    4c20:	0c d6       	bis	r6,	r12	;
    4c22:	82 4c 50 44 	mov	r12,	&0x4450	;
    4c26:	08 3c       	jmp	$+18     	;abs 0x4c38
            else
                _libedb_internal_breakpoints &= ~(1 << index);
    4c28:	16 42 50 44 	mov	&0x4450,r6	;0x4450
    4c2c:	1c 43       	mov	#1,	r12	;r3 As==01
    4c2e:	b0 12 68 51 	call	#20840		;#0x5168
    4c32:	06 cc       	bic	r12,	r6	;
    4c34:	82 46 50 44 	mov	r6,	&0x4450	;

            msg_len = 0;
            tx_buf[msg_len++] = UART_IDENTIFIER_WISP;
    4c38:	3c 40 3c 1c 	mov	#7228,	r12	;#0x1c3c
    4c3c:	fc 40 f1 ff 	mov.b	#65521,	0(r12)	;#0xfff1
    4c40:	00 00 
            tx_buf[msg_len++] = WISP_RSP_BREAKPOINT;
    4c42:	ec 43 01 00 	mov.b	#2,	1(r12)	;r3 As==10
            tx_buf[msg_len++] = 0; // length
    4c46:	cc 43 02 00 	mov.b	#0,	2(r12)	;r3 As==00
            tx_buf[msg_len++] = 0; // padding
    4c4a:	cc 43 03 00 	mov.b	#0,	3(r12)	;r3 As==00

            UART_send(tx_buf, msg_len);
    4c4e:	2d 42       	mov	#4,	r13	;r2 As==10
    4c50:	b0 12 92 4f 	call	#20370		;#0x4f92
    4c54:	5e 3c       	jmp	$+190    	;abs 0x4d12
            break;
        }
        case WISP_CMD_EXIT_ACTIVE_DEBUG:
            exit_debug_mode();
    4c56:	b0 12 fe 48 	call	#18686		;#0x48fe
            debug_flags |= DEBUG_RETURN; // return from debug_main
    4c5a:	92 d3 36 1c 	bis	#1,	&0x1c36	;r3 As==01
    4c5e:	59 3c       	jmp	$+180    	;abs 0x4d12
            break;
        
        case WISP_CMD_GET_INTERRUPT_CONTEXT:
            msg_len = 0;
            tx_buf[msg_len++] = UART_IDENTIFIER_WISP;
    4c60:	3c 40 3c 1c 	mov	#7228,	r12	;#0x1c3c
    4c64:	fc 40 f1 ff 	mov.b	#65521,	0(r12)	;#0xfff1
    4c68:	00 00 
            tx_buf[msg_len++] = WISP_RSP_INTERRUPT_CONTEXT;
    4c6a:	fc 40 03 00 	mov.b	#3,	1(r12)	;
    4c6e:	01 00 
            tx_buf[msg_len++] = 3 * sizeof(uint8_t);
    4c70:	fc 40 03 00 	mov.b	#3,	2(r12)	;
    4c74:	02 00 
            tx_buf[msg_len++] = 0; // padding
    4c76:	cc 43 03 00 	mov.b	#0,	3(r12)	;r3 As==00
            tx_buf[msg_len++] = interrupt_context.type;
    4c7a:	3d 40 30 1c 	mov	#7216,	r13	;#0x1c30
    4c7e:	ec 4d 04 00 	mov.b	@r13,	4(r12)	;
            tx_buf[msg_len++] = interrupt_context.id;
    4c82:	1d 4d 02 00 	mov	2(r13),	r13	;
    4c86:	cc 4d 05 00 	mov.b	r13,	5(r12)	;
            tx_buf[msg_len++] = interrupt_context.id >> 8;
    4c8a:	5d 0f       	rrum	#4,	r13	;
    4c8c:	5d 0f       	rrum	#4,	r13	;
    4c8e:	cc 4d 06 00 	mov.b	r13,	6(r12)	;

            UART_send(tx_buf, msg_len);
    4c92:	3d 40 07 00 	mov	#7,	r13	;
    4c96:	b0 12 92 4f 	call	#20370		;#0x4f92
    4c9a:	3b 3c       	jmp	$+120    	;abs 0x4d12
            break;

        case WISP_CMD_SERIAL_ECHO: {
            uint8_t echo_value = cmd->data[0];
    4c9c:	56 42 1c 1c 	mov.b	&0x1c1c,r6	;0x1c1c

            mask_debugger_signal();
    4ca0:	b0 12 3a 48 	call	#18490		;#0x483a
#ifdef CONFIG_ENABLE_TARGET_SIDE_DEBUG_MODE
            signal_debugger_with_data(echo_value);
    4ca4:	4c 46       	mov.b	r6,	r12	;
    4ca6:	b0 12 42 48 	call	#18498		;#0x4842
#else
            (void)echo_value;
            signal_debugger();
#endif
            unmask_debugger_signal();
    4caa:	b0 12 26 48 	call	#18470		;#0x4826

            msg_len = 0;
            tx_buf[msg_len++] = UART_IDENTIFIER_WISP;
    4cae:	3c 40 3c 1c 	mov	#7228,	r12	;#0x1c3c
    4cb2:	fc 40 f1 ff 	mov.b	#65521,	0(r12)	;#0xfff1
    4cb6:	00 00 
            tx_buf[msg_len++] = WISP_RSP_SERIAL_ECHO;
    4cb8:	ec 42 01 00 	mov.b	#4,	1(r12)	;r2 As==10
            tx_buf[msg_len++] = 0; // length
    4cbc:	cc 43 02 00 	mov.b	#0,	2(r12)	;r3 As==00
            tx_buf[msg_len++] = 0; // padding
    4cc0:	cc 43 03 00 	mov.b	#0,	3(r12)	;r3 As==00

            UART_send(tx_buf, msg_len);
    4cc4:	2d 42       	mov	#4,	r13	;r2 As==10
    4cc6:	b0 12 92 4f 	call	#20370		;#0x4f92
    4cca:	23 3c       	jmp	$+72     	;abs 0x4d12
            break;
        }

        case WISP_CMD_GET_APP_OUTPUT: {
            unsigned len = TX_BUF_SIZE - UART_MSG_HEADER_SIZE;
    4ccc:	b1 40 3c 00 	mov	#60,	0(r1)	;#0x003c
    4cd0:	00 00 
            unsigned len_field_offset;

            msg_len = 0;
            tx_buf[msg_len++] = UART_IDENTIFIER_WISP;
    4cd2:	3c 40 3c 1c 	mov	#7228,	r12	;#0x1c3c
    4cd6:	fc 40 f1 ff 	mov.b	#65521,	0(r12)	;#0xfff1
    4cda:	00 00 
            tx_buf[msg_len++] = WISP_RSP_APP_OUTPUT;
    4cdc:	fc 40 06 00 	mov.b	#6,	1(r12)	;
    4ce0:	01 00 
            len_field_offset = msg_len;
            tx_buf[msg_len++] = 0; // length: to be filled out shortly
    4ce2:	cc 43 02 00 	mov.b	#0,	2(r12)	;r3 As==00
            tx_buf[msg_len++] = 0; // padding
    4ce6:	cc 43 03 00 	mov.b	#0,	3(r12)	;r3 As==00

            if (app_output_cb != NULL)
    4cea:	1e 42 3a 1c 	mov	&0x1c3a,r14	;0x1c3a
    4cee:	0e 93       	cmp	#0,	r14	;r3 As==00
    4cf0:	04 24       	jz	$+10     	;abs 0x4cfa
                app_output_cb(tx_buf + msg_len, &len);
    4cf2:	0c 47       	mov	r7,	r12	;
    4cf4:	0d 41       	mov	r1,	r13	;
    4cf6:	8e 12       	call	r14		;
    4cf8:	02 3c       	jmp	$+6      	;abs 0x4cfe
            else
                len = 0;
    4cfa:	81 43 00 00 	mov	#0,	0(r1)	;r3 As==00

            msg_len += len;
    4cfe:	6d 41       	mov.b	@r1,	r13	;
            tx_buf[len_field_offset] = len;
    4d00:	3c 40 3c 1c 	mov	#7228,	r12	;#0x1c3c
    4d04:	cc 4d 02 00 	mov.b	r13,	2(r12)	;
            if (app_output_cb != NULL)
                app_output_cb(tx_buf + msg_len, &len);
            else
                len = 0;

            msg_len += len;
    4d08:	6d 52       	add.b	#4,	r13	;r2 As==10
            tx_buf[len_field_offset] = len;

            UART_send(tx_buf, msg_len);
    4d0a:	3d f0 ff 00 	and	#255,	r13	;#0x00ff
    4d0e:	b0 12 92 4f 	call	#20370		;#0x4f92
        UART_receive(uartRxBuf, CHUNK_BYTES);
        if (parse_cmd(&cmd, uartRxBuf, CHUNK_BYTES)) {
            execute_cmd(&cmd);
        }

        if(debug_flags & DEBUG_RETURN) {
    4d12:	1c 42 36 1c 	mov	&0x1c36,r12	;0x1c36
    4d16:	1c b3       	bit	#1,	r12	;r3 As==01
    4d18:	9b 26       	jz	$-712    	;abs 0x4a50
            debug_flags &= ~DEBUG_RETURN;
    4d1a:	1c c3       	bic	#1,	r12	;r3 As==01
    4d1c:	82 4c 36 1c 	mov	r12,	&0x1c36	;
{
#ifdef CONFIG_STATE_PINS
    uint8_t port_value;
#endif

    state = new_state;
    4d20:	a2 43 38 1c 	mov	#2,	&0x1c38	;r3 As==10

            if (interrupt_context.features & DEBUG_MODE_INTERACTIVE) {
                debug_main();
                // debug loop exited (due to UART cmd to exit debugger), release debugger
                set_state(STATE_SUSPENDED); // sleep and wait for debugger to restore energy
                signal_debugger(); // tell debugger we have shutdown UART
    4d24:	b0 12 06 48 	call	#18438		;#0x4806
    4d28:	03 3c       	jmp	$+8      	;abs 0x4d30
{
#ifdef CONFIG_STATE_PINS
    uint8_t port_value;
#endif

    state = new_state;
    4d2a:	82 43 38 1c 	mov	#0,	&0x1c38	;r3 As==00
    4d2e:	24 3c       	jmp	$+74     	;abs 0x4d78
            mask_debugger_signal();

            handle_debugger_signal();

            /* Power state manipulation is required to be inside the ISR */
            switch (state) {
    4d30:	1c 42 38 1c 	mov	&0x1c38,r12	;0x1c38
    4d34:	1c 93       	cmp	#1,	r12	;r3 As==01
    4d36:	05 24       	jz	$+12     	;abs 0x4d42
    4d38:	0c 93       	cmp	#0,	r12	;r3 As==00
    4d3a:	1e 24       	jz	$+62     	;abs 0x4d78
    4d3c:	2c 93       	cmp	#2,	r12	;r3 As==10
    4d3e:	0c 24       	jz	$+26     	;abs 0x4d58
    4d40:	41 3c       	jmp	$+132    	;abs 0x4dc4

                    // We clear the sleep flags corresponding to the sleep on request
                    // to enter debug mode here, and do not touch them in the DEBUG->SUSPENDED
                    // transition because when upon exiting from the guard we will
                    // not be asleep.
                    if (debug_flags & DEBUG_REQUESTED_BY_TARGET) {
    4d42:	1c 42 36 1c 	mov	&0x1c36,r12	;0x1c36
    4d46:	2c b3       	bit	#2,	r12	;r3 As==10
    4d48:	3d 24       	jz	$+124    	;abs 0x4dc4
                        debug_flags &= ~DEBUG_REQUESTED_BY_TARGET;
    4d4a:	2c c3       	bic	#2,	r12	;r3 As==10
    4d4c:	82 4c 36 1c 	mov	r12,	&0x1c36	;
                        __bic_SR_register_on_exit(DEBUG_MODE_REQUEST_WAIT_STATE_BITS);
    4d50:	b1 c0 10 00 	bic	#16,	26(r1)	;#0x0010, 0x001a
    4d54:	1a 00 
    4d56:	36 3c       	jmp	$+110    	;abs 0x4dc4
                case STATE_SUSPENDED: /* DEBUG->SUSPENDED just happened */
                    // Before unmasking the signal interrupt, disable interrupts
                    // globally in order to not let the next signal interrupt happen
                    // until we are asleep. Unmasking won't let the interrupt
                    // call the ISR.
                    __disable_interrupt();
    4d58:	32 c2       	dint			
                    unmask_debugger_signal();
    4d5a:	b0 12 26 48 	call	#18470		;#0x4826

                    __bis_SR_register(DEBUG_MODE_EXIT_WAIT_STATE_BITS | GIE); // go to sleep
    4d5e:	32 d0 18 00 	bis	#24,	r2	;#0x0018
                    // asleep in request_debug_mode(). In order to wakeup from
                    // that sleep upon returning from this outer ISR (SUSPENDED
                    // case), we need to clear the sleep bits (otherwise, the
                    // MCU will go to sleep when the SR bits are automatically
                    // restored upon return from interrupt).
                    if (debug_flags & DEBUG_REQUESTED_BY_TARGET) {
    4d62:	1c 42 36 1c 	mov	&0x1c36,r12	;0x1c36
    4d66:	2c b3       	bit	#2,	r12	;r3 As==10
    4d68:	2d 24       	jz	$+92     	;abs 0x4dc4
                        debug_flags &= ~DEBUG_REQUESTED_BY_TARGET;
    4d6a:	2c c3       	bic	#2,	r12	;r3 As==10
    4d6c:	82 4c 36 1c 	mov	r12,	&0x1c36	;
                        __bic_SR_register_on_exit(DEBUG_MODE_REQUEST_WAIT_STATE_BITS);
    4d70:	b1 c0 10 00 	bic	#16,	26(r1)	;#0x0010, 0x001a
    4d74:	1a 00 
    4d76:	26 3c       	jmp	$+78     	;abs 0x4dc4

                    // Before unmasking the signal interrupt, disable
                    // interrupts globally in order to not let the next signal
                    // interrupt happen until either we return from this ISR.
                    // Unmasking won't let the interrupt call the ISR.
                    __disable_interrupt();
    4d78:	32 c2       	dint			
                    unmask_debugger_signal();
    4d7a:	b0 12 26 48 	call	#18470		;#0x4826
                    // We were sleeping on the suspend line in the case above when
                    // the current ISR got called, so before returning, clear the
                    // sleep flags (otherwise, we would go back to sleep after
                    // returning from this ISR because the SR flags prior to the ISR
                    // call are automatically restored upon return from ISR).
                    __bic_SR_register_on_exit(DEBUG_MODE_EXIT_WAIT_STATE_BITS);
    4d7e:	b1 c0 10 00 	bic	#16,	26(r1)	;#0x0010, 0x001a
    4d82:	1a 00 
                    // before unmasking the signal interrupt). The adding the
                    // GIE flag here re-enables the interrupts only after
                    // return from the current ISR, so that the next signal ISR
                    // (unrelated to current enter-exit debug mode sequence)
                    // doesn't get nested within the current one.
                    __bis_SR_register_on_exit(GIE);
    4d84:	b1 d2 1a 00 	bis	#8,	26(r1)	;r2 As==11, 0x001a

                    // Once we return from this inner ISR we end up in the outer ISR
                    break;
    4d88:	1d 3c       	jmp	$+60     	;abs 0x4dc4
                break;

            case MSG_STATE_DATA:
                if (data_len)
                    cmd->data[cmd->len++] = msg[i];
                if (--data_len == 0) {
    4d8a:	f2 43 18 1c 	mov.b	#-1,	&0x1c18	;r3 As==11
    4d8e:	c1 3f       	jmp	$-124    	;abs 0x4d12
    uint8_t msg_len;
    uint8_t *address;
    uint8_t offset;
    uint8_t len;
    uint8_t i;
    switch (cmd->descriptor)
    4d90:	29 92       	cmp	#4,	r9	;r2 As==10
    4d92:	ff 26       	jz	$-512    	;abs 0x4b92
    4d94:	6c 42       	mov.b	#4,	r12	;r2 As==10
    4d96:	4c 99       	cmp.b	r9,	r12	;
    4d98:	08 28       	jnc	$+18     	;abs 0x4daa
    4d9a:	29 93       	cmp	#2,	r9	;r3 As==10
    4d9c:	5c 27       	jz	$-326    	;abs 0x4c56
    4d9e:	6d 43       	mov.b	#2,	r13	;r3 As==10
    4da0:	4d 99       	cmp.b	r9,	r13	;
    4da2:	bb 2a       	jnc	$-648    	;abs 0x4b1a
    4da4:	09 93       	cmp	#0,	r9	;r3 As==00
    4da6:	9e 26       	jz	$-706    	;abs 0x4ae4
    4da8:	b4 3f       	jmp	$-150    	;abs 0x4d12
    4daa:	39 90 06 00 	cmp	#6,	r9	;
    4dae:	58 27       	jz	$-334    	;abs 0x4c60
    4db0:	7e 40 05 00 	mov.b	#5,	r14	;
    4db4:	4e 99       	cmp.b	r9,	r14	;
    4db6:	29 2f       	jc	$-428    	;abs 0x4c0a
    4db8:	39 90 07 00 	cmp	#7,	r9	;
    4dbc:	6f 27       	jz	$-288    	;abs 0x4c9c
    4dbe:	39 92       	cmp	#8,	r9	;r2 As==11
    4dc0:	85 27       	jz	$-244    	;abs 0x4ccc
    4dc2:	a7 3f       	jmp	$-176    	;abs 0x4d12
                default: /* nothing to do */
                    break;
            }
            break;
	}
}
    4dc4:	21 53       	incd	r1		;
    4dc6:	b4 17       	popm	#12,	r15	;16-bit words
    4dc8:	00 13       	reti			

00004dca <puts_base>:

    return c;
}

static int puts_base(const char *ptr, bool newline)
{
    4dca:	4a 15       	pushm	#5,	r10	;16-bit words
    4dcc:	0a 4c       	mov	r12,	r10	;
    4dce:	46 4d       	mov.b	r13,	r6	;
    unsigned msg_len;

    // Since puts always includes a '\n', we always flush
    // Send message chunk by chunk, include the current buffer contents
    while (*ptr != '\0') {
    4dd0:	cc 93 00 00 	cmp.b	#0,	0(r12)	;r3 As==00
    4dd4:	2a 20       	jnz	$+86     	;abs 0x4e2a
    4dd6:	40 3c       	jmp	$+130    	;abs 0x4e58
        while (*ptr != '\0' && stdio_payload_len < IO_PAYLOAD_SIZE - 1) {
            msg_payload[stdio_payload_len] = *ptr++;
    4dd8:	1a 53       	inc	r10		;
    4dda:	ce 4f 82 1c 	mov.b	r15,	7298(r14); 0x1c82
            stdio_payload_len++;
    4dde:	1e 53       	inc	r14		;
    unsigned msg_len;

    // Since puts always includes a '\n', we always flush
    // Send message chunk by chunk, include the current buffer contents
    while (*ptr != '\0') {
        while (*ptr != '\0' && stdio_payload_len < IO_PAYLOAD_SIZE - 1) {
    4de0:	6f 4a       	mov.b	@r10,	r15	;
    4de2:	0f 93       	cmp	#0,	r15	;r3 As==00
    4de4:	34 24       	jz	$+106    	;abs 0x4e4e
    4de6:	3e 90 2f 00 	cmp	#47,	r14	;#0x002f
    4dea:	f6 23       	jnz	$-18     	;abs 0x4dd8
    4dec:	2c 3c       	jmp	$+90     	;abs 0x4e46
            msg_payload[stdio_payload_len] = *ptr++;
            stdio_payload_len++;
        }
        if (*ptr == '\0' && newline)
            msg_payload[stdio_payload_len++] = '\n'; // puts semantics
    4dee:	1c 42 7c 1c 	mov	&0x1c7c,r12	;0x1c7c
    4df2:	0d 4c       	mov	r12,	r13	;
    4df4:	1d 53       	inc	r13		;
    4df6:	82 4d 7c 1c 	mov	r13,	&0x1c7c	;
    4dfa:	fc 40 0a 00 	mov.b	#10,	7298(r12);#0x000a, 0x1c82
    4dfe:	82 1c 

        msg_len = 0;
        msg_buf[msg_len++] = UART_IDENTIFIER_WISP;
    4e00:	c9 48 00 00 	mov.b	r8,	0(r9)	;
        msg_buf[msg_len++] = WISP_RSP_STDIO;
    4e04:	f9 40 05 00 	mov.b	#5,	1(r9)	;
    4e08:	01 00 
        msg_buf[msg_len++] = stdio_payload_len;
    4e0a:	1d 42 7c 1c 	mov	&0x1c7c,r13	;0x1c7c
    4e0e:	c9 4d 02 00 	mov.b	r13,	2(r9)	;
        msg_buf[msg_len++] = 0; // padding
    4e12:	c9 43 03 00 	mov.b	#0,	3(r9)	;r3 As==00

        msg_len += stdio_payload_len;

        UART_send(msg_buf, msg_len);
    4e16:	0c 49       	mov	r9,	r12	;
    4e18:	2d 52       	add	#4,	r13	;r2 As==10
    4e1a:	b0 12 92 4f 	call	#20370		;#0x4f92

        stdio_payload_len = 0;
    4e1e:	82 43 7c 1c 	mov	#0,	&0x1c7c	;r3 As==00
{
    unsigned msg_len;

    // Since puts always includes a '\n', we always flush
    // Send message chunk by chunk, include the current buffer contents
    while (*ptr != '\0') {
    4e22:	ca 93 00 00 	cmp.b	#0,	0(r10)	;r3 As==00
    4e26:	07 20       	jnz	$+16     	;abs 0x4e36
    4e28:	17 3c       	jmp	$+48     	;abs 0x4e58
        while (*ptr != '\0' && stdio_payload_len < IO_PAYLOAD_SIZE - 1) {
    4e2a:	37 40 2e 00 	mov	#46,	r7	;#0x002e
        }
        if (*ptr == '\0' && newline)
            msg_payload[stdio_payload_len++] = '\n'; // puts semantics

        msg_len = 0;
        msg_buf[msg_len++] = UART_IDENTIFIER_WISP;
    4e2e:	39 40 7e 1c 	mov	#7294,	r9	;#0x1c7e
    4e32:	78 40 f1 ff 	mov.b	#65521,	r8	;#0xfff1
    unsigned msg_len;

    // Since puts always includes a '\n', we always flush
    // Send message chunk by chunk, include the current buffer contents
    while (*ptr != '\0') {
        while (*ptr != '\0' && stdio_payload_len < IO_PAYLOAD_SIZE - 1) {
    4e36:	6f 4a       	mov.b	@r10,	r15	;
    4e38:	0f 93       	cmp	#0,	r15	;r3 As==00
    4e3a:	0b 24       	jz	$+24     	;abs 0x4e52
    4e3c:	1e 42 7c 1c 	mov	&0x1c7c,r14	;0x1c7c
    4e40:	07 9e       	cmp	r14,	r7	;
    4e42:	ca 2f       	jc	$-106    	;abs 0x4dd8
    4e44:	dd 3f       	jmp	$-68     	;abs 0x4e00
    4e46:	b2 40 2f 00 	mov	#47,	&0x1c7c	;#0x002f
    4e4a:	7c 1c 
    4e4c:	d9 3f       	jmp	$-76     	;abs 0x4e00
    4e4e:	82 4e 7c 1c 	mov	r14,	&0x1c7c	;
            msg_payload[stdio_payload_len] = *ptr++;
            stdio_payload_len++;
        }
        if (*ptr == '\0' && newline)
    4e52:	06 93       	cmp	#0,	r6	;r3 As==00
    4e54:	cc 23       	jnz	$-102    	;abs 0x4dee
    4e56:	d4 3f       	jmp	$-86     	;abs 0x4e00

        stdio_payload_len = 0;
    }

    return 0;
}
    4e58:	0c 43       	clr	r12		;
    4e5a:	46 17       	popm	#5,	r10	;16-bit words
    4e5c:	30 41       	ret			

00004e5e <io_putchar>:
static uint8_t *msg_payload = &msg_buf[UART_MSG_HEADER_SIZE];

static unsigned stdio_payload_len = 0;

int io_putchar(int c)
{
    4e5e:	0a 15       	pushm	#1,	r10	;16-bit words
    4e60:	0a 4c       	mov	r12,	r10	;
    unsigned msg_len = 0;
    
    msg_payload[stdio_payload_len++] = (uint8_t)c;
    4e62:	1d 42 7c 1c 	mov	&0x1c7c,r13	;0x1c7c
    4e66:	0e 4d       	mov	r13,	r14	;
    4e68:	1e 53       	inc	r14		;
    4e6a:	82 4e 7c 1c 	mov	r14,	&0x1c7c	;
    4e6e:	cd 4c 82 1c 	mov.b	r12,	7298(r13); 0x1c82

    if (stdio_payload_len == IO_PAYLOAD_SIZE || c == '\n') { // flush on new line or full
    4e72:	3e 90 30 00 	cmp	#48,	r14	;#0x0030
    4e76:	03 24       	jz	$+8      	;abs 0x4e7e
    4e78:	3c 90 0a 00 	cmp	#10,	r12	;#0x000a
    4e7c:	12 20       	jnz	$+38     	;abs 0x4ea2

        msg_buf[msg_len++] = UART_IDENTIFIER_WISP;
    4e7e:	3c 40 7e 1c 	mov	#7294,	r12	;#0x1c7e
    4e82:	fc 40 f1 ff 	mov.b	#65521,	0(r12)	;#0xfff1
    4e86:	00 00 
        msg_buf[msg_len++] = WISP_RSP_STDIO;
    4e88:	fc 40 05 00 	mov.b	#5,	1(r12)	;
    4e8c:	01 00 
        msg_buf[msg_len++] = stdio_payload_len;
    4e8e:	cc 4e 02 00 	mov.b	r14,	2(r12)	;
        msg_buf[msg_len++] = 0; // padding
    4e92:	cc 43 03 00 	mov.b	#0,	3(r12)	;r3 As==00

        msg_len += stdio_payload_len;

        UART_send(msg_buf, msg_len);
    4e96:	3d 50 05 00 	add	#5,	r13	;
    4e9a:	b0 12 92 4f 	call	#20370		;#0x4f92

        stdio_payload_len = 0;
    4e9e:	82 43 7c 1c 	mov	#0,	&0x1c7c	;r3 As==00
    }

    return c;
}
    4ea2:	0c 4a       	mov	r10,	r12	;
    4ea4:	0a 17       	popm	#1,	r10	;16-bit words
    4ea6:	30 41       	ret			

00004ea8 <io_puts_no_newline>:
    return 0;
}

int io_puts_no_newline(const char *ptr)
{
    return puts_base(ptr, false /* newline */);
    4ea8:	4d 43       	clr.b	r13		;
    4eaa:	b0 12 ca 4d 	call	#19914		;#0x4dca
}
    4eae:	30 41       	ret			

00004eb0 <io_puts>:

int io_puts(const char *ptr)
{
    return puts_base(ptr, true /* newline */);
    4eb0:	5d 43       	mov.b	#1,	r13	;r3 As==01
    4eb2:	b0 12 ca 4d 	call	#19914		;#0x4dca
}
    4eb6:	30 41       	ret			

00004eb8 <edb_output_app_data>:
void edb_output_app_data(const uint8_t *ptr, unsigned len)
{
    unsigned msg_len, payload_len = 0;
    unsigned data_len = len;

    while (data_len-- && payload_len < IO_PAYLOAD_SIZE - 1) {
    4eb8:	0d 93       	cmp	#0,	r13	;r3 As==00
    4eba:	14 24       	jz	$+42     	;abs 0x4ee4
    4ebc:	3e 40 82 1c 	mov	#7298,	r14	;#0x1c82
    4ec0:	3d 50 03 00 	add	#3,	r13	;
    4ec4:	0b 4d       	mov	r13,	r11	;
    4ec6:	3b 50 7e 1c 	add	#7294,	r11	;#0x1c7e
    4eca:	0d 43       	clr	r13		;
    4ecc:	0f 4c       	mov	r12,	r15	;
    4ece:	0f 5d       	add	r13,	r15	;
        msg_payload[payload_len] = *ptr++;
    4ed0:	ee 4f 00 00 	mov.b	@r15,	0(r14)	;
        payload_len++;
    4ed4:	1d 53       	inc	r13		;
void edb_output_app_data(const uint8_t *ptr, unsigned len)
{
    unsigned msg_len, payload_len = 0;
    unsigned data_len = len;

    while (data_len-- && payload_len < IO_PAYLOAD_SIZE - 1) {
    4ed6:	0e 9b       	cmp	r11,	r14	;
    4ed8:	06 24       	jz	$+14     	;abs 0x4ee6
    4eda:	1e 53       	inc	r14		;
    4edc:	3d 90 2f 00 	cmp	#47,	r13	;#0x002f
    4ee0:	f5 23       	jnz	$-20     	;abs 0x4ecc
    4ee2:	01 3c       	jmp	$+4      	;abs 0x4ee6
    return puts_base(ptr, true /* newline */);
}

void edb_output_app_data(const uint8_t *ptr, unsigned len)
{
    unsigned msg_len, payload_len = 0;
    4ee4:	0d 43       	clr	r13		;
        msg_payload[payload_len] = *ptr++;
        payload_len++;
    }

    msg_len = 0;
    msg_buf[msg_len++] = UART_IDENTIFIER_WISP;
    4ee6:	3c 40 7e 1c 	mov	#7294,	r12	;#0x1c7e
    4eea:	fc 40 f1 ff 	mov.b	#65521,	0(r12)	;#0xfff1
    4eee:	00 00 
    msg_buf[msg_len++] = WISP_RSP_APP_OUTPUT;
    4ef0:	fc 40 06 00 	mov.b	#6,	1(r12)	;
    4ef4:	01 00 
    msg_buf[msg_len++] = payload_len;
    4ef6:	cc 4d 02 00 	mov.b	r13,	2(r12)	;
    msg_buf[msg_len++] = 0; // padding
    4efa:	cc 43 03 00 	mov.b	#0,	3(r12)	;r3 As==00

    msg_len += payload_len;

    UART_send(msg_buf, msg_len);
    4efe:	2d 52       	add	#4,	r13	;r2 As==10
    4f00:	b0 12 92 4f 	call	#20370		;#0x4f92
}
    4f04:	30 41       	ret			

00004f06 <UART_init>:
 * @todo Currently assumes an 8MHz SMCLK. Make robust to clock frequency changes by using 32k ACLK.
 */
void UART_init(void) {

    // Configure USCI_A0 for UART mode
    UCA0CTLW0 = UCSWRST;                      // Put eUSCI in reset
    4f06:	92 43 c0 05 	mov	#1,	&0x05c0	;r3 As==01
    UCA0CTLW0 |= UCSSEL__SMCLK;               // CLK = SMCLK
    4f0a:	b2 d0 80 00 	bis	#128,	&0x05c0	;#0x0080
    4f0e:	c0 05 
    UCA0BR1 = 0;
    UCA0MCTLW = UCOS16 | UCBRF_2 | (0xBB << 8);
#endif // UART_BAUDRATE
#elif UART_CLOCK == 8000000
#if UART_BAUDRATE == 115200
    UCA0BR0 = 4;
    4f10:	e2 42 c6 05 	mov.b	#4,	&0x05c6	;r2 As==10
    UCA0BR1 = 0;
    4f14:	c2 43 c7 05 	mov.b	#0,	&0x05c7	;r3 As==00
    UCA0MCTLW = UCOS16 | UCBRF_4 | (0x55 << 8);
    4f18:	b2 40 41 55 	mov	#21825,	&0x05c8	;#0x5541
    4f1c:	c8 05 
#endif // UART_BAUDRATE
#endif // UART_CLOCK

#if defined(__MSP430FR5969__) || defined(__MSP430FR5949__)
    PUART_TXSEL0 &= ~PIN_UART_TX; // TX pin to UART module
    4f1e:	d2 c3 0b 02 	bic.b	#1,	&0x020b	;r3 As==01
    PUART_TXSEL1 |= PIN_UART_TX;
    4f22:	d2 d3 0d 02 	bis.b	#1,	&0x020d	;r3 As==01

    PUART_RXSEL0 &= ~PIN_UART_RX; // RX pin to UART module
    4f26:	e2 c3 0b 02 	bic.b	#2,	&0x020b	;r3 As==10
    PUART_RXSEL1 |= PIN_UART_RX;
    4f2a:	e2 d3 0d 02 	bis.b	#2,	&0x020d	;r3 As==10
    PUART_RXSEL1 &= ~PIN_UART_RX;
#else
#error MCU not supported
#endif

    UCA0CTLW0 &= ~UCSWRST;                    // Initialize eUSCI
    4f2e:	92 c3 c0 05 	bic	#1,	&0x05c0	;r3 As==01

    // Initialize module state
    UART_SM.isTxBusy = FALSE;
    4f32:	3c 40 b2 1c 	mov	#7346,	r12	;#0x1cb2
    4f36:	cc 43 00 00 	mov.b	#0,	0(r12)	;r3 As==00
    UART_SM.txBytesRemaining = 0;
    4f3a:	8c 43 04 00 	mov	#0,	4(r12)	;r3 As==00
    UART_SM.isRxBusy = FALSE;
    4f3e:	cc 43 06 00 	mov.b	#0,	6(r12)	;r3 As==00
    UART_SM.rxBytesRemaining = 0;
    4f42:	8c 43 0a 00 	mov	#0,	10(r12)	;r3 As==00, 0x000a

}
    4f46:	30 41       	ret			

00004f48 <UART_teardown>:
void UART_teardown()
{
    // disable UART
    // Not sure how to do this best, but set all UCA0* registers to
    // their default values.  See User's Guide for default values.
    PUART_TXSEL0 &= ~PIN_UART_TX;
    4f48:	d2 c3 0b 02 	bic.b	#1,	&0x020b	;r3 As==01
    PUART_TXSEL1 &= ~PIN_UART_TX;
    4f4c:	d2 c3 0d 02 	bic.b	#1,	&0x020d	;r3 As==01
    PUART_RXSEL0 &= ~PIN_UART_RX;
    4f50:	e2 c3 0b 02 	bic.b	#2,	&0x020b	;r3 As==10
    PUART_RXSEL1 &= ~PIN_UART_RX;
    4f54:	e2 c3 0d 02 	bic.b	#2,	&0x020d	;r3 As==10
    UCA0CTLW0 = 0x0001;
    4f58:	92 43 c0 05 	mov	#1,	&0x05c0	;r3 As==01
    UCA0BR0 = 0x0000;
    4f5c:	c2 43 c6 05 	mov.b	#0,	&0x05c6	;r3 As==00
    UCA0MCTLW = 0x0000;
    4f60:	82 43 c8 05 	mov	#0,	&0x05c8	;r3 As==00
    UCA0IE = 0x0000;
    4f64:	82 43 da 05 	mov	#0,	&0x05da	;r3 As==00
    UCA0IFG = 0x0000;
    4f68:	82 43 dc 05 	mov	#0,	&0x05dc	;r3 As==00
}
    4f6c:	30 41       	ret			

00004f6e <UART_asyncSend>:
 * @param size the number of bytes to send
 */
void UART_asyncSend(uint8_t* txBuf, uint16_t size) {

    // Block until prior transmission has completed
    while (UART_SM.isTxBusy)
    4f6e:	3f 40 b2 1c 	mov	#7346,	r15	;#0x1cb2
    4f72:	6e 4f       	mov.b	@r15,	r14	;
    4f74:	0e 93       	cmp	#0,	r14	;r3 As==00
    4f76:	fd 23       	jnz	$-4      	;abs 0x4f72
        ;

    // Set up for start of transmission
    UART_SM.isTxBusy = TRUE;
    4f78:	3e 40 b2 1c 	mov	#7346,	r14	;#0x1cb2
    4f7c:	de 43 00 00 	mov.b	#1,	0(r14)	;r3 As==01
    UART_SM.txPtr = txBuf;
    4f80:	8e 4c 02 00 	mov	r12,	2(r14)	;
    UART_SM.txBytesRemaining = size;
    4f84:	8e 4d 04 00 	mov	r13,	4(r14)	;

    UCA0IFG &= ~(USCI_UART_UCTXIFG); // Clear the 'ready to accept byte' flag
    4f88:	a2 c2 dc 05 	bic	#4,	&0x05dc	;r2 As==10

    UCA0IE |= UCTXIE; // Enable USCI_A0 TX interrupt ('ready to accept byte')
    4f8c:	a2 d3 da 05 	bis	#2,	&0x05da	;r3 As==10
    //UCA0TXBUF = *(UART_SM.txPtr++); // Load in first byte

    // The bytes are transmitted in the TX ISR (which is called whenever the
    // UART is ready to accept a byte), and the isBusy flag is cleared when the
    // last byte has *finished* transmitting.
}
    4f90:	30 41       	ret			

00004f92 <UART_send>:
 * @param size the number of bytes to send
 *
 */
void UART_send(uint8_t* txBuf, uint16_t size) {

    UART_asyncSend(txBuf, size);
    4f92:	b0 12 6e 4f 	call	#20334		;#0x4f6e

    // Block until complete
    while (UART_SM.isTxBusy)
    4f96:	3d 40 b2 1c 	mov	#7346,	r13	;#0x1cb2
    4f9a:	6c 4d       	mov.b	@r13,	r12	;
    4f9c:	0c 93       	cmp	#0,	r12	;r3 As==00
    4f9e:	fd 23       	jnz	$-4      	;abs 0x4f9a
        ;
}
    4fa0:	30 41       	ret			

00004fa2 <UART_critSend>:
 *  and use UART status register polling instead of interrupts.
 */
void UART_critSend(uint8_t* txBuf, uint16_t size) {

    // Block until prior transmission has completed
    while (UART_SM.isTxBusy)
    4fa2:	3f 40 b2 1c 	mov	#7346,	r15	;#0x1cb2
    4fa6:	6e 4f       	mov.b	@r15,	r14	;
    4fa8:	0e 93       	cmp	#0,	r14	;r3 As==00
    4faa:	fd 23       	jnz	$-4      	;abs 0x4fa6
        ;

    // Set up for start of transmission
    UART_SM.isTxBusy = TRUE;
    4fac:	3e 40 b2 1c 	mov	#7346,	r14	;#0x1cb2
    4fb0:	de 43 00 00 	mov.b	#1,	0(r14)	;r3 As==01
    UART_SM.txPtr = txBuf;
    4fb4:	8e 4c 02 00 	mov	r12,	2(r14)	;
    UART_SM.txBytesRemaining = size;
    4fb8:	8e 4d 04 00 	mov	r13,	4(r14)	;

    UCA0IV &= ~(USCI_UART_UCTXIFG); // Clear byte completion flag
    4fbc:	a2 c2 de 05 	bic	#4,	&0x05de	;r2 As==10

    while (UART_SM.txBytesRemaining--) {
    4fc0:	1c 4e 04 00 	mov	4(r14),	r12	;
    4fc4:	0d 4c       	mov	r12,	r13	;
    4fc6:	3d 53       	add	#-1,	r13	;r3 As==11
    4fc8:	8e 4d 04 00 	mov	r13,	4(r14)	;
    4fcc:	0c 93       	cmp	#0,	r12	;r3 As==00
    4fce:	19 24       	jz	$+52     	;abs 0x5002
        UCA0TXBUF = *(UART_SM.txPtr++); // Load in next byte
    4fd0:	0c 4e       	mov	r14,	r12	;
    4fd2:	1d 4c 02 00 	mov	2(r12),	r13	;
    4fd6:	0e 4d       	mov	r13,	r14	;
    4fd8:	1e 53       	inc	r14		;
    4fda:	8c 4e 02 00 	mov	r14,	2(r12)	;
    4fde:	6d 4d       	mov.b	@r13,	r13	;
    4fe0:	3d f0 ff 00 	and	#255,	r13	;#0x00ff
    4fe4:	82 4d ce 05 	mov	r13,	&0x05ce	;
        while (!(UCA0IFG & UCTXIFG))
    4fe8:	a2 b3 dc 05 	bit	#2,	&0x05dc	;r3 As==10
    4fec:	fd 27       	jz	$-4      	;abs 0x4fe8
            ; // Wait for byte transmission to complete
        UCA0IFG &= ~(UCTXIFG); // Clear byte completion flag
    4fee:	a2 c3 dc 05 	bic	#2,	&0x05dc	;r3 As==10
    UART_SM.txPtr = txBuf;
    UART_SM.txBytesRemaining = size;

    UCA0IV &= ~(USCI_UART_UCTXIFG); // Clear byte completion flag

    while (UART_SM.txBytesRemaining--) {
    4ff2:	1d 4c 04 00 	mov	4(r12),	r13	;
    4ff6:	0e 4d       	mov	r13,	r14	;
    4ff8:	3e 53       	add	#-1,	r14	;r3 As==11
    4ffa:	8c 4e 04 00 	mov	r14,	4(r12)	;
    4ffe:	0d 93       	cmp	#0,	r13	;r3 As==00
    5000:	e8 23       	jnz	$-46     	;abs 0x4fd2
        while (!(UCA0IFG & UCTXIFG))
            ; // Wait for byte transmission to complete
        UCA0IFG &= ~(UCTXIFG); // Clear byte completion flag
    }

    UART_SM.isTxBusy = FALSE;
    5002:	c2 43 b2 1c 	mov.b	#0,	&0x1cb2	;r3 As==00
}
    5006:	30 41       	ret			

00005008 <UART_isTxBusy>:
/**
 * Return true if UART TX module is in the middle of an operation, false if not.
 */
uint8_t UART_isTxBusy() {
    return UART_SM.isTxBusy;
}
    5008:	5c 42 b2 1c 	mov.b	&0x1cb2,r12	;0x1cb2
    500c:	30 41       	ret			

0000500e <UART_asyncReceive>:
 * @param size the number of bytes to receive
 */
void UART_asyncReceive(uint8_t* rxBuf, uint16_t size) {

    // Block until prior reception has completed
    while (UART_SM.isRxBusy)
    500e:	3f 40 b2 1c 	mov	#7346,	r15	;#0x1cb2
    5012:	5e 4f 06 00 	mov.b	6(r15),	r14	;
    5016:	0e 93       	cmp	#0,	r14	;r3 As==00
    5018:	fc 23       	jnz	$-6      	;abs 0x5012
        ;

    // Set up for start of reception
    UART_SM.isRxBusy = TRUE;
    501a:	3e 40 b2 1c 	mov	#7346,	r14	;#0x1cb2
    501e:	de 43 06 00 	mov.b	#1,	6(r14)	;r3 As==01
    UART_SM.rxPtr = rxBuf;
    5022:	8e 4c 08 00 	mov	r12,	8(r14)	;
    UART_SM.rxBytesRemaining = size;
    5026:	8e 4d 0a 00 	mov	r13,	10(r14)	; 0x000a

    UCA0IFG &= ~(UCRXIFG); // Clear byte completion flag
    502a:	92 c3 dc 05 	bic	#1,	&0x05dc	;r3 As==01

    UCA0IE |= UCRXIE; // Enable USCI_A0 RX interrupt
    502e:	92 d3 da 05 	bis	#1,	&0x05da	;r3 As==01

    // The rest of the reception will be completed by the RX ISR (which
    //  will wake after each byte has been received), and the isBusy flag
    //  will be cleared when done.
}
    5032:	30 41       	ret			

00005034 <UART_receive>:
 * @param size the number of bytes to receive
 *
 */
void UART_receive(uint8_t* rxBuf, uint16_t size) {

    UART_asyncReceive(rxBuf, size);
    5034:	b0 12 0e 50 	call	#20494		;#0x500e

    // Block until complete
    while (UART_SM.isRxBusy)
    5038:	3d 40 b2 1c 	mov	#7346,	r13	;#0x1cb2
    503c:	5c 4d 06 00 	mov.b	6(r13),	r12	;
    5040:	0c 93       	cmp	#0,	r12	;r3 As==00
    5042:	fc 23       	jnz	$-6      	;abs 0x503c
        ;
}
    5044:	30 41       	ret			

00005046 <UART_critReceive>:
 *  and use UART status register polling instead of interrupts.
 */
void UART_critReceive(uint8_t* rxBuf, uint16_t size) {

    // Block until prior reception has completed
    while (UART_SM.isRxBusy)
    5046:	3f 40 b2 1c 	mov	#7346,	r15	;#0x1cb2
    504a:	5e 4f 06 00 	mov.b	6(r15),	r14	;
    504e:	0e 93       	cmp	#0,	r14	;r3 As==00
    5050:	fc 23       	jnz	$-6      	;abs 0x504a
        ;

    // Set up for start of reception
    UART_SM.isRxBusy = TRUE;
    5052:	3e 40 b2 1c 	mov	#7346,	r14	;#0x1cb2
    5056:	de 43 06 00 	mov.b	#1,	6(r14)	;r3 As==01
    UART_SM.rxPtr = rxBuf;
    505a:	8e 4c 08 00 	mov	r12,	8(r14)	;
    UART_SM.rxBytesRemaining = size;
    505e:	8e 4d 0a 00 	mov	r13,	10(r14)	; 0x000a

    UCA0IFG &= ~(UCRXIFG); // Clear byte completion flag
    5062:	92 c3 dc 05 	bic	#1,	&0x05dc	;r3 As==01

    while (UART_SM.rxBytesRemaining--) {
    5066:	1c 4e 0a 00 	mov	10(r14),r12	;0x0000a
    506a:	0d 4c       	mov	r12,	r13	;
    506c:	3d 53       	add	#-1,	r13	;r3 As==11
    506e:	8e 4d 0a 00 	mov	r13,	10(r14)	; 0x000a
    5072:	0c 93       	cmp	#0,	r12	;r3 As==00
    5074:	18 24       	jz	$+50     	;abs 0x50a6
        while (!(UCA0IFG & UCRXIFG))
            ; // Wait for byte reception to complete
        UCA0IFG &= ~(UCRXIFG); // Clear byte completion flag

        uint8_t rec = UCA0RXBUF; // Read next byte
        *(UART_SM.rxPtr++) = rec; // Store byte
    5076:	0c 4e       	mov	r14,	r12	;
    UART_SM.rxBytesRemaining = size;

    UCA0IFG &= ~(UCRXIFG); // Clear byte completion flag

    while (UART_SM.rxBytesRemaining--) {
        while (!(UCA0IFG & UCRXIFG))
    5078:	92 b3 dc 05 	bit	#1,	&0x05dc	;r3 As==01
    507c:	fd 27       	jz	$-4      	;abs 0x5078
            ; // Wait for byte reception to complete
        UCA0IFG &= ~(UCRXIFG); // Clear byte completion flag
    507e:	92 c3 dc 05 	bic	#1,	&0x05dc	;r3 As==01

        uint8_t rec = UCA0RXBUF; // Read next byte
    5082:	1e 42 cc 05 	mov	&0x05cc,r14	;0x05cc
        *(UART_SM.rxPtr++) = rec; // Store byte
    5086:	1d 4c 08 00 	mov	8(r12),	r13	;
    508a:	0f 4d       	mov	r13,	r15	;
    508c:	1f 53       	inc	r15		;
    508e:	8c 4f 08 00 	mov	r15,	8(r12)	;
    while (UART_SM.rxBytesRemaining--) {
        while (!(UCA0IFG & UCRXIFG))
            ; // Wait for byte reception to complete
        UCA0IFG &= ~(UCRXIFG); // Clear byte completion flag

        uint8_t rec = UCA0RXBUF; // Read next byte
    5092:	cd 4e 00 00 	mov.b	r14,	0(r13)	;
    UART_SM.rxPtr = rxBuf;
    UART_SM.rxBytesRemaining = size;

    UCA0IFG &= ~(UCRXIFG); // Clear byte completion flag

    while (UART_SM.rxBytesRemaining--) {
    5096:	1d 4c 0a 00 	mov	10(r12),r13	;0x0000a
    509a:	0e 4d       	mov	r13,	r14	;
    509c:	3e 53       	add	#-1,	r14	;r3 As==11
    509e:	8c 4e 0a 00 	mov	r14,	10(r12)	; 0x000a
    50a2:	0d 93       	cmp	#0,	r13	;r3 As==00
    50a4:	e9 23       	jnz	$-44     	;abs 0x5078

        uint8_t rec = UCA0RXBUF; // Read next byte
        *(UART_SM.rxPtr++) = rec; // Store byte
    }

    UART_SM.isRxBusy = FALSE;
    50a6:	c2 43 b8 1c 	mov.b	#0,	&0x1cb8	;r3 As==00
}
    50aa:	30 41       	ret			

000050ac <UART_isRxBusy>:
/**
 * Return true if UART RX module is in the middle of an operation, false if not.
 */
uint8_t UART_isRxBusy() {
    return UART_SM.isRxBusy;
}
    50ac:	5c 42 b8 1c 	mov.b	&0x1cb8,r12	;0x1cb8
    50b0:	30 41       	ret			

000050b2 <UART_isRxDone>:
 * Return true if UART RX module is not in the middle of an operation (e.g. done), false if not.
 *
 * Could be used in combination with UART_asyncReceive.
 */
uint8_t UART_isRxDone() {
    return !(UART_SM.isRxBusy);
    50b2:	5c 42 b8 1c 	mov.b	&0x1cb8,r12	;0x1cb8
    50b6:	3c 53       	add	#-1,	r12	;r3 As==11
}
    50b8:	5c 03       	rrum	#1,	r12	;
    50ba:	4d 18 0c 11 	rpt #14 { rrax.w	r12		;
    50be:	30 41       	ret			

000050c0 <USCI_A0_ISR>:
#elif defined(__GNUC__)
void __attribute__ ((interrupt(USCI_A0_VECTOR))) USCI_A0_ISR (void)
#else
#error Compiler not supported!
#endif
{
    50c0:	3f 15       	pushm	#4,	r15	;16-bit words
    uint8_t rec;

    switch (__even_in_range(UCA0IV, USCI_UART_UCTXCPTIFG)) {
    50c2:	1c 42 de 05 	mov	&0x05de,r12	;0x05de
    50c6:	2c 93       	cmp	#2,	r12	;r3 As==10
    50c8:	03 24       	jz	$+8      	;abs 0x50d0
    50ca:	2c 92       	cmp	#4,	r12	;r2 As==10
    50cc:	1e 24       	jz	$+62     	;abs 0x510a
    50ce:	38 3c       	jmp	$+114    	;abs 0x5140
    case USCI_NONE:
        break;
    case USCI_UART_UCRXIFG:
        if (UART_SM.rxBytesRemaining--) {
    50d0:	3d 40 b2 1c 	mov	#7346,	r13	;#0x1cb2
    50d4:	1c 4d 0a 00 	mov	10(r13),r12	;0x0000a
    50d8:	0e 4c       	mov	r12,	r14	;
    50da:	3e 53       	add	#-1,	r14	;r3 As==11
    50dc:	8d 4e 0a 00 	mov	r14,	10(r13)	; 0x000a
    50e0:	0c 93       	cmp	#0,	r12	;r3 As==00
    50e2:	0a 24       	jz	$+22     	;abs 0x50f8
            rec = UCA0RXBUF; // Read next byte
    50e4:	1e 42 cc 05 	mov	&0x05cc,r14	;0x05cc
            *(UART_SM.rxPtr++) = rec; // Store byte
    50e8:	1c 4d 08 00 	mov	8(r13),	r12	;
    50ec:	0f 4c       	mov	r12,	r15	;
    50ee:	1f 53       	inc	r15		;
    50f0:	8d 4f 08 00 	mov	r15,	8(r13)	;
    switch (__even_in_range(UCA0IV, USCI_UART_UCTXCPTIFG)) {
    case USCI_NONE:
        break;
    case USCI_UART_UCRXIFG:
        if (UART_SM.rxBytesRemaining--) {
            rec = UCA0RXBUF; // Read next byte
    50f4:	cc 4e 00 00 	mov.b	r14,	0(r12)	;
            *(UART_SM.rxPtr++) = rec; // Store byte
        }

        if (0 == UART_SM.rxBytesRemaining) {
    50f8:	1c 42 bc 1c 	mov	&0x1cbc,r12	;0x1cbc
    50fc:	0c 93       	cmp	#0,	r12	;r3 As==00
    50fe:	20 20       	jnz	$+66     	;abs 0x5140
            UCA0IE &= ~(UCRXIE); // Disable USCI_A0 RX interrupt
    5100:	92 c3 da 05 	bic	#1,	&0x05da	;r3 As==01
            UART_SM.isRxBusy = FALSE;
    5104:	c2 43 b8 1c 	mov.b	#0,	&0x1cb8	;r3 As==00
    5108:	1b 3c       	jmp	$+56     	;abs 0x5140
        }

        break;
    case USCI_UART_UCTXIFG:
        UCA0TXBUF = *(UART_SM.txPtr++); // if interrupt was enabled, there must be bytes
    510a:	3c 40 b2 1c 	mov	#7346,	r12	;#0x1cb2
    510e:	1d 4c 02 00 	mov	2(r12),	r13	;
    5112:	0e 4d       	mov	r13,	r14	;
    5114:	1e 53       	inc	r14		;
    5116:	8c 4e 02 00 	mov	r14,	2(r12)	;
    511a:	6d 4d       	mov.b	@r13,	r13	;
    511c:	3d f0 ff 00 	and	#255,	r13	;#0x00ff
    5120:	82 4d ce 05 	mov	r13,	&0x05ce	;
        if (--UART_SM.txBytesRemaining == 0) {
    5124:	1d 4c 04 00 	mov	4(r12),	r13	;
    5128:	3d 53       	add	#-1,	r13	;r3 As==11
    512a:	8c 4d 04 00 	mov	r13,	4(r12)	;
    512e:	0d 93       	cmp	#0,	r13	;r3 As==00
    5130:	07 20       	jnz	$+16     	;abs 0x5140
            // TODO: actually, this wait should probably happen for blocking version only
            while (UCA0STATW & UCBUSY); // wait for last byte to finish transmitting
    5132:	d2 b3 ca 05 	bit.b	#1,	&0x05ca	;r3 As==01
    5136:	fd 23       	jnz	$-4      	;abs 0x5132
            UCA0IE &= ~(UCTXIE); // Disable USCI_A0 TX interrupt
    5138:	a2 c3 da 05 	bic	#2,	&0x05da	;r3 As==10
            UART_SM.isTxBusy = FALSE;
    513c:	c2 43 b2 1c 	mov.b	#0,	&0x1cb2	;r3 As==00
    case USCI_UART_UCSTTIFG:
        break;
    case USCI_UART_UCTXCPTIFG:
        break;
    }
}
    5140:	3c 17       	popm	#4,	r15	;16-bit words
    5142:	00 13       	reti			

00005144 <__mspabi_slli_15>:
    5144:	0c 5c       	rla	r12		;

00005146 <__mspabi_slli_14>:
    5146:	0c 5c       	rla	r12		;

00005148 <__mspabi_slli_13>:
    5148:	0c 5c       	rla	r12		;

0000514a <__mspabi_slli_12>:
    514a:	0c 5c       	rla	r12		;

0000514c <__mspabi_slli_11>:
    514c:	0c 5c       	rla	r12		;

0000514e <__mspabi_slli_10>:
    514e:	0c 5c       	rla	r12		;

00005150 <__mspabi_slli_9>:
    5150:	0c 5c       	rla	r12		;

00005152 <__mspabi_slli_8>:
    5152:	0c 5c       	rla	r12		;

00005154 <__mspabi_slli_7>:
    5154:	0c 5c       	rla	r12		;

00005156 <__mspabi_slli_6>:
    5156:	0c 5c       	rla	r12		;

00005158 <__mspabi_slli_5>:
    5158:	0c 5c       	rla	r12		;

0000515a <__mspabi_slli_4>:
    515a:	0c 5c       	rla	r12		;

0000515c <__mspabi_slli_3>:
    515c:	0c 5c       	rla	r12		;

0000515e <__mspabi_slli_2>:
    515e:	0c 5c       	rla	r12		;

00005160 <__mspabi_slli_1>:
    5160:	0c 5c       	rla	r12		;
    5162:	30 41       	ret			
    5164:	3d 53       	add	#-1,	r13	;r3 As==11
    5166:	0c 5c       	rla	r12		;

00005168 <__mspabi_slli>:
    5168:	0d 93       	cmp	#0,	r13	;r3 As==00
    516a:	fc 23       	jnz	$-6      	;abs 0x5164
    516c:	30 41       	ret			

0000516e <__mspabi_slll_15>:
    516e:	0c 5c       	rla	r12		;
    5170:	0d 6d       	rlc	r13		;

00005172 <__mspabi_slll_14>:
    5172:	0c 5c       	rla	r12		;
    5174:	0d 6d       	rlc	r13		;

00005176 <__mspabi_slll_13>:
    5176:	0c 5c       	rla	r12		;
    5178:	0d 6d       	rlc	r13		;

0000517a <__mspabi_slll_12>:
    517a:	0c 5c       	rla	r12		;
    517c:	0d 6d       	rlc	r13		;

0000517e <__mspabi_slll_11>:
    517e:	0c 5c       	rla	r12		;
    5180:	0d 6d       	rlc	r13		;

00005182 <__mspabi_slll_10>:
    5182:	0c 5c       	rla	r12		;
    5184:	0d 6d       	rlc	r13		;

00005186 <__mspabi_slll_9>:
    5186:	0c 5c       	rla	r12		;
    5188:	0d 6d       	rlc	r13		;

0000518a <__mspabi_slll_8>:
    518a:	0c 5c       	rla	r12		;
    518c:	0d 6d       	rlc	r13		;

0000518e <__mspabi_slll_7>:
    518e:	0c 5c       	rla	r12		;
    5190:	0d 6d       	rlc	r13		;

00005192 <__mspabi_slll_6>:
    5192:	0c 5c       	rla	r12		;
    5194:	0d 6d       	rlc	r13		;

00005196 <__mspabi_slll_5>:
    5196:	0c 5c       	rla	r12		;
    5198:	0d 6d       	rlc	r13		;

0000519a <__mspabi_slll_4>:
    519a:	0c 5c       	rla	r12		;
    519c:	0d 6d       	rlc	r13		;

0000519e <__mspabi_slll_3>:
    519e:	0c 5c       	rla	r12		;
    51a0:	0d 6d       	rlc	r13		;

000051a2 <__mspabi_slll_2>:
    51a2:	0c 5c       	rla	r12		;
    51a4:	0d 6d       	rlc	r13		;

000051a6 <__mspabi_slll_1>:
    51a6:	0c 5c       	rla	r12		;
    51a8:	0d 6d       	rlc	r13		;
    51aa:	30 41       	ret			
    51ac:	3e 53       	add	#-1,	r14	;r3 As==11
    51ae:	0c 5c       	rla	r12		;
    51b0:	0d 6d       	rlc	r13		;

000051b2 <__mspabi_slll>:
    51b2:	0e 93       	cmp	#0,	r14	;r3 As==00
    51b4:	fb 23       	jnz	$-8      	;abs 0x51ac
    51b6:	30 41       	ret			

000051b8 <__mspabi_srai_15>:
    51b8:	0c 11       	rra	r12		;

000051ba <__mspabi_srai_14>:
    51ba:	0c 11       	rra	r12		;

000051bc <__mspabi_srai_13>:
    51bc:	0c 11       	rra	r12		;

000051be <__mspabi_srai_12>:
    51be:	0c 11       	rra	r12		;

000051c0 <__mspabi_srai_11>:
    51c0:	0c 11       	rra	r12		;

000051c2 <__mspabi_srai_10>:
    51c2:	0c 11       	rra	r12		;

000051c4 <__mspabi_srai_9>:
    51c4:	0c 11       	rra	r12		;

000051c6 <__mspabi_srai_8>:
    51c6:	0c 11       	rra	r12		;

000051c8 <__mspabi_srai_7>:
    51c8:	0c 11       	rra	r12		;

000051ca <__mspabi_srai_6>:
    51ca:	0c 11       	rra	r12		;

000051cc <__mspabi_srai_5>:
    51cc:	0c 11       	rra	r12		;

000051ce <__mspabi_srai_4>:
    51ce:	0c 11       	rra	r12		;

000051d0 <__mspabi_srai_3>:
    51d0:	0c 11       	rra	r12		;

000051d2 <__mspabi_srai_2>:
    51d2:	0c 11       	rra	r12		;

000051d4 <__mspabi_srai_1>:
    51d4:	0c 11       	rra	r12		;
    51d6:	30 41       	ret			
    51d8:	3d 53       	add	#-1,	r13	;r3 As==11
    51da:	0c 11       	rra	r12		;

000051dc <__mspabi_srai>:
    51dc:	0d 93       	cmp	#0,	r13	;r3 As==00
    51de:	fc 23       	jnz	$-6      	;abs 0x51d8
    51e0:	30 41       	ret			

000051e2 <__mspabi_sral_15>:
    51e2:	0d 11       	rra	r13		;
    51e4:	0c 10       	rrc	r12		;

000051e6 <__mspabi_sral_14>:
    51e6:	0d 11       	rra	r13		;
    51e8:	0c 10       	rrc	r12		;

000051ea <__mspabi_sral_13>:
    51ea:	0d 11       	rra	r13		;
    51ec:	0c 10       	rrc	r12		;

000051ee <__mspabi_sral_12>:
    51ee:	0d 11       	rra	r13		;
    51f0:	0c 10       	rrc	r12		;

000051f2 <__mspabi_sral_11>:
    51f2:	0d 11       	rra	r13		;
    51f4:	0c 10       	rrc	r12		;

000051f6 <__mspabi_sral_10>:
    51f6:	0d 11       	rra	r13		;
    51f8:	0c 10       	rrc	r12		;

000051fa <__mspabi_sral_9>:
    51fa:	0d 11       	rra	r13		;
    51fc:	0c 10       	rrc	r12		;

000051fe <__mspabi_sral_8>:
    51fe:	0d 11       	rra	r13		;
    5200:	0c 10       	rrc	r12		;

00005202 <__mspabi_sral_7>:
    5202:	0d 11       	rra	r13		;
    5204:	0c 10       	rrc	r12		;

00005206 <__mspabi_sral_6>:
    5206:	0d 11       	rra	r13		;
    5208:	0c 10       	rrc	r12		;

0000520a <__mspabi_sral_5>:
    520a:	0d 11       	rra	r13		;
    520c:	0c 10       	rrc	r12		;

0000520e <__mspabi_sral_4>:
    520e:	0d 11       	rra	r13		;
    5210:	0c 10       	rrc	r12		;

00005212 <__mspabi_sral_3>:
    5212:	0d 11       	rra	r13		;
    5214:	0c 10       	rrc	r12		;

00005216 <__mspabi_sral_2>:
    5216:	0d 11       	rra	r13		;
    5218:	0c 10       	rrc	r12		;

0000521a <__mspabi_sral_1>:
    521a:	0d 11       	rra	r13		;
    521c:	0c 10       	rrc	r12		;
    521e:	30 41       	ret			
    5220:	3e 53       	add	#-1,	r14	;r3 As==11
    5222:	0d 11       	rra	r13		;
    5224:	0c 10       	rrc	r12		;

00005226 <__mspabi_sral>:
    5226:	0e 93       	cmp	#0,	r14	;r3 As==00
    5228:	fb 23       	jnz	$-8      	;abs 0x5220
    522a:	30 41       	ret			

0000522c <memmove>:
    522c:	0a 15       	pushm	#1,	r10	;16-bit words
    522e:	0d 9c       	cmp	r12,	r13	;
    5230:	10 2c       	jc	$+34     	;abs 0x5252
    5232:	0b 4d       	mov	r13,	r11	;
    5234:	0b 5e       	add	r14,	r11	;
    5236:	0c 9b       	cmp	r11,	r12	;
    5238:	0c 2c       	jc	$+26     	;abs 0x5252
    523a:	0d 4e       	mov	r14,	r13	;
    523c:	3d 53       	add	#-1,	r13	;r3 As==11
    523e:	3d 93       	cmp	#-1,	r13	;r3 As==11
    5240:	13 24       	jz	$+40     	;abs 0x5268
    5242:	0f 4d       	mov	r13,	r15	;
    5244:	0f 8e       	sub	r14,	r15	;
    5246:	0f 5b       	add	r11,	r15	;
    5248:	0a 4c       	mov	r12,	r10	;
    524a:	0a 5d       	add	r13,	r10	;
    524c:	ea 4f 00 00 	mov.b	@r15,	0(r10)	;
    5250:	f5 3f       	jmp	$-20     	;abs 0x523c
    5252:	0f 43       	clr	r15		;
    5254:	0f 9e       	cmp	r14,	r15	;
    5256:	08 24       	jz	$+18     	;abs 0x5268
    5258:	0a 4d       	mov	r13,	r10	;
    525a:	0a 5f       	add	r15,	r10	;
    525c:	0b 4c       	mov	r12,	r11	;
    525e:	0b 5f       	add	r15,	r11	;
    5260:	eb 4a 00 00 	mov.b	@r10,	0(r11)	;
    5264:	1f 53       	inc	r15		;
    5266:	f6 3f       	jmp	$-18     	;abs 0x5254
    5268:	0a 17       	popm	#1,	r10	;16-bit words
    526a:	30 41       	ret			

0000526c <memset>:
    526c:	0f 4c       	mov	r12,	r15	;
    526e:	0e 5c       	add	r12,	r14	;
    5270:	0f 9e       	cmp	r14,	r15	;
    5272:	04 24       	jz	$+10     	;abs 0x527c
    5274:	cf 4d 00 00 	mov.b	r13,	0(r15)	;
    5278:	1f 53       	inc	r15		;
    527a:	fa 3f       	jmp	$-10     	;abs 0x5270
    527c:	30 41       	ret			

0000527e <__do_global_ctors_aux>:
    527e:	0a 15       	pushm	#1,	r10	;16-bit words
    5280:	1c 42 48 44 	mov	&0x4448,r12	;0x4448
    5284:	3c 93       	cmp	#-1,	r12	;r3 As==11
    5286:	08 24       	jz	$+18     	;abs 0x5298
    5288:	3a 40 48 44 	mov	#17480,	r10	;#0x4448
    528c:	8c 12       	call	r12		;
    528e:	3a 50 fe ff 	add	#65534,	r10	;#0xfffe
    5292:	2c 4a       	mov	@r10,	r12	;
    5294:	3c 93       	cmp	#-1,	r12	;r3 As==11
    5296:	fa 23       	jnz	$-10     	;abs 0x528c
    5298:	0a 17       	popm	#1,	r10	;16-bit words
    529a:	30 41       	ret			

0000529c <call___do_global_ctors_aux>:
    529c:	30 41       	ret			

0000529e <__msp430_init>:
    529e:	b0 12 54 45 	call	#17748		;#0x4554
    52a2:	b0 12 7e 52 	call	#21118		;#0x527e
    52a6:	b0 12 94 44 	call	#17556		;#0x4494
    52aa:	b0 12 88 44 	call	#17544		;#0x4488
    52ae:	30 41       	ret			

000052b0 <__msp430_fini>:
    52b0:	b0 12 a0 44 	call	#17568		;#0x44a0
    52b4:	b0 12 06 45 	call	#17670		;#0x4506
    52b8:	30 41       	ret			
